/* WEBPACK VAR INJECTION */

/* harmony default export */

/* harmony export (binding) */

/* harmony import */

/*#__PURE__*/

/**
	* Partially applied function.
	*
	* @private
	* @param {...*} [args] - function arguments
	* @returns {*} partially applied function result
	*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/**
* An ISLE pagination component that allows the user to step through a sequence of pages.
*
* @property {string} title - displayed title of the pages container
* @property {string} size - size of the pagination buttons (either `default`, `lg`, `large`, `sm`, `small`, `xs`, or `xsmall`)
* @property {number} height - the maximum height of the container. If an embedded page is taller, a vertical scrollbar is added
* @property {number} activePage - active page
* @property {boolean} paginationBelow - controls whether to also display the pagination elements below the container and not only on top of
* @property {boolean} disabled - controls whether the navigation bar is active or not
* @property {strings} voiceID - voice control identifier
* @property {Object} style - CSS inline styles
* @property {Function} onSelect - Function invoked when active change is changed. Receives the new active page index as a sole parameter
*/

/**
* Compute the absolute difference.
*
* @module @stdlib/math/base/utils/absolute-difference
*
* @example
* var diff = require( '@stdlib/math/base/utils/absolute-difference' );
*
* var d = diff( 2.0, 5.0 );
* // returns 3.0
*
* d = diff( -1.0, 3.14 );
* // returns ~4.14
*
* d = diff( 10.1, -2.05 );
* // returns ~12.15
*
* d = diff( -0.0, 0.0 );
* // returns +0.0
*
* d = diff( NaN, 5.0 );
* // returns NaN
*
* d = diff( Infinity, -Infinity  );
* // returns Infinity
*
* d = diff( Infinity, Infinity  );
* // returns NaN
*/

/**
* Computes the absolute difference.
*
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} absolute difference
*
* @example
* var d = absoluteDifference( 2.0, 5.0 );
* // returns 3.0
*
* @example
* var d = absoluteDifference( -1.0, 3.14 );
* // returns ~4.14
*
* @example
* var d = absoluteDifference( 10.1, -2.05 );
* // returns ~12.15
*
* @example
* var d = absoluteDifference( -0.0, 0.0 );
* // returns +0.0
*
* @example
* var d = absoluteDifference( NaN, 5.0 );
* // returns NaN
*
* @example
* var d = absoluteDifference( Infinity, -Infinity  );
* // returns Infinity
*
* @example
* var d = absoluteDifference( Infinity, Infinity  );
* // returns NaN
*/

/**
* Partially apply function arguments.
*
* @module @stdlib/utils/papply
*
* @example
* var papply = require( '@stdlib/utils/papply' );
*
* function add( x, y ) {
*     return x + y;
* }
*
* var add2 = papply( add, 2 );
*
* var sum = add2( 3 );
* // returns 5
*/

/**
* Returns a function of smaller arity by partially applying arguments.
*
* @param {Function} fcn - function to partially apply
* @param {...*} [args] - arguments to partially apply
* @throws {TypeError} first argument must be a function
* @returns {Function} partially applied function
*
* @example
* function add( x, y ) {
*     return x + y;
* }
*
* var add2 = papply( add, 2 );
*
* var sum = add2( 3 );
* // returns 5
*/

/***/

// EXPORTS //

// Exports

// MAIN //

// MODULES //

// Module

// PROPERTIES //

// VARIABLES //
