(window.webpackJsonp=window.webpackJsonp||[]).push([[397],{1447:function(e,t,r){"use strict";var n=r(775),a=r.n(n),i=r(390);t.a=function(e,t){var r=a()(t);if(!a()(e))throw new TypeError("invalid input argument. Must provide an array. Value: `"+e+"`.");if(!r&&!Object(i.isPrimitive)(t))throw new TypeError("invalid input argument. Second argument must either be an array or number primitive. Value: `"+t+"`.");var n=e.length,o=new Array(n);if(r){if(n!==t.length)throw new Error("invalid input argument. Array to be added must have a length equal to that of the input array.");for(var s=0;s<n;s++)o[s]=e[s]-t[s]}else for(var u=0;u<n;u++)o[u]=e[u]-t;return o}},5867:function(e,t,r){"use strict";r.r(t);r(362),r(355),r(364);var n=r(358),a=r.n(n),i=r(356),o=r.n(i),s=r(357),u=r.n(s),p=r(368),c=r.n(p),l=r(360),h=r.n(l),f=r(361),d=r.n(f),m=r(359),v=r.n(m),y=r(354),g=r.n(y),C=r(0),x=(r(346),r(386)),w=r(439),b=r(779),S=r.n(b),T=r(477),M=r.n(T),D=r(517),V=r.n(D),q=r(508),I=r(484),R=r(1458),k=r(3266),P=r(431),A=r(1447),G=r(668);function O(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=v()(e);if(t){var a=v()(this).constructor;r=Reflect.construct(n,arguments,a)}else r=n.apply(this,arguments);return d()(this,r)}}var _=function(e){h()(r,e);var t=O(r);function r(e){var n;return o()(this,r),n=t.call(this,e),g()(c()(n),"compute",(function(){var e=n.state,t=e.y,r=e.x,i=e.type,o=e.impurityMeasure,s=e.scoreThreshold,u=e.maxTreeDepth,p=e.minItemsCount,c=a()(k.a,{x:r,y:t,type:i,impurityMeasure:o,data:n.props.data,quantitative:n.props.quantitative,scoreThreshold:s,maxTreeDepth:u,minItemsCount:p,onPredict:function(e,r){var a=V()(n.props.data,1);if("Classification"===i){var o=n.props.categorical.slice(),s=e.predict(a).map((function(e){return String(e)})),u="pred_tree"+r;a[u]=s,M()(o,u)||o.push(u),u="correct_tree"+r;var p=n.props.data[t];a[u]=s.map((function(e,t){return e===String(p[t])?"Yes":"No"})),M()(o,u)||o.push(u),n.props.onGenerate(n.props.quantitative,o,a)}else{var c=n.props.quantitative.slice(),l=e.predict(a),h="pred_tree"+r;a[h]=l,M()(c,h)||c.push(h),a[h="resid_tree"+r]=Object(A.a)(l,n.props.data[t]),M()(c,h)||c.push(h),n.props.onGenerate(c,n.props.categorical,a)}}});n.props.logAction(P.j,{y:t,x:r,type:i}),n.props.onCreated(c)})),n.state={y:e.categorical[0],x:e.quantitative[0],type:"Classification",impurityMeasure:"gini",scoreThreshold:.0075,maxTreeDepth:5,minItemsCount:50},n}return u()(r,[{key:"render",value:function(){var e=this,t=this.props,r=t.categorical,n=t.quantitative,i=this.state,o=i.x,s=i.y,u=i.type;return a()(w.a,{style:{fontSize:"14px",maxWidth:600}},void 0,a()(w.a.Header,{as:"h4"},void 0,this.props.t("Decision Tree"),a()(G.a,{title:this.props.t("Decision Tree"),content:"Grow a decision tree for either a regression or classification problem. For quantitative responses, at each iteration of the algorithm the data are split by the variable which leads to splits with the greatest reduction in variance for the response. For categorical responses, the data are split on the feature which leads to the largest information gain (measured either in terms of the Gini index or entropy)"})),a()(w.a.Body,{},void 0,a()(q.a,{legend:"Type",options:["Classification","Regression"],defaultValue:u,onChange:function(t){t!==e.state.type&&e.setState({type:t,y:"Classification"===t?r[0]:n[0]})}}),a()(q.a,{legend:"Outcome (Y):",options:"Classification"===u?r:n,defaultValue:s,onChange:function(t){return e.setState({y:t})}}),a()(q.a,{legend:"Predictors (X):",multi:!0,options:S()(n.concat(r)),defaultValue:o||"",onChange:function(t){return e.setState({x:t})},closeMenuOnSelect:!1}),"Classification"===u?a()(q.a,{legend:"Impurity Measure",defaultValue:this.state.impurityMeasure,options:["gini","entropy"],onChange:function(t){return e.setState({impurityMeasure:t})}}):null,a()(R.a,{header:"Change tree features...",headerStyle:{fontSize:"1rem"}},void 0,a()(I.b,{legend:"Score threshold for split",min:0,max:1,step:.001,defaultValue:this.state.scoreThreshold,onChange:function(t){return e.setState({scoreThreshold:t})}}),a()(I.b,{legend:"Maximum tree depth",min:1,max:50,defaultValue:this.state.maxTreeDepth,onChange:function(t){return e.setState({maxTreeDepth:t})}}),a()(I.b,{legend:"Minimum # of observations in leaf nodes",min:1,defaultValue:this.state.minItemsCount,onChange:function(t){return e.setState({minItemsCount:t})}})),a()(x.a,{disabled:!o||0===o.length,variant:"primary",block:!0,onClick:this.compute},void 0,this.props.t("calculate"))))}}]),r}(C.Component);_.defaultProps={logAction:function(){}},t.default=_}}]);