(window.webpackJsonp=window.webpackJsonp||[]).push([[417],{5871:function(t,e,n){"use strict";n.r(e);n(362),n(355),n(364);var a=n(358),r=n.n(a),i=n(356),o=n.n(i),s=n(357),u=n.n(s),c=n(368),l=n.n(c),p=n(360),f=n.n(p),h=n(361),d=n.n(h),m=n(359),y=n.n(m),g=n(354),v=n.n(g),C=n(0),T=(n(346),n(386)),x=n(439),S=n(779),b=n.n(S),V=n(477),M=n.n(V),w=n(407),D=n.n(w),I=n(517),R=n.n(I),k=n(381),P=n.n(k),q=n(374),z=n.n(q),A=n(508),F=n(484),J=n(1458),N=n(3270),Y=n(431),_=n(668);function j(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,a=y()(t);if(e){var r=y()(this).constructor;n=Reflect.construct(a,arguments,r)}else n=a.apply(this,arguments);return d()(this,n)}}function B(t,e){return t?"Classificiation"===e?P()(z()(t.length)):t.length<3?1:P()(t.length/3):1}var G=function(t){f()(n,t);var e=j(n);function n(t){var a;return o()(this,n),a=e.call(this,t),v()(l()(a),"compute",(function(){var t=a.state,e=t.y,n=t.x,i=t.type,o=t.nTrees,s=t.nTry,u=t.impurityMeasure,c=t.scoreThreshold,l=t.maxTreeDepth,p=t.minItemsCount,f=r()(N.a,{x:n,y:e,type:i,nTrees:o,nTry:s,impurityMeasure:u,scoreThreshold:c,maxTreeDepth:l,minItemsCount:p,quantitative:a.props.quantitative,data:a.props.data,onPredict:function(t,n){var r=R()(a.props.data,1);if("Classification"===i){var o=a.props.categorical.slice(),s=t.predict(r).map((function(t){return String(t)})),u="pred_forest"+n;r[u]=s,M()(o,u)||o.push(u),u="correct_forest"+n;var c=a.props.data[e];r[u]=s.map((function(t,e){return t===String(c[e])?"Yes":"No"})),M()(o,u)||o.push(u),a.props.onGenerate(a.props.quantitative,o,r)}}});a.props.logAction(Y.C,{y:e,x:n,type:i,nTrees:o,nTry:s}),a.props.onCreated(f)})),a.state={y:t.categorical[0],x:t.quantitative[0],type:"Classification",nTrees:50,nTry:1,impurityMeasure:"gini",scoreThreshold:.01,maxTreeDepth:20,minItemsCount:50},a}return u()(n,[{key:"render",value:function(){var t=this,e=this.props,n=e.categorical,a=e.quantitative,i=this.state,o=i.x,s=i.y,u=i.type,c=i.nTrees,l=i.nTry;return r()(x.a,{style:{fontSize:"14px",maxWidth:600}},void 0,r()(x.a.Header,{as:"h4"},void 0,this.props.t("Random Forest"),r()(_.a,{title:this.props.t("Random Forest"),content:"Instead of growing a single decision tree, a random forest as an ensemble method constructs many decision trees at once and returns the average of the predictions (regression case) or the majority vote (classification case) of the individual trees"})),r()(x.a.Body,{},void 0,r()(A.a,{legend:"Type",options:["Classification"],defaultValue:u,onChange:function(e){e!==t.state.type&&t.setState({type:e,y:"Classification"===e?n[0]:a[0],nTry:B(t.state.x,e)})}}),r()(A.a,{legend:"Outcome (Y):",options:"Classification"===u?n:a,defaultValue:s,onChange:function(e){return t.setState({y:e})}}),r()(A.a,{legend:"Predictors (X):",multi:!0,options:b()(a.concat(n)),defaultValue:o||"",onChange:function(e){t.setState({x:e,nTry:B(e,u)})}}),r()(F.b,{legend:"Number of trees",defaultValue:c,inputStyle:{float:"right"},onChange:function(e){return t.setState({nTrees:e})},tooltipPlacement:"top",min:1}),r()(F.b,{legend:"# of predictors to check at each split",defaultValue:l,inputStyle:{float:"right"},onChange:function(e){return t.setState({nTry:e})},tooltipPlacement:"top",min:1,max:D()(o)?o.length:1}),r()(J.a,{header:"Change tree features...",headerStyle:{fontSize:"1rem"}},void 0,r()(F.b,{legend:"Score threshold for split",min:0,max:1,step:.001,defaultValue:this.state.scoreThreshold,onChange:function(e){return t.setState({scoreThreshold:e})}}),r()(F.b,{legend:"Maximum tree depth",min:1,max:50,defaultValue:this.state.maxTreeDepth,onChange:function(e){return t.setState({maxTreeDepth:e})}}),r()(F.b,{legend:"Minimum # of observations in leaf nodes",min:1,defaultValue:this.state.minItemsCount,onChange:function(e){return t.setState({minItemsCount:e})}})),"Classification"===u?r()(A.a,{legend:"Impurity Measure",defaultValue:this.state.impurityMeasure,options:["gini","entropy"],onChange:function(e){return t.setState({impurityMeasure:e})}}):null,r()(T.a,{disabled:!o||0===o.length,variant:"primary",block:!0,onClick:this.compute},void 0,this.props.t("calculate"))))}}]),n}(C.Component);G.defaultProps={logAction:function(){}},e.default=G}}]);