/*
		* In the original C implementation (see `init_by_array()`),
		*
		* ```c
		* mt[i] = (mt[i]^((mt[i-1]^(mt[i-1]>>30))*1566083941UL)) - i;
		* ```
		*
		* In order to replicate this in JavaScript, we must emulate C-like multiplication of unsigned 32-bit integers.
		*/

/*
		* In the original C implementation (see `init_by_array()`),
		*
		* ```c
		* mt[i] = (mt[i]^((mt[i-1]^(mt[i-1]>>30))*1664525UL)) + seed[j] + j;
		* ```
		*
		* In order to replicate this in JavaScript, we must emulate C-like multiplication of unsigned 32-bit integers.
		*/

/*
		* In the original C implementation (see `init_genrand()`),
		*
		* ```c
		* mt[i] = (KNUTH_MULTIPLIER * (mt[i-1] ^ (mt[i-1] >> 30)) + i)
		* ```
		*
		* In order to replicate this in JavaScript, we must emulate C-like multiplication of unsigned 32-bit integers.
		*/

/*
		Now we need to solve Eq 4.2 to obtain x.  For any given value of
		eta there are two solutions to this equation, and since the distribution
		may be very skewed, these are not related by x ~ 1-x we used when
		implementing section 3 above.  However we know that:

			cross < x <= 1       ; iff eta < mu
				x == cross   ; iff eta == mu
				0 <= x < cross    ; iff eta > mu

		Where cross == 1 / (1 + mu)
		Many thanks to Prof Temme for clarifying this point. Therefore we'll just jump straight into Newton iterations to solve Eq 4.2 using these bounds, and simple bisection as the first guess, in practice this converges pretty quickly and we only need a few digits correct anyway:
	*/

/*
	*    function evalpoly( x ) {
	*        if ( x === 0.0 ) {
	*            return c[ 0 ];
	*        }
	*        return c[0]+x*(c[1]+x*(c[2]+x*(c[3]+...+x*(c[n-2]+x*c[n-1]))));
	*    }
	*/

/*
	* Create the index input arguments along with the value to set...
	* > function set( i0, i1, ..., v ) {
	*/

/*
	* Create the index input arguments...
	* > function get( i0, i1, ...) {
	*/

/*
	* Create the index input arguments...
	* > function set( i0, i1,..., v ) {
	*/

/*
	* Index into the array according to the offset and strides...
	* > data[offset+strides[0]*i0+strides[1]*i1+...] = v;
	*/

/*
	* Index into the array according to the offset and strides...
	* > return data[offset+strides[0]*i0+strides[1]*i1+...];
	*/

/*
	* Resolve indices based on the index mode.
	* > i0 = getIndex( i0, shape[0]-1, mode );
	*/

/*
	* Set the uint16 view to a value having distinguishable lower and higher order words.
	*
	* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	*/

/*
	* Type check each index.
	* > if ( !isInteger( i0 ) ) { throw new TypeError( ... ) }
	*/

/*
	* e.g.,
	*
	*   function flattenArray( x ) {
	*       var o = [];
	*       var i0, i1;
	*       for ( i0 = 0; i0 < 2; i0++ ) {
	*           for ( i1 = 0; i1 < 2; i1++ ) {
	*               o.push( x[i0][i1] );
	*           }
	*       }
	*       return o;
	*   }
	*/

/*
	* e.g.,
	*     function get( i0, i1, i2 ) {
	*         if ( !isInteger( i0 ) ) {
	*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 0. Value: `'+i0+'`.' );
	*         }
	*         if ( !isInteger( i1 ) ) {
	*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 1. Value: `'+i1+'`.' );
	*         }
	*         if ( !isInteger( i2 ) ) {
	*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 2. Value: `'+i2+'`.' );
	*         }
	*         i0 = getIndex( i0, this._shape[0]-1, 'throw' );
	*         i1 = getIndex( i1, this._shape[1]-1, 'throw' );
	*         i2 = getIndex( i2, this._shape[2]-1, 'throw' );
	*         return this._buffer[ this._offset + this._strides[0]*i0 + this._strides[1]*i1 + this._strides[2]*i2 ];
	*     }
	*/

/*
	* e.g.,
	*     function get( i0, i1, i2 ) {
	*         return this._buffer[ this._offset + this._strides[0]*i0 + this._strides[1]*i1 + this._strides[2]*i2 ];
	*     }
	*/

/*
	* e.g.,
	*     function set( i0, i1, i2, v ) {
	*         if ( !isInteger( i0 ) ) {
	*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 0. Value: `'+i0+'`.' );
	*         }
	*         if ( !isInteger( i1 ) ) {
	*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 1. Value: `'+i1+'`.' );
	*         }
	*         if ( !isInteger( i2 ) ) {
	*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 2. Value: `'+i2+'`.' );
	*         }
	*         i0 = getIndex( i0, this._shape[0]-1, 'throw' );
	*         i1 = getIndex( i1, this._shape[1]-1, 'throw' );
	*         i2 = getIndex( i2, this._shape[2]-1, 'throw' );
	*         this._buffer[ this._offset + this._strides[0]*i0 + this._strides[1]*i1 + this._strides[2]*i2 ] = v;
	*         return this;
	*     }
	*/

/*
	* e.g.,
	*     function set( i0, i1, i2, v ) {
	*         this._buffer[ this._offset + this._strides[0]*i0 + this._strides[1]*i1 + this._strides[2]*i2 ] = v;
	*         return this;
	*     }
	*/

/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/

/*
            AdoptNode() is not used because internal state is not reset
            (e.g. the past names map of a HTMLFormElement), this is safe
            in theory but we would rather not risk another attack vector.
            The state that is cloned by importNode() is explicitly defined
            by the specs.
          */

/*
         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token
         * is optional. But the grammar is defined so that there is only one case we have to handle:
         *
         * token.content = [
         *     <span class="punctuation">```</span>,
         *     <span class="code-language">xxxx</span>,
         *     '\n', // exactly one new lines (\r or \n or \r\n)
         *     <span class="code-block">...</span>,
         *     '\n', // exactly one new lines again
         *     <span class="punctuation">```</span>
         * ];
         */

/*
         * Export kMaxLength after typed array support is determined.
         */

/*
         * Let's add some basic statistics about the beta's to be able to interpret them.
         * source: http://dept.stat.lsa.umich.edu/~kshedden/Courses/Stat401/Notes/401-multreg.pdf
         * validated against Excel Regression AddIn
         * test: "datamining statistics test"
         */

/*
         * Need to make sure that buffer isn't trying to write out of bounds.
         */

/*
        * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match
        */

/*
        _metadata = _metadata.filter((elm)=> !(
        	elm.name === "Seek" ||
        	elm.name === "SeekID" ||
        	elm.name === "SeekPosition") );
        */

/*
       * A git command can contain a parameter starting by a single or a double dash followed by a string
       * For instance:
       * $ git diff --cached
       * $ git log -p
       */

/*
       * Div
       * ------------------------------
       * blocks scrolling on non-body elements behind the menu
        * NodeResolver
       * ------------------------------
       * we need a reference to the scrollable element to "unlock" scroll on
       * mobile devices
        * ScrollLock
       * ------------------------------
       * actually does the scroll locking
       */

/*
       * Need to make sure that buffer isn't trying to write out of bounds.
       */

/*
    * Event handler invoked when input field value changes. Updates `value` and invokes `onChange` callback with the new value as its first argument
    */

/*
    * Event handler invoked when text area value changes. Updates `text` and invokes
    * `onChange` callback with the new text as its first argument
    */

/*
    * Event handler invoked when text area value changes. Updates `value` and invokes
    * `onChange` callback with the new text as its first argument
    */

/*
    * Event handler invoked when text area value changes. Updates `value` and invokes `onChange` callback with the new value as its first argument
    */

/*
    * Invoked immediately before component is unmounted from DOM. Performs clean-up of
    * component timer.
    */

/*
    * Invoked once on client after the initial rendering. Sets up component timer.
    */

/*
    * React component render method.
    */

/*
   * A simple one line comment like in a git status command
   * For instance:
   * $ git status
   * # On branch infinite-scroll
   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,
   * # and have 1 and 2 different commits each, respectively.
   * nothing to commit (working directory clean)
   */

/*
   * Coordinates displayed in a git diff command
   * For instance:
   * $ git diff
   * diff --git file.txt file.txt
   * index 6214953..1d54a52 100644
   * --- file.txt
   * +++ file.txt
   * @@ -1 +1,2 @@
   * -Here's my tetx file
   * +Here's my text file
   * +And this is the second line
   */

/*
   * Match a "commit [SHA1]" line in a git log output.
   * For instance:
   * $ git log
   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09
   * Author: lgiraudel
   * Date:   Mon Feb 17 11:18:34 2014 +0100
   *
   *     Add of a new line
   */

/*
   * Regexp to match the changed lines in a git diff output. Check the example below.
   */

/*
   * a git command. It starts with a random prompt finishing by a $, then "git" then some other parameters
   * For instance:
   * $ git add file.txt
   */

/*
   * a string (double and simple quote)
   */

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/

/*
 * A simple HOC that provides facility for listening to container resizes.
 *
 * The Flow type is pretty janky here. I can't just spread `WPProps` into this returned object - I wish I could - but it triggers
 * a flow bug of some sort that causes it to stop typechecking.
 */

/*
 * Export kMaxLength after typed array support is determined.
 */

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */

/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */

/*
 * Video conference recording, using captureStream API along with WebAudio and Canvas2D API.
 */

/*
* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).
*/

/*
* Adapted from MIT-licensed code.
*
* Copyright (c) 2014. Athan Reines.
*
* @source https://github.com/compute-io/iqr
*/

/*
* Adapted from MIT-licensed code.
*
* Copyright (c) 2014. Athan Reines.
*
* @source https://github.com/compute-io/max
*/

/*
* Adapted from MIT-licensed code.
*
* Copyright (c) 2014. Athan Reines.
*
* @source https://github.com/compute-io/mean
*/

/*
* Adapted from MIT-licensed code.
*
* Copyright (c) 2014. Athan Reines.
*
* @source https://github.com/compute-io/median
*/

/*
* Adapted from MIT-licensed code.
*
* Copyright (c) 2014. Athan Reines.
*
* @source https://github.com/compute-io/min
*/

/*
* Adapted from MIT-licensed code.
*
* Copyright (c) 2014. Athan Reines.
*
* @source https://github.com/compute-io/pcorr
*/

/*
* Adapted from MIT-licensed code.
*
* Copyright (c) 2014. Athan Reines.
*
* @source https://github.com/compute-io/range
*/

/*
* Adapted from MIT-licensed code.
*
* Copyright (c) 2014. Athan Reines.
*
* @source https://github.com/compute-io/stdev
*/

/*
* Adapted from MIT-licensed code.
*
* Copyright (c) 2014. Athan Reines.
*
* @source https://github.com/compute-io/variance
*/

/*
* Adapted from https://raw.githubusercontent.com/chanzuckerberg/czi-prosemirror/master/src/isTextStyleMarkCommandEnabled.js
*
* MIT License
*
* Copyright (c) 2018 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from:
*
* FileSaver.js
* A saveAs() FileSaver implementation.
* 1.3.8
* 2018-03-22 14:03:47
*
* By Eli Grey, https://eligrey.com
* License: MIT
*   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
*
* @source http://purl.eligrey.com/github/FileSaver.js/blob/master/src/FileSaver.js
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/CursorPlaceholderPlugin.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ImageFromURLCommand.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ImageNodeSpec.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ImageSourceCommand.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ImageUploadCommand.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ImageUploadPlaceholderPlugin.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/LinkSetURLCommand.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/LinkTooltipPlugin.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/SelectionPlaceholderPlugin.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/TableCellMenuPlugin.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/TextAlignCommand.js
*
* MIT License
*
* Copyright (c) 2018 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/applyMark.js
*
* MIT License
*
* Copyright (c) 2018 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/findActiveMark.js
*
* MIT License
*
* Copyright (c) 2018 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/findNodesWithSameMark.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/lookUpElement.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/sanitizeURL.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/CustomButton.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/CustomNodeView.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/EditorFrameset.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/ImageInlineEditor.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/ImageNodeView.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/ImageResizeBox.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/ImageURLEditor.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/ImageUploadEditor.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/LinkTooltip.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/LinkURLEditor.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/PointerSurface.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/PopUp.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/PopUpManager.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/PopUpPosition.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/TooltipSurface.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/bindScrollHandler.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/isElementFullyVisible.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/rects.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/resolveImage.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://raw.githubusercontent.com/chanzuckerberg/czi-prosemirror/master/src/HeadingNodeSpec.js
*
* MIT License
*
* Copyright (c) 2018 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://raw.githubusercontent.com/chanzuckerberg/czi-prosemirror/master/src/ListItemNodeSpec.js
*
* MIT License
*
* Copyright (c) 2018 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Built-in `typeof` operator behavior:
*
* ```text
* typeof null => 'object'
* typeof undefined => 'undefined'
* typeof 'a' => 'string'
* typeof 5 => 'number'
* typeof NaN => 'number'
* typeof true => 'boolean'
* typeof false => 'boolean'
* typeof {} => 'object'
* typeof [] => 'object'
* typeof function foo(){} => 'function'
* typeof function* foo(){} => 'object'
* typeof Symbol() => 'symbol'
* ```
*
*/

/*
* Dragging behavior adapted from code by:
*
* Copyright (c) 2019 by Matt Lockyer (https://codepen.io/mattlockyer/pen/LydeLj)
*
* Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/*
* Notes:
*	=> sin(-x) = -sin(x)
*	=> sin(+n) = +0, where `n` is a positive integer
*	=> sin(-n) = -sin(+n) = -0, where `n` is a positive integer
*	=> cos(-x) = cos(x)
*/

/*
* Sorting functionality adapted from MIT-licensed code:
*
* Copyright (C) 2013 Adam Schwartz, http://adamschwartz.co
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
*/

/*
* Translated from the Fortran module by
* ----------------------------------------------------------------------
* Authors:
*  Amparo Gil    (U. Cantabria, Santander, Spain)
*                 e-mail: amparo.gil@unican.es
*  Javier Segura (U. Cantabria, Santander, Spain)
*                 e-mail: javier.segura@unican.es
*  Nico M. Temme (CWI, Amsterdam, The Netherlands)
*                 e-mail: nico.temme@cwi.nl
* ---------------------------------------------------------------------
*/

/*
* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.
*/

/*
CSV Parse

Please look at the [project documentation](https://csv.js.org/parse/) for
additional information.
*/

/*
CSV Stringify

Please look at the [project documentation](https://csv.js.org/stringify/) for
additional information.
*/

/*
Like markdown-it-simplemath, this is a stripped down, simplified version of:
https://github.com/runarberg/markdown-it-math

It differs in that it takes (a subset of) LaTeX as input and relies on KaTeX
for rendering output.
*/

/* ! */

/* " " */

/* "0" */

/* "9" */

/* "prismjs/components/prism-actionscript" */

/* "prismjs/components/prism-bash" */

/* "prismjs/components/prism-c" */

/* "prismjs/components/prism-clike" */

/* "prismjs/components/prism-coffeescript" */

/* "prismjs/components/prism-cpp" */

/* "prismjs/components/prism-css" */

/* "prismjs/components/prism-css-extras" */

/* "prismjs/components/prism-diff" */

/* "prismjs/components/prism-flow" */

/* "prismjs/components/prism-git" */

/* "prismjs/components/prism-go" */

/* "prismjs/components/prism-graphql" */

/* "prismjs/components/prism-handlebars" */

/* "prismjs/components/prism-java" */

/* "prismjs/components/prism-javadoclike" */

/* "prismjs/components/prism-javascript" */

/* "prismjs/components/prism-js-extras" */

/* "prismjs/components/prism-js-templates" */

/* "prismjs/components/prism-jsdoc" */

/* "prismjs/components/prism-json" */

/* "prismjs/components/prism-jsx" */

/* "prismjs/components/prism-less" */

/* "prismjs/components/prism-makefile" */

/* "prismjs/components/prism-markdown" */

/* "prismjs/components/prism-markup" */

/* "prismjs/components/prism-markup-templating" */

/* "prismjs/components/prism-n4js" */

/* "prismjs/components/prism-objectivec" */

/* "prismjs/components/prism-ocaml" */

/* "prismjs/components/prism-php" */

/* "prismjs/components/prism-python" */

/* "prismjs/components/prism-reason" */

/* "prismjs/components/prism-sass" */

/* "prismjs/components/prism-scss" */

/* "prismjs/components/prism-sql" */

/* "prismjs/components/prism-stylus" */

/* "prismjs/components/prism-tsx" */

/* "prismjs/components/prism-typescript" */

/* "prismjs/components/prism-wasm" */

/* "prismjs/components/prism-yaml" */

/* #__PURE__ */

/* $ */

/* && typeof token.content !== 'string' */

/* '\' */

/* ( */

/* (ignored) */

/* ) */

/* * */

/* */

/* + */

/* , */

/* , mapfn = undefined, thisArg = undefined */

/* - */

/* -- Expanding -- */

/* ---------------------------- Component lifecycle methods ---------------------------- */

/* ---------------------------- Helper methods ---------------------------- */

/* . */

/* / */

/* 0 */

/* 1 */

/* 10 */

/* 100 */

/* 1000 */

/* 1001 */

/* 1002 */

/* 1003 */

/* 1004 */

/* 1005 */

/* 1006 */

/* 1007 */

/* 1008 */

/* 1009 */

/* 101 */

/* 1010 */

/* 1011 */

/* 1012 */

/* 1013 */

/* 1014 */

/* 1015 */

/* 1016 */

/* 1017 */

/* 1018 */

/* 1019 */

/* 102 */

/* 1020 */

/* 1021 */

/* 1022 */

/* 1023 */

/* 1024 */

/* 1025 */

/* 1026 */

/* 1027 */

/* 1028 */

/* 1029 */

/* 103 */

/* 1030 */

/* 1031 */

/* 1032 */

/* 1033 */

/* 1034 */

/* 1035 */

/* 1036 */

/* 1037 */

/* 1038 */

/* 1039 */

/* 104 */

/* 1040 */

/* 1041 */

/* 1042 */

/* 1043 */

/* 1044 */

/* 1045 */

/* 1046 */

/* 1047 */

/* 1048 */

/* 1049 */

/* 105 */

/* 1050 */

/* 1051 */

/* 1052 */

/* 1053 */

/* 1054 */

/* 1055 */

/* 1056 */

/* 1057 */

/* 1058 */

/* 1059 */

/* 106 */

/* 1060 */

/* 1061 */

/* 1062 */

/* 1063 */

/* 1064 */

/* 1065 */

/* 1066 */

/* 1067 */

/* 1068 */

/* 1069 */

/* 107 */

/* 1070 */

/* 1071 */

/* 1072 */

/* 1073 */

/* 1074 */

/* 1075 */

/* 1076 */

/* 1077 */

/* 1078 */

/* 1079 */

/* 108 */

/* 1080 */

/* 1081 */

/* 1082 */

/* 1083 */

/* 1084 */

/* 1085 */

/* 1086 */

/* 1087 */

/* 1088 */

/* 1089 */

/* 109 */

/* 1090 */

/* 1091 */

/* 1092 */

/* 1093 */

/* 1094 */

/* 1095 */

/* 1096 */

/* 1097 */

/* 1098 */

/* 1099 */

/* 11 */

/* 110 */

/* 1100 */

/* 1101 */

/* 1102 */

/* 1103 */

/* 1104 */

/* 1105 */

/* 1106 */

/* 1107 */

/* 1108 */

/* 1109 */

/* 111 */

/* 1110 */

/* 1111 */

/* 1112 */

/* 1113 */

/* 1114 */

/* 1115 */

/* 1116 */

/* 1117 */

/* 1118 */

/* 1119 */

/* 112 */

/* 1120 */

/* 1121 */

/* 1122 */

/* 1123 */

/* 1124 */

/* 1125 */

/* 1126 */

/* 1127 */

/* 1128 */

/* 1129 */

/* 113 */

/* 1130 */

/* 1131 */

/* 1132 */

/* 1133 */

/* 1134 */

/* 1135 */

/* 1136 */

/* 1137 */

/* 1138 */

/* 1139 */

/* 114 */

/* 1140 */

/* 1141 */

/* 1142 */

/* 1143 */

/* 1144 */

/* 1145 */

/* 1146 */

/* 1147 */

/* 1148 */

/* 1149 */

/* 115 */

/* 1150 */

/* 1151 */

/* 1152 */

/* 1153 */

/* 1154 */

/* 1155 */

/* 1156 */

/* 1157 */

/* 1158 */

/* 1159 */

/* 116 */

/* 1160 */

/* 1161 */

/* 1162 */

/* 1163 */

/* 1164 */

/* 1165 */

/* 1166 */

/* 1167 */

/* 1168 */

/* 1169 */

/* 117 */

/* 1170 */

/* 1171 */

/* 1172 */

/* 1173 */

/* 1174 */

/* 1175 */

/* 1176 */

/* 1177 */

/* 1178 */

/* 1179 */

/* 118 */

/* 1180 */

/* 1181 */

/* 1182 */

/* 1183 */

/* 1184 */

/* 1185 */

/* 1186 */

/* 1187 */

/* 1188 */

/* 1189 */

/* 119 */

/* 1190 */

/* 1191 */

/* 1192 */

/* 1193 */

/* 1194 */

/* 1195 */

/* 1196 */

/* 1197 */

/* 1198 */

/* 1199 */

/* 12 */

/* 120 */

/* 1200 */

/* 1201 */

/* 1202 */

/* 1203 */

/* 1204 */

/* 1205 */

/* 1206 */

/* 1207 */

/* 1208 */

/* 1209 */

/* 121 */

/* 1210 */

/* 1211 */

/* 1212 */

/* 1213 */

/* 1214 */

/* 1215 */

/* 1216 */

/* 1217 */

/* 1218 */

/* 1219 */

/* 122 */

/* 1220 */

/* 1221 */

/* 1222 */

/* 1223 */

/* 1224 */

/* 1225 */

/* 1226 */

/* 1227 */

/* 1228 */

/* 1229 */

/* 123 */

/* 1230 */

/* 1231 */

/* 1232 */

/* 1233 */

/* 1234 */

/* 1235 */

/* 1236 */

/* 1237 */

/* 1238 */

/* 1239 */

/* 124 */

/* 1240 */

/* 1241 */

/* 1242 */

/* 1243 */

/* 1244 */

/* 1245 */

/* 1246 */

/* 1247 */

/* 1248 */

/* 1249 */

/* 125 */

/* 1250 */

/* 1251 */

/* 1252 */

/* 1253 */

/* 1254 */

/* 1255 */

/* 1256 */

/* 1257 */

/* 1258 */

/* 1259 */

/* 126 */

/* 1260 */

/* 1261 */

/* 1262 */

/* 1263 */

/* 1264 */

/* 1265 */

/* 1266 */

/* 1267 */

/* 1268 */

/* 1269 */

/* 127 */

/* 1270 */

/* 1271 */

/* 1272 */

/* 1273 */

/* 1274 */

/* 1275 */

/* 1276 */

/* 1277 */

/* 1278 */

/* 1279 */

/* 128 */

/* 1280 */

/* 1281 */

/* 1282 */

/* 1283 */

/* 1284 */

/* 1285 */

/* 1286 */

/* 1287 */

/* 1288 */

/* 1289 */

/* 129 */

/* 1290 */

/* 1291 */

/* 1292 */

/* 1293 */

/* 1294 */

/* 1295 */

/* 1296 */

/* 1297 */

/* 1298 */

/* 1299 */

/* 13 */

/* 130 */

/* 1300 */

/* 1301 */

/* 1302 */

/* 1303 */

/* 1304 */

/* 1305 */

/* 1306 */

/* 1307 */

/* 1308 */

/* 1309 */

/* 131 */

/* 1310 */

/* 1311 */

/* 1312 */

/* 1313 */

/* 1314 */

/* 1315 */

/* 1316 */

/* 1317 */

/* 1318 */

/* 1319 */

/* 132 */

/* 1320 */

/* 1321 */

/* 1322 */

/* 1323 */

/* 1324 */

/* 1325 */

/* 1326 */

/* 1327 */

/* 1328 */

/* 1329 */

/* 133 */

/* 1330 */

/* 1331 */

/* 1332 */

/* 1333 */

/* 1334 */

/* 1335 */

/* 1336 */

/* 1337 */

/* 1338 */

/* 1339 */

/* 134 */

/* 1340 */

/* 1341 */

/* 1342 */

/* 1343 */

/* 1344 */

/* 1345 */

/* 1346 */

/* 1347 */

/* 1348 */

/* 1349 */

/* 135 */

/* 1350 */

/* 1351 */

/* 1352 */

/* 1353 */

/* 1354 */

/* 1355 */

/* 1356 */

/* 1357 */

/* 1358 */

/* 1359 */

/* 136 */

/* 1360 */

/* 1361 */

/* 1362 */

/* 1363 */

/* 1364 */

/* 1365 */

/* 1366 */

/* 1367 */

/* 1368 */

/* 1369 */

/* 137 */

/* 1370 */

/* 1371 */

/* 1372 */

/* 1373 */

/* 1374 */

/* 1375 */

/* 1376 */

/* 1377 */

/* 1378 */

/* 1379 */

/* 138 */

/* 1380 */

/* 1381 */

/* 1382 */

/* 1383 */

/* 1384 */

/* 1385 */

/* 1386 */

/* 1387 */

/* 1388 */

/* 1389 */

/* 139 */

/* 1390 */

/* 1391 */

/* 1392 */

/* 1393 */

/* 1394 */

/* 1395 */

/* 1396 */

/* 1397 */

/* 1398 */

/* 1399 */

/* 14 */

/* 140 */

/* 1400 */

/* 1401 */

/* 1402 */

/* 1403 */

/* 1404 */

/* 1405 */

/* 1406 */

/* 1407 */

/* 1408 */

/* 1409 */

/* 141 */

/* 1410 */

/* 1411 */

/* 1412 */

/* 1413 */

/* 1414 */

/* 1415 */

/* 1416 */

/* 1417 */

/* 1418 */

/* 1419 */

/* 142 */

/* 1420 */

/* 1421 */

/* 1422 */

/* 1423 */

/* 1424 */

/* 1425 */

/* 1426 */

/* 1427 */

/* 1428 */

/* 1429 */

/* 143 */

/* 1430 */

/* 1431 */

/* 1432 */

/* 1433 */

/* 1434 */

/* 1435 */

/* 1436 */

/* 1437 */

/* 1438 */

/* 1439 */

/* 144 */

/* 1440 */

/* 1441 */

/* 1442 */

/* 1443 */

/* 1444 */

/* 1445 */

/* 1446 */

/* 1447 */

/* 1448 */

/* 1449 */

/* 145 */

/* 1450 */

/* 1451 */

/* 1452 */

/* 1453 */

/* 1454 */

/* 1455 */

/* 1456 */

/* 1457 */

/* 1458 */

/* 1459 */

/* 146 */

/* 1460 */

/* 1461 */

/* 1462 */

/* 1463 */

/* 1464 */

/* 1465 */

/* 1466 */

/* 1467 */

/* 1468 */

/* 1469 */

/* 147 */

/* 1470 */

/* 1471 */

/* 1472 */

/* 1473 */

/* 1474 */

/* 1475 */

/* 1476 */

/* 1477 */

/* 1478 */

/* 1479 */

/* 148 */

/* 1480 */

/* 1481 */

/* 1482 */

/* 1483 */

/* 1484 */

/* 1485 */

/* 1486 */

/* 1487 */

/* 1488 */

/* 1489 */

/* 149 */

/* 1490 */

/* 1491 */

/* 1492 */

/* 1493 */

/* 1494 */

/* 1495 */

/* 1496 */

/* 1497 */

/* 1498 */

/* 1499 */

/* 15 */

/* 150 */

/* 1500 */

/* 1501 */

/* 1502 */

/* 1503 */

/* 1504 */

/* 1505 */

/* 1506 */

/* 1507 */

/* 1508 */

/* 1509 */

/* 151 */

/* 1510 */

/* 1511 */

/* 1512 */

/* 1513 */

/* 1514 */

/* 1515 */

/* 1516 */

/* 1517 */

/* 1518 */

/* 1519 */

/* 152 */

/* 1520 */

/* 1521 */

/* 1522 */

/* 1523 */

/* 1524 */

/* 1525 */

/* 1526 */

/* 1527 */

/* 1528 */

/* 1529 */

/* 153 */

/* 1530 */

/* 1531 */

/* 1532 */

/* 1533 */

/* 1534 */

/* 1535 */

/* 1536 */

/* 1537 */

/* 1538 */

/* 1539 */

/* 154 */

/* 1540 */

/* 1541 */

/* 1542 */

/* 1543 */

/* 1544 */

/* 1545 */

/* 1546 */

/* 1547 */

/* 1548 */

/* 1549 */

/* 155 */

/* 1550 */

/* 1551 */

/* 1552 */

/* 1553 */

/* 1554 */

/* 1555 */

/* 1556 */

/* 1557 */

/* 1558 */

/* 1559 */

/* 156 */

/* 1560 */

/* 1561 */

/* 1562 */

/* 1563 */

/* 1564 */

/* 1565 */

/* 1566 */

/* 1567 */

/* 1568 */

/* 1569 */

/* 157 */

/* 1570 */

/* 1571 */

/* 1572 */

/* 1573 */

/* 1574 */

/* 1575 */

/* 1576 */

/* 1577 */

/* 1578 */

/* 1579 */

/* 158 */

/* 1580 */

/* 1581 */

/* 1582 */

/* 1583 */

/* 1584 */

/* 1585 */

/* 1586 */

/* 1587 */

/* 1588 */

/* 1589 */

/* 159 */

/* 1590 */

/* 1591 */

/* 1592 */

/* 1593 */

/* 1594 */

/* 1595 */

/* 1596 */

/* 1597 */

/* 1598 */

/* 1599 */

/* 16 */

/* 160 */

/* 1600 */

/* 1601 */

/* 1602 */

/* 1603 */

/* 1604 */

/* 1605 */

/* 1606 */

/* 1607 */

/* 1608 */

/* 1609 */

/* 161 */

/* 1610 */

/* 1611 */

/* 1612 */

/* 1613 */

/* 1614 */

/* 1615 */

/* 1616 */

/* 1617 */

/* 1618 */

/* 1619 */

/* 162 */

/* 1620 */

/* 1621 */

/* 1622 */

/* 1623 */

/* 1624 */

/* 1625 */

/* 1626 */

/* 1627 */

/* 1628 */

/* 1629 */

/* 163 */

/* 1630 */

/* 1631 */

/* 1632 */

/* 1633 */

/* 1634 */

/* 1635 */

/* 1636 */

/* 1637 */

/* 1638 */

/* 1639 */

/* 164 */

/* 1640 */

/* 1641 */

/* 1642 */

/* 1643 */

/* 1644 */

/* 1645 */

/* 1646 */

/* 1647 */

/* 1648 */

/* 1649 */

/* 165 */

/* 1650 */

/* 1651 */

/* 1652 */

/* 1653 */

/* 1654 */

/* 1655 */

/* 1656 */

/* 1657 */

/* 1658 */

/* 1659 */

/* 166 */

/* 1660 */

/* 1661 */

/* 1662 */

/* 1663 */

/* 1664 */

/* 1665 */

/* 1666 */

/* 1667 */

/* 1668 */

/* 1669 */

/* 167 */

/* 1670 */

/* 1671 */

/* 1672 */

/* 1673 */

/* 1674 */

/* 1675 */

/* 1676 */

/* 1677 */

/* 1678 */

/* 1679 */

/* 168 */

/* 1680 */

/* 1681 */

/* 1682 */

/* 1683 */

/* 1684 */

/* 1685 */

/* 1686 */

/* 1687 */

/* 1688 */

/* 1689 */

/* 169 */

/* 1690 */

/* 1691 */

/* 1692 */

/* 1693 */

/* 1694 */

/* 1695 */

/* 1696 */

/* 1697 */

/* 1698 */

/* 1699 */

/* 17 */

/* 170 */

/* 1700 */

/* 1701 */

/* 1702 */

/* 1703 */

/* 1704 */

/* 1705 */

/* 1706 */

/* 1707 */

/* 1708 */

/* 1709 */

/* 171 */

/* 1710 */

/* 1711 */

/* 1712 */

/* 1713 */

/* 1714 */

/* 1715 */

/* 1716 */

/* 1717 */

/* 1718 */

/* 1719 */

/* 172 */

/* 1720 */

/* 1721 */

/* 1722 */

/* 1723 */

/* 1724 */

/* 1725 */

/* 1726 */

/* 1727 */

/* 1728 */

/* 1729 */

/* 173 */

/* 1730 */

/* 1731 */

/* 1732 */

/* 1733 */

/* 1734 */

/* 1735 */

/* 1736 */

/* 1737 */

/* 1738 */

/* 1739 */

/* 174 */

/* 1740 */

/* 1741 */

/* 1742 */

/* 1743 */

/* 1744 */

/* 1745 */

/* 1746 */

/* 1747 */

/* 1748 */

/* 1749 */

/* 175 */

/* 1750 */

/* 1751 */

/* 1752 */

/* 1753 */

/* 1754 */

/* 1755 */

/* 1756 */

/* 1757 */

/* 1758 */

/* 1759 */

/* 176 */

/* 1760 */

/* 1761 */

/* 1762 */

/* 1763 */

/* 1764 */

/* 1765 */

/* 1766 */

/* 1767 */

/* 1768 */

/* 1769 */

/* 177 */

/* 1770 */

/* 1771 */

/* 1772 */

/* 1773 */

/* 1774 */

/* 1775 */

/* 1776 */

/* 1777 */

/* 1778 */

/* 1779 */

/* 178 */

/* 1780 */

/* 1781 */

/* 1782 */

/* 1783 */

/* 1784 */

/* 1785 */

/* 1786 */

/* 1787 */

/* 1788 */

/* 1789 */

/* 179 */

/* 1790 */

/* 1791 */

/* 1792 */

/* 1793 */

/* 1794 */

/* 1795 */

/* 1796 */

/* 1797 */

/* 1798 */

/* 1799 */

/* 18 */

/* 180 */

/* 1800 */

/* 1801 */

/* 1802 */

/* 1803 */

/* 1804 */

/* 1805 */

/* 1806 */

/* 1807 */

/* 1808 */

/* 1809 */

/* 181 */

/* 1810 */

/* 1811 */

/* 1812 */

/* 1813 */

/* 1814 */

/* 1815 */

/* 1816 */

/* 1817 */

/* 1818 */

/* 1819 */

/* 182 */

/* 1820 */

/* 1821 */

/* 1822 */

/* 1823 */

/* 1824 */

/* 1825 */

/* 1826 */

/* 1827 */

/* 1828 */

/* 1829 */

/* 183 */

/* 1830 */

/* 1831 */

/* 1832 */

/* 1833 */

/* 1834 */

/* 1835 */

/* 1836 */

/* 1837 */

/* 1838 */

/* 1839 */

/* 184 */

/* 1840 */

/* 1841 */

/* 1842 */

/* 1843 */

/* 1844 */

/* 1845 */

/* 1846 */

/* 1847 */

/* 1848 */

/* 1849 */

/* 185 */

/* 1850 */

/* 1851 */

/* 1852 */

/* 1853 */

/* 1854 */

/* 1855 */

/* 1856 */

/* 1857 */

/* 1858 */

/* 1859 */

/* 186 */

/* 1860 */

/* 1861 */

/* 1862 */

/* 1863 */

/* 1864 */

/* 1865 */

/* 1866 */

/* 1867 */

/* 1868 */

/* 1869 */

/* 187 */

/* 1870 */

/* 1871 */

/* 1872 */

/* 1873 */

/* 1874 */

/* 1875 */

/* 1876 */

/* 1877 */

/* 1878 */

/* 1879 */

/* 188 */

/* 1880 */

/* 1881 */

/* 1882 */

/* 1883 */

/* 1884 */

/* 1885 */

/* 1886 */

/* 1887 */

/* 1888 */

/* 1889 */

/* 189 */

/* 1890 */

/* 1891 */

/* 1892 */

/* 1893 */

/* 1894 */

/* 1895 */

/* 1896 */

/* 1897 */

/* 1898 */

/* 1899 */

/* 19 */

/* 190 */

/* 1900 */

/* 1901 */

/* 1902 */

/* 1903 */

/* 1904 */

/* 1905 */

/* 1906 */

/* 1907 */

/* 1908 */

/* 1909 */

/* 191 */

/* 1910 */

/* 1911 */

/* 1912 */

/* 1913 */

/* 1914 */

/* 1915 */

/* 1916 */

/* 1917 */

/* 1918 */

/* 1919 */

/* 192 */

/* 1920 */

/* 1921 */

/* 1922 */

/* 1923 */

/* 1924 */

/* 1925 */

/* 1926 */

/* 1927 */

/* 1928 */

/* 1929 */

/* 193 */

/* 1930 */

/* 1931 */

/* 1932 */

/* 1933 */

/* 1934 */

/* 1935 */

/* 1936 */

/* 1937 */

/* 1938 */

/* 1939 */

/* 194 */

/* 1940 */

/* 1941 */

/* 1942 */

/* 1943 */

/* 1944 */

/* 1945 */

/* 1946 */

/* 1947 */

/* 1948 */

/* 1949 */

/* 195 */

/* 1950 */

/* 1951 */

/* 1952 */

/* 1953 */

/* 1954 */

/* 1955 */

/* 1956 */

/* 1957 */

/* 1958 */

/* 1959 */

/* 196 */

/* 1960 */

/* 1961 */

/* 1962 */

/* 1963 */

/* 1964 */

/* 1965 */

/* 1966 */

/* 1967 */

/* 1968 */

/* 1969 */

/* 197 */

/* 1970 */

/* 1971 */

/* 1972 */

/* 1973 */

/* 1974 */

/* 1975 */

/* 1976 */

/* 1977 */

/* 1978 */

/* 1979 */

/* 198 */

/* 1980 */

/* 1981 */

/* 1982 */

/* 1983 */

/* 1984 */

/* 1985 */

/* 1986 */

/* 1987 */

/* 1988 */

/* 1989 */

/* 199 */

/* 1990 */

/* 1991 */

/* 1992 */

/* 1993 */

/* 1994 */

/* 1995 */

/* 1996 */

/* 1997 */

/* 1998 */

/* 1999 */

/* 2 */

/* 20 */

/* 200 */

/* 2000 */

/* 2001 */

/* 2002 */

/* 2003 */

/* 2004 */

/* 2005 */

/* 2006 */

/* 2007 */

/* 2008 */

/* 2009 */

/* 201 */

/* 2010 */

/* 2011 */

/* 2012 */

/* 2013 */

/* 2014 */

/* 2015 */

/* 2016 */

/* 2017 */

/* 2018 */

/* 2019 */

/* 202 */

/* 2020 */

/* 2021 */

/* 2022 */

/* 2023 */

/* 2024 */

/* 2025 */

/* 2026 */

/* 2027 */

/* 2028 */

/* 2029 */

/* 203 */

/* 2030 */

/* 2031 */

/* 2032 */

/* 2033 */

/* 2034 */

/* 2035 */

/* 2036 */

/* 2037 */

/* 2038 */

/* 2039 */

/* 204 */

/* 2040 */

/* 2041 */

/* 2042 */

/* 2043 */

/* 2044 */

/* 2045 */

/* 2046 */

/* 2047 */

/* 2048 */

/* 2049 */

/* 205 */

/* 2050 */

/* 2051 */

/* 2052 */

/* 2053 */

/* 2054 */

/* 2055 */

/* 2056 */

/* 2057 */

/* 2058 */

/* 2059 */

/* 206 */

/* 2060 */

/* 2061 */

/* 2062 */

/* 2063 */

/* 2064 */

/* 2065 */

/* 2066 */

/* 2067 */

/* 2068 */

/* 2069 */

/* 207 */

/* 2070 */

/* 2071 */

/* 2072 */

/* 2073 */

/* 2074 */

/* 2075 */

/* 2076 */

/* 2077 */

/* 2078 */

/* 2079 */

/* 208 */

/* 2080 */

/* 2081 */

/* 2082 */

/* 2083 */

/* 2084 */

/* 2085 */

/* 2086 */

/* 2087 */

/* 2088 */

/* 2089 */

/* 209 */

/* 2090 */

/* 2091 */

/* 2092 */

/* 2093 */

/* 2094 */

/* 2095 */

/* 2096 */

/* 2097 */

/* 2098 */

/* 2099 */

/* 21 */

/* 210 */

/* 2100 */

/* 2101 */

/* 2102 */

/* 2103 */

/* 2104 */

/* 2105 */

/* 2106 */

/* 2107 */

/* 2108 */

/* 2109 */

/* 211 */

/* 2110 */

/* 2111 */

/* 2112 */

/* 2113 */

/* 2114 */

/* 2115 */

/* 2116 */

/* 2117 */

/* 2118 */

/* 2119 */

/* 212 */

/* 2120 */

/* 2121 */

/* 2122 */

/* 2123 */

/* 2124 */

/* 2125 */

/* 2126 */

/* 2127 */

/* 2128 */

/* 2129 */

/* 213 */

/* 2130 */

/* 2131 */

/* 2132 */

/* 2133 */

/* 2134 */

/* 2135 */

/* 2136 */

/* 2137 */

/* 2138 */

/* 2139 */

/* 214 */

/* 2140 */

/* 2141 */

/* 2142 */

/* 2143 */

/* 2144 */

/* 2145 */

/* 2146 */

/* 2147 */

/* 2148 */

/* 2149 */

/* 215 */

/* 2150 */

/* 2151 */

/* 2152 */

/* 2153 */

/* 2154 */

/* 2155 */

/* 2156 */

/* 2157 */

/* 2158 */

/* 2159 */

/* 216 */

/* 2160 */

/* 2161 */

/* 2162 */

/* 2163 */

/* 2164 */

/* 2165 */

/* 2166 */

/* 2167 */

/* 2168 */

/* 2169 */

/* 217 */

/* 2170 */

/* 2171 */

/* 2172 */

/* 2173 */

/* 2174 */

/* 2175 */

/* 2176 */

/* 2177 */

/* 2178 */

/* 2179 */

/* 218 */

/* 2180 */

/* 2181 */

/* 2182 */

/* 2183 */

/* 2184 */

/* 2185 */

/* 2186 */

/* 2187 */

/* 2188 */

/* 2189 */

/* 219 */

/* 2190 */

/* 2191 */

/* 2192 */

/* 2193 */

/* 2194 */

/* 2195 */

/* 2196 */

/* 2197 */

/* 2198 */

/* 2199 */

/* 22 */

/* 220 */

/* 2200 */

/* 2201 */

/* 2202 */

/* 2203 */

/* 2204 */

/* 2205 */

/* 2206 */

/* 2207 */

/* 2208 */

/* 2209 */

/* 221 */

/* 2210 */

/* 2211 */

/* 2212 */

/* 2213 */

/* 2214 */

/* 2215 */

/* 2216 */

/* 2217 */

/* 2218 */

/* 2219 */

/* 222 */

/* 2220 */

/* 2221 */

/* 2222 */

/* 2223 */

/* 2224 */

/* 2225 */

/* 2226 */

/* 2227 */

/* 2228 */

/* 2229 */

/* 223 */

/* 2230 */

/* 2231 */

/* 2232 */

/* 2233 */

/* 2234 */

/* 2235 */

/* 2236 */

/* 2237 */

/* 2238 */

/* 2239 */

/* 224 */

/* 2240 */

/* 2241 */

/* 2242 */

/* 2243 */

/* 2244 */

/* 2245 */

/* 2246 */

/* 2247 */

/* 2248 */

/* 2249 */

/* 225 */

/* 2250 */

/* 2251 */

/* 2252 */

/* 2253 */

/* 2254 */

/* 2255 */

/* 2256 */

/* 2257 */

/* 2258 */

/* 2259 */

/* 226 */

/* 2260 */

/* 2261 */

/* 2262 */

/* 2263 */

/* 2264 */

/* 2265 */

/* 2266 */

/* 2267 */

/* 2268 */

/* 2269 */

/* 227 */

/* 2270 */

/* 2271 */

/* 2272 */

/* 2273 */

/* 2274 */

/* 2275 */

/* 2276 */

/* 2277 */

/* 2278 */

/* 2279 */

/* 228 */

/* 2280 */

/* 2281 */

/* 2282 */

/* 2283 */

/* 2284 */

/* 2285 */

/* 2286 */

/* 2287 */

/* 2288 */

/* 2289 */

/* 229 */

/* 2290 */

/* 2291 */

/* 2292 */

/* 2293 */

/* 2294 */

/* 2295 */

/* 2296 */

/* 2297 */

/* 2298 */

/* 2299 */

/* 23 */

/* 230 */

/* 2300 */

/* 2301 */

/* 2302 */

/* 2303 */

/* 2304 */

/* 2305 */

/* 2306 */

/* 2307 */

/* 2308 */

/* 2309 */

/* 231 */

/* 2310 */

/* 2311 */

/* 2312 */

/* 2313 */

/* 2314 */

/* 2315 */

/* 2316 */

/* 2317 */

/* 2318 */

/* 2319 */

/* 232 */

/* 2320 */

/* 2321 */

/* 2322 */

/* 2323 */

/* 2324 */

/* 2325 */

/* 2326 */

/* 2327 */

/* 2328 */

/* 2329 */

/* 233 */

/* 2330 */

/* 2331 */

/* 2332 */

/* 2333 */

/* 2334 */

/* 2335 */

/* 2336 */

/* 2337 */

/* 2338 */

/* 2339 */

/* 234 */

/* 2340 */

/* 2341 */

/* 2342 */

/* 2343 */

/* 2344 */

/* 2345 */

/* 2346 */

/* 2347 */

/* 2348 */

/* 2349 */

/* 235 */

/* 2350 */

/* 2351 */

/* 2352 */

/* 2353 */

/* 2354 */

/* 2355 */

/* 2356 */

/* 2357 */

/* 2358 */

/* 2359 */

/* 236 */

/* 2360 */

/* 2361 */

/* 2362 */

/* 2363 */

/* 2364 */

/* 2365 */

/* 2366 */

/* 2367 */

/* 2368 */

/* 2369 */

/* 237 */

/* 2370 */

/* 2371 */

/* 2372 */

/* 2373 */

/* 2374 */

/* 2375 */

/* 2376 */

/* 2377 */

/* 2378 */

/* 2379 */

/* 238 */

/* 2380 */

/* 2381 */

/* 2382 */

/* 2383 */

/* 2384 */

/* 2385 */

/* 2386 */

/* 2387 */

/* 2388 */

/* 2389 */

/* 239 */

/* 2390 */

/* 2391 */

/* 2392 */

/* 2393 */

/* 2394 */

/* 2395 */

/* 2396 */

/* 2397 */

/* 2398 */

/* 2399 */

/* 24 */

/* 240 */

/* 2400 */

/* 2401 */

/* 2402 */

/* 2403 */

/* 2404 */

/* 2405 */

/* 2406 */

/* 2407 */

/* 2408 */

/* 2409 */

/* 241 */

/* 2410 */

/* 2411 */

/* 2412 */

/* 2413 */

/* 2414 */

/* 2415 */

/* 2416 */

/* 2417 */

/* 2418 */

/* 2419 */

/* 242 */

/* 2420 */

/* 2421 */

/* 2422 */

/* 2423 */

/* 2424 */

/* 2425 */

/* 2426 */

/* 2427 */

/* 2428 */

/* 2429 */

/* 243 */

/* 2430 */

/* 2431 */

/* 2432 */

/* 2433 */

/* 2434 */

/* 2435 */

/* 2436 */

/* 2437 */

/* 2438 */

/* 2439 */

/* 244 */

/* 2440 */

/* 2441 */

/* 2442 */

/* 2443 */

/* 2444 */

/* 2445 */

/* 2446 */

/* 2447 */

/* 2448 */

/* 2449 */

/* 245 */

/* 2450 */

/* 2451 */

/* 2452 */

/* 2453 */

/* 2454 */

/* 2455 */

/* 2456 */

/* 2457 */

/* 2458 */

/* 2459 */

/* 246 */

/* 2460 */

/* 2461 */

/* 2462 */

/* 2463 */

/* 2464 */

/* 2465 */

/* 2466 */

/* 2467 */

/* 2468 */

/* 2469 */

/* 247 */

/* 2470 */

/* 2471 */

/* 2472 */

/* 2473 */

/* 2474 */

/* 2475 */

/* 2476 */

/* 2477 */

/* 2478 */

/* 2479 */

/* 248 */

/* 2480 */

/* 2481 */

/* 2482 */

/* 2483 */

/* 2484 */

/* 2485 */

/* 2486 */

/* 2487 */

/* 2488 */

/* 2489 */

/* 249 */

/* 2490 */

/* 2491 */

/* 2492 */

/* 2493 */

/* 2494 */

/* 2495 */

/* 2496 */

/* 2497 */

/* 2498 */

/* 2499 */

/* 25 */

/* 250 */

/* 2500 */

/* 2501 */

/* 2502 */

/* 2503 */

/* 2504 */

/* 2505 */

/* 2506 */

/* 2507 */

/* 2508 */

/* 2509 */

/* 251 */

/* 2510 */

/* 2511 */

/* 2512 */

/* 2513 */

/* 2514 */

/* 2515 */

/* 2516 */

/* 2517 */

/* 2518 */

/* 2519 */

/* 252 */

/* 2520 */

/* 2521 */

/* 2522 */

/* 2523 */

/* 2524 */

/* 2525 */

/* 2526 */

/* 2527 */

/* 2528 */

/* 2529 */

/* 253 */

/* 2530 */

/* 2531 */

/* 2532 */

/* 2533 */

/* 2534 */

/* 2535 */

/* 2536 */

/* 2537 */

/* 2538 */

/* 2539 */

/* 254 */

/* 2540 */

/* 2541 */

/* 2542 */

/* 2543 */

/* 2544 */

/* 2545 */

/* 2546 */

/* 2547 */

/* 2548 */

/* 2549 */

/* 255 */

/* 2550 */

/* 2551 */

/* 2552 */

/* 2553 */

/* 2554 */

/* 2555 */

/* 2556 */

/* 2557 */

/* 2558 */

/* 2559 */

/* 256 */

/* 2560 */

/* 2561 */

/* 2562 */

/* 2563 */

/* 2564 */

/* 2565 */

/* 2566 */

/* 2567 */

/* 2568 */

/* 2569 */

/* 257 */

/* 2570 */

/* 2571 */

/* 2572 */

/* 2573 */

/* 2574 */

/* 2575 */

/* 2576 */

/* 2577 */

/* 2578 */

/* 2579 */

/* 258 */

/* 2580 */

/* 2581 */

/* 2582 */

/* 2583 */

/* 2584 */

/* 2585 */

/* 2586 */

/* 2587 */

/* 2588 */

/* 2589 */

/* 259 */

/* 2590 */

/* 2591 */

/* 2592 */

/* 2593 */

/* 2594 */

/* 2595 */

/* 2596 */

/* 2597 */

/* 2598 */

/* 2599 */

/* 26 */

/* 260 */

/* 2600 */

/* 2601 */

/* 2602 */

/* 2603 */

/* 2604 */

/* 2605 */

/* 2606 */

/* 2607 */

/* 2608 */

/* 2609 */

/* 261 */

/* 2610 */

/* 2611 */

/* 2612 */

/* 2613 */

/* 2614 */

/* 2615 */

/* 2616 */

/* 2617 */

/* 2618 */

/* 2619 */

/* 262 */

/* 2620 */

/* 2621 */

/* 2622 */

/* 2623 */

/* 2624 */

/* 2625 */

/* 2626 */

/* 2627 */

/* 2628 */

/* 2629 */

/* 263 */

/* 2630 */

/* 2631 */

/* 2632 */

/* 2633 */

/* 2634 */

/* 2635 */

/* 2636 */

/* 2637 */

/* 2638 */

/* 2639 */

/* 264 */

/* 2640 */

/* 2641 */

/* 2642 */

/* 2643 */

/* 2644 */

/* 2645 */

/* 2646 */

/* 2647 */

/* 2648 */

/* 2649 */

/* 265 */

/* 2650 */

/* 2651 */

/* 2652 */

/* 2653 */

/* 2654 */

/* 2655 */

/* 2656 */

/* 2657 */

/* 2658 */

/* 2659 */

/* 266 */

/* 2660 */

/* 2661 */

/* 2662 */

/* 2663 */

/* 2664 */

/* 2665 */

/* 2666 */

/* 2667 */

/* 2668 */

/* 2669 */

/* 267 */

/* 2670 */

/* 2671 */

/* 2672 */

/* 2673 */

/* 2674 */

/* 2675 */

/* 2676 */

/* 2677 */

/* 2678 */

/* 2679 */

/* 268 */

/* 2680 */

/* 2681 */

/* 2682 */

/* 2683 */

/* 2684 */

/* 2685 */

/* 2686 */

/* 2687 */

/* 2688 */

/* 2689 */

/* 269 */

/* 2690 */

/* 2691 */

/* 2692 */

/* 2693 */

/* 2694 */

/* 2695 */

/* 2696 */

/* 2697 */

/* 2698 */

/* 2699 */

/* 27 */

/* 270 */

/* 2700 */

/* 2701 */

/* 2702 */

/* 2703 */

/* 2704 */

/* 2705 */

/* 2706 */

/* 2707 */

/* 2708 */

/* 2709 */

/* 271 */

/* 2710 */

/* 2711 */

/* 2712 */

/* 2713 */

/* 2714 */

/* 2715 */

/* 2716 */

/* 2717 */

/* 2718 */

/* 2719 */

/* 272 */

/* 2720 */

/* 2721 */

/* 2722 */

/* 2723 */

/* 2724 */

/* 2725 */

/* 2726 */

/* 2727 */

/* 2728 */

/* 2729 */

/* 273 */

/* 2730 */

/* 2731 */

/* 2732 */

/* 2733 */

/* 2734 */

/* 2735 */

/* 2736 */

/* 2737 */

/* 2738 */

/* 2739 */

/* 274 */

/* 2740 */

/* 2741 */

/* 2742 */

/* 2743 */

/* 2744 */

/* 2745 */

/* 2746 */

/* 2747 */

/* 2748 */

/* 2749 */

/* 275 */

/* 2750 */

/* 2751 */

/* 2752 */

/* 2753 */

/* 2754 */

/* 2755 */

/* 2756 */

/* 2757 */

/* 2758 */

/* 2759 */

/* 276 */

/* 2760 */

/* 2761 */

/* 2762 */

/* 2763 */

/* 2764 */

/* 2765 */

/* 2766 */

/* 2767 */

/* 2768 */

/* 2769 */

/* 277 */

/* 2770 */

/* 2771 */

/* 2772 */

/* 2773 */

/* 2774 */

/* 2775 */

/* 2776 */

/* 2777 */

/* 2778 */

/* 2779 */

/* 278 */

/* 2780 */

/* 2781 */

/* 2782 */

/* 2783 */

/* 2784 */

/* 2785 */

/* 2786 */

/* 2787 */

/* 2788 */

/* 2789 */

/* 279 */

/* 2790 */

/* 2791 */

/* 2792 */

/* 2793 */

/* 2794 */

/* 2795 */

/* 2796 */

/* 2797 */

/* 2798 */

/* 2799 */

/* 28 */

/* 280 */

/* 2800 */

/* 2801 */

/* 2802 */

/* 2803 */

/* 2804 */

/* 2805 */

/* 2806 */

/* 2807 */

/* 2808 */

/* 2809 */

/* 281 */

/* 2810 */

/* 2811 */

/* 2812 */

/* 2813 */

/* 2814 */

/* 2815 */

/* 2816 */

/* 2817 */

/* 2818 */

/* 2819 */

/* 282 */

/* 2820 */

/* 2821 */

/* 2822 */

/* 2823 */

/* 2824 */

/* 2825 */

/* 2826 */

/* 2827 */

/* 2828 */

/* 2829 */

/* 283 */

/* 2830 */

/* 2831 */

/* 2832 */

/* 2833 */

/* 2834 */

/* 2835 */

/* 2836 */

/* 2837 */

/* 2838 */

/* 2839 */

/* 284 */

/* 2840 */

/* 2841 */

/* 2842 */

/* 2843 */

/* 2844 */

/* 2845 */

/* 2846 */

/* 2847 */

/* 2848 */

/* 2849 */

/* 285 */

/* 2850 */

/* 2851 */

/* 2852 */

/* 2853 */

/* 2854 */

/* 2855 */

/* 2856 */

/* 2857 */

/* 2858 */

/* 2859 */

/* 286 */

/* 2860 */

/* 2861 */

/* 2862 */

/* 2863 */

/* 2864 */

/* 2865 */

/* 2866 */

/* 2867 */

/* 2868 */

/* 2869 */

/* 287 */

/* 2870 */

/* 2871 */

/* 2872 */

/* 2873 */

/* 2874 */

/* 2875 */

/* 2876 */

/* 2877 */

/* 2878 */

/* 2879 */

/* 288 */

/* 2880 */

/* 2881 */

/* 2882 */

/* 2883 */

/* 2884 */

/* 2885 */

/* 2886 */

/* 2887 */

/* 2888 */

/* 2889 */

/* 289 */

/* 2890 */

/* 2891 */

/* 2892 */

/* 2893 */

/* 2894 */

/* 2895 */

/* 2896 */

/* 2897 */

/* 2898 */

/* 2899 */

/* 29 */

/* 290 */

/* 2900 */

/* 2901 */

/* 2902 */

/* 2903 */

/* 2904 */

/* 2905 */

/* 2906 */

/* 2907 */

/* 2908 */

/* 2909 */

/* 291 */

/* 2910 */

/* 2911 */

/* 2912 */

/* 2913 */

/* 2914 */

/* 2915 */

/* 2916 */

/* 2917 */

/* 2918 */

/* 2919 */

/* 292 */

/* 2920 */

/* 2921 */

/* 2922 */

/* 2923 */

/* 2924 */

/* 2925 */

/* 2926 */

/* 2927 */

/* 2928 */

/* 2929 */

/* 293 */

/* 2930 */

/* 2931 */

/* 2932 */

/* 2933 */

/* 2934 */

/* 2935 */

/* 2936 */

/* 2937 */

/* 2938 */

/* 2939 */

/* 294 */

/* 2940 */

/* 2941 */

/* 2942 */

/* 2943 */

/* 2944 */

/* 2945 */

/* 2946 */

/* 2947 */

/* 2948 */

/* 2949 */

/* 295 */

/* 2950 */

/* 2951 */

/* 2952 */

/* 2953 */

/* 2954 */

/* 2955 */

/* 2956 */

/* 2957 */

/* 2958 */

/* 2959 */

/* 296 */

/* 2960 */

/* 2961 */

/* 2962 */

/* 2963 */

/* 2964 */

/* 2965 */

/* 2966 */

/* 2967 */

/* 2968 */

/* 2969 */

/* 297 */

/* 2970 */

/* 2971 */

/* 2972 */

/* 2973 */

/* 2974 */

/* 2975 */

/* 2976 */

/* 2977 */

/* 2978 */

/* 2979 */

/* 298 */

/* 2980 */

/* 2981 */

/* 2982 */

/* 2983 */

/* 2984 */

/* 2985 */

/* 2986 */

/* 2987 */

/* 2988 */

/* 2989 */

/* 299 */

/* 2990 */

/* 2991 */

/* 2992 */

/* 2993 */

/* 2994 */

/* 2995 */

/* 2996 */

/* 2997 */

/* 2998 */

/* 2999 */

/* 3 */

/* 30 */

/* 300 */

/* 3000 */

/* 3001 */

/* 3002 */

/* 3003 */

/* 3004 */

/* 3005 */

/* 3006 */

/* 3007 */

/* 3008 */

/* 3009 */

/* 301 */

/* 3010 */

/* 3011 */

/* 3012 */

/* 3013 */

/* 3014 */

/* 3015 */

/* 3016 */

/* 3017 */

/* 3018 */

/* 3019 */

/* 302 */

/* 3020 */

/* 3021 */

/* 3022 */

/* 3023 */

/* 3024 */

/* 3025 */

/* 3026 */

/* 3027 */

/* 3028 */

/* 3029 */

/* 303 */

/* 3030 */

/* 3031 */

/* 3032 */

/* 3033 */

/* 3034 */

/* 3035 */

/* 3036 */

/* 3037 */

/* 3038 */

/* 3039 */

/* 304 */

/* 3040 */

/* 3041 */

/* 3042 */

/* 3043 */

/* 3044 */

/* 3045 */

/* 3046 */

/* 3047 */

/* 3048 */

/* 3049 */

/* 305 */

/* 3050 */

/* 3051 */

/* 3052 */

/* 3053 */

/* 3054 */

/* 3055 */

/* 3056 */

/* 3057 */

/* 3058 */

/* 3059 */

/* 306 */

/* 3060 */

/* 3061 */

/* 3062 */

/* 3063 */

/* 3064 */

/* 3065 */

/* 3066 */

/* 3067 */

/* 3068 */

/* 3069 */

/* 307 */

/* 3070 */

/* 3071 */

/* 3072 */

/* 3073 */

/* 3074 */

/* 3075 */

/* 3076 */

/* 3077 */

/* 3078 */

/* 3079 */

/* 308 */

/* 3080 */

/* 3081 */

/* 3082 */

/* 3083 */

/* 3084 */

/* 3085 */

/* 3086 */

/* 3087 */

/* 3088 */

/* 3089 */

/* 309 */

/* 3090 */

/* 3091 */

/* 3092 */

/* 3093 */

/* 3094 */

/* 3095 */

/* 3096 */

/* 3097 */

/* 3098 */

/* 3099 */

/* 31 */

/* 310 */

/* 3100 */

/* 3101 */

/* 3102 */

/* 3103 */

/* 3104 */

/* 3105 */

/* 3106 */

/* 3107 */

/* 3108 */

/* 3109 */

/* 311 */

/* 3110 */

/* 3111 */

/* 3112 */

/* 3113 */

/* 3114 */

/* 3115 */

/* 3116 */

/* 3117 */

/* 3118 */

/* 3119 */

/* 312 */

/* 3120 */

/* 3121 */

/* 3122 */

/* 3123 */

/* 3124 */

/* 3125 */

/* 3126 */

/* 3127 */

/* 3128 */

/* 3129 */

/* 313 */

/* 3130 */

/* 3131 */

/* 3132 */

/* 3133 */

/* 3134 */

/* 3135 */

/* 3136 */

/* 3137 */

/* 3138 */

/* 3139 */

/* 314 */

/* 3140 */

/* 3141 */

/* 3142 */

/* 3143 */

/* 3144 */

/* 3145 */

/* 3146 */

/* 3147 */

/* 3148 */

/* 3149 */

/* 315 */

/* 3150 */

/* 3151 */

/* 3152 */

/* 3153 */

/* 3154 */

/* 3155 */

/* 3156 */

/* 3157 */

/* 3158 */

/* 3159 */

/* 316 */

/* 3160 */

/* 3161 */

/* 3162 */

/* 3163 */

/* 3164 */

/* 3165 */

/* 3166 */

/* 3167 */

/* 3168 */

/* 3169 */

/* 317 */

/* 3170 */

/* 3171 */

/* 3172 */

/* 3173 */

/* 3174 */

/* 3175 */

/* 3176 */

/* 3177 */

/* 3178 */

/* 3179 */

/* 318 */

/* 3180 */

/* 3181 */

/* 3182 */

/* 3183 */

/* 3184 */

/* 3185 */

/* 3186 */

/* 3187 */

/* 3188 */

/* 3189 */

/* 319 */

/* 3190 */

/* 3191 */

/* 3192 */

/* 3193 */

/* 3194 */

/* 3195 */

/* 3196 */

/* 3197 */

/* 3198 */

/* 3199 */

/* 32 */

/* 320 */

/* 3200 */

/* 3201 */

/* 3202 */

/* 3203 */

/* 3204 */

/* 3205 */

/* 3206 */

/* 3207 */

/* 3208 */

/* 3209 */

/* 321 */

/* 3210 */

/* 3211 */

/* 3212 */

/* 3213 */

/* 3214 */

/* 3215 */

/* 3216 */

/* 3217 */

/* 3218 */

/* 3219 */

/* 322 */

/* 3220 */

/* 3221 */

/* 3222 */

/* 3223 */

/* 3224 */

/* 3225 */

/* 3226 */

/* 3227 */

/* 3228 */

/* 3229 */

/* 323 */

/* 3230 */

/* 3231 */

/* 3232 */

/* 3233 */

/* 3234 */

/* 3235 */

/* 3236 */

/* 3237 */

/* 3238 */

/* 3239 */

/* 324 */

/* 3240 */

/* 3241 */

/* 3242 */

/* 3243 */

/* 3244 */

/* 3245 */

/* 3246 */

/* 3247 */

/* 3248 */

/* 3249 */

/* 325 */

/* 3250 */

/* 3251 */

/* 3252 */

/* 3253 */

/* 3254 */

/* 3255 */

/* 3256 */

/* 3257 */

/* 3258 */

/* 3259 */

/* 326 */

/* 3260 */

/* 3261 */

/* 3262 */

/* 3263 */

/* 3264 */

/* 3265 */

/* 3266 */

/* 3267 */

/* 3268 */

/* 3269 */

/* 327 */

/* 3270 */

/* 3271 */

/* 3272 */

/* 3273 */

/* 3274 */

/* 3275 */

/* 3276 */

/* 3277 */

/* 3278 */

/* 3279 */

/* 328 */

/* 3280 */

/* 3281 */

/* 3282 */

/* 3283 */

/* 3284 */

/* 3285 */

/* 3286 */

/* 3287 */

/* 3288 */

/* 3289 */

/* 329 */

/* 3290 */

/* 3291 */

/* 3292 */

/* 3293 */

/* 3294 */

/* 3295 */

/* 3296 */

/* 3297 */

/* 3298 */

/* 3299 */

/* 33 */

/* 330 */

/* 3300 */

/* 3301 */

/* 3302 */

/* 3303 */

/* 3304 */

/* 3305 */

/* 3306 */

/* 3307 */

/* 3308 */

/* 3309 */

/* 331 */

/* 3310 */

/* 3311 */

/* 3312 */

/* 3313 */

/* 3314 */

/* 3315 */

/* 3316 */

/* 3317 */

/* 3318 */

/* 3319 */

/* 332 */

/* 3320 */

/* 3321 */

/* 3322 */

/* 3323 */

/* 3324 */

/* 3325 */

/* 3326 */

/* 3327 */

/* 3328 */

/* 3329 */

/* 333 */

/* 3330 */

/* 3331 */

/* 3332 */

/* 3333 */

/* 3334 */

/* 3335 */

/* 3336 */

/* 3337 */

/* 3338 */

/* 3339 */

/* 334 */

/* 3340 */

/* 3341 */

/* 3342 */

/* 3343 */

/* 3344 */

/* 3345 */

/* 3346 */

/* 3347 */

/* 3348 */

/* 3349 */

/* 335 */

/* 3350 */

/* 3351 */

/* 3352 */

/* 3353 */

/* 3354 */

/* 3355 */

/* 3356 */

/* 3357 */

/* 3358 */

/* 3359 */

/* 336 */

/* 3360 */

/* 3361 */

/* 3362 */

/* 3363 */

/* 3364 */

/* 3365 */

/* 3366 */

/* 3367 */

/* 3368 */

/* 3369 */

/* 337 */

/* 3370 */

/* 3371 */

/* 3372 */

/* 3373 */

/* 3374 */

/* 3375 */

/* 3376 */

/* 3377 */

/* 3378 */

/* 3379 */

/* 338 */

/* 3380 */

/* 3381 */

/* 3382 */

/* 3383 */

/* 3384 */

/* 3385 */

/* 3386 */

/* 3387 */

/* 3388 */

/* 3389 */

/* 339 */

/* 3390 */

/* 3391 */

/* 3392 */

/* 3393 */

/* 3394 */

/* 3395 */

/* 3396 */

/* 3397 */

/* 3398 */

/* 3399 */

/* 34 */

/* 340 */

/* 3400 */

/* 3401 */

/* 3402 */

/* 3403 */

/* 3404 */

/* 3405 */

/* 3406 */

/* 3407 */

/* 3408 */

/* 3409 */

/* 341 */

/* 3410 */

/* 3411 */

/* 3412 */

/* 3413 */

/* 3414 */

/* 3415 */

/* 3416 */

/* 3417 */

/* 3418 */

/* 3419 */

/* 342 */

/* 3420 */

/* 3421 */

/* 3422 */

/* 3423 */

/* 3424 */

/* 3425 */

/* 3426 */

/* 3427 */

/* 3428 */

/* 3429 */

/* 343 */

/* 3430 */

/* 3431 */

/* 3432 */

/* 3433 */

/* 3434 */

/* 3435 */

/* 3436 */

/* 3437 */

/* 3438 */

/* 3439 */

/* 344 */

/* 3440 */

/* 3441 */

/* 3442 */

/* 3443 */

/* 3444 */

/* 3445 */

/* 3446 */

/* 3447 */

/* 3448 */

/* 3449 */

/* 345 */

/* 3450 */

/* 3451 */

/* 3452 */

/* 3453 */

/* 3454 */

/* 3455 */

/* 3456 */

/* 3457 */

/* 3458 */

/* 3459 */

/* 346 */

/* 3460 */

/* 3461 */

/* 3462 */

/* 3463 */

/* 3464 */

/* 3465 */

/* 3466 */

/* 3467 */

/* 3468 */

/* 3469 */

/* 347 */

/* 3470 */

/* 3471 */

/* 3472 */

/* 3473 */

/* 3474 */

/* 3475 */

/* 3476 */

/* 3477 */

/* 3478 */

/* 3479 */

/* 348 */

/* 3480 */

/* 3481 */

/* 3482 */

/* 3483 */

/* 3484 */

/* 3485 */

/* 3486 */

/* 3487 */

/* 3488 */

/* 3489 */

/* 349 */

/* 3490 */

/* 3491 */

/* 3492 */

/* 3493 */

/* 3494 */

/* 3495 */

/* 3496 */

/* 3497 */

/* 3498 */

/* 3499 */

/* 35 */

/* 350 */

/* 3500 */

/* 3501 */

/* 3502 */

/* 3503 */

/* 3504 */

/* 3505 */

/* 3506 */

/* 3507 */

/* 3508 */

/* 3509 */

/* 351 */

/* 3510 */

/* 3511 */

/* 3512 */

/* 3513 */

/* 3514 */

/* 3515 */

/* 3516 */

/* 3517 */

/* 3518 */

/* 3519 */

/* 352 */

/* 3520 */

/* 3521 */

/* 3522 */

/* 3523 */

/* 3524 */

/* 3525 */

/* 3526 */

/* 3527 */

/* 3528 */

/* 3529 */

/* 353 */

/* 3530 */

/* 3531 */

/* 3532 */

/* 3533 */

/* 3534 */

/* 3535 */

/* 3536 */

/* 3537 */

/* 3538 */

/* 3539 */

/* 354 */

/* 3540 */

/* 3541 */

/* 3542 */

/* 3543 */

/* 3544 */

/* 3545 */

/* 3546 */

/* 3547 */

/* 3548 */

/* 3549 */

/* 355 */

/* 3550 */

/* 3551 */

/* 3552 */

/* 3553 */

/* 3554 */

/* 3555 */

/* 3556 */

/* 3557 */

/* 3558 */

/* 3559 */

/* 356 */

/* 3560 */

/* 3561 */

/* 3562 */

/* 3563 */

/* 3564 */

/* 3565 */

/* 3566 */

/* 3567 */

/* 3568 */

/* 3569 */

/* 357 */

/* 3570 */

/* 3571 */

/* 3572 */

/* 3573 */

/* 3574 */

/* 3575 */

/* 3576 */

/* 3577 */

/* 3578 */

/* 3579 */

/* 358 */

/* 3580 */

/* 3581 */

/* 3582 */

/* 3583 */

/* 3584 */

/* 3585 */

/* 3586 */

/* 3587 */

/* 3588 */

/* 3589 */

/* 359 */

/* 3590 */

/* 3591 */

/* 3592 */

/* 3593 */

/* 3594 */

/* 3595 */

/* 3596 */

/* 3597 */

/* 3598 */

/* 3599 */

/* 36 */

/* 360 */

/* 3600 */

/* 3601 */

/* 3602 */

/* 3603 */

/* 3604 */

/* 3605 */

/* 3606 */

/* 3607 */

/* 3608 */

/* 3609 */

/* 361 */

/* 3610 */

/* 3611 */

/* 3612 */

/* 3613 */

/* 3614 */

/* 3615 */

/* 3616 */

/* 3617 */

/* 3618 */

/* 3619 */

/* 362 */

/* 3620 */

/* 3621 */

/* 3622 */

/* 3623 */

/* 3624 */

/* 3625 */

/* 3626 */

/* 3627 */

/* 3628 */

/* 3629 */

/* 363 */

/* 3630 */

/* 3631 */

/* 3632 */

/* 3633 */

/* 3634 */

/* 3635 */

/* 3636 */

/* 3637 */

/* 3638 */

/* 3639 */

/* 364 */

/* 3640 */

/* 3641 */

/* 3642 */

/* 3643 */

/* 3644 */

/* 3645 */

/* 3646 */

/* 3647 */

/* 3648 */

/* 3649 */

/* 365 */

/* 3650 */

/* 3651 */

/* 3652 */

/* 3653 */

/* 3654 */

/* 3655 */

/* 3656 */

/* 3657 */

/* 3658 */

/* 3659 */

/* 366 */

/* 3660 */

/* 3661 */

/* 3662 */

/* 3663 */

/* 3664 */

/* 3665 */

/* 3666 */

/* 3667 */

/* 3668 */

/* 3669 */

/* 367 */

/* 3670 */

/* 3671 */

/* 3672 */

/* 3673 */

/* 3674 */

/* 3675 */

/* 3676 */

/* 3677 */

/* 3678 */

/* 3679 */

/* 368 */

/* 3680 */

/* 369 */

/* 37 */

/* 370 */

/* 371 */

/* 372 */

/* 373 */

/* 374 */

/* 375 */

/* 376 */

/* 377 */

/* 378 */

/* 379 */

/* 38 */

/* 380 */

/* 381 */

/* 382 */

/* 383 */

/* 384 */

/* 385 */

/* 386 */

/* 387 */

/* 388 */

/* 389 */

/* 39 */

/* 390 */

/* 391 */

/* 392 */

/* 393 */

/* 394 */

/* 395 */

/* 396 */

/* 397 */

/* 398 */

/* 399 */

/* 4 */

/* 40 */

/* 400 */

/* 401 */

/* 402 */

/* 403 */

/* 404 */

/* 405 */

/* 406 */

/* 407 */

/* 408 */

/* 409 */

/* 41 */

/* 410 */

/* 411 */

/* 412 */

/* 413 */

/* 414 */

/* 415 */

/* 416 */

/* 417 */

/* 418 */

/* 419 */

/* 42 */

/* 420 */

/* 421 */

/* 422 */

/* 423 */

/* 424 */

/* 425 */

/* 426 */

/* 427 */

/* 428 */

/* 429 */

/* 43 */

/* 430 */

/* 431 */

/* 432 */

/* 433 */

/* 434 */

/* 435 */

/* 436 */

/* 437 */

/* 438 */

/* 439 */

/* 44 */

/* 440 */

/* 441 */

/* 442 */

/* 443 */

/* 444 */

/* 445 */

/* 446 */

/* 447 */

/* 448 */

/* 449 */

/* 45 */

/* 450 */

/* 451 */

/* 452 */

/* 453 */

/* 454 */

/* 455 */

/* 456 */

/* 457 */

/* 458 */

/* 459 */

/* 46 */

/* 460 */

/* 461 */

/* 462 */

/* 463 */

/* 464 */

/* 465 */

/* 466 */

/* 467 */

/* 468 */

/* 469 */

/* 47 */

/* 470 */

/* 471 */

/* 472 */

/* 473 */

/* 474 */

/* 475 */

/* 476 */

/* 477 */

/* 478 */

/* 479 */

/* 48 */

/* 480 */

/* 481 */

/* 482 */

/* 483 */

/* 484 */

/* 485 */

/* 486 */

/* 487 */

/* 488 */

/* 489 */

/* 49 */

/* 490 */

/* 491 */

/* 492 */

/* 493 */

/* 494 */

/* 495 */

/* 496 */

/* 497 */

/* 498 */

/* 499 */

/* 5 */

/* 50 */

/* 500 */

/* 501 */

/* 502 */

/* 503 */

/* 504 */

/* 505 */

/* 506 */

/* 507 */

/* 508 */

/* 509 */

/* 51 */

/* 510 */

/* 511 */

/* 512 */

/* 513 */

/* 514 */

/* 515 */

/* 516 */

/* 517 */

/* 518 */

/* 519 */

/* 52 */

/* 520 */

/* 521 */

/* 522 */

/* 523 */

/* 524 */

/* 525 */

/* 526 */

/* 527 */

/* 528 */

/* 529 */

/* 53 */

/* 530 */

/* 531 */

/* 532 */

/* 533 */

/* 534 */

/* 535 */

/* 536 */

/* 537 */

/* 538 */

/* 539 */

/* 54 */

/* 540 */

/* 541 */

/* 542 */

/* 543 */

/* 544 */

/* 545 */

/* 546 */

/* 547 */

/* 548 */

/* 549 */

/* 55 */

/* 550 */

/* 551 */

/* 552 */

/* 553 */

/* 554 */

/* 555 */

/* 556 */

/* 557 */

/* 558 */

/* 559 */

/* 56 */

/* 560 */

/* 561 */

/* 562 */

/* 563 */

/* 564 */

/* 565 */

/* 566 */

/* 567 */

/* 568 */

/* 569 */

/* 57 */

/* 570 */

/* 571 */

/* 572 */

/* 573 */

/* 574 */

/* 575 */

/* 576 */

/* 577 */

/* 578 */

/* 579 */

/* 58 */

/* 580 */

/* 581 */

/* 582 */

/* 583 */

/* 584 */

/* 585 */

/* 586 */

/* 587 */

/* 588 */

/* 589 */

/* 59 */

/* 590 */

/* 591 */

/* 592 */

/* 593 */

/* 594 */

/* 595 */

/* 596 */

/* 597 */

/* 598 */

/* 599 */

/* 6 */

/* 60 */

/* 600 */

/* 601 */

/* 602 */

/* 603 */

/* 604 */

/* 605 */

/* 606 */

/* 607 */

/* 608 */

/* 609 */

/* 61 */

/* 610 */

/* 611 */

/* 612 */

/* 613 */

/* 614 */

/* 615 */

/* 616 */

/* 617 */

/* 618 */

/* 619 */

/* 62 */

/* 620 */

/* 621 */

/* 622 */

/* 623 */

/* 624 */

/* 625 */

/* 626 */

/* 627 */

/* 628 */

/* 629 */

/* 63 */

/* 630 */

/* 631 */

/* 632 */

/* 633 */

/* 634 */

/* 635 */

/* 636 */

/* 637 */

/* 638 */

/* 639 */

/* 64 */

/* 640 */

/* 641 */

/* 642 */

/* 643 */

/* 644 */

/* 645 */

/* 646 */

/* 647 */

/* 648 */

/* 649 */

/* 65 */

/* 650 */

/* 651 */

/* 652 */

/* 653 */

/* 654 */

/* 655 */

/* 656 */

/* 657 */

/* 658 */

/* 659 */

/* 66 */

/* 660 */

/* 661 */

/* 662 */

/* 663 */

/* 664 */

/* 665 */

/* 666 */

/* 667 */

/* 668 */

/* 669 */

/* 67 */

/* 670 */

/* 671 */

/* 672 */

/* 673 */

/* 674 */

/* 675 */

/* 676 */

/* 677 */

/* 678 */

/* 679 */

/* 68 */

/* 680 */

/* 681 */

/* 682 */

/* 683 */

/* 684 */

/* 685 */

/* 686 */

/* 687 */

/* 688 */

/* 689 */

/* 69 */

/* 690 */

/* 691 */

/* 692 */

/* 693 */

/* 694 */

/* 695 */

/* 696 */

/* 697 */

/* 698 */

/* 699 */

/* 7 */

/* 70 */

/* 700 */

/* 701 */

/* 702 */

/* 703 */

/* 704 */

/* 705 */

/* 706 */

/* 707 */

/* 708 */

/* 709 */

/* 71 */

/* 710 */

/* 711 */

/* 712 */

/* 713 */

/* 714 */

/* 715 */

/* 716 */

/* 717 */

/* 718 */

/* 719 */

/* 72 */

/* 720 */

/* 721 */

/* 722 */

/* 723 */

/* 724 */

/* 725 */

/* 726 */

/* 727 */

/* 728 */

/* 729 */

/* 73 */

/* 730 */

/* 731 */

/* 732 */

/* 733 */

/* 734 */

/* 735 */

/* 736 */

/* 737 */

/* 738 */

/* 739 */

/* 74 */

/* 740 */

/* 741 */

/* 742 */

/* 743 */

/* 744 */

/* 745 */

/* 746 */

/* 747 */

/* 748 */

/* 749 */

/* 75 */

/* 750 */

/* 751 */

/* 752 */

/* 753 */

/* 754 */

/* 755 */

/* 756 */

/* 757 */

/* 758 */

/* 759 */

/* 76 */

/* 760 */

/* 761 */

/* 762 */

/* 763 */

/* 764 */

/* 765 */

/* 766 */

/* 767 */

/* 768 */

/* 769 */

/* 77 */

/* 770 */

/* 771 */

/* 772 */

/* 773 */

/* 774 */

/* 775 */

/* 776 */

/* 777 */

/* 778 */

/* 779 */

/* 78 */

/* 780 */

/* 781 */

/* 782 */

/* 783 */

/* 784 */

/* 785 */

/* 786 */

/* 787 */

/* 788 */

/* 789 */

/* 79 */

/* 790 */

/* 791 */

/* 792 */

/* 793 */

/* 794 */

/* 795 */

/* 796 */

/* 797 */

/* 798 */

/* 799 */

/* 8 */

/* 80 */

/* 800 */

/* 801 */

/* 802 */

/* 803 */

/* 804 */

/* 805 */

/* 806 */

/* 807 */

/* 808 */

/* 809 */

/* 81 */

/* 810 */

/* 811 */

/* 812 */

/* 813 */

/* 814 */

/* 815 */

/* 816 */

/* 817 */

/* 818 */

/* 819 */

/* 82 */

/* 820 */

/* 821 */

/* 822 */

/* 823 */

/* 824 */

/* 825 */

/* 826 */

/* 827 */

/* 828 */

/* 829 */

/* 83 */

/* 830 */

/* 831 */

/* 832 */

/* 833 */

/* 834 */

/* 835 */

/* 836 */

/* 837 */

/* 838 */

/* 839 */

/* 84 */

/* 840 */

/* 841 */

/* 842 */

/* 843 */

/* 844 */

/* 845 */

/* 846 */

/* 847 */

/* 848 */

/* 849 */

/* 85 */

/* 850 */

/* 851 */

/* 852 */

/* 853 */

/* 854 */

/* 855 */

/* 856 */

/* 857 */

/* 858 */

/* 859 */

/* 86 */

/* 860 */

/* 861 */

/* 862 */

/* 863 */

/* 864 */

/* 865 */

/* 866 */

/* 867 */

/* 868 */

/* 869 */

/* 87 */

/* 870 */

/* 871 */

/* 872 */

/* 873 */

/* 874 */

/* 875 */

/* 876 */

/* 877 */

/* 878 */

/* 879 */

/* 88 */

/* 880 */

/* 881 */

/* 882 */

/* 883 */

/* 884 */

/* 885 */

/* 886 */

/* 887 */

/* 888 */

/* 889 */

/* 89 */

/* 890 */

/* 891 */

/* 892 */

/* 893 */

/* 894 */

/* 895 */

/* 896 */

/* 897 */

/* 898 */

/* 899 */

/* 9 */

/* 90 */

/* 900 */

/* 901 */

/* 902 */

/* 903 */

/* 904 */

/* 905 */

/* 906 */

/* 907 */

/* 908 */

/* 909 */

/* 91 */

/* 910 */

/* 911 */

/* 912 */

/* 913 */

/* 914 */

/* 915 */

/* 916 */

/* 917 */

/* 918 */

/* 919 */

/* 92 */

/* 920 */

/* 921 */

/* 922 */

/* 923 */

/* 924 */

/* 925 */

/* 926 */

/* 927 */

/* 928 */

/* 929 */

/* 93 */

/* 930 */

/* 931 */

/* 932 */

/* 933 */

/* 934 */

/* 935 */

/* 936 */

/* 937 */

/* 938 */

/* 939 */

/* 94 */

/* 940 */

/* 941 */

/* 942 */

/* 943 */

/* 944 */

/* 945 */

/* 946 */

/* 947 */

/* 948 */

/* 949 */

/* 95 */

/* 950 */

/* 951 */

/* 952 */

/* 953 */

/* 954 */

/* 955 */

/* 956 */

/* 957 */

/* 958 */

/* 959 */

/* 96 */

/* 960 */

/* 961 */

/* 962 */

/* 963 */

/* 964 */

/* 965 */

/* 966 */

/* 967 */

/* 968 */

/* 969 */

/* 97 */

/* 970 */

/* 971 */

/* 972 */

/* 973 */

/* 974 */

/* 975 */

/* 976 */

/* 977 */

/* 978 */

/* 979 */

/* 98 */

/* 980 */

/* 981 */

/* 982 */

/* 983 */

/* 984 */

/* 985 */

/* 986 */

/* 987 */

/* 988 */

/* 989 */

/* 99 */

/* 990 */

/* 991 */

/* 992 */

/* 993 */

/* 994 */

/* 995 */

/* 996 */

/* 997 */

/* 998 */

/* 999 */

/* : */

/* < */

/* </replacement> */

/* <BS> */

/* <ZWJ> */

/* <ZWNJ> */

/* = */

/* > */

/* ? */

/* A */

/* Adapted from https://github.com/jamiebuilds/react-loadable */

/* Add #text in case KEEP_CONTENT is set to true */

/* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */

/* Add properties to a lookup table */

/* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */

/* Allow valid data-* attributes: At least one character after "-"
          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
          We don't need to check the value; it's always URI safe. */

/* Assign config vars */

/* B */

/* BLURRING PROCRESSES */

/* Built-in method references for those with the same name as other `lodash` methods. */

/* Built-in method references that are verified to be native. */

/* CSS */

/* Check attributes, sanitize if necessary */

/* Check if dirty is correctly typed for IN_PLACE */

/* Check if element is clobbered or can clobber */

/* Check if we have attributes; if not we might have a text node */

/* Check value is safe. First, is attr inert? If so, is safe */

/* Check we can run. Otherwise fall back or ignore */

/* Check we have a DOM node from the data */

/* Clean up removed elements */

/* Convert markup to cover jQuery behavior */

/* Create a HTML document */

/* D */

/* Deep shadow DOM detected */

/* Desired Metadata
      	 m	0 EBML
       u	1   EBMLVersion 1
       u	1   EBMLReadVersion 1
       u	1   EBMLMaxIDLength 4
       u	1   EBMLMaxSizeLength 8
       s	1   DocType webm
       u	1   DocTypeVersion 4
       u	1   DocTypeReadVersion 2
       m	0 Segment
       m	1   SeekHead                            -> This is SeekPosition 0, so all SeekPositions can be calculated as (bytePos - segmentContentStartPos), which is 44 in this case
       m	2     Seek
       b	3       SeekID                          -> Buffer([0x15, 0x49, 0xA9, 0x66])  Info
       u	3       SeekPosition                    -> infoStartPos =
       m	2     Seek
       b	3       SeekID                          -> Buffer([0x16, 0x54, 0xAE, 0x6B])  Tracks
       u	3       SeekPosition { tracksStartPos }
       m	2     Seek
       b	3       SeekID                          -> Buffer([0x1C, 0x53, 0xBB, 0x6B])  Cues
       u	3       SeekPosition { cuesStartPos }
       m	1   Info
       f	2     Duration 32480                    -> overwrite, or insert if it doesn't exist
       u	2     TimecodeScale 1000000
       8	2     MuxingApp Chrome
       8	2     WritingApp Chrome
       m	1   Tracks
       m	2     TrackEntry
       u	3       TrackNumber 1
       u	3       TrackUID 31790271978391090
       u	3       TrackType 2
       s	3       CodecID A_OPUS
       b	3       CodecPrivate <Buffer 19>
       m	3       Audio
       f	4         SamplingFrequency 48000
       u	4         Channels 1
       m	2     TrackEntry
       u	3       TrackNumber 2
       u	3       TrackUID 24051277436254136
       u	3       TrackType 1
       s	3       CodecID V_VP8
       m	3       Video
       u	4         PixelWidth 1024
       u	4         PixelHeight 576
       m  1   Cues                                -> cuesStartPos
       m  2     CuePoint
       u  3       CueTime 0
       m  3       CueTrackPositions
       u  4         CueTrack 1
       u  4         CueClusterPosition 3911
       m  2     CuePoint
       u  3       CueTime 600
       m  3       CueTrackPositions
       u  4         CueTrack 1
       u  4         CueClusterPosition 3911
       m  1   Cluster
       u  2     Timecode 0
       b  2     SimpleBlock track:2 timecode:0	keyframe:true	invisible:false	discardable:false	lacing:1
      */

/* Did the hooks approve of the attribute? */

/* Execute a hook if present */

/* Exit directly if we have nothing to do */

/* F */

/* FIXME :
 :extend() is not handled specifically : its highlighting is buggy.
 Mixin usage must be inside a ruleset to be highlighted.
 At-rules (e.g. import) containing interpolations are buggy.
 Detached rulesets are highlighted as at-rules.
 A comment before a mixin usage prevents the latter to be properly highlighted.
 */

/* Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". */

/* Falls through... */

/* Fix IE's strange behavior with manipulated textNodes #89 */

/* From FvD 13.37, CSS Color Module Level 3 */

/* Get node iterator */

/* Get the element's text content */

/* Go backwards over all attributes; safely remove bad ones */

/* Handle invalid data-* attribute set by try-catching it */

/* Here we test for a broken feature in Edge that might cause mXSS */

/* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */

/* If dirty is a DOM element, append to an empty document to avoid
           elements being stripped by the parser */

/* If we sanitized `dirty` in-place, return it. */

/* Ignore */

/* Initialize shared config vars if necessary. */

/* Initialize the document to work on */

/* Inspired by snippet shared by Jeremy Crane at: https://github.com/mzabriskie/react-draggable/issues/402 */

/* Is `value` valid for this attribute? */

/* Keep content except for black-listed elements */

/* Listen for a css animation to detect element display/re-attach */

/* Make sure attribute cannot clobber */

/* Make sure we have a string to sanitize.
        DO NOT return early, as this will return the wrong type if
        the user has requested a DOM object rather than a string */

/* Math.imul(h, m): */

/* Math.imul(k, m): */

/* Means: The term is empty */

/* Merge configuration parameters */

/* Node is already a body, use as is */

/* Node.js helper references. */

/* Now let's check the element's type and name */

/* Now start iterating over the created document */

/* Original Metadata
      	 m  0	EBML
       u  1	  EBMLVersion 1
       u  1	  EBMLReadVersion 1
       u  1	  EBMLMaxIDLength 4
       u  1	  EBMLMaxSizeLength 8
       s  1	  DocType webm
       u  1	  DocTypeVersion 4
       u  1	  DocTypeReadVersion 2
       m  0	Segment
       m  1	  Info                                segmentContentStartPos, all CueClusterPositions provided in info.cues will be relative to here and will need adjusted
       u  2	    TimecodeScale 1000000
       8  2	    MuxingApp Chrome
       8  2	    WritingApp Chrome
       m  1	  Tracks                              tracksStartPos
       m  2	    TrackEntry
       u  3	      TrackNumber 1
       u  3	      TrackUID 31790271978391090
       u  3	      TrackType 2
       s  3	      CodecID A_OPUS
       b  3	      CodecPrivate <Buffer 19>
       m  3	      Audio
       f  4	        SamplingFrequency 48000
       u  4	        Channels 1
       m  2	    TrackEntry
       u  3	      TrackNumber 2
       u  3	      TrackUID 24051277436254136
       u  3	      TrackType 1
       s  3	      CodecID V_VP8
       m  3	      Video
       u  4	        PixelWidth 1024
       u  4	        PixelHeight 576
       m  1	  Cluster                             clusterStartPos
       u  2	    Timecode 0
       b  2	    SimpleBlock track:2 timecode:0	keyframe:true	invisible:false	discardable:false	lacing:1
      */

/* P */

/* Parse profile info */

/* Patterns in command substitution. */

/* Process inline math */

/* Remove attribute */

/* Remove element if anything forbids its presence */

/* Remove first element node (ours) if FORCE_BODY is set */

/* Remove in case a noscript/noembed XSS is suspected */

/* Remove title to fix a mXSS bug in older MS Edge */

/* Return sanitized string or DOM */

/* S */

/* SATURATION PROCRESSES */

/* Sanitize attribute content to be template-safe */

/* Sanitize element content to be template-safe */

/* Sanitize final string template-safe */

/* Sanitize tags and elements */

/* Set configuration parameters */

/* Shadow DOM detected, sanitize it */

/* Shallow clone an object */

/* Shield configuration object from tampering */

/* Stringify, in case dirty is an object */

/* Take care of an mXSS pattern using namespace switches */

/* Take care of an mXSS pattern using p, br inside svg, math */

/* This content is auto-generated to include some prismjs language components: */

/* This is a generated file. Do not edit directly. */

/* Use createHTMLDocument in case DOMParser is not available */

/* Use the DOMParser API by default, fallback later if needs be */

/* W */

/* WEBPACK VAR INJECTION */

/* Work around a security issue in jQuery 3.0 */

/* Work on whole document or just its body */

/* Z */

/* [ */

/* \ */

/* \f */

/* \n */

/* \r */

/* \t */

/* \v */

/* ^ */

/* _ */

/* a */

/* array */

/* asyncFunction */

/* b */

/* bigint */

/* boolean */

/* c */

/* d */

/* date */

/* empty */

/* error */

/* eslint complexity: [2, 18], max-statements: [2, 33] */

/* eslint no-invalid-this: 1 */

/* eslint react/destructuring-assignment: 1 */

/* eslint react/no-array-index-key: 0 */

/* eslint-disable */

/* eslint-disable array-element-newline */

/* eslint-disable camelcase */

/* eslint-disable class-methods-use-this */

/* eslint-disable default-case */

/* eslint-disable import/prefer-default-export */

/* eslint-disable jsx-a11y/click-events-have-key-events */

/* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions, jsx-a11y/no-static-element-interactions */

/* eslint-disable jsx-a11y/media-has-caption */

/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */

/* eslint-disable jsx-a11y/no-static-element-interactions */

/* eslint-disable max-len */

/* eslint-disable max-lines */

/* eslint-disable max-lines, max-len */

/* eslint-disable max-statements */

/* eslint-disable max-statements, max-lines */

/* eslint-disable no-bitwise */

/* eslint-disable no-bitwise, no-cond-assign */

/* eslint-disable no-case-declarations */

/* eslint-disable no-console */

/* eslint-disable no-invalid-this */

/* eslint-disable no-lonely-if */

/* eslint-disable no-mixed-operators */

/* eslint-disable no-mixed-operators, max-len */

/* eslint-disable no-param-reassign */

/* eslint-disable no-proto */

/* eslint-disable no-restricted-syntax */

/* eslint-disable no-restricted-syntax, no-invalid-this */

/* eslint-disable no-return-assign */

/* eslint-disable no-underscore-dangle */

/* eslint-disable no-underscore-dangle, no-proto */

/* eslint-disable no-unneeded-ternary */

/* eslint-disable no-unused-vars */

/* eslint-disable no-use-before-define, react/no-multi-comp */

/* eslint-disable node/no-deprecated-api */

/* eslint-disable react/forbid-foreign-prop-types */

/* eslint-disable react/no-danger */

/* eslint-disable react/no-unused-prop-types */

/* eslint-disable react/no-unused-state, react/no-unused-prop-types */

/* eslint-disable require-jsdoc, valid-jsdoc */

/* eslint-disable-next-line */

/* eslint-disable-next-line @typescript-eslint/no-this-alias */

/* eslint-disable-next-line react/no-danger */

/* eslint-enable */

/* eslint-enable jsx-a11y/click-events-have-key-events */

/* eslint-enable jsx-a11y/no-static-element-interactions */

/* eslint-enable no-invalid-this */

/* eslint-enable no-unused-vars */

/* eslint-enable no-use-before-define */

/* eslint-enable react/no-danger */

/* eslint-env browser */

/* f */

/* falls through */

/* function */

/* generatorFunction */

/* global Symbol */

/* global define */

/* global global */

/* global window */

/* globals
	Atomics,
	SharedArrayBuffer,
*/

/* globals __webpack_amd_options__ */

/* globals self */

/* harmony default export */

/* harmony export (binding) */

/* harmony import */

/* harmony reexport (module object) */

/* harmony reexport (safe) */

/* harmony reexport (unknown) */

/* ie throws if no active element */

/* import() */

/* istanbul ignore else  */

/* istanbul ignore else */

/* istanbul ignore if  */

/* istanbul ignore next  */

/* istanbul ignore next */

/* k */

/* k >>> r: */

/* map */

/* n */

/* non-linear */

/* noop */

/* null */

/* number */

/* object */

/* p */

/* promise */

/* r */

/* rawLength */

/* regExp */

/* s */

/* set */

/* should never change: */

/* string */

/* symbol */

/* t */

/* this is IE 8. */

/* this.options.columns !== true && */

/* tslint:disable:max-line-length */

/* u */

/* undefined */

/* v */

/* w */

/* weakMap */

/* weakSet */

/* x */

/* z */

/* { */

/* | */

/* } */

/*!
  Copyright (c) 2015 Jed Watson.
  Based on code that is Copyright 2013-2015, Facebook, Inc.
  All rights reserved.
*/

/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */

/*!
 * regjsgen 0.5.2
 * Copyright 2014-2020 Benjamin Tan <https://ofcr.se/>
 * Available under the MIT license <https://github.com/bnjmnt4n/regjsgen/blob/master/LICENSE-MIT.txt>
 */

/*! @license DOMPurify | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.0.8/LICENSE */

/*! https://mths.be/punycode v1.4.1 by @mathias */

/*! https://mths.be/regenerate v1.3.3 by @mathias | MIT license */

/*#__PURE__*/

/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */

/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */

/**
		 * Creates an array of chunk objects representing both higlightable and non highlightable pieces of text that match each search word.
		 * @return Array of "chunks" (where a Chunk is { start:number, end:number, highlight:boolean })
		 */

/**
		 * Given a set of chunks to highlight, create an additional set of chunks
		 * to represent the bits of text between the highlighted text.
		 * @param chunksToHighlight {start:number, end:number}[]
		 * @param totalLength number
		 * @return {start:number, end:number, highlight:boolean}[]
		 */

/**
		 * Takes an array of {start:number, end:number} objects and combines chunks that overlap into single chunks.
		 * @return {start:number, end:number}[]
		 */

/**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

/**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */

/**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */

/**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */

/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */

/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */

/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */

/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */

/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */

/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */

/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */

/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */

/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */

/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */

/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */

/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */

/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */

/**
	 * Highlights all occurrences of search terms (searchText) within a string (textToHighlight).
	 * This function returns an array of strings and <span>s (wrapping highlighted words).
	 */

/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */

/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */

/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

/**
	* Active `debug` instances.
	*/

/**
	* Array order.
	*
	* ## Notes
	*
	* -   The array order is either row-major (C-style) or column-major (Fortran-style).
	*
	*
	* @private
	* @name order
	* @memberof ndarray.prototype
	* @type {string}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var order = x.order;
	* // returns 'row-major'
	*/

/**
	* Calculate the next term of the series.
	*
	* @private
	* @returns {Array} series expansion terms
	*/

/**
	* Calculate the next term of the series.
	*
	* @private
	* @returns {number} series expansion term
	*/

/**
	* Calculate the numerator and denominator of the next term of the series.
	*
	* @private
	* @returns {Array} series expansion terms
	*/

/**
	* Calculates roots.
	*
	* @private
	* @param {number} x - function value
	* @returns {Array} function roots
	*/

/**
	* Calculates roots.
	*
	* @private
	* @param {number} x - input value
	* @returns {Array} roots
	*/

/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/

/**
	* Compare the elements of the input array.
	*
	* @private
	* @param {number} a - first number
	* @param {number} b - second number
	* @returns {boolean} comparison result
	*/

/**
	* Constant function.
	*
	* @private
	* @returns {*} constant value
	*/

/**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/

/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/

/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/

/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/

/**
	* Evaluates a polynomial.
	*
	* @private
	* @param {number} x - value at which to evaluate a polynomial
	* @returns {number} evaluated polynomial
	*/

/**
	* Evaluates the cumulative distribution function (CDF) for a Normal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/

/**
	* Evaluates the cumulative distribution function (CDF) for a Student's t distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/

/**
	* Evaluates the cumulative distribution function (CDF) for a binomial distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/

/**
	* Evaluates the cumulative distribution function (CDF) for a gamma distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/

/**
	* Evaluates the cumulative distribution function (CDF) for a lognormal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/

/**
	* Evaluates the cumulative distribution function (CDF) for a uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/

/**
	* Evaluates the cumulative distribution function (CDF) for an F distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 10.0 );
	* // returns <number>
	*/

/**
	* Evaluates the cumulative distribution function (CDF) for an exponential distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/

/**
	* Evaluates the cumulative distribution function (CDF) of a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated cumulative distribution function
	*
	* @example
	* var y = cdf( 10.0 );
	* // returns <number>
	*/

/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a lognormal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.5 );
	* // returns <number>
	*/

/**
	* Evaluates the probability density function (PDF) for a Student's t distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/

/**
	* Evaluates the probability density function (PDF) for a lognormal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.5 );
	* // returns <number>
	*/

/**
	* Evaluates the probability density function (PDF) for a normal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated probability density function
	*
	* @example
	* var y = pdf( -3.14 );
	* // returns <number>
	*/

/**
	* Evaluates the probability density function (PDF) for a uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.0 );
	* // returns <number>
	*/

/**
	* Evaluates the probability density function (PDF) for an exponential distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/

/**
	* Evaluates the probability density function (PDF) of a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated probability density function
	*
	* @example
	* var y = pdf( 10.0 );
	* // returns <number>
	*/

/**
	* Evaluates the probability mass function (PMF) for a Bernoulli distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PMF
	*
	* @example
	* var y = pmf( 2.0 );
	* // returns <number>
	*/

/**
	* Evaluates the probability mass function (PMF) for a binomial distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PMF
	*
	* @example
	* var y = pmf( 2.0 );
	* // returns <number>
	*/

/**
	* Evaluates the probability mass function (PMF) of a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PMF
	*
	* @example
	* var y = pmf( 10.0 );
	* // returns <number>
	*/

/**
	* Evaluates the quantile function for a Student's t distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/

/**
	* Evaluates the quantile function for a lognormal distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/

/**
	* Evaluates the quantile function for a normal distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/

/**
	* Evaluates the quantile function for an exponential distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/

/**
	* Evaluates the quantile function of a degenerate distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.5 );
	* // returns <number>
	*/

/**
	* Finishes an iterator.
	*
	* @private
	* @param {*} [value] - value to return
	* @returns {Object} iterator protocol-compliant object
	*/

/**
	* Flattens an array and deep copies array elements.
	*
	* @private
	* @param {Array} arr - array to flatten
	* @throws {TypeError} must provide an array
	* @returns {Array} flattened array
	*/

/**
	* Flattens an array.
	*
	* @private
	* @param {Array} arr - array to flatten
	* @throws {TypeError} must provide an array
	* @returns {Array} flattened array
	*/

/**
	* Generates a normally distributed pseudorandom number.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var r = randn();
	* // returns <number>
	*/

/**
	* Generates a pseudorandom integer on the interval \\( [1,2^{31}-1) \\).
	*
	* @private
	* @returns {integer32} pseudorandom integer
	*
	* @example
	* var v = minstd();
	* // returns <number>
	*/

/**
	* Generates a pseudorandom integer on the interval \\( [1,2^{31}-1) \\).
	*
	* @private
	* @returns {integer32} pseudorandom integer
	*/

/**
	* Generates a pseudorandom integer on the interval \\( [1,2^{32}-1) \\).
	*
	* @private
	* @returns {uinteger32} pseudorandom integer
	*
	* @example
	* var r = mt19937();
	* // returns <number>
	*/

/**
	* Generates a pseudorandom number on the interval \\( [0,1) \\).
	*
	* ## Notes
	*
	* -   The original C implementation credits Isaku Wada for this algorithm (2002/01/09).
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var r = normalized();
	* // returns <number>
	*/

/**
	* Generates a pseudorandom number on the interval \\( [0,1) \\).
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = normalized();
	* // returns <number>
	*/

/**
	* Generates a pseudorandom number on the interval \\( [0,1) \\).
	*
	* @private
	* @returns {number} pseudorandom number
	*/

/**
	* Gets an element of an nd-array-like object .
	*
	* @private
	* @param {number} i - row index
	* @param {number} j - column index
	* @returns {number} number stored in row i and column j
	*/

/**
	* If provided a value, the accumulator function returns an updated corrected sample standard deviation. If not provided a value, the accumulator function returns the current corrected sample standard deviation.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} corrected sample standard deviation or null
	*/

/**
	* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} mean value or null
	*/

/**
	* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.
	*
	* @private
	* @param {number} [x] - new value
	* @returns {(number|null)} sum or null
	*/

/**
	* Index offset which specifies the buffer index at which to start iterating over array elements.
	*
	* @private
	* @name offset
	* @memberof ndarray.prototype
	* @type {NonNegativeInteger}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var o = x.offset;
	* // returns 0
	*/

/**
	* Index strides which specify how to access data along corresponding array dimensions.
	*
	* @private
	* @name strides
	* @memberof ndarray.prototype
	* @type {IntegerArray}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var s = x.strides;
	* // returns [ 2, 1 ]
	*/

/**
	* Information about the memory layout of the array.
	*
	* @private
	* @name flags
	* @memberof ndarray.prototype
	* @type {Object}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var flgs = x.flags;
	* // returns <Object>
	*/

/**
	* Length of the array.
	*
	* @private
	* @name length
	* @memberof ndarray.prototype
	* @type {NonNegativeInteger}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var len = x.length;
	* // returns 6
	*/

/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/

/**
	* Number of dimensions.
	*
	* @private
	* @name ndims
	* @memberof ndarray
	* @type {PositiveInteger}
	*
	* @example
	* var ndims = ndarray.ndims;
	* // returns <number>
	*/

/**
	* Number of dimensions.
	*
	* @private
	* @name ndims
	* @memberof ndarray.prototype
	* @type {PositiveInteger}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var ndims = x.ndims;
	* // returns <number>
	*/

/**
	* Partially applied function.
	*
	* @private
	* @param {...*} [args] - function arguments
	* @returns {*} partially applied function result
	*/

/**
	* Pointer to the underlying data buffer.
	*
	* @private
	* @name data
	* @memberof ndarray.prototype
	* @type {(Array|TypedArray|Buffer)}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var data = x.data;
	* // returns [ 1, 2, 3, 4, 5, 6 ]
	*/

/**
	* Pretty-print output of ANOVA.
	*
	* @private
	* @param {Object} [opts] - options object
	* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point
	* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision
	* @throws {TypeError} options argument must be an object
	* @throws {TypeError} must provide valid options
	* @returns {string} formatted results
	*/

/**
	* Returns a new iterator.
	*
	* @private
	* @returns {Iterator} iterator
	*/

/**
	* Returns a normally distributed pseudorandom number with mean `mu` and standard deviation `sigma`.
	*
	* @private
	* @param {number} mu - mean
	* @param {PositiveNumber} sigma - standard deviation
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = normal2( 0.0, 1.0 );
	* // returns <number>
	*
	* @example
	* var v = normal2( 0.0, -1.0 );
	* // returns NaN
	*/

/**
	* Returns a pseudorandom number drawn from a discrete uniform distribution with minimum support `a` and maximum support `b`.
	*
	* @private
	* @param {integer} a - minimum support
	* @param {integer} b - maximum support
	* @returns {integer} pseudorandom number
	*
	* @example
	* var v = discreteUniform2( 1, 10 );
	* // returns <number>
	*
	* @example
	* var v = discreteUniform2( 1, 0 );
	* // returns NaN
	*/

/**
	* Returns a pseudorandom number drawn from a discrete uniform distribution with minimum support `a` and maximum support `b`.
	*
	* @private
	* @returns {integer} pseudorandom number
	*
	* @example
	* var v = discreteUniform1();
	* // returns <number>
	*/

/**
	* Returns a pseudorandom number drawn from an exponential distribution with bound parameter `lambda`.
	*
	* @private
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = exponential1();
	* // returns <number>
	*/

/**
	* Returns a pseudorandom number drawn from an exponential distribution with parameter `lambda`.
	*
	* @private
	* @param {PositiveNumber} lambda - rate parameter
	* @returns {NonNegativeNumber} pseudorandom number
	*
	* @example
	* var v = exponential2( 4.8 );
	* // returns <number>
	*/

/**
	* Returns a pseudorandom number from a normal distribution with bound parameters `mu` and `sigma`.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = normal1();
	* // returns <number>
	*/

/**
	* Returns a random number drawn from a binomial distribution with bound parameter values.
	*
	* @private
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var r = binomial1();
	* // returns <number>
	*/

/**
	* Returns a random number drawn from a binomial distribution.
	*
	* @private
	* @param {PositiveInteger} n - number of trials
	* @param {Probability} p - success probability
	* @returns {NonNegativeInteger} pseudorandom number
	*
	* @example
	* var r = binomial2( 20, 0.8 );
	* // returns <number>
	*/

/**
	* Returns a random permutation of elements in `arr`.
	*
	* @private
	* @param {ArrayLike} arr - array-like object to shuffle
	* @param {Options} [options] - function options
	* @param {string} [options.copy] - string indicating whether to return a copy (`deep`,`shallow` or `none`)
	* @throws {TypeError} first argument must be array-like
	* @throws {TypeError} `options` must be an object
	* @throws {TypeError} must provide valid options
	* @returns {ArrayLike} the shuffled array-like object
	*
	* @example
	* var data = [ 1, 2, 3 ];
	* var out = shuffle( data );
	* // e.g., returns [ 3, 1, 2 ]
	*
	* @example
	* var data = [ 1, 2, 3 ];
	* var out = shuffle( data, {
	*     'copy': 'none'
	* });
	* var bool = ( data === out );
	* // returns true
	*/

/**
	* Returns a uniformly distributed pseudorandom number on the interval \\( [0,1) \\).
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = uniform();
	* // returns <number>
	*/

/**
	* Returns a uniformly distributed pseudorandom number with minimum support `a` and maximum support `b`.
	*
	* @private
	* @param {number} a - minimum support (inclusive)
	* @param {number} b - maximum support (exclusive)
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = uniform2( 0.0, 1.0 );
	* // returns <number>
	*
	* @example
	* var v = uniform2( 1.0, 0.0 );
	* // returns NaN
	*/

/**
	* Returns a uniformly distributed pseudorandom number with minimum support `a` and maximum support `b`.
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var v = uniform1();
	* // returns <number>
	*/

/**
	* Returns an array element located at a specified linear index.
	*
	* @private
	* @name iget
	* @memberof ndarray.prototype
	* @type {Function}
	* @param {integer} idx - linear index
	* @returns {*} array element
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var v = x.iget( 3 );
	* // returns 4
	*/

/**
	* Returns an array element located at a specified linear index.
	*
	* @private
	* @param {integer} idx - linear view index
	* @throws {TypeError} index must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {*} array element
	*/

/**
	* Returns an array element.
	*
	* @private
	* @name get
	* @memberof ndarray.prototype
	* @type {Function}
	* @param {...integer} idx - indices
	* @returns {*} array element
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var v = x.get( 1, 1 );
	* // returns 4
	*/

/**
	* Returns an array element.
	*
	* @private
	* @param {...integer} idx - indices
	* @throws {TypeError} provided indices must be integer valued
	* @throws {RangeError} index exceeds array dimensions
	* @returns {*} array element
	*/

/**
	* Returns an array element.
	*
	* @private
	* @param {integer} i - index
	* @throws {TypeError} index must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {*} array element
	*/

/**
	* Returns an array element.
	*
	* @private
	* @param {integer} i - index for first dimension
	* @param {integer} j - index for second dimension
	* @param {integer} k - index for third dimension
	* @param {integer} l - index for fourth dimension
	* @throws {TypeError} index for first dimension must be an integer value
	* @throws {TypeError} index for second dimension must be an integer value
	* @throws {TypeError} index for third dimension must be an integer value
	* @throws {TypeError} index for fourth dimension must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {*} array element
	*/

/**
	* Returns an array element.
	*
	* @private
	* @param {integer} i - index for first dimension
	* @param {integer} j - index for second dimension
	* @param {integer} k - index for third dimension
	* @throws {TypeError} index for first dimension must be an integer value
	* @throws {TypeError} index for second dimension must be an integer value
	* @throws {TypeError} index for third dimension must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {*} array element
	*/

/**
	* Returns an array element.
	*
	* @private
	* @param {integer} i - index for first dimension
	* @param {integer} j - index for second dimension
	* @throws {TypeError} index for first dimension must be an integer value
	* @throws {TypeError} index for second dimension must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {*} array element
	*/

/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
	*
	* @private
	* @returns {Object} iterator protocol-compliant object
	*/

/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/

/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {*} seed
	*/

/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMINSTD} seed
	*/

/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/

/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/

/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/

/**
	* Returns the current PRNG state.
	*
	* ## Notes
	*
	* -   The PRNG state array is comprised of a preamble followed by `2` sections:
	*
	*     0.  preamble (version + number of sections)
	*     1.  internal PRNG state
	*     2.  PRNG seed
	*
	* -   The first element of the PRNG state array preamble is the state array schema version.
	*
	* -   The second element of the PRNG state array preamble is the number of state array sections (i.e., `2`).
	*
	* -   The first element of each section following the preamble specifies the section length. The remaining section elements comprise the section contents.
	*
	* @private
	* @returns {PRNGStateMINSTD} current state
	*/

/**
	* Returns the current PRNG state.
	*
	* ## Notes
	*
	* -   The PRNG state array is comprised of a preamble followed by `3` sections:
	*
	*     0.  preamble (version + number of sections)
	*     1.  internal PRNG state
	*     2.  auxiliary state information
	*     3.  PRNG seed
	*
	* -   The first element of the PRNG state array preamble is the state array schema version.
	*
	* -   The second element of the PRNG state array preamble is the number of state array sections (i.e., `3`).
	*
	* -   The first element of each section following the preamble specifies the section length. The remaining section elements comprise the section contents.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/

/**
	* Returns the current PRNG state.
	*
	* ## Notes
	*
	* -   The PRNG state array is comprised of a preamble followed by `3` sections:
	*
	*     0.  preamble (version + number of sections)
	*     1.  shuffle table
	*     2.  internal PRNG state
	*     3.  PRNG seed
	*
	* -   The first element of the PRNG state array preamble is the state array schema version.
	*
	* -   The second element of the PRNG state array preamble is the number of state array sections (i.e., `3`).
	*
	* -   The first element of each section following the preamble specifies the section length. The remaining section elements comprise the section contents.
	*
	* @private
	* @returns {PRNGStateMINSTD} current state
	*/

/**
	* Returns the current PRNG state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/

/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {*} current state
	*/

/**
	* Returns the current pseudorandom number generator state.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/

/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/

/**
	* Samples elements from a population.
	*
	* @private
	* @param {Options} [options] - function options
	* @param {NonNegativeInteger} [options.size] - sample size
	* @param {boolean} [options.replace=true] - boolean indicating whether to sample with replacement
	* @param {boolean} [options.mutate=false] - boolean indicating whether to mutate the `pool` when sampling without replacement
	* @throws {TypeError} options argument must be an object
	* @throws {TypeError} must provide valid options
	* @throws {RangeError} `size` option must be less than or equal to the population when the `replace` option is `false`
	* @returns {Array} sample
	*/

/**
	* Samples elements from an array-like object.
	*
	* @private
	* @param {ArrayLike} x - array-like object from which to sample elements
	* @param {Options} [options] - function options
	* @param {NonNegativeInteger} [options.size] - sample size
	* @param {ProbabilityArray} [options.probs] - element probabilities
	* @param {boolean} [options.replace=true] - boolean indicating whether to sample with replacement
	* @throws {TypeError} first argument must be array-like
	* @throws {TypeError} options argument must be an object
	* @throws {TypeError} must provide valid options
	* @throws {RangeError} `size` option must be less than or equal to the length of `x` when the `replace` option is `false`
	* @returns {Array} sample
	*/

/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/

/**
	* Serializes an ndarray as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying an `ndarray` instance.
	* -   The method does **not** serialize data outside of the buffer region defined by the array configuration.
	*
	*
	* @private
	* @name toJSON
	* @memberof ndarray.prototype
	* @type {Function}
	* @returns {Object} serialized ndarray
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6, 7, 8 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 2;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var o = x.toJSON();
	* // e.g., returns { 'type': 'ndarray', 'dtype': '<dtype>', 'flags': {...}, 'offset': 0, 'order': 'row-major', 'shape': [ 3, 2 ], 'strides': [ 2, 1 ], 'data': [ 3, 4, 5, 6, 7, 8 ] }
	*/

/**
	* Serializes an ndarray as a string.
	*
	* ## Notes
	*
	* -   The method does **not** serialize data outside of the buffer region defined by the array configuration.
	*
	*
	* @private
	* @name toString
	* @memberof ndarray.prototype
	* @type {Function}
	* @returns {string} serialized ndarray
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6, 7, 8 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 2;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var str = x.toString();
	* // e.g., returns 'ndarray( [ 3, 4, 5, 6, 7, 8 ], [ 3, 2 ], [ 2, 1 ], 0, "row-major" )'
	*/

/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/

/**
	* Sets an array element located at a specified linear index.
	*
	* @private
	* @name iset
	* @memberof ndarray.prototype
	* @type {Function}
	* @param {integer} idx - linear index
	* @param {*} v - value to set
	* @returns {ndarray} ndarray instance
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var v = x.iget( 3 );
	* // returns 4
	*
	* x.iset( 3, 10 );
	*
	* var b = x.data;
	* // returns [ 1, 2, 3, 10, 5, 6 ]
	*
	* v = x.iget( 3 );
	* // returns 10
	*/

/**
	* Sets an array element located at a specified linear index.
	*
	* @private
	* @param {integer} idx - linear view index
	* @param {*} v - value to set
	* @throws {TypeError} index must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {ndarray} ndarray instance
	*/

/**
	* Sets an array element.
	*
	* @private
	* @name set
	* @memberof ndarray.prototype
	* @type {Function}
	* @param {...integer} idx - indices
	* @param {*} v - value to set
	* @returns {ndarray} ndarray instance
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var v = x.get( 1, 1 );
	* // returns 4
	*
	* x.set( 1, 1, 10 );
	*
	* var b = x.data;
	* // returns [ 1, 2, 3, 10, 5, 6 ]
	*
	* v = x.get( 1, 1 );
	* // returns 10
	*/

/**
	* Sets an array element.
	*
	* @private
	* @param {...integer} idx - indices
	* @param {*} v - value to set
	* @throws {TypeError} provided indices must be integer valued
	* @throws {RangeError} index exceeds array dimensions
	* @returns {ndarray} ndarray instance
	*/

/**
	* Sets an array element.
	*
	* @private
	* @param {integer} i - index
	* @param {*} v - value to set
	* @throws {TypeError} index must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {ndarray} ndarray instance
	*/

/**
	* Sets an array element.
	*
	* @private
	* @param {integer} i - index for first dimension
	* @param {integer} j - index for second dimension
	* @param {*} v - value to set
	* @throws {TypeError} index for first dimension must be an integer value
	* @throws {TypeError} index for second dimension must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {ndarray} ndarray instance
	*/

/**
	* Sets an array element.
	*
	* @private
	* @param {integer} i - index for first dimension
	* @param {integer} j - index for second dimension
	* @param {integer} k - index for third dimension
	* @param {*} v - value to set
	* @throws {TypeError} index for first dimension must be an integer value
	* @throws {TypeError} index for second dimension must be an integer value
	* @throws {TypeError} index for third dimension must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {ndarray} ndarray instance
	*/

/**
	* Sets an array element.
	*
	* @private
	* @param {integer} i - index for first dimension
	* @param {integer} j - index for second dimension
	* @param {integer} k - index for third dimension
	* @param {integer} l - index for fourth dimension
	* @param {*} v - value to set
	* @throws {TypeError} index for first dimension must be an integer value
	* @throws {TypeError} index for second dimension must be an integer value
	* @throws {TypeError} index for third dimension must be an integer value
	* @throws {TypeError} index for fourth dimension must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {ndarray} ndarray instance
	*/

/**
	* Sets the PRNG state.
	*
	* ## Notes
	*
	* -   If PRNG state is "shared" (meaning a state array was provided during PRNG creation and **not** copied) and one sets the generator state to a state array having a different length, the PRNG does **not** update the existing shared state and, instead, points to the newly provided state array. In order to synchronize PRNG output according to the new shared state array, the state array for **each** relevant PRNG must be **explicitly** set.
	* -   If PRNG state is "shared" and one sets the generator state to a state array of the same length, the PRNG state is updated (along with the state of all other PRNGs sharing the PRNG's state array).
	*
	* @private
	* @param {PRNGStateMINSTD} s - generator state
	* @throws {TypeError} must provide an `Int32Array`
	* @throws {Error} must provide a valid state
	*/

/**
	* Sets the PRNG state.
	*
	* ## Notes
	*
	* -   If PRNG state is "shared" (meaning a state array was provided during PRNG creation and **not** copied) and one sets the generator state to a state array having a different length, the PRNG does **not** update the existing shared state and, instead, points to the newly provided state array. In order to synchronize PRNG output according to the new shared state array, the state array for **each** relevant PRNG must be **explicitly** set.
	* -   If PRNG state is "shared" and one sets the generator state to a state array of the same length, the PRNG state is updated (along with the state of all other PRNGs sharing the PRNG's state array).
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {TypeError} must provide a `Uint32Array`
	* @throws {Error} must provide a valid state
	*/

/**
	* Sets the PRNG state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/

/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {*} s - generator state
	* @throws {Error} must provide a valid state
	*/

/**
	* Sets the pseudorandom number generator state.
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {Error} must provide a valid state
	*/

/**
	* Shape of the array.
	*
	* @private
	* @name shape
	* @memberof ndarray.prototype
	* @type {NonNegativeIntegerArray}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var s = x.shape;
	* // returns [ 3, 2 ]
	*/

/**
	* Size (in bytes) of each array element (if known).
	*
	* @private
	* @name BYTES_PER_ELEMENT
	* @memberof ndarray
	* @type {(PositiveInteger|null)}
	*
	* @example
	* var nbytes = ndarray.BYTES_PER_ELEMENT;
	* // returns <number>
	*/

/**
	* Size (in bytes) of each array element (if known).
	*
	* @private
	* @name BYTES_PER_ELEMENT
	* @memberof ndarray.prototype
	* @type {(PositiveInteger|null)}
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	*
	* var buffer = new Float64Array( [ 1, 2, 3, 4, 5, 6 ] );
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var nbytes = x.BYTES_PER_ELEMENT;
	* // returns 8
	*/

/**
	* Size (in bytes) of the array (if known).
	*
	* @private
	* @name byteLength
	* @memberof ndarray.prototype
	* @type {(NonNegativeInteger|null)}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var byteLength = x.byteLength;
	* // returns <number>
	*/

/**
	* Tests if every element in an array passes a test condition.
	*
	* @private
	* @param {*} value - value to test
	* @returns {boolean} boolean indicating whether a value is an array for which all elements pass a test condition
	*/

/**
	* Tests if every element in an array-like object passes a test condition.
	*
	* @private
	* @param {*} value - value to test
	* @returns {boolean} boolean indicating whether a value is an array-like object for which all elements pass a test condition
	*/

/**
	* The currently active debug mode names, and names to skip.
	*/

/**
	* Underlying data type.
	*
	* @private
	* @name dtype
	* @memberof ndarray
	* @type {string}
	*
	* @example
	* var dtype = ndarray.dtype;
	* // returns <string>
	*/

/**
	* Underlying data type.
	*
	* @private
	* @name dtype
	* @memberof ndarray.prototype
	* @type {string}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var dtype = x.dtype;
	* // returns <string>
	*/

/**
	* ndarray constructor.
	*
	* @private
	* @constructor
	* @param {(ArrayLikeObject|TypedArray|Buffer)} buffer - data buffer
	* @param {NonNegativeIntegerArray} shape - array shape
	* @param {IntegerArray} strides - array strides
	* @param {NonNegativeInteger} offset - index offset
	* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)
	* @returns {ndarray} ndarray instance
	*/

/**
	* ndarray constructor.
	*
	* @private
	* @constructor
	* @param {(ArrayLikeObject|TypedArray|Buffer)} buffer - data buffer
	* @param {NonNegativeIntegerArray} shape - array shape
	* @param {IntegerArray} strides - array strides
	* @param {NonNegativeInteger} offset - index offset
	* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)
	* @throws {TypeError} `buffer` argument must be an array-like object, typed-array-like, or a Buffer
	* @throws {TypeError} `shape` argument must be an array-like object containing nonnegative integers
	* @throws {Error} `shape` argument length must equal the number of dimensions
	* @throws {TypeError} `strides` argument must be an array-like object containing integers
	* @throws {Error} `strides` argument length must equal the number of dimensions
	* @throws {TypeError} `offset` argument must be a nonnegative integer
	* @throws {TypeError} `order` argument must be a supported ndarray order
	* @throws {Error} `buffer` argument must be compatible with specified meta data
	* @returns {ndarray} ndarray instance
	*/

/**
      	* @param end - if end === false then length is unknown
      	*/

/**
                 * @property {Blob} blob - Recorded frames in video/webm blob.
                 * @memberof WhammyRecorder
                 * @example
                 * recorder.stop(function() {
                 *     var blob = recorder.blob;
                 * });
                 */

/**
             * @property {ArrayBuffer} buffer - The recorded buffer object.
             * @memberof StereoAudioRecorder
             * @example
             * recorder.stop(function(){
             *     var buffer = recorder.buffer;
             * });
             */

/**
             * @property {Blob} blob - Recorded frames in video/webm blob.
             * @memberof CanvasRecorder
             * @example
             * recorder.stop(function() {
             *     var blob = recorder.blob;
             * });
             */

/**
             * @property {Blob} blob - The recorded blob object.
             * @memberof StereoAudioRecorder
             * @example
             * recorder.stop(function(){
             *     var blob = recorder.blob;
             * });
             */

/**
             * @property {DataView} view - The recorded data-view object.
             * @memberof StereoAudioRecorder
             * @example
             * recorder.stop(function(){
             *     var view = recorder.view;
             * });
             */

/**
             * @returns {boolean}
             */

/**
           * A JavaScript template-string token will look like this:
           *
           * ["template-string", [
           *     ["template-punctuation", "`"],
           *     (
           *         An array of "string" and "interpolation" tokens. This is the simple string case.
           *         or
           *         ["embedded-code", "..."] This is the token containing the embedded code.
           *                                  It also has an alias which is the language of the embedded code.
           *     ),
           *     ["template-punctuation", "`"]
           * ]]
           */

/**
           * DefaultDuration が定義されている場合は最後のフレームのdurationも考慮する
           * 単位 timecodeScale
           *
           * !!! if you need duration with seconds !!!
           * ```js
           * const nanosec = reader.duration * reader.timecodeScale;
           * const sec = nanosec / 1000 / 1000 / 1000;
           * ```
           */

/**
           * 親要素が閉じタグあり(isEnd)なら閉じタグが来るまで待つ(children queに入る)
           */

/**
           * 閉じタグ不定長の場合はスタックに積まずに即時バッファに書き込む
           */

/**
         * @param {*} key
         * @param {*} value
         * @returns {void}
         */

/**
         * @param {*} key
         * @returns {*}
         */

/**
         * @param {*} key
         * @returns {void}
         */

/**
         * @param {Function} callback
         * @param {*} [ctx=null]
         * @returns {void}
         */

/**
         * @property {Blob} blob - The recorded blob object.
         * @memberof GifRecorder
         * @example
         * recorder.stop(function(){
         *     var blob = recorder.blob;
         * });
         */

/**
         * @returns {void}
         */

/**
         * A list of connected observers.
         *
         * @private {Array<ResizeObserverSPI>}
         */

/**
         * A more abstract-ish API.
         * @method
         * @memberof Whammy
         * @example
         * recorder = new Whammy().Video(0.8, 100);
         * @param {?number} speed - 0.8
         * @param {?number} quality - 100
         */

/**
         * A recorder can have inactive, recording, paused or stopped states.
         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.
         * @memberof RecordRTC
         * @static
         * @readonly
         * @example
         * // this looper function will keep you updated about the recorder's states.
         * (function looper() {
         *     document.querySelector('h1').innerHTML = 'Recorder\'s state is: ' + recorder.state;
         *     if(recorder.state === 'stopped') return; // ignore+stop
         *     setTimeout(looper, 1000); // update after every 3-seconds
         * })();
         * recorder.startRecording();
         */

/**
         * Ask RecordRTC to auto-stop the recording after 5 minutes.
         * @method
         * @memberof RecordRTC
         * @instance
         * @example
         * var fiveMinutes = 5 * 1000 * 60;
         * recorder.setRecordingDuration(fiveMinutes, function() {
         *    var blob = this.getBlob();
         *    video.src = this.toURL();
         * });
         * 
         * // or otherwise
         * recorder.setRecordingDuration(fiveMinutes).onRecordingStopped(function() {
         *    var blob = this.getBlob();
         *    video.src = this.toURL();
         * });
         */

/**
         * Broadcasted height of content rectangle.
         *
         * @type {number}
         */

/**
         * Broadcasted width of content rectangle.
         *
         * @type {number}
         */

/**
         * Collection of resize observations that have detected changes in dimensions
         * of elements.
         *
         * @private {Array<ResizeObservation>}
         */

/**
         * Creates a new filled Buffer instance.
         * alloc(size[, fill[, encoding]])
         **/

/**
         * Destroy RecordRTC instance. Clear all recorders and objects.
         * @method
         * @memberof RecordRTC
         * @example
         * recorder.destroy();
         */

/**
         * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
         * */

/**
         * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
         */

/**
         * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
         * if value is a number.
         * Buffer.from(str[, encoding])
         * Buffer.from(array)
         * Buffer.from(buffer)
         * Buffer.from(arrayBuffer[, byteOffset[, length]])
         **/

/**
         * Get data-URI instead of Blob.
         * @param {function} callback - Callback to get the Data-URI.
         * @method
         * @memberof RecordRTC
         * @instance
         * @example
         * recorder.stopRecording(function() {
         *     recorder.getDataURL(function(dataURI) {
         *         video.src = dataURI;
         *     });
         * });
         */

/**
         * Get internal recording object (i.e. internal module) e.g. MutliStreamRecorder, MediaStreamRecorder, StereoAudioRecorder or WhammyRecorder etc.
         * @method
         * @memberof RecordRTC
         * @instance
         * @example
         * var internalRecorder = recorder.getInternalRecorder();
         * if(internalRecorder instanceof MultiStreamRecorder) {
         *     internalRecorder.addStreams([newAudioStream]);
         *     internalRecorder.resetVideoStreams([screenStream]);
         * }
         * @returns {Object} Returns internal recording object.
         */

/**
         * Get recorder's readonly state.
         * @method
         * @memberof RecordRTC
         * @example
         * var state = recorder.getState();
         * @returns {String} Returns recording state.
         */

/**
         * Get the recorded blob. Use this method inside the "stopRecording" callback.
         * @method
         * @memberof RecordRTC
         * @instance
         * @example
         * recorder.stopRecording(function() {
         *     var blob = this.getBlob();
         *
         *     var file = new File([blob], 'filename.webm', {
         *         type: 'video/webm'
         *     });
         *
         *     var formData = new FormData();
         *     formData.append('file', file); // upload "File" object rather than a "Blob"
         *     uploadToServer(formData);
         * });
         * @returns {Blob} Returns recorded data as "Blob" object.
         */

/**
         * Get virtual/temporary URL. Usage of this URL is limited to current tab.
         * @method
         * @memberof RecordRTC
         * @instance
         * @example
         * recorder.stopRecording(function() {
         *     video.src = this.toURL();
         * });
         * @returns {String} Returns a virtual/temporary URL for the recorded "Blob".
         */

/**
         * Grab the coordinates for the current mouse/touch position
         */

/**
         * If `Buffer.TYPED_ARRAY_SUPPORT`:
         *   === true    Use Uint8Array implementation (fastest)
         *   === false   Use Object implementation (most compatible, even IE6)
         *
         * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
         * Opera 11.6+, iOS 4.2+.
         *
         * Due to various browser bugs, sometimes the Object implementation will be used even
         * when the browser supports typed arrays.
         *
         * Note:
         *
         *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
         *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
         *
         *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
         *
         *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
         *     incorrect length in some situations.
        	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
         * get the Object implementation, which is slower but behaves correctly.
         */

/**
         * If a prop switches from controlled to Uncontrolled
         * reset its value to the defaultValue
         */

/**
         * Indicates whether DOM listeners have been added.
         *
         * @private {boolean}
         */

/**
         * Invoke save-as dialog to save the recorded blob into your disk.
         * @param {string} fileName - Set your own file name.
         * @method
         * @memberof RecordRTC
         * @instance
         * @example
         * recorder.stopRecording(function() {
         *     this.save('file-name');
         *
         *     // or manually:
         *     invokeSaveAsDialog(this.getBlob(), 'filename.webm');
         * });
         */

/**
         * It is equivalent to <code class="str">"recorder.getBlob()"</code> method. Usage of "getBlob" is recommended, though.
         * @property {Blob} blob - Recorded Blob can be accessed using this property.
         * @memberof RecordRTC
         * @instance
         * @readonly
         * @example
         * recorder.stopRecording(function() {
         *     var blob = this.blob;
         *
         *     // below one is recommended
         *     var blob = this.getBlob();
         * });
         */

/**
         * Keeps reference to the instance of MutationObserver.
         *
         * @private {MutationObserver}
         */

/**
         * RecordRTC version number
         * @property {String} version - Release version number.
         * @memberof RecordRTC
         * @static
         * @readonly
         * @example
         * alert(recorder.version);
         */

/**
         * Reference to the last observed content rectangle.
         *
         * @private {DOMRectInit}
         */

/**
         * Registry of the ResizeObservation instances.
         *
         * @private {Map<Element, ResizeObservation>}
         */

/**
         * Tells that controller has subscribed for Mutation Events.
         *
         * @private {boolean}
         */

/**
         * The Buffer constructor returns instances of `Uint8Array` that have their
         * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
         * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
         * and the `Uint8Array` methods. Square bracket notation works as expected -- it
         * returns a single octet.
         *
         * The `Uint8Array` prototype remains unmodified.
         */

/**
         * This method appends an array of webp images to the recorded video-blob. It takes an "array" object.
         * @type {Array.<Array>}
         * @param {Array} arrayOfWebPImages - Array of webp images.
         * @method
         * @memberof RecordRTC
         * @instance
         * @todo This method should be deprecated.
         * @example
         * var arrayOfWebPImages = [];
         * arrayOfWebPImages.push({
         *     duration: index,
         *     image: 'data:image/webp;base64,...'
         * });
         * recorder.setAdvertisementArray(arrayOfWebPImages);
         */

/**
         * This method can be used to clear/reset all the recorded data.
         * @method
         * @memberof RecordRTC
         * @instance
         * @todo Figure out the difference between "reset" and "clearRecordedData" methods.
         * @example
         * recorder.clearRecordedData();
         */

/**
         * This method gets a blob from indexed-DB storage.
         * @param {function} callback - Callback to get the recorded blob.
         * @method
         * @memberof RecordRTC
         * @instance
         * @example
         * recorder.getFromDisk(function(dataURL) {
         *     video.src = dataURL;
         * });
         */

/**
         * This method initializes the recording.
         * @method
         * @memberof RecordRTC
         * @instance
         * @todo This method should be deprecated.
         * @example
         * recorder.initRecorder();
         */

/**
         * This method is called on "onaudioprocess" event's first invocation.
         * @method {function} onAudioProcessStarted
         * @memberof StereoAudioRecorder
         * @example
         * recorder.onAudioProcessStarted: function() { };
         */

/**
         * This method is called whenever recorder's state changes. Use this as an "event".
         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.
         * @method
         * @memberof RecordRTC
         * @instance
         * @example
         * recorder.onStateChanged = function(state) {
         *     console.log('Recorder state: ', state);
         * };
         */

/**
         * This method pauses the recording. You can resume recording using "resumeRecording" method.
         * @method
         * @memberof RecordRTC
         * @instance
         * @todo Firefox is unable to pause the recording. Fix it.
         * @example
         * recorder.pauseRecording();  // pause the recording
         * recorder.resumeRecording(); // resume again
         */

/**
         * This method resets the recorder. So that you can reuse single recorder instance many times.
         * @method
         * @memberof RecordRTC
         * @instance
         * @example
         * recorder.reset();
         * recorder.startRecording();
         */

/**
         * This method resumes the recording.
         * @method
         * @memberof RecordRTC
         * @instance
         * @example
         * recorder.pauseRecording();  // first of all, pause the recording
         * recorder.resumeRecording(); // now resume it
         */

/**
         * This method starts the recording.
         * @method
         * @memberof RecordRTC
         * @instance
         * @example
         * var recorder = RecordRTC(mediaStream, {
         *     type: 'video'
         * });
         * recorder.startRecording();
         */

/**
         * This method stops the recording. It is strongly recommended to get "blob" or "URI" inside the callback to make sure all recorders finished their job.
         * @param {function} callback - Callback to get the recorded blob.
         * @method
         * @memberof RecordRTC
         * @instance
         * @example
         * recorder.stopRecording(function() {
         *     // use either "this" or "recorder" object; both are identical
         *     video.src = this.toURL();
         *     var blob = this.getBlob();
         * });
         */

/**
         * This works only with {recorderType:StereoAudioRecorder}. Use this property on "stopRecording" to verify the encoder's sample-rates.
         * @property {number} bufferSize - Buffer-size used to encode the WAV container
         * @memberof RecordRTC
         * @instance
         * @readonly
         * @example
         * recorder.stopRecording(function() {
         *     alert('Recorder used this buffer-size: ' + this.bufferSize);
         * });
         */

/**
         * This works only with {recorderType:StereoAudioRecorder}. Use this property on "stopRecording" to verify the encoder's sample-rates.
         * @property {number} sampleRate - Sample-rates used to encode the WAV container
         * @memberof RecordRTC
         * @instance
         * @readonly
         * @example
         * recorder.stopRecording(function() {
         *     alert('Recorder used these sample-rates: ' + this.sampleRate);
         * });
         */

/**
         * Use the coordinates to grab the element the drag ended on.
         * If the element is the same as the target node (or any of it's children) then we have hit a drop target and can handle the move.
         */

/**
         * emit chunk info
         */

/**
         * emit final state.
         */

/**
         * vint された parsing tag
         * @return - return false when waiting for more data
         */

/**
         * vint された現在のタグの内容の大きさを読み込む
         * @return - return false when waiting for more data
         */

/**
         * {recorderType:StereoAudioRecorder} returns ArrayBuffer object.
         * @property {ArrayBuffer} buffer - Audio ArrayBuffer, supported only in Chrome.
         * @memberof RecordRTC
         * @instance
         * @readonly
         * @example
         * recorder.stopRecording(function() {
         *     var arrayBuffer = this.buffer;
         *     alert(arrayBuffer.byteLength);
         * });
         */

/**
         * データ読み込み
         */

/**
       * @deprecated
       * metadata に対して duration と seekhead を追加した metadata を返す
       * @param metadata - 変更前の webm における ファイル先頭から 最初の Cluster 要素までの 要素
       * @param duration - Duration (TimecodeScale)
       * @param cues - cue points for clusters
       * @deprecated @param clusterPtrs - 変更前の webm における SeekHead に追加する Cluster 要素 への start pointer
       * @deprecated @param cueInfos - please use cues.
       */

/**
       * @param frame - VP8 BitStream のうち startcode をもつ frame
       * @return - WebP ファイルの ArrayBuffer
       */

/**
       * @return - SimpleBlock to WebP Filter
       */

/**
       * Attaching the event listener to the body so that touchmove will work while dragging over multiple target elements.
       */

/**
       * Creates a disposable object that invokes the specified action when disposed.
       * @param {Function} dispose Action to run during the first call to dispose.
       * The action is guaranteed to be run at most once.
       * @return {Disposable} The disposable object that runs the given action upon disposal.
       */

/**
       * Creates a new filled Buffer instance.
       * alloc(size[, fill[, encoding]])
       **/

/**
       * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
       * */

/**
       * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
       */

/**
       * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
       * if value is a number.
       * Buffer.from(str[, encoding])
       * Buffer.from(array)
       * Buffer.from(buffer)
       * Buffer.from(arrayBuffer[, byteOffset[, length]])
       **/

/**
       * If `Buffer.TYPED_ARRAY_SUPPORT`:
       *   === true    Use Uint8Array implementation (fastest)
       *   === false   Print warning and recommend using `buffer` v4.x which has an Object
       *               implementation (most compatible, even IE6)
       *
       * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
       * Opera 11.6+, iOS 4.2+.
       *
       * We report that the browser does not support typed arrays if the are not subclassable
       * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
       * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
       * for __proto__ and has a buggy typed array implementation.
       */

/**
       * Insert a token before another token in a language literal
       * As this needs to recreate the object (we cannot actually insert before keys in object literals),
       * we cannot just provide an object, we need anobject and a key.
       * @param inside The key (or language id) of the parent
       * @param before The key to insert before. If not provided, the function appends instead.
       * @param insert Object with the key/value pairs to insert
       * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.
       */

/**
       * RIFF データチャンクを作る
       */

/**
       * Replace placeholders with proper tokens after tokenizing.
       *
       * @param {object} env The environment of the `after-tokenize` hook.
       * @param {string} language The language id.
       */

/**
       * TODO: Avoid rendering children before the initial measurements have been collected.
       * At best this would just be wasting cycles.
       * Add this check into version 10 though as it could break too many ref callbacks in version 9.
       * Note that if default width/height props were provided this would still work with SSR.
      if (
        height !== 0 &&
        width !== 0
      ) {
        child = children({ height, width })
      }
      */

/**
       * The Buffer constructor returns instances of `Uint8Array` that have their
       * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
       * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
       * and the `Uint8Array` methods. Square bracket notation works as expected -- it
       * returns a single octet.
       *
       * The `Uint8Array` prototype remains unmodified.
       */

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
       * The token array will look like this
       * [
       *     ["interpolation-punctuation", "${"]
       *     "..." // JavaScript expression of the interpolation
       *     ["interpolation-punctuation", "}"]
       * ]
       */

/**
       * Tokenize all inline templating expressions matching `placeholderPattern`.
       *
       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns
       * `true` will be replaced.
       *
       * @param {object} env The environment of the `before-tokenize` hook.
       * @param {string} language The language id.
       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.
       * @param {(match: string) => boolean} [replaceFilter]
       */

/**
       * WebP ファイルにできる SimpleBlock の パスフィルタ
       */

/**
       * convert the metadata from a streaming webm bytestream to a seekable file by inserting Duration, Seekhead and Cues
       * @param originalMetadata - orginal metadata (everything before the clusters start) from media recorder
       * @param duration - Duration (TimecodeScale)
       * @param cues - cue points for clusters
       */

/**
       * extract the first occurance of an EBML tag from a flattened array of EBML data.
       * If it's a MasterElement you will also get the content. (everything between start and end)
       * @param idName - name of the EBML Element to extract.
       * @param metadata - array of EBML elements to search
       */

/**
       * print all element id names in a list
      	 * @param metadata - array of EBML elements to print
       *
      export function printElementIds(metadata: EBML.EBMLElementBuffer[]) {
      		let result: EBML.EBMLElementBuffer[] = [];
      	let start: number = -1;
      		for (let i = 0; i < metadata.length; i++) {
      		console.error("\t id: " + metadata[i].name);
      	}
      }
      */

/**
       * remove all occurances of an EBML element from an array of elements
       * If it's a MasterElement you will also remove the content. (everything between start and end)
       * @param idName - name of the EBML Element to remove.
       * @param metadata - array of EBML elements to search
       */

/**
     *
     * @param {(Token|string)[]} tokens
     * @returns {void}
     */

/**
     *
     * visible for testing
     */

/**
     *  Disposes all disposables in the group and removes them from the group but
     *  does not dispose the CompositeDisposable.
     */

/**
     *  Disposes all disposables in the group and removes them from the group.
     */

/**
     * "Transitionend" event handler.
     *
     * @private
     * @param {TransitionEvent} event
     * @returns {void}
     */

/**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */

/**
     * @ignore
     * @override
     * @return {JSX.Element}
     */

/**
     * @ignore
     * @override
     * @return {Object}
     */

/**
     * @override
     * @return {JSX.Element}
     */

/**
     * @override
     * @return {Object}
     * @property {Function} children
     * @property {Function} classNames
     * @property {Boolean} draggableTrack
     * @property {Function} onTrackDrag
     * @property {Function} onTrackMouseDown
     * @property {Function} percentages
     */

/**
     * @param [seedOrRandom=Math.random] - Control the random number generator used by the Random class instance. Pass a random number generator function with a uniform distribution over the half-open interval [0, 1[. If seed will pass it to ml-xsadd to create a seeded random number generator. If undefined will use Math.random.
     */

/**
     * @param {Object} props
     * @param {InputRangeClassNames} props.classNames
     * @param {Boolean} props.draggableTrack
     * @param {Function} props.onTrackDrag
     * @param {Function} props.onTrackMouseDown
     * @param {number} props.percentages
     */

/**
     * @param {Object} props
     * @param {boolean} [props.allowSameValues]
     * @param {string} [props.ariaLabelledby]
     * @param {string} [props.ariaControls]
     * @param {InputRangeClassNames} [props.classNames]
     * @param {boolean} [props.disabled = false]
     * @param {Function} [props.formatLabel]
     * @param {number|Range} [props.maxValue = 10]
     * @param {number|Range} [props.minValue = 0]
     * @param {string} [props.name]
     * @param {string} props.onChange
     * @param {Function} [props.onChangeComplete]
     * @param {Function} [props.onChangeStart]
     * @param {number} [props.step = 1]
     * @param {number|Range} props.value
     */

/**
     * @param {Object} props
     * @param {string} [props.ariaLabelledby]
     * @param {string} [props.ariaControls]
     * @param {InputRangeClassNames} props.classNames
     * @param {Function} [props.formatLabel]
     * @param {number} [props.maxValue]
     * @param {number} [props.minValue]
     * @param {Function} props.onSliderKeyDown
     * @param {Function} props.onSliderDrag
     * @param {number} props.percentage
     * @param {number} props.type
     * @param {number} props.value
     */

/**
     * @private
     * @param {SyntheticEvent} event
     * @return {void}
     */

/**
     * @private
     * @param {SyntheticEvent} event - User event
     */

/**
     * @private
     * @return {Object}
     */

/**
     * @private
     * @return {Object} CSS styles
     */

/**
     * @private
     * @return {void}
     */

/**
     * @private
     * @type {?Component}
     */

/**
     * @private
     * @type {?number}
     */

/**
     * @private
     * @type {?string}
     */

/**
     * @private
     * @type {bool}
     */

/**
     * @private
     * This method updates scrollLeft/scrollTop in state for the following conditions:
     * 1) Empty content (0 rows or columns)
     * 2) New scroll props overriding the current state
     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid
     */

/**
     * @private
     * This method updates scrollLeft/scrollTop in state for the following conditions:
     * 1) New scroll-to-cell props have been set
     */

/**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */

/**
     * @prop {Boolean} flipVariations=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the reference element overlaps its boundaries.
     *
     * The original placement should have a set variation.
     */

/**
     * @prop {Boolean} flipVariationsByContent=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the popper element overlaps its reference boundaries.
     *
     * The original placement should have a set variation.
     */

/**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */

/**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations)
     */

/**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */

/**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position.
     * The popper will never be placed outside of the defined boundaries
     * (except if `keepTogether` is enabled)
     */

/**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper. This makes sure the popper always has a little padding
     * between the edges of its container
     */

/**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */

/**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */

/**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */

/**
     * @property {Array} timestamps - Array of time stamps
     * @memberof MediaStreamRecorder
     * @example
     * console.log(recorder.timestamps);
     */

/**
     * @property {Blob} blob - Access/reach the native {@link RecordRTC} object.
     * @memberof RecordRTCPromisesHandler
     * @example
     * let internal = recorder.recordRTC.getInternalRecorder();
     * alert(internal instanceof MediaStreamRecorder);
     * recorder.recordRTC.onStateChanged = function(state) {};
     */

/**
     * @property {Blob} blob - Recorded data as "Blob" object.
     * @memberof MediaStreamRecorder
     * @example
     * recorder.stop(function() {
     *     var blob = recorder.blob;
     * });
     */

/**
     * @property {Blob} blob - Recorded data as "Blob" object.
     * @memberof RecordRTCPromisesHandler
     * @example
     * await recorder.stopRecording();
     * let blob = recorder.getBlob(); // or "recorder.recordRTC.blob"
     * invokeSaveAsDialog(blob);
     */

/**
     * @property {Blob} blob - The recorded blob object.
     * @memberof WebAssemblyRecorder
     * @example
     * recorder.stop(function(){
     *     var blob = recorder.blob;
     * });
     */

/**
     * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.
     * @memberof DiskStorage
     * @internal
     * @example
     * DiskStorage.dataStoreName = 'recordRTC';
     */

/**
     * Accepted propTypes of Slider
     * @override
     * @return {Object}
     * @property {Function} ariaLabelledby
     * @property {Function} ariaControls
     * @property {Function} className
     * @property {Function} formatLabel
     * @property {Function} maxValue
     * @property {Function} minValue
     * @property {Function} onSliderDrag
     * @property {Function} onSliderKeyDown
     * @property {Function} percentage
     * @property {Function} type
     * @property {Function} value
     */

/**
     * Access to native MediaRecorder API
     * @method
     * @memberof MediaStreamRecorder
     * @instance
     * @example
     * var internal = recorder.getInternalRecorder();
     * internal.ondataavailable = function() {}; // override
     * internal.stream, internal.onpause, internal.onstop, etc.
     * @returns {Object} Returns internal recording object.
     */

/**
     * Add a new item to the queue and ensure the highest priority element
     * is at the front of the queue.
     */

/**
     * Add extra media-streams to existing recordings.
     * @method
     * @memberof MultiStreamRecorder
     * @param {MediaStreams} mediaStreams - Array of MediaStreams
     * @example
     * recorder.addStreams([newAudioStream, newVideoStream]);
     */

/**
     * AddHook
     * Public method to add DOMPurify hooks
     *
     * @param {String} entryPoint entry point for the hook to add
     * @param {Function} hookFunction function to execute
     */

/**
     * Adds observer to observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be added.
     * @returns {void}
     */

/**
     * Array of elements that DOMPurify removed during sanitation.
     * Empty if nothing was removed.
     */

/**
     * Avoid recreating inline styles each render; this bypasses Grid's shallowCompare.
     * This method recalculates styles only when specific props change.
     */

/**
     * Beacon click/hover event listener
     *
     * @param {Event} e
     */

/**
     * Calculates a pixel value for the container.
     * @return {String} Container height in pixels.
     */

/**
     * Calculates the minimum amount of change from the current scroll position to ensure the specified cell is (fully) visible.
     */

/**
     * Callback invoked after the specified delay. It will further postpone
     * invocation of the original function delegating it to the
     * requestAnimationFrame.
     *
     * @returns {void}
     */

/**
     * Check for batched CellMeasurer size invalidations.
     * This will occur the first time one or more previously unmeasured cells are rendered.
     */

/**
     * Clear all cached values for cells after the specified index.
     * This method should be called for any cell that has changed its size.
     * It will not immediately perform any calculations; they'll be performed the next time getSizeAndPositionOfCell() is called.
     */

/**
     * Clears all handlers and unbinds events
     */

/**
     * Clears the collection of active observations.
     *
     * @returns {void}
     */

/**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

/**
     * Collects observation instances the associated element of which has changed
     * it's content rectangle.
     *
     * @returns {void}
     */

/**
     * Create a placeholder object.
     * @return {Element} Placeholder div.
     */

/**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback function that is invoked
     *      when one of the observed elements changes it's content dimensions.
     * @param {ResizeObserverController} controller - Controller instance which
     *      is responsible for the updates of observer.
     * @param {ResizeObserver} callbackCtx - Reference to the public
     *      ResizeObserver instance which will be passed to callback function.
     */

/**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback that is invoked when
     *      dimensions of the observed elements change.
     */

/**
     * Creates a new instance of ResizeObserverController.
     *
     * @private
     */

/**
     * Creates an instance of ResizeObservation.
     *
     * @param {Element} target - Element to be observed.
     */

/**
     * Creates an instance of ResizeObserverEntry.
     *
     * @param {Element} target - Element that is being observed.
     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
     */

/**
     * Decrement the value of a slider by key name
     * @private
     * @param {string} key
     * @return {void}
     */

/**
     * Destroy RecordRTC instance. Clear all recorders and objects.
     * @method
     * @memberof RecordRTCPromisesHandler
     * @example
     * recorder.destroy().then(successCB).catch(errorCB);
     */

/**
     * Destroy all recorder instances.
     * @method
     * @memberof MRecordRTC
     * @example
     * recorder.destroy();
     */

/**
     * Determine whether the media query should be considered a match
     *
     * @return {Boolean} true if media query can be considered a match, false otherwise
     */

/**
     * Determines a new offset that ensures a certain cell is visible, given the current offset.
     * If the cell is already visible then the current offset will be returned.
     * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.
     *
     * @param align Desired alignment within container; one of "auto" (default), "start", or "end"
     * @param containerSize Size (width or height) of the container viewport
     * @param currentOffset Container's current (x or y) offset
     * @param totalSize Total size (width or height) of all cells
     * @return Offset to use to ensure the specified cell is visible
     */

/**
     * Determines the flex-shrink, flex-grow, and width values for a cell (header or column).
     */

/**
     * Draw a random integer from a uniform distribution on [low, high). If only low is specified, the number is drawn on [0, low)
     * @param low - The lower bound of the uniform distribution interval.
     * @param high - The higher bound of the uniform distribution interval.
     */

/**
     * Draw a random number from a uniform distribution on [0,1)
     * @return The random number
     */

/**
     * Draw and push frames to Whammy
     * @param {integer} frameInterval - set minimum interval (in milliseconds) between each time we push a frame to Whammy
     */

/**
     * Draw several random number from a uniform distribution on [0, 1)
     * @param size - The number of number to draw
     * @return - The list of drawn numbers.
     */

/**
     * Each drag movement create a new dragelement and move the element to the dragged location
     * @param {String} i Id of the child
     * @param {Number} x X position of the move
     * @param {Number} y Y position of the move
     * @param {Event} e The mousedown event
     * @param {Element} node The current dragging DOM element
     */

/**
     * Encodes frames in WebM container. It uses WebWorkinvoke to invoke 'ArrayToWebM' method.
     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.
     * @method
     * @memberof Whammy
     * @example
     * recorder = new Whammy().Video(0.8, 100);
     * recorder.compile(function(blob) {
     *    // blob.size - blob.type
     * });
     */

/**
     * Ensure column and row are visible.
     */

/**
     * Expose whether this browser supports running the full DOMPurify.
     */

/**
     * Finds and tokenizes all template strings with an embedded languages.
     *
     * @param {(Token | string)[]} tokens
     * @returns {void}
     */

/**
     * Forced recompute of row heights and column widths.
     * This function should be called if dynamic column or row sizes have changed but nothing else has.
     * Since Grid only receives :columnCount and :rowCount it has no way of detecting when the underlying data changes.
     */

/**
     * Get MediaRecorder all recording states.
     * @method
     * @memberof MediaStreamRecorder
     * @example
     * var state = recorder.getAllStates();
     * @returns {Array} Returns all recording states
     */

/**
     * Get MediaRecorder readonly state.
     * @method
     * @memberof MediaStreamRecorder
     * @example
     * var state = recorder.getState();
     * @returns {String} Returns recording state.
     */

/**
     * Get recorder's readonly state.
     * @method
     * @memberof RecordRTCPromisesHandler
     * @example
     * let state = await recorder.getState();
     * // or
     * recorder.getState().then(state => { console.log(state); })
     * @returns {String} Returns recording state.
     */

/**
     * Get the updated state after scrolling to
     * scrollLeft and scrollTop
     */

/**
     * Gets estimated total columns' width.
     */

/**
     * Gets estimated total rows' height.
     */

/**
     * Given a grid item, set its style attributes & surround in a <Draggable>.
     * @param  {Element} child React element.
     * @return {Element}       Element wrapped in draggable and properly placed.
     */

/**
     * Handle any "keydown" event received by the component
     * @private
     * @param {SyntheticEvent} event
     * @return {void}
     */

/**
     * Handle any "keydown" event received by the slider
     * @private
     * @param {SyntheticEvent} event
     * @param {string} key
     * @return {void}
     */

/**
     * Handle any "keyup" event received by the component
     * @private
     * @param {SyntheticEvent} event
     * @return {void}
     */

/**
     * Handle any "mousedown" event received by the component
     * @private
     * @param {SyntheticEvent} event
     * @return {void}
     */

/**
     * Handle any "mousedown" event received by the track
     * @private
     * @param {SyntheticEvent} event
     * @param {Point} position
     * @return {void}
     */

/**
     * Handle any "mousemove" event received by the slider
     * @private
     * @param {SyntheticEvent} event
     * @param {string} key
     * @return {void}
     */

/**
     * Handle any "mousemove" event received by the track
     * @private
     * @param {SyntheticEvent} event
     * @return {void}
     */

/**
     * Handle any "mouseup" event received by the component
     * @private
     * @param {SyntheticEvent} event
     */

/**
     * Handle any "touchend" event received by the component
     * @private
     * @param {SyntheticEvent} event
     */

/**
     * Handle any "touchstart" event received by the component
     * @private
     * @param {SyntheticEvent} event
     * @return {void}
     */

/**
     * Handle the end of any mouse/touch event
     * @private
     * @return {void}
     */

/**
     * Handle the start of any mouse/touch event
     * @private
     * @return {void}
     */

/**
     * Holds reference to the controller's instance.
     *
     * @private {ResizeObserverController}
     */

/**
     * Increment the value of a slider by key name
     * @private
     * @param {string} key
     * @return {void}
     */

/**
     * Initializes DOM listeners.
     *
     * @private
     * @returns {void}
     */

/**
     * Invalidate Grid size and recompute visible cells.
     * This is a deferred wrapper for recomputeGridSize().
     * It sets a flag to be evaluated on cDM/cDU to avoid unnecessary renders.
     * This method is intended for advanced use-cases like CellMeasurer.
     */

/**
     * Invokes initial callback function with a list of ResizeObserverEntry
     * instances collected from active resize observations.
     *
     * @returns {void}
     */

/**
     * Invokes the original callback function and schedules new invocation if
     * the "proxy" was called during current request.
     *
     * @returns {void}
     */

/**
     * Invokes the update of observers. It will continue running updates insofar
     * it detects changes.
     *
     * @returns {void}
     */

/**
     * Listen to mousemove event
     * @private
     * @return {void}
     */

/**
     * Listen to mouseup event
     * @private
     * @return {void}
     */

/**
     * Listen to touchend event
     * @private
     * @return {void}
     */

/**
     * Listen to touchmove event
     * @private
     * @return {void}
     */

/**
     * Mix a Draggable instance into a child.
     * @param  {Element} child    Child element.
     * @return {Element}          Child wrapped in Draggable.
     */

/**
     * Mix a Resizable instance into a child.
     * @param  {Element} child    Child element.
     * @param  {Object} position  Position object (pixel values)
     * @return {Element}          Child wrapped in Resizable.
     */

/**
     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.
     * The offset passed to this function is scaled (safe) as well.
     */

/**
     * Pass Canvas or Context or image/webp(string) to {@link Whammy} encoder.
     * @method
     * @memberof Whammy
     * @example
     * recorder = new Whammy().Video(0.8, 100);
     * recorder.add(canvas || context || 'image/webp');
     * @param {string} frame - Canvas || Context || image/webp
     * @param {number} duration - Stick a duration (in milliseconds)
     */

/**
     * Pre-measure all columns and rows in a Grid.
     * Typically cells are only measured as needed and estimated sizes are used for cells that have not yet been measured.
     * This method ensures that the next call to getTotalSize() returns an exact size (as opposed to just an estimated one).
     */

/**
     * Public method to check if an attribute value is valid.
     * Uses last set config, if any. Otherwise, uses config defaults.
     * isValidAttribute
     *
     * @param  {string} tag Tag name of containing element.
     * @param  {string} attr Attribute name.
     * @param  {string} value Attribute value.
     * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.
     */

/**
     * Public method to remove the configuration
     * clearConfig
     *
     */

/**
     * Public method to set the configuration once
     * setConfig
     *
     * @param {Object} cfg configuration object
     */

/**
     * RecordRTC version number
     * @property {String} version - Release version number.
     * @memberof RecordRTCPromisesHandler
     * @static
     * @readonly
     * @example
     * alert(recorder.version);
     */

/**
     * Registers a handler for the given media query
     *
     * @param {string} q the media query
     * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers
     * @param {function} options.match fired when query matched
     * @param {function} [options.unmatch] fired when a query is no longer matched
     * @param {function} [options.setup] fired when handler first triggered
     * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched
     * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers
     */

/**
     * RemoveAllHooks
     * Public method to remove all DOMPurify hooks
     *
     */

/**
     * RemoveHook
     * Public method to remove a DOMPurify hook at a given entryPoint
     * (pops it from the stack of hooks if more are present)
     *
     * @param {String} entryPoint entry point for the hook to remove
     */

/**
     * RemoveHooks
     * Public method to remove all DOMPurify hooks at a given entryPoint
     *
     * @param  {String} entryPoint entry point for the hooks to remove
     */

/**
     * Removes DOM listeners.
     *
     * @private
     * @returns {void}
     */

/**
     * Removes and disposes the first occurrence of a disposable from the CompositeDisposable.
     * @param {Any} item Disposable to remove.
     * @returns {Boolean} true if found; false otherwise.
     */

/**
     * Removes observer from observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be removed.
     * @returns {void}
     */

/**
     * Reset videos during live recording. Replace old videos e.g. replace cameras with full-screen.
     * @method
     * @memberof MultiStreamRecorder
     * @param {MediaStreams} mediaStreams - Array of MediaStreams
     * @example
     * recorder.resetVideoStreams([newVideo1, newVideo2]);
     */

/**
     * Return JSX of hidden inputs
     * @private
     * @return {JSX.Element}
     */

/**
     * Return JSX of sliders
     * @private
     * @return {JSX.Element}
     */

/**
     * Return all the slider keys
     * @private
     * @return {string[]}
     */

/**
     * Return the CSS class name of the component
     * @private
     * @return {string}
     */

/**
     * Return the bounding rect of the track
     * @private
     * @return {ClientRect}
     */

/**
     * Return the highest priority element in the queue.
     */

/**
     * Return the slider key closest to a point
     * @private
     * @param {Point} position
     * @return {string}
     */

/**
     * Return true if the component accepts a min and max value
     * @private
     * @return {boolean}
     */

/**
     * Return true if the difference between the new and the current value is
     * greater or equal to the step amount of the component
     * @private
     * @param {Range} values
     * @return {boolean}
     */

/**
     * Return true if the new value should trigger a render
     * @private
     * @param {Range} values
     * @return {boolean}
     */

/**
     * Return true if the range is within the max and min value of the component
     * @private
     * @param {Range} values
     * @return {boolean}
     */

/**
     * Returns MultiStreamsMixer
     * @method
     * @memberof MultiStreamRecorder
     * @example
     * let mixer = recorder.getMixer();
     * mixer.appendStreams([newStream]);
     */

/**
     * Returns a 32-bit integer r (0 <= r < 2^32)
     */

/**
     * Returns a floating point number r (0.0 <= r < 1.0)
     */

/**
     * Returns index in provided array that matches the specified key.
     *
     * @param {Array<Array>} arr
     * @param {*} key
     * @returns {number}
     */

/**
     * Returns instance of the ResizeObserverController.
     *
     * @returns {ResizeObserverController}
     */

/**
     * Returns the most recently rendered set of cell indices.
     */

/**
     * Sanitize
     * Public method providing core sanitation functionality
     *
     * @param {String|Node} dirty string or DOM node
     * @param {Object} configuration object
     */

/**
     * Schedules an update. It will run on the next UI update available.
     * @method scheduleUpdate
     * @memberof Popper
     */

/**
     * Schedules invocation of the original function.
     *
     * @returns {void}
     */

/**
     * Scroll to the specified offset(s).
     * Useful for animating position changes.
     */

/**
     * Searches for the cell (index) nearest the specified offset.
     *
     * If no exact match is found the next lowest cell index will be returned.
     * This allows partially visible cells (with offsets just before/above the fold) to be visible.
     */

/**
     * Sets an :isScrolling flag for a small window of time.
     * This flag is used to disable pointer events on the scrollable portion of the Collection.
     * This prevents jerky/stuttery mouse-wheel scrolling.
     */

/**
     * Sets an :isScrolling flag for a small window of time.
     * This flag is used to disable pointer events on the scrollable portion of the Grid.
     * This prevents jerky/stuttery mouse-wheel scrolling.
     */

/**
     * Starts observing provided element.
     *
     * @param {Element} target - Element to be observed.
     * @returns {void}
     */

/**
     * Stop listening to mouseup event
     * @private
     * @return {void}
     */

/**
     * Stop listening to touchend event
     * @private
     * @return {void}
     */

/**
     * Stops observing all elements.
     *
     * @returns {void}
     */

/**
     * Stops observing provided element.
     *
     * @param {Element} target - Element to stop observing.
     * @returns {void}
     */

/**
     * Tells whether observer has active observations.
     *
     * @returns {boolean}
     */

/**
     * The sample rate (in sample-frames per second) at which the
     * AudioContext handles audio. It is assumed that all AudioNodes
     * in the context run at this rate. In making this assumption,
     * sample-rate converters or "varispeed" processors are not supported
     * in real-time processing.
     * The sampleRate parameter describes the sample-rate of the
     * linear PCM audio data in the buffer in sample-frames per second.
     * An implementation must support sample-rates in at least
     * the range 22050 to 96000.
     * @property {number} sampleRate - Buffer-size for how frequently the audioprocess event is dispatched.
     * @memberof StereoAudioRecorder
     * @example
     * recorder = new StereoAudioRecorder(mediaStream, {
     *     sampleRate: 44100
     * });
     */

/**
     * This function is invoked for any known/unknown error.
     * @method
     * @memberof DiskStorage
     * @internal
     * @example
     * DiskStorage.onError = function(error){
     *     alerot( JSON.stringify(error) );
     * };
     */

/**
     * This is where we set the grid item's absolute placement. It gets a little tricky because we want to do it
     * well when server rendering, and the only way to do that properly is to use percentage width/left because
     * we don't know exactly what the browser viewport is.
     * Unfortunately, CSS Transforms, which are great for performance, break in this instance because a percentage
     * left is relative to the item itself, not its container! So we cannot use them on the server rendering pass.
     *
     * @param  {Object} pos Position object with width, height, left, top.
     * @return {Object}     Style object.
     */

/**
     * This method attaches MediaStream object to {@link MRecordRTC}.
     * @param {MediaStream} mediaStream - A MediaStream object, either fetched using getUserMedia API, or generated using captureStreamUntilEnded or WebAudio API.
     * @method
     * @memberof MRecordRTC
     * @example
     * recorder.addStream(MediaStream);
     */

/**
     * This method can be used to ask {@link MRecordRTC} to write all recorded blobs into IndexedDB storage.
     * @method
     * @memberof MRecordRTC
     * @example
     * recorder.writeToDisk();
     */

/**
     * This method can be used to invoke a save-as dialog for all recorded blobs.
     * @param {object} args - {audio: 'audio-name', video: 'video-name', gif: 'gif-name'}
     * @method
     * @memberof MRecordRTC
     * @example
     * recorder.save({
     *     audio: 'audio-file-name',
     *     video: 'video-file-name',
     *     gif  : 'gif-file-name'
     * });
     */

/**
     * This method can be used to manually get all recorded blobs' DataURLs.
     * @param {function} callback - All recorded blobs' DataURLs are passed back to the "callback" function.
     * @method
     * @memberof MRecordRTC
     * @example
     * recorder.getDataURL(function(recording){
     *     var audioDataURL = recording.audio;
     *     var videoDataURL = recording.video;
     *     var gifDataURL   = recording.gif;
     * });
     */

/**
     * This method can be used to manually get all recorded blobs.
     * @param {function} callback - All recorded blobs are passed back to the "callback" function.
     * @method
     * @memberof MRecordRTC
     * @example
     * recorder.getBlob(function(recording){
     *     var audioBlob = recording.audio;
     *     var videoBlob = recording.video;
     *     var gifBlob   = recording.gif;
     * });
     * // or
     * var audioBlob = recorder.getBlob().audio;
     * var videoBlob = recorder.getBlob().video;
     */

/**
     * This method fetches stored blobs from IndexedDB.
     * @method
     * @memberof DiskStorage
     * @internal
     * @example
     * DiskStorage.Fetch(function(dataURL, type) {
     *     if(type === 'audioBlob') { }
     *     if(type === 'videoBlob') { }
     *     if(type === 'gifBlob')   { }
     * });
     */

/**
     * This method handles a scroll event originating from an external scroll control.
     * It's an advanced method and should probably not be used unless you're implementing a custom scroll-bar solution.
     */

/**
     * This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.
     * @method
     * @memberof DiskStorage
     * @internal
     * @example
     * DiskStorage.init();
     */

/**
     * This method pauses recording.
     * @method
     * @memberof MRecordRTC
     * @example
     * recorder.pauseRecording();
     */

/**
     * This method pauses the recording process.
     * @method
     * @memberof CanvasRecorder
     * @example
     * recorder.pause();
     */

/**
     * This method pauses the recording process.
     * @method
     * @memberof GifRecorder
     * @example
     * recorder.pause();
     */

/**
     * This method pauses the recording process.
     * @method
     * @memberof MediaStreamRecorder
     * @example
     * recorder.pause();
     */

/**
     * This method pauses the recording process.
     * @method
     * @memberof MultiStreamRecorder
     * @example
     * recorder.pause();
     */

/**
     * This method pauses the recording process.
     * @method
     * @memberof StereoAudioRecorder
     * @example
     * recorder.pause();
     */

/**
     * This method pauses the recording process.
     * @method
     * @memberof WebAssemblyRecorder
     * @example
     * recorder.pause();
     */

/**
     * This method pauses the recording process.
     * @method
     * @memberof WhammyRecorder
     * @example
     * recorder.pause();
     */

/**
     * This method pauses the recording. You can resume recording using "resumeRecording" method.
     * @method
     * @memberof RecordRTCPromisesHandler
     * @example
     * recorder.pauseRecording()
     *         .then(successCB)
     *         .catch(errorCB);
     */

/**
     * This method records Canvas.
     * @method
     * @memberof CanvasRecorder
     * @example
     * recorder.record();
     */

/**
     * This method records MediaStream.
     * @method
     * @memberof GifRecorder
     * @example
     * recorder.record();
     */

/**
     * This method records MediaStream.
     * @method
     * @memberof MediaStreamRecorder
     * @example
     * recorder.record();
     */

/**
     * This method records MediaStream.
     * @method
     * @memberof RecordRTCPromisesHandler
     * @example
     * recorder.startRecording()
     *         .then(successCB)
     *         .catch(errorCB);
     */

/**
     * This method records MediaStream.
     * @method
     * @memberof StereoAudioRecorder
     * @example
     * recorder.record();
     */

/**
     * This method records all MediaStreams.
     * @method
     * @memberof MultiStreamRecorder
     * @example
     * recorder.record();
     */

/**
     * This method records video.
     * @method
     * @memberof WebAssemblyRecorder
     * @example
     * recorder.record();
     */

/**
     * This method records video.
     * @method
     * @memberof WhammyRecorder
     * @example
     * recorder.record();
     */

/**
     * This method resets currently recorded data.
     * @method
     * @memberof CanvasRecorder
     * @example
     * recorder.clearRecordedData();
     */

/**
     * This method resets currently recorded data.
     * @method
     * @memberof GifRecorder
     * @example
     * recorder.clearRecordedData();
     */

/**
     * This method resets currently recorded data.
     * @method
     * @memberof MediaStreamRecorder
     * @example
     * recorder.clearRecordedData();
     */

/**
     * This method resets currently recorded data.
     * @method
     * @memberof MultiStreamRecorder
     * @example
     * recorder.clearRecordedData();
     */

/**
     * This method resets currently recorded data.
     * @method
     * @memberof StereoAudioRecorder
     * @example
     * recorder.clearRecordedData();
     */

/**
     * This method resets currently recorded data.
     * @method
     * @memberof WebAssemblyRecorder
     * @example
     * recorder.clearRecordedData();
     */

/**
     * This method resets currently recorded data.
     * @method
     * @memberof WhammyRecorder
     * @example
     * recorder.clearRecordedData();
     */

/**
     * This method resets the recorder. So that you can reuse single recorder instance many times.
     * @method
     * @memberof RecordRTCPromisesHandler
     * @example
     * await recorder.reset();
     * recorder.startRecording(); // record again
     */

/**
     * This method resumes recording.
     * @method
     * @memberof MRecordRTC
     * @example
     * recorder.resumeRecording();
     */

/**
     * This method resumes the recording process.
     * @method
     * @memberof CanvasRecorder
     * @example
     * recorder.resume();
     */

/**
     * This method resumes the recording process.
     * @method
     * @memberof GifRecorder
     * @example
     * recorder.resume();
     */

/**
     * This method resumes the recording process.
     * @method
     * @memberof MediaStreamRecorder
     * @example
     * recorder.resume();
     */

/**
     * This method resumes the recording process.
     * @method
     * @memberof MultiStreamRecorder
     * @example
     * recorder.resume();
     */

/**
     * This method resumes the recording process.
     * @method
     * @memberof StereoAudioRecorder
     * @example
     * recorder.resume();
     */

/**
     * This method resumes the recording process.
     * @method
     * @memberof WebAssemblyRecorder
     * @example
     * recorder.resume();
     */

/**
     * This method resumes the recording process.
     * @method
     * @memberof WhammyRecorder
     * @example
     * recorder.resume();
     */

/**
     * This method resumes the recording.
     * @method
     * @memberof RecordRTCPromisesHandler
     * @example
     * recorder.resumeRecording()
     *         .then(successCB)
     *         .catch(errorCB);
     */

/**
     * This method returns array of blobs. Use only with "timeSlice". Its useful to preview recording anytime, without using the "stop" method.
     * @method
     * @memberof MediaStreamRecorder
     * @example
     * var arrayOfBlobs = recorder.getArrayOfBlobs();
     * @returns {Array} Returns array of recorded blobs.
     */

/**
     * This method returns data-url for the recorded blob.
     * @method
     * @memberof RecordRTCPromisesHandler
     * @example
     * recorder.stopRecording().then(function() {
     *     recorder.getDataURL().then(function(dataURL) {
     *         window.open(dataURL);
     *     }).catch(errorCB);;
     * }).catch(errorCB);
     */

/**
     * This method returns the internal recording object.
     * @method
     * @memberof RecordRTCPromisesHandler
     * @example
     * let internalRecorder = await recorder.getInternalRecorder();
     * if(internalRecorder instanceof MultiStreamRecorder) {
     *     internalRecorder.addStreams([newAudioStream]);
     *     internalRecorder.resetVideoStreams([screenStream]);
     * }
     * @returns {Object} 
     */

/**
     * This method returns the recorded blob.
     * @method
     * @memberof RecordRTCPromisesHandler
     * @example
     * recorder.stopRecording().then(function() {
     *     recorder.getBlob().then(function(blob) {})
     * }).catch(errorCB);
     */

/**
     * This method returns the size and position for the cell at the specified index.
     * It just-in-time calculates (or used cached values) for cells leading up to the index.
     */

/**
     * This method starts recording.
     * @method
     * @memberof MRecordRTC
     * @example
     * recorder.startRecording();
     */

/**
     * This method stops recording Canvas.
     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.
     * @method
     * @memberof CanvasRecorder
     * @example
     * recorder.stop(function(blob) {
     *     video.src = URL.createObjectURL(blob);
     * });
     */

/**
     * This method stops recording MediaStream.
     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.
     * @method
     * @memberof GifRecorder
     * @example
     * recorder.stop(function(blob) {
     *     img.src = URL.createObjectURL(blob);
     * });
     */

/**
     * This method stops recording MediaStream.
     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.
     * @method
     * @memberof MediaStreamRecorder
     * @example
     * recorder.stop(function(blob) {
     *     video.src = URL.createObjectURL(blob);
     * });
     */

/**
     * This method stops recording MediaStream.
     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.
     * @method
     * @memberof MultiStreamRecorder
     * @example
     * recorder.stop(function(blob) {
     *     video.src = URL.createObjectURL(blob);
     * });
     */

/**
     * This method stops recording MediaStream.
     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.
     * @method
     * @memberof StereoAudioRecorder
     * @example
     * recorder.stop(function(blob) {
     *     video.src = URL.createObjectURL(blob);
     * });
     */

/**
     * This method stops recording video.
     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.
     * @method
     * @memberof WebAssemblyRecorder
     * @example
     * recorder.stop(function(blob) {
     *     video.src = URL.createObjectURL(blob);
     * });
     */

/**
     * This method stops recording video.
     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.
     * @method
     * @memberof WhammyRecorder
     * @example
     * recorder.stop(function(blob) {
     *     video.src = URL.createObjectURL(blob);
     * });
     */

/**
     * This method stops recording.
     * @param {function} callback - Callback function is invoked when all encoders finished their jobs.
     * @method
     * @memberof MRecordRTC
     * @example
     * recorder.stopRecording(function(recording){
     *     var audioBlob = recording.audio;
     *     var videoBlob = recording.video;
     *     var gifBlob   = recording.gif;
     * });
     */

/**
     * This method stops the recording.
     * @method
     * @memberof RecordRTCPromisesHandler
     * @example
     * recorder.stopRecording().then(function() {
     *     var blob = recorder.getBlob();
     * }).catch(errorCB);
     */

/**
     * This method stores blobs in IndexedDB.
     * @method
     * @memberof DiskStorage
     * @internal
     * @example
     * DiskStorage.Store({
     *     audioBlob: yourAudioBlob,
     *     videoBlob: yourVideoBlob,
     *     gifBlob  : yourGifBlob
     * });
     */

/**
     * This method updates scrollLeft/scrollTop in state for the following conditions:
     * 1) Empty content (0 rows or columns)
     * 2) New scroll props overriding the current state
     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid
     */

/**
     * This property can be used to set the recording type e.g. audio, or video, or gif, or canvas.
     * @property {object} mediaType - {audio: true, video: true, gif: true}
     * @memberof MRecordRTC
     * @example
     * var recorder = new MRecordRTC();
     * recorder.mediaType = {
     *     audio: true, // TRUE or StereoAudioRecorder or MediaStreamRecorder
     *     video: true, // TRUE or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder
     *     gif  : true  // TRUE or GifRecorder
     * };
     */

/**
     * Total size of all cells being measured.
     * This value will be completely estimated initially.
     * As cells are measured, the estimate will be updated.
     */

/**
     * Trigger the callback.
     *
     * @private
     * @param {Object} data
     */

/**
     * Update the position of a slider
     * @private
     * @param {string} key
     * @param {Point} position
     * @return {void}
     */

/**
     * Update the positions of multiple sliders
     * @private
     * @param {Object} positions
     * @param {Point} positions.min
     * @param {Point} positions.max
     * @return {void}
     */

/**
     * Update the value of a slider
     * @private
     * @param {string} key
     * @param {number} value
     * @return {void}
     */

/**
     * Update the values of multiple sliders
     * @private
     * @param {Range|number} values
     * @return {void}
     */

/**
     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
     * from the corresponding properties of the last observed content rectangle.
     *
     * @returns {DOMRectInit} Last observed content rectangle.
     */

/**
     * Updates content rectangle and tells whether it's width or height properties
     * have changed since the last broadcast.
     *
     * @returns {boolean}
     */

/**
     * Updates every observer from observers list and notifies them of queued
     * entries.
     *
     * @private
     * @returns {boolean} Returns "true" if any observer has detected changes in
     *      dimensions of it's elements.
     */

/**
     * Validates whether the given object is a disposable
     * @param {Object} Object to test whether it has a dispose method
     * @returns {Boolean} true if a disposable object, else false.
     */

/**
     * Version label, exposed for easier checks
     * if DOMPurify is up to date or not
     */

/**
     * When dragging starts
     * @param {String} i Id of the child
     * @param {Number} x X position of the move
     * @param {Number} y Y position of the move
     * @param {Event} e The mousedown event
     * @param {Element} node The current dragging DOM element
     */

/**
     * When dragging stops, figure out which position the element is closest to and update its x and y.
     * @param  {String} i Index of the child.
     * @param {Number} x X position of the move
     * @param {Number} y Y position of the move
     * @param {Event} e The mousedown event
     * @param {Element} node The current dragging DOM element
     */

/**
     * When the width changes work through breakpoints and reset state with the new width & breakpoint.
     * Width changes are necessary to figure out the widget widths.
     */

/**
     * Wrapper around drag events to provide more useful data.
     * All drag events call the function with the given handler name,
     * with the signature (index, x, y).
     *
     * @param  {String} handlerName Handler name to wrap.
     * @return {Function}           Handler function.
     */

/**
     * _createIterator
     *
     * @param  {Document} root document/fragment to create iterator for
     * @return {Iterator} iterator instance
     */

/**
     * _isClobbered
     *
     * @param  {Node} elm element to check for clobbering attacks
     * @return {Boolean} true if clobbered, false if safe
     */

/**
     * add a handler for this query, triggering if already active
     *
     * @param {object} handler
     * @param {function} handler.match callback for when query is activated
     * @param {function} [handler.unmatch] callback for when query is deactivated
     * @param {function} [handler.setup] callback for immediate execution when a query handler is registered
     * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?
     */

/**
     * called when a handler is to be destroyed.
     * delegates to the destroy or unmatch callbacks, depending on availability.
     *
     * @function
     */

/**
     * coordinates setup and triggering of the handler
     *
     * @function
     */

/**
     * coordinates setup of the handler
     *
     * @function
     */

/**
     * coordinates the unmatch event for the handler
     *
     * @function
     */

/**
     * determines equality by reference.
     * if object is supplied compare options, if function, compare match callback
     *
     * @function
     * @param {object || function} [target] the target for comparison
     */

/**
     * onDragStart event handler
     * @param  {Event}  e             event data
     * @param  {Object} callbackData  an object with node, delta and position information
     */

/**
     * remove black frames from the beginning to the specified frame
     * @param {Array} _frames - array of frames to be checked
     * @param {number} _framesToCheck - number of frame until check will be executed (-1 - will drop all frames until frame not matched will be found)
     * @param {number} _pixTolerance - 0 - very strict (only black pixel color) ; 1 - all
     * @param {number} _frameTolerance - 0 - very strict (only black frame color) ; 1 - all
     * @returns {Array} - array of frames
     */

/**
     * removes the given handler from the collection, and calls it's destroy methods
     *
     * @param {object || function} handler the handler to remove
     */

/**
     * unregisters a query and all it's handlers, or a specific handler for a query
     *
     * @param {string} q the media query to target
     * @param {object || function} [handler] specific handler to unregister
     */

/**
    * Event handler invoked once the checkbox is clicked by the user. Changes the
    * `isChecked` property and then invokes the user-supplied `onChange` callback function.
    */

/**
    * React component render method
    */

/**
    * React component render method.
    */

/**
    * Scrolls to the bottom of the console output.
    */

/**
    * Scrolls to the bottom of the output panel after result has been inserted.
    */

/**
   *  Which event when fired outside the component will cause it to be closed.
   *
   * _see [DropdownMenu](#menu-props) for more details_
   */

/**
   * @ignore
   * @override
   * @return {void}
   */

/**
   * @private
   * @return {ClientRect}
   */

/**
   * A Callback fired by the Overlay when it wishes to be hidden.
   *
   * __required__ when `rootClose` is `true`.
   *
   * @type func
   */

/**
   * A DOM Element, Ref to an element, or function that returns either. The `container` will have the Portal children
   * appended to it.
   */

/**
   * A DOM Element, Ref to an element, or function that returns either. The `target` element is where
   * the overlay is positioned relative to.
   */

/**
   * A DOM element, a `ref` to an element, or function that returns either. The Modal is appended to it's `container` element.
   *
   * For the sake of assistive technologies, the container should usually be the document body, so that the rest of the
   * page content can be placed behind a virtual backdrop as well as a visual one.
   */

/**
   * A ModalManager instance used to track and manage the state of open
   * Modals. Useful when customizing how modals interact within a container
   */

/**
   * A `react-transition-group@2.0.0` `<Transition/>` component
   * used to animate the overlay as it changes visibility.
   */

/**
   * A `react-transition-group@2.0.0` `<Transition/>` component used
   * to control animations for the backdrop components.
   */

/**
   * A `react-transition-group@2.0.0` `<Transition/>` component used
   * to control animations for the dialog component.
   */

/**
   * A callback fired when either the backdrop is clicked, or the escape key is pressed.
   *
   * The `onHide` callback only signals intent from the Modal,
   * you must actually set the `show` prop to `false` for the Modal to close.
   */

/**
   * A callback fired when the Dropdown wishes to change visibility. Called with the requested
   * `show` value, the DOM event, and the source that fired it: `'click'`,`'keydown'`,`'rootClose'`, or `'select'`.
   *
   * ```ts static
   * function(
   *   isOpen: boolean,
   *   event: SyntheticEvent,
   * ): void
   * ```
   *
   * @controllable show
   */

/**
   * A callback fired when the Modal is opening.
   */

/**
   * A callback fired when the backdrop, if specified, is clicked.
   */

/**
   * A callback fired when the escape key, if specified in `keyboard`, is pressed.
   *
   * If preventDefault() is called on the keyboard event, closing the modal will be cancelled.
   */

/**
   * A css class or set of classes applied to the modal container when the modal is open,
   * and removed when it is closed.
   */

/**
   * A css slector string that will return __focusable__ menu items.
   * Selectors should be relative to the menu component:
   * e.g. ` > li:not('.disabled')`
   */

/**
   * A function that returns a backdrop component. Useful for custom
   * backdrop rendering.
   *
   * ```js
   *  renderBackdrop={props => <MyBackdrop {...props} />}
   * ```
   */

/**
   * A function that returns the dialog component. Useful for custom
   * rendering. **Note:** the component should make sure to apply the provided ref.
   *
   * ```js static
   * renderDialog={props => <MyDialog {...props} />}
   * ```
   */

/**
   * A map from the name of a block to its line prefix.
   *
   * @type {Object<string, string>}
   */

/**
   * A render prop that returns a Menu element. The `props`
   * argument should spread through to **a component that can accept a ref**.
   *
   * @type {Function ({
   *   show: boolean,
   *   alignEnd: boolean,
   *   close: (?SyntheticEvent) => void,
   *   placement: Placement,
   *   outOfBoundaries: ?boolean,
   *   scheduleUpdate: () => void,
   *   props: {
   *     ref: (?HTMLElement) => void,
   *     style: { [string]: string | number },
   *     aria-labelledby: ?string
   *   },
   *   arrowProps: {
   *     ref: (?HTMLElement) => void,
   *     style: { [string]: string | number },
   *   },
   * }) => React.Element}
   */

/**
   * A render prop that returns a Toggle element. The `props`
   * argument should spread through to **a component that can accept a ref**. Use
   * the `onToggle` argument to toggle the menu open or closed
   *
   * @type {Function ({
   *   show: boolean,
   *   toggle: (show: boolean) => void,
   *   props: {
   *     ref: (?HTMLElement) => void,
   *     aria-haspopup: true
   *     aria-expanded: boolean
   *   },
   * }) => React.Element}
   */

/**
   * A render prop that returns an element to overlay and position. See
   * the [react-popper documentation](https://github.com/FezVrasta/react-popper#children) for more info.
   *
   * @type {Function ({
   *   show: boolean,
   *   placement: Placement,
   *   outOfBoundaries: ?boolean,
   *   scheduleUpdate: () => void,
   *   props: {
   *     ref: (?HTMLElement) => void,
   *     style: { [string]: string | number },
   *     aria-labelledby: ?string
   *   },
   *   arrowProps: {
   *     ref: (?HTMLElement) => void,
   *     style: { [string]: string | number },
   *   },
   * }) => React.Element}
   */

/**
   * A render prop that returns the root dropdown element. The `props`
   * argument should spread through to an element containing _both_ the
   * menu and toggle in order to handle keyboard events for focus management.
   *
   * @type {Function ({
   *   props: {
   *     onKeyDown: (SyntheticEvent) => void,
   *   },
   * }) => React.Element}
   */

/**
   * A set of popper options and props passed directly to react-popper's Popper component.
   */

/**
   * A very naive priority queue implementation.
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.
   * @param {Any} item Disposable to add.
   */

/**
   * Adds an inlined language to markup.
   *
   * An example of an inlined language is CSS with `<style>` tags.
   *
   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
   * case insensitive.
   * @param {string} lang The language key.
   * @example
   * addInlined('style', 'css');
   */

/**
   * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.
   *
   * @param {string} lang the language add doc comment support to.
   * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.
   */

/**
   * Adds doc-comment support to the given languages for the given documentation language.
   *
   * @param {string[]|string} languages
   * @param {Object} docLanguage
   */

/**
   * Align the menu to the 'end' side of the placement side of the Dropdown toggle. The default placement is `top-start` or `bottom-start`.
   */

/**
   * Aligns the dropdown menu to the 'end' of it's placement position.
   * Generally this is provided by the parent `Dropdown` component,
   * but may also be specified as a prop directly.
   */

/**
   * Allows to compute for a new array of points their cluster id
   * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster
   * @return {Array<number>} - cluster id for each point
   */

/**
   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.
   * @type {string|number}
   * @required
   */

/**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define your own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */

/**
   * Cache for storing the results of computations:
   * `WeakMap<Theme, WeakMap<typeof WithStyles, { ltr: {}, rtl: {} }>>`
   * Falling back to `Map` whenever `WeakMap` is not supported
   */

/**
   * Calculates the inverse PCA transform
   * @param {Matrix} dataset
   * @return {Matrix} dataset projected in the PCA space
   */

/**
   * Callback called when the popper is created.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */

/**
   * Callback called when the popper is updated. This callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */

/**
   * Callback fired after the Modal finishes transitioning in
   */

/**
   * Callback fired after the Modal finishes transitioning out
   */

/**
   * Callback fired after the Overlay finishes transitioning in
   */

/**
   * Callback fired after the Overlay finishes transitioning out
   */

/**
   * Callback fired as the Modal begins to transition in
   */

/**
   * Callback fired as the Modal begins to transition out
   */

/**
   * Callback fired as the Overlay begins to transition in
   */

/**
   * Callback fired as the Overlay begins to transition out
   */

/**
   * Callback fired before the Modal transitions in
   */

/**
   * Callback fired before the Overlay transitions in
   */

/**
   * Callback fired right before the Modal transitions out
   */

/**
   * Callback fired right before the Overlay transitions out
   */

/**
   * Close the modal when escape key is pressed
   */

/**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */

/**
   * Control how much space there is between the edge of the boundary element and overlay.
   * A convenience shortcut to setting `popperConfig.modfiers.preventOverflow.padding`
   */

/**
   * Controls the focus behavior for when the Dropdown is opened. Set to
   * `true` to always focus the first menu item, `keyboard` to focus only when
   * navigating via the keyboard, or `false` to disable completely
   *
   * The Default behavior is `false` **unless** the Menu has a `role="menu"`
   * where it will default to `keyboard` to match the recommended [ARIA Authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton).
   */

/**
   * Controls the visible state of the menu, generally this is
   * provided by the parent `Dropdown` component,
   * but may also be specified as a prop directly.
   */

/**
   * Converts a single HTML element to pdfmake, calls itself recursively for child html elements
   *
   * @param element can be an HTML element (<p>) or plain text ("Hello World")
   * @param parentNode the parent node for the current element
   * @param parents Array of node names of all the parents for the element
   * @returns the doc def to the given element in consideration to the given paragraph and styles
   */

/**
   * Creates a new Popper.js instance.
   * @class Popper
   * @param {Element|referenceObject} reference - The reference element used to position the popper
   * @param {Element} popper - The HTML / XML element used as the popper
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */

/**
   * Creates a new pattern to match a template string with a special tag.
   *
   * This will return `undefined` if there is no grammar with the given language id.
   *
   * @param {string} language The language id of the embedded language. E.g. `markdown`.
   * @param {string} tag The regex pattern to match the tag.
   * @returns {object | undefined}
   * @example
   * createTemplate('css', /\bcss/.source);
   */

/**
   * Creates a no-op policy for internal use only.
   * Don't export this function outside this module!
   * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.
   * @param {Document} document The document object (to determine policy name suffix)
   * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types
   * are not supported).
   */

/**
   * Determines the direction and location of the Menu in relation to it's Toggle.
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Enables the Popper.js `flip` modifier, allowing the Dropdown to
   * automatically adjust it's placement in case of overlap with the viewport or toggle.
   * Refer to the [flip docs](https://popper.js.org/popper-documentation.html#modifiers..flip.enabled) for more info
   */

/**
   * Enables the Popper.js `flip` modifier, allowing the Overlay to
   * automatically adjust it's placement in case of overlap with the viewport or toggle.
   * Refer to the [flip docs](https://popper.js.org/popper-documentation.html#modifiers..flip.enabled) for more info
   */

/**
   * Export the current model to a JSON object
   * @return {Object} model
   */

/**
   * Forced recompute of cell sizes and positions.
   * This function should be called if cell sizes have changed but nothing else has.
   * Since cell positions are calculated by callbacks, the collection view has no way of detecting when the underlying data has changed.
   */

/**
   * Generate profiling statistics for the HTML5Backend.
   */

/**
   * Gets all cell indices contained in the specified region.
   * A region may encompass 1 or more Sections.
   */

/**
   * Gets offsets for a given cell and alignment.
   */

/**
   * Gets the disposable that does nothing when disposed.
   */

/**
   * Gets the underlying disposable.
   * @returns {Any} the underlying disposable.
   */

/**
   * Go throught the CSS styles for the element and apply them
   * @param {Object} ret Our pdfmake object
   * @param {DOMElement} element The DOM elemnet
   */

/**
   * If a prop switches from controlled to Uncontrolled
   * reset its value to the defaultValue
   */

/**
   * If the global context was used to store the DND context
   * then where theres no more references to it we should
   * clean it up to avoid memory leaks
   */

/**
   * Include a backdrop component.
   */

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js.
   * @prop {modifiers}
   */

/**
   * Load a PCA model from JSON
   * @param {Object} model
   * @return {PCA}
   */

/**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */

/**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */

/**
   * Modifier used to make sure the reference and its popper stay near each other
   * without leaving any gap between the two. Especially useful when the arrow is
   * enabled and you want to ensure that it points to its reference element.
   * It cares only about the first axis. You can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */

/**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */

/**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * A scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */

/**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */

/**
   * Options passed to focus function when `restoreFocus` is set to `true`
   *
   * @link  https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#Parameters
   */

/**
   * Override the default event used by RootCloseWrapper.
   */

/**
   * Permit to change the default styles based on the options
   * @return {[type]} [description]
   */

/**
   * Popper's placement.
   * @prop {Popper.placements} placement='bottom'
   */

/**
   * Project the dataset into the PCA space
   * @param {Matrix} dataset
   * @param {Object} options
   * @return {Matrix} dataset projected in the PCA space
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

/**
   * Result of the kmeans algorithm
   * @param {Array<number>} clusters - the cluster identifier for each data dot
   * @param {Array<Array<object>>} centroids - the K centers in format [x,y,z,...], the error and size of the cluster
   * @param {boolean} converged - Converge criteria satisfied
   * @param {number} iterations - Current number of iterations
   * @param {function} distance - (*Private*) Distance function to use between the points
   * @constructor
   */

/**
   * Returns a KMeansResult with the error and size of the cluster
   * @ignore
   * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster
   * @return {KMeansResult}
   */

/**
   * Returns a specific placeholder literal for the given language.
   *
   * @param {number} counter
   * @param {string} language
   * @returns {string}
   */

/**
   * Returns the Eigenvalues (on the diagonal)
   * @returns {[number]}
   */

/**
   * Returns the Eigenvectors of the covariance matrix
   * @returns {Matrix}
   */

/**
   * Returns the color in a hex format (e.g. #12ff00).
   * Also tries to convert RGB colors into hex values
   *
   * @param color color as string representation
   * @returns color as hex values for pdfmake
   */

/**
   * Returns the cumulative proportion of variance
   * @return {[number]}
   */

/**
   * Returns the loadings matrix
   * @return {Matrix}
   */

/**
   * Returns the placeholder for the given language id and index.
   *
   * @param {string} language
   * @param {string|number} index
   * @returns {string}
   */

/**
   * Returns the proportion of variance for each component
   * @return {[number]}
   */

/**
   * Returns the standard deviations of the principal components
   * @returns {[number]}
   */

/**
   * Returns the string content of a token or token stream.
   *
   * @param {string | Token | (string | Token)[]} value
   * @returns {string}
   */

/**
   * Returns the token of the given JavaScript interpolation expression.
   *
   * @param {string} expression The code of the expression. E.g. `"${42}"`
   * @returns {Token}
   */

/**
   * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.
   *
   * @param {string} code
   * @param {any} grammar
   * @param {string} language
   * @returns {(string|Token)[]}
   */

/**
   * Set the visibility of the Modal
   */

/**
   * Set the visibility of the Overlay
   */

/**
   * Set this to true if you want popper to position it self in 'fixed' mode
   * @prop {Boolean} positionFixed=false
   */

/**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */

/**
   * Sets the initial show position of the Dropdown.
   */

/**
   * Sort items in ascending order.
   * This means arranging from the lowest value to the highest (e.g. a-z, 0-9).
   */

/**
   * Sort items in descending order.
   * This means arranging from the highest value to the lowest (e.g. z-a, 9-0).
   */

/**
   * Specify disabled for disable RootCloseWrapper
   */

/**
   * Specify event for toggling overlay
   */

/**
   * Specify whether the feedback is for valid or invalid fields
   *
   * @type {('valid'|'invalid')}
   */

/**
   * Specify whether the overlay should trigger `onHide` when the user clicks outside the overlay
   */

/**
   * Takes an HTML string, converts to HTML using a DOM parser and recursivly parses
   * the content into pdfmake compatible doc definition
   *
   * @param htmlText the html text to translate as string
   * @returns pdfmake doc definition as object
   */

/**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unit-less, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the `height`.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
   *
   * @memberof modifiers
   * @inner
   */

/**
   * The languages for which JS templating will handle tagged template literals.
   *
   * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.
   */

/**
   * This function is intended for the creation of the bold or italic pattern.
   *
   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.
   *
   * _Note:_ Keep in mind that this adds a capturing group.
   *
   * @param {string} pattern
   * @param {boolean} starAlternative Whether to also add an alternative where all `_`s are replaced with `*`s.
   * @returns {RegExp}
   */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjunction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */

/**
   * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.
   *
   * This function has 3 phases:
   *
   * 1. Replace all JavaScript interpolation expression with a placeholder.
   *    The placeholder will have the syntax of a identify of the target language.
   * 2. Tokenize the code with placeholders.
   * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.
   *    The insertion only works if a placeholder hasn't been "ripped apart" meaning that the placeholder has been
   *    tokenized as two tokens by the grammar of the embedded language.
   *
   * @param {string} code
   * @param {object} grammar
   * @param {string} language
   * @returns {Token}
   */

/**
   * Transform a CSS expression (e.g. 'margin:10px') in the PDFMake version
   *
   * @param {String} style The CSS expression to transform
   * @param {DOMElement} element
   * @returns {Array} array of {key, value}
   */

/**
   * When `true` The modal will automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes. This also
   * works correctly with any Modal children that have the `autoFocus` prop.
   *
   * Generally this should never be set to `false` as it makes the Modal less
   * accessible to assistive technologies, like screen readers.
   */

/**
   * When `true` The modal will prevent focus from leaving the Modal while open.
   *
   * Generally this should never be set to `false` as it makes the Modal less
   * accessible to assistive technologies, like screen readers.
   */

/**
   * When `true` The modal will restore focus to previously focused element once
   * modal is hidden
   */

/**
   * Whether events (resize, scroll) are initially enabled.
   * @prop {Boolean} eventsEnabled=true
   */

/**
   * Whether or not the Dropdown is visible.
   *
   * @controllable onToggle
   */

/**
   * Wrapper around drag events to provide more useful data.
   *
   * @param  {String} handlerName Handler name to wrap.
   * @return {Function}           Handler function.
   */

/**
   * useful when wrapping a Component and you want to control
   * everything
   */

/**
  * Callback invoked when user clicks on the "Confused" button. Sends
  * data to server and display notification.
  */

/**
  * Constructor function
  */

/**
  * Create a free-form question with a text input field.
  *
  * @param {Object} props
  */

/**
  * Create a number question with a number input field.
  *
  * @param {Object} props
  */

/**
  * Create a select input field.
  *
  * @param {Object} props - component properties (`onChange` callback and `defaultValue`)
  */

/**
  * Create a select question.
  *
  * @param {Object} props - component properties
  */

/**
  * Create a text area
  *
  * @param {Object} props - component properties (`onChange` callback and `text`)
  */

/**
  * Creates FileReader and attaches event listener for when the file is ready.
  */

/**
  * Kernel smoother which returns a kernel density estimate at the supplied location.
  *
  * @param {number} x - input value
  * @returns {number} density estimate
  */

/**
  @param t: time (elapsed)
  @param b: initial value
  @param c: amount of change
  @param d: duration
*/

/**
  To use it:
  import htmlToPdfMake from 'html-to-pdfmake.js'
  htmlToPdfMake('<b>my bold text</b>');
*/

/**
 *
 * @param monitor The monitor to collect state from
 * @param collect The collecting function
 * @param onUpdate A method to invoke when updates occur
 */

/**
 *
 * @param {Array} input
 * @param {object} [options={}]
 * @param {Array} [options.output=[]] specify the output array, can be the input array for in place modification
 */

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */

/**
 *  Get computed style property
 *
 * @param {HTMLElement} el
 *
 * @returns {Object}
 */

/**
 * @classdesc Random class
 */

/**
 * @displayName Dropdown
 */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * @function
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Boolean} shouldRound - If the offsets should be rounded at all
 * @returns {Object} The popper's position offsets rounded
 *
 * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
 * good as it can be within reason.
 * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
 *
 * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
 * as well on High DPI screens).
 *
 * Firefox prefers no rounding for positioning and does not have blurriness on
 * high DPI screens.
 *
 * Only horizontal placement and left/right values need to be considered.
 */

/**
 * @ignore
 * @param {Object} props
 * @param {InputRangeClassNames} props.classNames
 * @param {Function} props.formatLabel
 * @param {string} props.type
 */

/**
 * @ignore
 * @param {Object} props
 * @return {?Error} Return Error if validation fails
 */

/**
 * @ignore
 * @param {Object} props - React component props
 * @return {?Error} Return Error if validation fails
 */

/**
 * @ignore
 * @typedef {Object} ClientRect
 * @property {number} height
 * @property {number} left
 * @property {number} top
 * @property {number} width
 */

/**
 * @ignore
 * @typedef {Object} Point
 * @property {number} x
 * @property {number} y
 */

/**
 * @ignore
 */

/**
 * @memberOf Dropdown
 * @param {object}  options
 * @param {boolean} options.flip Automatically adjust the menu `drop` position based on viewport edge detection
 * @param {boolean} options.show Display the menu manually, ignored in the context of a `Dropdown`
 * @param {boolean} options.usePopper opt in/out of using PopperJS to position menus. When disabled you must position it yourself.
 * @param {string}  options.rootCloseEvent The pointer event to listen for when determining "clicks outside" the menu for triggering a close.
 * @param {object}  options.popperConfig Options passed to the [`usePopper`](/api/usePopper) hook.
 */

/**
 * @param {Blob} file - File or Blob object.
 * @param {function} callback - Callback function.
 * @example
 * getSeekableBlob(blob or file, callback);
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 */

/**
 * @param {Blob} file - File or Blob object. This parameter is required.
 * @param {string} fileName - Optional file name e.g. "Recorded-Video.webm"
 * @example
 * invokeSaveAsDialog(blob or file, [optional] fileName);
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * @private
 * Check that a column index is not out of bounds
 * @param {Matrix} matrix
 * @param {number} index
 * @param {boolean} [outer]
 */

/**
 * @private
 * Check that a row index is not out of bounds
 * @param {Matrix} matrix
 * @param {number} index
 * @param {boolean} [outer]
 */

/**
 * @private
 * Check that the provided vector is an array with the right length
 * @param {Matrix} matrix
 * @param {Array|Matrix} vector
 * @return {Array}
 * @throws {RangeError}
 */

/**
 * @type {Object}
 * @property {Function} children
 * @property {Function} classNames
 * @property {Function} formatLabel
 * @property {Function} type
 */

/**
 * @typedef {Function} LabelFormatter
 * @param {number} value
 * @param {string} type
 * @return {string}
 */

/**
 * @typedef {Object} InputRangeClassNames
 * @property {string} activeTrack
 * @property {string} disabledInputRange
 * @property {string} inputRange
 * @property {string} labelContainer
 * @property {string} maxLabel
 * @property {string} minLabel
 * @property {string} slider
 * @property {string} sliderContainer
 * @property {string} track
 * @property {string} valueLabel
 */

/**
 * @typedef {Object} Range
 * @property {number} min - Min value
 * @property {number} max - Max value
 */

/**
 * A React component that allows users to input numeric values within a range
 * by dragging its sliders.
 */

/**
 * A React component that provides the React-DnD context
 */

/**
 * A collection of shims that provide minimal functionality of the ES6 collections.
 *
 * These implementations are not meant to be used outside of the ResizeObserver
 * modules as they cover only a limited range of use cases.
 */

/**
 * A convenience hook around `useState` designed to be paired with
 * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.
 * Callback refs are useful over `useRef()` when you need to respond to the ref being set
 * instead of lazily accessing it in an effect.
 *
 * ```ts
 * const [element, attachRef] = useCallbackRef<HTMLDivElement>()
 *
 * useEffect(() => {
 *   if (!element) return
 *
 *   const calendar = new FullCalendar.Calendar(element)
 *
 *   return () => {
 *     calendar.destroy()
 *   }
 * }, [element])
 *
 * return <div ref={attachRef} />
 * ```
 *
 * @category refs
 */

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */

/**
 * A higher order function that returns a higher order class component that injects
 * CSS-in-JS props derived from the react-with-styles theme, interface, and
 * direction provided through the WithStylesContext provider.
 *
 * The function should be used as follows:
 * `withStyles((theme) => styles, options)(Component)`
 *
 * Options can be used to rename the injected props, memoize the component, and flush
 * the styles to the styles tag (or whatever the interface implements as flush) before
 * rendering.
 *
 * @export
 * @param {Function|null|undefined} [stylesFn=EMPTY_STYLES_FN]
 * @param {Object} [{
 *     stylesPropName = 'styles',
 *     themePropName = 'theme',
 *     cssPropName = 'css',
 *     flushBefore = false,
 *     pureComponent = false,
 *   }={}]
 * @returns a higher order component that wraps the provided component and injects
 * the react-with-styles css, styles, and theme props.
 */

/**
 * A hook to retrieve the DragDropManager from Context
 */

/**
 * A reactive, fluid grid layout with draggable, resizable components.
 */

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */

/**
 * Add alignment patterns bits to matrix
 *
 * Note: this function must be called after {@link setupTimingPattern}
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */

/**
 * Add encoded data bits to matrix
 *
 * @param  {BitMatrix} matrix Modules matrix
 * @param  {Buffer}    data   Data codewords
 */

/**
 * Add finder patterns bits to matrix
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */

/**
 * Add format info bits to matrix
 *
 * @param  {BitMatrix} matrix               Modules matrix
 * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level
 * @param  {Number}    maskPattern          Mask pattern reference value
 */

/**
 * Add timing pattern bits to matrix
 *
 * Note: this function must be called before {@link setupAlignmentPattern}
 *
 * @param  {BitMatrix} matrix Modules matrix
 */

/**
 * Add version info bits to matrix
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */

/**
 * Adds the node to the specified parent and returns the resulting treeData.
 *
 * @param {!Object[]} treeData
 * @param {!Object} newNode - The node to insert
 * @param {number|string} parentKey - The key of the to-be parentNode of the node
 * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index
 * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`
 * @param {boolean=} expandParent - If true, expands the parentNode specified by parentPath
 * @param {boolean=} addAsFirstChild - If true, adds new node as first child of tree
 *
 * @return {Object} result
 * @return {Object[]} result.treeData - The updated tree data
 * @return {number} result.treeIndex - The tree index at which the node was inserted
 */

/**
 * Alignment pattern are fixed reference pattern in defined positions
 * in a matrix symbology, which enables the decode software to re-synchronise
 * the coordinate mapping of the image modules in the event of moderate amounts
 * of distortion of the image.
 *
 * Alignment patterns are present only in QR Code symbols of version 2 or larger
 * and their number depends on the symbol version.
 */

/**
 * Allows for registration of query handlers.
 * Manages the query handler's state and is responsible for wiring up browser events
 *
 * @constructor
 */

/**
 * Alphanumeric mode encodes data from a set of 45 characters,
 * i.e. 10 numeric digits (0 - 9),
 *      26 alphabetic characters (A - Z),
 *   and 9 symbols (SP, $, %, *, +, -, ., /, :).
 * Normally, two input characters are represented by 11 bits.
 *
 * @type {Object}
 */

/**
 * Also exported as `<Dropdown.Menu>` from `Dropdown`.
 *
 * @displayName DropdownMenu
 * @memberOf Dropdown
 */

/**
 * Also exported as `<Dropdown.Toggle>` from `Dropdown`.
 *
 * @displayName DropdownToggle
 * @memberOf Dropdown
 */

/**
 * An `addEventListener` ponyfill, supports the `once` option
 */

/**
 * An individual item within a ReactGridLayout.
 */

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */

/**
 * Applies xor operator at specified location
 * (used during masking process)
 *
 * @param {Number}  row
 * @param {Number}  col
 * @param {Boolean} value
 */

/**
 * Apply a mask pattern to a BitMatrix
 *
 * @param  {Number}    pattern Pattern reference number
 * @param  {BitMatrix} data    BitMatrix data
 */

/**
 * Array of characters available in alphanumeric mode
 *
 * As per QR Code specification, to each character
 * is assigned a value from 0 to 44 which in this case coincides
 * with the array index
 *
 * @type {Array}
 */

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

/**
 * Attach a callback that fires when a component unmounts
 *
 * @param fn Handler to run when the component unmounts
 * @category effects
 */

/**
 * Before moving item down, it will check if the movement will cause collisions and move those items down before.
 */

/**
 * Binary Search Bounds
 * https://github.com/mikolalysenko/binary-search-bounds
 * Mikola Lysenko
 *
 * Inlined because of Content Security Policy issue caused by the use of `new Function(...)` syntax.
 * Issue reported here: https://github.com/mikolalysenko/binary-search-bounds/issues/5
 **/

/**
 * Binary Search Bounds
 * https://github.com/mikolalysenko/interval-tree-1d
 * Mikola Lysenko
 *
 * Inlined because of Content Security Policy issue caused by the use of `new Function(...)` syntax in an upstream dependency.
 * Issue reported here: https://github.com/mikolalysenko/binary-search-bounds/issues/5
 **/

/**
 * Build QR Code symbol
 *
 * @param  {String} data                 Input string
 * @param  {Number} version              QR Code version
 * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level
 * @param  {MaskPattern} maskPattern     Mask pattern
 * @return {Object}                      Object containing symbol data
 */

/**
 * Builds a graph from a list of nodes.
 * All segments in each node group will be connected with all the segments of
 * the next group and so on.
 *
 * At each connection will be assigned a weight depending on the
 * segment's byte length.
 *
 * @param  {Array} nodes    Array of object with segments data
 * @param  {Number} version QR Code version
 * @return {Object}         Graph of all possible segments
 */

/**
 * Builds a list of segments from an array.
 * Array can contain Strings or Objects with segment's info.
 *
 * For each item which is a string, will be generated a segment with the given
 * string and the more appropriate encoding mode.
 *
 * For each item which is an object, will be generated a segment with the given
 * data and mode.
 * Objects must contain at least the property "data".
 * If property "mode" is not present, the more suitable mode will be used.
 *
 * @param  {Array} array Array of objects with segments data
 * @return {Array}       Array of Segments
 */

/**
 * Builds a segment from a specified data and mode.
 * If a mode is not specified, the more suitable will be used.
 *
 * @param  {String} data             Input data
 * @param  {Mode | String} modesHint Data mode
 * @return {Segment}                 Segment
 */

/**
 * Builds an optimized sequence of segments from a string,
 * which will produce the shortest possible bitstream.
 *
 * @param  {String} data    Input string
 * @param  {Number} version QR Code version
 * @return {Array}          Array of segments
 */

/**
 * Calculate and return a CSS transform style to position a detached element
 * next to a reference element. The open and anchor direction indicate wether
 * it should be positioned above/below and/or to the left/right of the
 * reference element.
 *
 * Assuming r(0,0), r(1,1), d(0,0), d(1,1) for the bottom-left and top-right
 * corners of the reference and detached elements, respectively:
 *  - openDirection = DOWN, anchorDirection = LEFT => d(0,1) == r(0,1)
 *  - openDirection = UP, anchorDirection = LEFT => d(0,0) == r(0,0)
 *  - openDirection = DOWN, anchorDirection = RIGHT => d(1,1) == r(1,1)
 *  - openDirection = UP, anchorDirection = RIGHT => d(1,0) == r(1,0)
 *
 * By using a CSS transform, we allow to further position it using
 * top/bottom CSS properties for the anchor gutter.
 *
 * @param {string} openDirection The vertical positioning of the popup
 * @param {string} anchorDirection The horizontal position of the popup
 * @param {HTMLElement} referenceEl The reference element
 */

/**
 * Calculate proportion of dark modules in entire symbol
 *
 * Points: N4 * k
 *
 * k is the rating of the deviation of the proportion of dark modules
 * in the symbol from 50% in steps of 5%
 */

/**
 * Calculate the absolute difference between two numbers
 * @ignore
 * @param {number} numA
 * @param {number} numB
 * @return {number}
 */

/**
 * Calculate the distance between pointA and pointB
 * @ignore
 * @param {Point} pointA
 * @param {Point} pointB
 * @return {number} Distance
 */

/**
 * Calculate the remainder of polynomials division
 *
 * @param  {Buffer} divident Polynomial
 * @param  {Buffer} divisor  Polynomial
 * @return {Buffer}          Remainder
 */

/**
 * Calculate the row/column coordinates of the center module of each alignment pattern
 * for the specified QR Code version.
 *
 * The alignment patterns are positioned symmetrically on either side of the diagonal
 * running from the top left corner of the symbol to the bottom right corner.
 *
 * Since positions are simmetrical only half of the coordinates are returned.
 * Each item of the array will represent in turn the x and y coordinate.
 * @see {@link getPositions}
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinate
 */

/**
 * Calculates an appropriate content rectangle for provided html or svg element.
 *
 * @param {Element} target - Element content rectangle of which needs to be calculated.
 * @returns {DOMRectInit}
 */

/**
 * Calculates content rectangle of provided HTMLElement.
 *
 * @param {HTMLElement} target - Element for which to calculate the content rectangle.
 * @returns {DOMRectInit}
 */

/**
 * Calculates content rectangle of provided SVG element.
 *
 * @param {SVGGraphicsElement} target - Element content rectangle of which needs
 *      to be calculated.
 * @returns {DOMRectInit}
 */

/**
 * Calculates the distance matrix for a given array of points
 * @ignore
 * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster
 * @param {function} distance - Distance function to use between the points
 * @return {Array<Array<number>>} - matrix with the distance values
 */

/**
 * Calculates the number of cells to overscan before and after a specified range.
 * This function ensures that overscanning doesn't exceed the available cells.
 */

/**
 * Calls a task as soon as possible after returning, in its own event, with priority
 * over other events like animation, reflow, and repaint. An error thrown from an
 * event will not interrupt, nor even substantially slow down the processing of
 * other events, but will be rather postponed to a lower priority event.
 * @param {{call}} task A callable object, typically a function that takes no
 * arguments.
 */

/**
 * CanvasRecorder is a standalone class used by {@link RecordRTC} to bring HTML5-Canvas recording into video WebM. It uses HTML2Canvas library and runs top over {@link Whammy}.
 * @summary HTML2Canvas recording into video WebM.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef CanvasRecorder
 * @class
 * @example
 * var recorder = new CanvasRecorder(htmlElement, { disableLogs: true, useWhammyRecorder: true });
 * recorder.record();
 * recorder.stop(function(blob) {
 *     video.src = URL.createObjectURL(blob);
 * });
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {HTMLElement} htmlElement - querySelector/getElementById/getElementsByTagName[0]/etc.
 * @param {object} config - {disableLogs:true, initCallback: function}
 */

/**
 * Captialize a string
 * @ignore
 * @param {string} string
 * @return {string}
 */

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */

/**
 * Check if QR Code version is valid
 *
 * @param  {Number}  version QR Code version
 * @return {Boolean}         true if valid version, false otherwise
 */

/**
 * Check if a node is a descendant of another node.
 *
 * @param {!Object} older - Potential ancestor of younger node
 * @param {!Object} younger - Potential descendant of older node
 *
 * @return {boolean}
 */

/**
 * Check if a value is a number
 * @ignore
 * @param {*} value
 * @return {boolean}
 */

/**
 * Check if a value is an object
 * @ignore
 * @param {*} value
 * @return {boolean}
 */

/**
 * Check if a value is defined
 * @ignore
 * @param {*} value
 * @return {boolean}
 */

/**
 * Check if an element has fixed/sticky position
 * @param {HTMLElement|Node} el
 * @param {string} [type]
 *
 * @returns {boolean}
 */

/**
 * Check if bit at specified location is reserved
 *
 * @param {Number}   row
 * @param {Number}   col
 * @return {Boolean}
 */

/**
 * Check if input param is a valid mode object
 *
 * @param   {Mode}    mode Mode object
 * @returns {Boolean} True if valid mode, false otherwise
 */

/**
 * Check if mask pattern value is valid
 *
 * @param  {Number}  mask    Mask pattern
 * @return {Boolean}         true if valid, false otherwise
 */

/**
 * Check if the element has custom offset parent
 *
 * @param {HTMLElement} element
 *
 * @returns {boolean}
 */

/**
 * Check if the element has custom scroll parent
 *
 * @param {HTMLElement} element
 * @param {boolean} skipFix
 *
 * @returns {boolean}
 */

/**
 * Check if the element is visible
 *
 * @param {HTMLElement} element
 *
 * @returns {boolean}
 */

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */

/**
 * Checks whether provided element is a document element (<html>).
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */

/**
 * Checks whether provided element is an instance of the SVGGraphicsElement.
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */

/**
 * Choose K different random points from the original data
 * @ignore
 * @param {Array<Array<number>>} data - Points in the format to cluster [x,y,z,...]
 * @param {number} K - number of clusters
 * @param {number} seed - seed for random number generation
 * @return {Array<Array<number>>} - Initial random points
 */

/**
 * Chooses the most distant points to a first random pick
 * @ignore
 * @param {Array<Array<number>>} data - Points in the format to cluster [x,y,z,...]
 * @param {number} K - number of clusters
 * @param {Array<Array<number>>} distanceMatrix - matrix with the distance values
 * @param {number} seed - seed for random number generation
 * @return {Array<Array<number>>} - Initial random points
 */

/**
 * Clamp a value between a min and max value
 * @ignore
 * @param {number} value
 * @param {number} min
 * @param {number} max
 * @return {number}
 */

/**
 * Class that is responsible for computations of the content rectangle of
 * provided DOM element and for keeping track of it's changes.
 */

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

/**
 * Colors.
 */

/**
 * Compact an item in the layout.
 *
 * Modifies item.
 *
 */

/**
 * Compare if two variables are equal
 *
 * @param {*} left
 * @param {*} right
 *
 * @returns {boolean}
 */

/**
 * Comparing React `children` is a bit difficult. This is a good way to compare them.
 * This will catch differences in keys, order, and length.
 */

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @param {Boolean} fixedPosition - Is in fixed position mode
 * @returns {Object} Coordinates of the boundaries
 */

/**
 * Computes the maximum of the given values
 * @param {Array<number>} input
 * @return {number}
 */

/**
 * Computes the minimum of the given values
 * @param {Array<number>} input
 * @return {number}
 */

/**
 * Convert a model value into a percentage value
 * @ignore
 * @param {number} value
 * @param {number} minValue
 * @param {number} maxValue
 * @return {number}
 */

/**
 * Convert a point into a model value
 * @ignore
 * @param {Point} position
 * @param {number} minValue
 * @param {number} maxValue
 * @param {ClientRect} clientRect
 * @return {number}
 */

/**
 * Convert a point into a percentage value
 * @ignore
 * @param {Point} position
 * @param {ClientRect} clientRect
 * @return {number} Percentage value
 */

/**
 * Convert a range of values into points
 * @ignore
 * @param {Range} values
 * @param {number} minValue
 * @param {number} maxValue
 * @param {ClientRect} clientRect
 * @return {Range}
 */

/**
 * Convert a value into a point
 * @ignore
 * @param {number} value
 * @param {number} minValue
 * @param {number} maxValue
 * @param {ClientRect} clientRect
 * @return {Point} Position
 */

/**
 * Convert a value into a step value
 * @ignore
 * @param {number} value
 * @param {number} valuePerStep
 * @return {number}
 */

/**
 * Convert an event into a point
 * @ignore
 * @param {Event} event
 * @param {ClientRect} clientRect
 * @return {Point}
 */

/**
 * Convert hex to RGB
 *
 * @param {string} hex
 * @returns {Array}
 */

/**
 * Convert model values into percentage values
 * @ignore
 * @param {Range} values
 * @param {number} minValue
 * @param {number} maxValue
 * @return {Range}
 */

/**
 * Convert props into a range value
 * @ignore
 * @param {Object} props
 * @param {boolean} isMultiValue
 * @return {Range}
 */

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */

/**
 * Converts provided string to a number.
 *
 * @param {number|string} value
 * @returns {number}
 */

/**
 * Coordinate addition
 * @param a The first coordinate
 * @param b The second coordinate
 */

/**
 * Coordinate subtraction
 * @param a The first coordinate
 * @param b The second coordinate
 */

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/hyphenateStyleName.js
 */

/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Count all the visible (expanded) descendants in the tree data.
 *
 * @param {!Object[]} treeData - Tree data
 *
 * @return {number} count
 */

/**
 * Create and returns a single callback ref composed from two other Refs.
 *
 * ```tsx
 * const Button = React.forwardRef((props, ref) => {
 *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();
 *   const mergedRef = useMergedRefs(ref, attachRef);
 *
 *   return <button ref={mergedRef} {...props}/>
 * })
 * ```
 *
 * @param refA A Callback or mutable Ref
 * @param refB A Callback or mutable Ref
 * @category refs
 */

/**
 * Create encoded codewords from data input
 *
 * @param  {Number}   version              QR Code version
 * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level
 * @param  {ByteData} data                 Data input
 * @return {Buffer}                        Buffer containing encoded codewords
 */

/**
 * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
 * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
 *
 * @param {number} x - X coordinate.
 * @param {number} y - Y coordinate.
 * @param {number} width - Rectangle's width.
 * @param {number} height - Rectangle's height.
 * @returns {DOMRectInit}
 */

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
 * Creates a `Ref` whose value is updated in an effect, ensuring the most recent
 * value is the one rendered with. Generally only required for Concurrent mode usage
 * where previous work in `render()` may be discarded befor being used.
 *
 * This is safe to access in an event handler.
 *
 * @param value The `Ref` value
 */

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */

/**
 * Creates a function that accepts arguments of `func` and either invokes
 * `func` returning its result, if at least `arity` number of arguments have
 * been provided, or returns a function that accepts the remaining `func`
 * arguments, and so on. The arity of `func` may be specified if `func.length`
 * is not sufficient.
 *
 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
 * may be used as a placeholder for provided arguments.
 *
 * **Note:** This method doesn't set the "length" property of curried functions.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Function
 * @param {Function} func The function to curry.
 * @param {number} [arity=func.length] The arity of `func`.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new curried function.
 * @example
 *
 * var abc = function(a, b, c) {
 *   return [a, b, c];
 * };
 *
 * var curried = _.curry(abc);
 *
 * curried(1)(2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2, 3);
 * // => [1, 2, 3]
 *
 * // Curried with placeholders.
 * curried(1)(_, 3)(2);
 * // => [1, 2, 3]
 */

/**
 * Creates a function that either curries or invokes `func` with optional
 * `this` binding and partially applied arguments.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags.
 *  The bitmask may be composed of the following flags:
 *     1 - `_.bind`
 *     2 - `_.bindKey`
 *     4 - `_.curry` or `_.curryRight` of a bound function
 *     8 - `_.curry`
 *    16 - `_.curryRight`
 *    32 - `_.partial`
 *    64 - `_.partialRight`
 *   128 - `_.rearg`
 *   256 - `_.ary`
 *   512 - `_.flip`
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to be partially applied.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */

/**
 * Creates a function that produces an instance of `Ctor` regardless of
 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
 *
 * @private
 * @param {Function} Ctor The constructor to wrap.
 * @returns {Function} Returns the new wrapped function.
 */

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */

/**
 * Creates a function that returns the result of invoking the given functions
 * with the `this` binding of the created function, where each successive
 * invocation is supplied the return value of the previous.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Util
 * @param {...(Function|Function[])} [funcs] The functions to invoke.
 * @returns {Function} Returns the new composite function.
 * @see _.flowRight
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var addSquare = _.flow([_.add, square]);
 * addSquare(1, 2);
 * // => 9
 */

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */

/**
 * Creates a function that wraps `func` to continue currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {Function} wrapFunc The function to create the `func` wrapper.
 * @param {*} placeholder The placeholder value.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */

/**
 * Creates a function that wraps `func` to enable currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {number} arity The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */

/**
 * Creates a function that wraps `func` to invoke it with optional `this`
 * binding of `thisArg`, partial application, and currying.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [partialsRight] The arguments to append to those provided
 *  to the new function.
 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */

/**
 * Creates a function that wraps `func` to invoke it with the `this` binding
 * of `thisArg` and `partials` prepended to the arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} partials The arguments to prepend to those provided to
 *  the new function.
 * @returns {Function} Returns the new wrapped function.
 */

/**
 * Creates a function that wraps `func` to invoke it with the optional `this`
 * binding of `thisArg`.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @returns {Function} Returns the new wrapped function.
 */

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */

/**
 * Creates a wrapper function which ensures that provided callback will be
 * invoked only once during the specified delay period.
 *
 * @param {Function} callback - Function to be invoked after the delay period.
 * @param {number} delay - Delay after which to invoke callback.
 * @returns {Function}
 */

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */

/**
 * Creates an array that is the composition of partially applied arguments,
 * placeholders, and provided arguments into a single array of arguments.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to prepend to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */

/**
 * Creates an instance of DecisionTree
 *
 * @constructor
 * @param builder - contains training set and
 *                  some configuration parameters
 */

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates new PCA (Principal Component Analysis) from the dataset
 * @param {Matrix} dataset - dataset or covariance matrix.
 * @param {Object} [options]
 * @param {boolean} [options.isCovarianceMatrix=false] - true if the dataset is a covariance matrix.
 * @param {string} [options.method='SVD'] - select which method to use: SVD (default), covarianceMatrirx or NIPALS.
 * @param {number} [options.nCompNIPALS=2] - number of components to be computed with NIPALS.
 * @param {boolean} [options.center=true] - should the data be centered (subtract the mean).
 * @param {boolean} [options.scale=false] - should the data be scaled (divide by the standard deviation).
 * @param {boolean} [options.ignoreZeroVariance=false] - ignore columns with zero variance if `scale` is `true`.
 * */

/**
 * Creates rectangle with an interface of the DOMRectReadOnly.
 * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
 *
 * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
 * @returns {DOMRectReadOnly}
 */

/**
 * Creates the context object we're providing
 * @param backend
 * @param context
 */

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

/**
 * Data mask pattern reference
 * @type {Object}
 */

/**
 * Decide if the step shouldn't skip the beacon
 * @param {Object} step
 *
 * @returns {boolean}
 */

/**
 * Decorates a component as a dragsource
 * @param type The dragsource type
 * @param spec The drag source specification
 * @param collect The props collector function
 * @param options DnD options
 */

/**
 * Default accessor for returning a cell value for a given attribute.
 * This function expects to operate on either a vanilla Object or an Immutable Map.
 * You should override the column's cellDataGetter if your data is some other type of object.
 */

/**
 * Default cell renderer that displays an attribute as a simple string
 * You should override the column's cellRenderer if your data is some other type of object.
 */

/**
 * Default implementation of cellRangeRenderer used by Grid.
 * This renderer supports cell-caching while the user is scrolling.
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overridden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass an object with the same
 * structure of the `options` object, as the 3rd argument. For example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */

/**
 * Default row renderer for Table.
 */

/**
 * Default table header renderer.
 */

/**
 * Delegate to handle a media query being matched and unmatched.
 *
 * @param {object} options
 * @param {function} options.match callback for when the media query is matched
 * @param {function} [options.unmatch] callback for when the media query is unmatched
 * @param {function} [options.setup] one-time callback triggered the first time a query is matched
 * @param {boolean} [options.deferSetup=false] should the setup callback be run immediately, rather than first time query is matched?
 * @constructor
 */

/**
 * Deprecated: Do not use directly. Please wrap your component in `withStyles` and use the `css`
 * prop injected via props instead.
 */

/**
 * Destroys the popper.
 * @method
 * @memberof Popper
 */

/**
 * Detect Element Resize.
 * https://github.com/sdecima/javascript-detect-element-resize
 * Sebastian Decima
 *
 * Forked from version 0.5.3; includes the following modifications:
 * 1) Guard against unsafe 'window' and 'document' references (to support SSR).
 * 2) Defer initialization code via a top-level function wrapper (to support SSR).
 * 3) Avoid unnecessary reflows by not measuring size for scroll events bubbling from children.
 * 4) Add nonce for style element.
 * 5) Added support for injecting custom window object
 **/

/**
 * Detect legacy browsers
 *
 * @returns {boolean}
 */

/**
 * Detects whether window and document objects are available in current environment.
 */

/**
 * Determine if two cartesian coordinate offsets are equal
 * @param offsetA
 * @param offsetB
 */

/**
 * Determines a new offset that ensures a certain cell is visible, given the current offset.
 * If the cell is already visible then the current offset will be returned.
 * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.
 *
 * @param align Desired alignment within container; one of "auto" (default), "start", or "end"
 * @param cellOffset Offset (x or y) position for cell
 * @param cellSize Size (width or height) of cell
 * @param containerSize Total size (width or height) of the container
 * @param currentOffset Container's current (x or y) offset
 * @return Offset to use to ensure the specified cell is visible
 */

/**
 * Determines if the browser is Internet Explorer
 * @method
 * @memberof Popper.Utils
 * @param {Number} version to check
 * @returns {Boolean} isIE
 */

/**
 * Determines if the given handler IDs are dirty or not.
 *
 * @param dirtyIds The set of dirty handler ids
 * @param handlerIds The set of handler ids to check
 */

/**
 * Determines if the specified start/stop range is visible based on the most recently rendered range.
 */

/**
 * Determines if two arrays of items are equal
 * @param a The first array of items
 * @param b The second array of items
 */

/**
 * Determines the x,y offset between the client offset and the initial client offset
 *
 * @param state The offset state to compute from
 */

/**
 * Disabling the scroll on a node involves finding all the scrollable ancestors
 * and set their 'overflow-y' CSS property to 'hidden'. When all ancestors have
 * 'overflow-y: hidden' (up to the document element) there is no scroll
 * container, thus all the scroll outside of the node is disabled. In order to
 * enable scroll again, we store the previous value of the 'overflow-y' for
 * every ancestor in a closure and reset it back.
 *
 * @param {HTMLElement} node Any DOM element.
 */

/**
 * DiskStorage is a standalone object used by {@link RecordRTC} to store recorded blobs in IndexedDB storage.
 * @summary Writing blobs into IndexedDB.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @example
 * DiskStorage.Store({
 *     audioBlob: yourAudioBlob,
 *     videoBlob: yourVideoBlob,
 *     gifBlob  : yourGifBlob
 * });
 * DiskStorage.Fetch(function(dataURL, type) {
 *     if(type === 'audioBlob') { }
 *     if(type === 'videoBlob') { }
 *     if(type === 'gifBlob')   { }
 * });
 * // DiskStorage.dataStoreName = 'recordRTC';
 * // DiskStorage.onError = function(error) { };
 * @property {function} init - This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.
 * @property {function} Fetch - This method fetches stored blobs from IndexedDB.
 * @property {function} Store - This method stores blobs in IndexedDB.
 * @property {function} onError - This function is invoked for any known/unknown error.
 * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 */

/**
 * Displayed beside a header to indicate that a Table is currently sorted by this column.
 */

/**
 * Each step operation for kmeans
 * @ignore
 * @param {Array<Array<number>>} centers - K centers in format [x,y,z,...]
 * @param {Array<Array<number>>} data - Points [x,y,z,...] to cluster
 * @param {Array<number>} clusterID - Cluster identifier for each data dot
 * @param {number} K - Number of clusters
 * @param {object} [options] - Option object
 * @param {number} iterations - Current number of iterations
 * @return {KMeansResult}
 */

/**
 * Encode data with Bose-Chaudhuri-Hocquenghem
 *
 * @param  {Number} data Value to encode
 * @return {Number}      Encoded value
 */

/**
 * Encode input data with Reed-Solomon and return codewords with
 * relative error correction bits
 *
 * @param  {BitBuffer} bitBuffer            Data to encode
 * @param  {Number}    version              QR Code version
 * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level
 * @return {Buffer}                         Buffer containing encoded codewords
 */

/**
 * Encodes a chunk of data
 *
 * @param  {Buffer} data Buffer containing input data
 * @return {Buffer}      Buffer containing encoded data
 */

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */

/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */

/**
 * Expand or close every node in the tree
 *
 * @param {!Object[]} treeData - Tree data
 * @param {?boolean} expanded - Whether the node is expanded or not
 *
 * @return {Object[]} changedTreeData - The changed tree data
 */

/**
 * Extracts a series of segments with the appropriate
 * modes from a string
 *
 * @param  {String} dataStr Input string
 * @return {Array}          Array of object with segments data
 */

/**
 * Extracts borders size from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @param {...string} positions - Borders positions (top, right, ...)
 * @returns {number}
 */

/**
 * Extracts paddings sizes from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @returns {Object} Paddings box.
 */

/**
 * Extracts wrapper details from the `source` body comment.
 *
 * @private
 * @param {string} source The source to inspect.
 * @returns {Array} Returns the wrapper details.
 */

/**
 * FUNCTION: partial( fn, j )
 *	Partially applied function from the right.
 *
 * @private
 * @param {Function} fn - input function
 * @param {Number} j - array index
 * @returns {Function} partially applied function
 */

/**
 * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,
 * preceded or followed by light area 4 modules wide
 *
 * Points: N3 * number of pattern found
 */

/**
 * Find 2x2 blocks with the same color and assign a penalty value
 *
 * Points: N2 * (m - 1) * (n - 1)
 */

/**
 * Find and return the target DOM element based on a step's 'target'.
 *
 * @private
 * @param {string|HTMLElement} element
 *
 * @returns {HTMLElement|null}
 */

/**
 * Find and return the target DOM element based on a step's 'target'.
 *
 * @private
 * @param {string|HTMLElement} element
 * @param {number} offset
 * @param {boolean} skipFix
 *
 * @returns {HTMLElement|undefined}
 */

/**
 * Find nodes matching a search query in the tree,
 *
 * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index
 * @param {!Object[]} treeData - Tree data
 * @param {?string|number} searchQuery - Function returning a boolean to indicate whether the node is a match or not
 * @param {!function} searchMethod - Function returning a boolean to indicate whether the node is a match or not
 * @param {?number} searchFocusOffset - The offset of the match to focus on
 *                                      (e.g., 0 focuses on the first match, 1 on the second)
 * @param {boolean=} expandAllMatchPaths - If true, expands the paths to any matched node
 * @param {boolean=} expandFocusMatchPaths - If true, expands the path to the focused node
 *
 * @return {Object[]} matches - An array of objects containing the matching `node`s, their `path`s and `treeIndex`s
 * @return {Object[]} treeData - The original tree data with all relevant nodes expanded.
 *                               If expandAllMatchPaths and expandFocusMatchPaths are both false,
 *                               it will be the same as the original tree data.
 */

/**
 * Find the bounding client rect
 *
 * @private
 * @param {HTMLElement} element - The target element
 * @returns {Object}
 */

/**
 * Finds the first parent of an element that has a transformed property defined
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} first transformed parent or documentElement
 */

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/

/**
 * Generate a layout using the initialLayout and children as a template.
 * Missing entries will be added, extraneous ones will be truncated.
 *
 * Does not modify initialLayout.
 *
 * @param  {Array}  initialLayout Layout passed in through props.
 * @param  {String} breakpoint    Current responsive breakpoint.
 * @param  {?String} compact      Compaction option.
 * @return {Array}                Working layout.
 */

/**
 * Generate a tree structure from flat data.
 *
 * @param {!Object[]} flatData
 * @param {!function=} getKey - Function to get the key from the nodeData
 * @param {!function=} getParentKey - Function to get the parent key from the nodeData
 * @param {string|number=} rootKey - The value returned by `getParentKey` that corresponds to the root node.
 *                                  For example, if your nodes have id 1-99, you might use rootKey = 0
 *
 * @return {Object[]} treeData - The flat data represented as a tree
 */

/**
 * Generate a unique key for any set of event options
 */

/**
 * Generate an irreducible generator polynomial of specified degree
 * (used by Reed-Solomon encoder)
 *
 * @param  {Number} degree Degree of the generator polynomial
 * @return {Buffer}        Buffer containing polynomial coefficients
 */

/**
 * Generates a list of all possible nodes combination which
 * will be used to build a segments graph.
 *
 * Nodes are divided by groups. Each group will contain a list of all the modes
 * in which is possible to encode the given text.
 *
 * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.
 * The group for '12345' will contain then 3 objects, one for each
 * possible encoding mode.
 *
 * Each node represents a possible segment.
 *
 * @param  {Array} segs Array of object with segments data
 * @return {Array}      Array of object with segments data
 */

/**
 * Generator version for the algorithm
 * @ignore
 * @param {Array<Array<number>>} centers - K centers in format [x,y,z,...]
 * @param {Array<Array<number>>} data - Points [x,y,z,...] to cluster
 * @param {Array<number>} clusterID - Cluster identifier for each data dot
 * @param {number} K - Number of clusters
 * @param {object} [options] - Option object
 */

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */

/**
 * Get a layout item by ID. Used so we can override later on if necessary.
 *
 * @param  {Array}  layout Layout array.
 * @param  {String} id     ID
 * @return {LayoutItem}    Item at ID.
 */

/**
 * Get a list of segments of the specified mode
 * from a string
 *
 * @param  {Mode}   mode Segment mode
 * @param  {String} str  String to process
 * @return {Array}       Array of object with segments data
 */

/**
 * Get a value of margin or containerPadding.
 *
 * @param  {Array | Object} param Margin | containerPadding, e.g. [10, 10] | {lg: [10, 10], ...}.
 * @param  {String} breakpoint   Breakpoint: lg, md, sm, xs and etc.
 * @return {Array}
 */

/**
 * Get all static elements.
 * @param  {Array} layout Array of layout objects.
 * @return {Array}        Array of static layout items..
 */

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */

/**
 * Get layout items sorted from top left to right and down.
 *
 * @return {Array} Array of layout objects.
 * @return {Array}        Layout, sorted static items first.
 */

/**
 * Get mode object from its name
 *
 * @param   {String} string Mode name
 * @returns {Mode}          Mode object
 */

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @param {Element} fixedPosition - is in fixed position mode
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */

/**
 * Get scroll parent with fix
 *
 * @param {HTMLElement} element
 * @param {boolean} skipFix
 * @param {boolean} [forListener]
 *
 * @returns {*}
 */

/**
 * Get text from React components
 *
 * @param {*} root
 *
 * @returns {string}
 */

/**
 * Get the <targetIndex>th visible node in the tree data.
 *
 * @param {!Object[]} treeData - Tree data
 * @param {!number} targetIndex - The index of the node to search for
 * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index
 *
 * @return {{
 *      node: Object,
 *      path: []string|[]number,
 *      lowerSiblingCounts: []number
 *  }|null} node - The node at targetIndex, or null if not found
 */

/**
 * Get the current browser
 *
 * @param {string} userAgent
 *
 * @returns {String}
 */

/**
 * Get the maximum depth of the children (the depth of the root node is 0).
 *
 * @param {!Object} node - Node in the tree
 * @param {?number} depth - The current depth
 *
 * @return {number} maxDepth - The deepest depth in the tree
 */

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */

/**
 * Get the property of an object nested in one or more objects
 * given an object such as a.b.c.d = 5, getNestedProperty(a, "b.c.d") will return 5.
 * @param {Object} object the object to get the property from
 * @param {String} property the path to the property as a string
 * @returns the object or the the property value if found
 */

/**
 * Get the scrollTop position
 *
 * @param {HTMLElement} element
 * @param {number} offset
 * @param {boolean} skipFix
 *
 * @returns {number}
 */

/**
 * Get the toString Object type
 * @param {*} value
 * @returns {string}
 */

/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */

/**
 * Get tree data flattened.
 *
 * @param {!Object[]} treeData - Tree data
 * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index
 * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`
 *
 * @return {{
 *      node: Object,
 *      path: []string|[]number,
 *      lowerSiblingCounts: []number
 *  }}[] nodes - The node array
 */

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

/**
 * Gets the argument placeholder value for `func`.
 *
 * @private
 * @param {Function} func The function to inspect.
 * @returns {*} Returns the placeholder value.
 */

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */

/**
 * Gets the dimensions of the element, accounting for API differences between
 * `window` and other DOM elements.
 */

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */

/**
 * Gets the node at the specified path
 *
 * @param {!Object[]} treeData
 * @param {number[]|string[]} path - Array of keys leading up to node to be deleted
 * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index
 * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`
 *
 * @return {Object|null} nodeInfo - The node info at the given path, or null if not found
 */

/**
 * Gets the number of `placeholder` occurrences in `array`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} placeholder The placeholder to search for.
 * @returns {number} Returns the placeholder count.
 */

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */

/**
 * Gets the vertical and horizontal position of an element within its scroll container.
 * Elements that have been “scrolled past” return negative values.
 * Handles edge-case where a user is navigating back (history) from an already-scrolled page.
 * In this case the body’s top or left position will be a negative number and this element’s top or left will be increased (by that amount).
 */

/**
 * Gets the vertical and horizontal scroll amount of the element, accounting for IE compatibility
 * and API differences between `window` and other DOM elements.
 */

/**
 * GifRecorder is standalone calss used by {@link RecordRTC} to record video or canvas into animated gif.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef GifRecorder
 * @class
 * @example
 * var recorder = new GifRecorder(mediaStream || canvas || context, { onGifPreview: function, onGifRecordingStarted: function, width: 1280, height: 720, frameRate: 200, quality: 10 });
 * recorder.record();
 * recorder.stop(function(blob) {
 *     img.src = URL.createObjectURL(blob);
 * });
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {MediaStream} mediaStream - MediaStream object or HTMLCanvasElement or CanvasRenderingContext2D.
 * @param {object} config - {disableLogs:true, initCallback: function, width: 320, height: 240, frameRate: 200, quality: 10}
 */

/**
 * Given a breakpoint, get the # of cols set for it.
 * @param  {String} breakpoint Breakpoint name.
 * @param  {Object} cols       Map of breakpoints to cols.
 * @return {Number}            Number of cols.
 */

/**
 * Given a height and width in pixel values, calculate grid units.
 * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calcluations.
 * @param  {Number} height                  Height in pixels.
 * @param  {Number} width                   Width in pixels.
 * @param  {Number} x                       X coordinate in grid units.
 * @param  {Number} y                       Y coordinate in grid units.
 * @return {Object}                         w, h as grid units.
 */

/**
 * Given a layout, compact it. This involves going down each y coordinate and removing gaps
 * between items.
 *
 * Does not modify layout items (clones). Creates a new layout array.
 *
 * @param  {Array} layout Layout.
 * @param  {Boolean} verticalCompact Whether or not to compact the layout
 *   vertically.
 * @return {Array}       Compacted Layout.
 */

/**
 * Given a layout, make sure all elements fit within its bounds.
 *
 * Modifies layout items.
 *
 * @param  {Array} layout Layout array.
 * @param  {Number} bounds Number of columns.
 */

/**
 * Given a width, find the highest breakpoint that matches is valid for it (width > breakpoint).
 *
 * @param  {Object} breakpoints Breakpoints object (e.g. {lg: 1200, md: 960, ...})
 * @param  {Number} width Screen width.
 * @return {String}       Highest breakpoint that is less than width.
 */

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */

/**
 * Given breakpoints, return an array of breakpoints sorted by width. This is usually
 * e.g. ['xxs', 'xs', 'sm', ...]
 *
 * @param  {Object} breakpoints Key/value pair of breakpoint names to widths.
 * @return {Array}              Sorted breakpoints.
 */

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */

/**
 * Given existing layouts and a new breakpoint, find or generate a new layout.
 *
 * This finds the layout above the new one and generates from it, if it exists.
 *
 * @param  {Object} layouts     Existing layouts.
 * @param  {Array} breakpoints All breakpoints.
 * @param  {String} breakpoint New breakpoint.
 * @param  {String} breakpoint Last breakpoint (for fallback).
 * @param  {Number} cols       Column count at new breakpoint.
 * @param  {Boolean} verticalCompact Whether or not to compact the layout
 *   vertically.
 * @return {Array}             New layout.
 */

/**
 * Given two layoutitems, check if they collide.
 */

/**
 * Helper class to handle QR Code symbol modules
 *
 * @param {Number} size Symbol size
 */

/**
 * Helper function for determining whether target object is a function
 *
 * @param target the object under test
 * @return {Boolean} true if function, false otherwise
 */

/**
 * Helper function for determining whether target object is an array
 *
 * @param target the object under test
 * @return {Boolean} true if array, false otherwise
 */

/**
 * Helper function for iterating over a collection
 *
 * @param collection
 * @param fn
 */

/**
 * Helper function that determines when to update scroll offsets to ensure that a scroll-to-index remains visible.
 * This function also ensures that the scroll ofset isn't past the last column/row of cells.
 */

/**
 * Helper function to get the browser-normalized "document height"
 * @returns {Number}
 */

/**
 * Helper method that determines when to recalculate row or column metadata.
 */

/**
 * Helper to convert a number to a percentage string.
 *
 * @param  {Number} num Any number
 * @return {String}     That number as a percentage.
 */

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */

/**
 * Helper utility that updates the specified callback whenever any of the specified indices have changed.
 */

/**
 * Helpers.
 */

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */

/**
 * Implementation of a subset of node.js Buffer methods for the browser.
 * Based on https://github.com/feross/buffer
 */

/**
 * In byte mode, data is encoded at 8 bits per character.
 *
 * @type {Object}
 */

/**
 * Initialize the encoder.
 * The input param should correspond to the number of error correction codewords.
 *
 * @param  {Number} degree
 */

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */

/**
 * Insert a new element to the queue. Elements are assumed to be objects with `sim` and `index` properties.
 */

/**
 * Insert a node into the tree at the given depth, after the minimum index
 *
 * @param {!Object[]} treeData - Tree data
 * @param {!number} depth - The depth to insert the node at (the first level of the array being depth 0)
 * @param {!number} minimumTreeIndex - The lowest possible treeIndex to insert the node at
 * @param {!Object} newNode - The node to insert into the tree
 * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`
 * @param {boolean=} expandParent - If true, expands the parent of the inserted node
 * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index
 *
 * @return {Object} result
 * @return {Object[]} result.treeData - The tree data with the node added
 * @return {number} result.treeIndex - The tree index at which the node was inserted
 * @return {number[]|string[]} result.path - Array of keys leading to the node location after insertion
 * @return {Object} result.parentNode - The parent node of the inserted node
 */

/**
 * Inserts wrapper `details` in a comment at the top of the `source` body.
 *
 * @private
 * @param {string} source The source to modify.
 * @returns {Array} details The details to insert.
 * @returns {string} Returns the modified source.
 */

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger `onUpdate` callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */

/**
 * Iterates over elements of `collection` and invokes `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length"
 * property are iterated like arrays. To avoid this behavior use `_.forIn`
 * or `_.forOwn` for object iteration.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEachRight
 * @example
 *
 * _.forEach([1, 2], function(value) {
 *   console.log(value);
 * });
 * // => Logs `1` then `2`.
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */

/**
 * Iterates over own enumerable string keyed properties of an object and
 * invokes `iteratee` for each property. The iteratee is invoked with three
 * arguments: (value, key, object). Iteratee functions may exit iteration
 * early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 0.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns `object`.
 * @see _.forOwnRight
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.forOwn(new Foo, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */

/**
 * Iterates through children that are "valid elements".
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child with the index reflecting the position relative to "valid components".
 */

/**
 * Iterates through children that are typically specified as `props.children`,
 * but only maps over children that are "valid elements".
 *
 * The mapFunction provided index will be normalised to the components mapped,
 * so an invalid component would not increase the index.
 *
 */

/**
 * K-means algorithm
 * @param {Array<Array<number>>} data - Points in the format to cluster [x,y,z,...]
 * @param {number} K - Number of clusters
 * @param {object} [options] - Option object
 * @param {number} [options.maxIterations = 100] - Maximum of iterations allowed
 * @param {number} [options.tolerance = 1e-6] - Error tolerance
 * @param {boolean} [options.withIterations = false] - Store clusters and centroids for each iteration
 * @param {function} [options.distanceFunction = squaredDistance] - Distance function to use between the points
 * @param {number} [options.seed] - Seed for random initialization.
 * @param {string|Array<Array<number>>} [options.initialization = 'kmeans++'] - K centers in format [x,y,z,...] or a method for initialize the data:
 *  * You can either specify your custom start centroids, or select one of the following initialization method:
 *  * `'kmeans++'` will use the kmeans++ method as described by http://ilpubs.stanford.edu:8090/778/1/2006-13.pdf
 *  * `'random'` will choose K random different values.
 *  * `'mostDistant'` will choose the more distant points to a first random pick
 * @return {KMeansResult} - Cluster identifier for each data dot and centroids with the following fields:
 *  * `'clusters'`: Array of indexes for the clusters.
 *  * `'centroids'`: Array with the resulting centroids.
 *  * `'iterations'`: Number of iterations that took to converge
 */

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-end` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/**
 * Log method calls if debug is enabled
 *
 * @private
 * @param {Object}       arg
 * @param {string}       arg.title    - The title the logger was called from
 * @param {Object|Array} [arg.data]   - The data to be logged
 * @param {boolean}      [arg.warn]  - If true, the message will be a warning
 * @param {boolean}      [arg.debug] - Nothing will be logged unless debug is true
 */

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */

/**
 * MRecordRTC runs on top of {@link RecordRTC} to bring multiple recordings in a single place, by providing simple API.
 * @summary MRecordRTC stands for "Multiple-RecordRTC".
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef MRecordRTC
 * @class
 * @example
 * var recorder = new MRecordRTC();
 * recorder.addStream(MediaStream);
 * recorder.mediaType = {
 *     audio: true, // or StereoAudioRecorder or MediaStreamRecorder
 *     video: true, // or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder
 *     gif: true    // or GifRecorder
 * };
 * // mimeType is optional and should be set only in advance cases.
 * recorder.mimeType = {
 *     audio: 'audio/wav',
 *     video: 'video/webm',
 *     gif:   'image/gif'
 * };
 * recorder.startRecording();
 * @see For further information:
 * @see {@link https://github.com/muaz-khan/RecordRTC/tree/master/MRecordRTC|MRecordRTC Source Code}
 * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
 * @requires {@link RecordRTC}
 */

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

/**
 * MediaStreamRecorder is an abstraction layer for {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}. It is used by {@link RecordRTC} to record MediaStream(s) in both Chrome and Firefox.
 * @summary Runs top over {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://github.com/muaz-khan|Muaz Khan}
 * @typedef MediaStreamRecorder
 * @class
 * @example
 * var config = {
 *     mimeType: 'video/webm', // vp8, vp9, h264, mkv, opus/vorbis
 *     audioBitsPerSecond : 256 * 8 * 1024,
 *     videoBitsPerSecond : 256 * 8 * 1024,
 *     bitsPerSecond: 256 * 8 * 1024,  // if this is provided, skip above two
 *     checkForInactiveTracks: true,
 *     timeSlice: 1000, // concatenate intervals based blobs
 *     ondataavailable: function() {} // get intervals based blobs
 * }
 * var recorder = new MediaStreamRecorder(mediaStream, config);
 * recorder.record();
 * recorder.stop(function(blob) {
 *     video.src = URL.createObjectURL(blob);
 *
 *     // or
 *     var blob = recorder.blob;
 * });
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
 * @param {object} config - {disableLogs:true, initCallback: function, mimeType: "video/webm", timeSlice: 1000}
 * @throws Will throw an error if first argument "MediaStream" is missing. Also throws error if "MediaRecorder API" are not supported by the browser.
 */

/**
 * Merges adjacent segments which have the same mode
 *
 * @param  {Array} segs Array of object with segments data
 * @return {Array}      Array of object with segments data
 */

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */

/**
 * Mixed mode will contain a sequences of data in a combination of any of
 * the modes described above
 *
 * @type {Object}
 */

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */

/**
 * Module exports.
 */

/**
 * Move an element. Responsible for doing cascading movements of other elements.
 *
 * Modifies layout items.
 *
 * @param  {Array}      layout            Full layout to modify.
 * @param  {LayoutItem} l                 element to move.
 * @param  {Number}     [x]               X position in grid units.
 * @param  {Number}     [y]               Y position in grid units.
 */

/**
 * MultiStreamRecorder can record multiple videos in single container.
 * @summary Multi-videos recorder.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef MultiStreamRecorder
 * @class
 * @example
 * var options = {
 *     mimeType: 'video/webm'
 * }
 * var recorder = new MultiStreamRecorder(ArrayOfMediaStreams, options);
 * recorder.record();
 * recorder.stop(function(blob) {
 *     video.src = URL.createObjectURL(blob);
 *
 *     // or
 *     var blob = recorder.blob;
 * });
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {MediaStreams} mediaStreams - Array of MediaStreams.
 * @param {object} config - {disableLogs:true, frameInterval: 1, mimeType: "video/webm"}
 */

/**
 * Multiplies two number inside Galois Field
 *
 * @param  {Number} x
 * @param  {Number} y
 * @return {Number}
 */

/**
 * Multiplies two polynomials inside Galois Field
 *
 * @param  {Buffer} p1 Polynomial
 * @param  {Buffer} p2 Polynomial
 * @return {Buffer}    Product of p1 and p2
 */

/**
 * Numeric mode encodes data from the decimal digit set (0 - 9)
 * (byte values 30HEX to 39HEX).
 * Normally, 3 data characters are represented by 10 bits.
 *
 * @type {Object}
 */

/**
 * Only touch events and mouse events where the left button is pressed should initiate a drag.
 * @param {MouseEvent | TouchEvent} e The event
 */

/**
 * Only touch events and mouse events where the left mouse button is no longer held should end a drag.
 * It's possible the user mouse downs with the left mouse button, then mouse down and ups with the right mouse button.
 * We don't want releasing the right mouse button to end the drag.
 * @param {MouseEvent | TouchEvent} e The event
 */

/**
 * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/
 * Modified by Miles Johnson: http://milesj.me
 *
 * Supports the following:
 * 		- Extends clike syntax
 * 		- Support for PHP 5.3+ (namespaces, traits, generators, etc)
 * 		- Smarter constant and function matching
 *
 * Adds the following new token classes:
 * 		constant, delimiter, variable, function, package
 */

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

/**
 * Perform a change on the given node and all its descendants, traversing the tree depth-first
 *
 * @param {Object} args - Function parameters
 * @param {function} args.callback - Function to call on each node
 * @param {function} args.getNodeKey - Function to get the key from the nodeData and tree index
 * @param {boolean} args.ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`
 * @param {boolean=} args.isPseudoRoot - If true, this node has no real data, and only serves
 *                                        as the parent of all the nodes in the tree
 * @param {Object} args.node - A tree node
 * @param {Object=} args.parentNode - The parent node of `node`
 * @param {number} args.currentIndex - The treeIndex of `node`
 * @param {number[]|string[]} args.path - Array of keys leading up to node to be changed
 * @param {number[]} args.lowerSiblingCounts - An array containing the count of siblings beneath the
 *                                             previous nodes in this path
 *
 * @return {number|false} nextIndex - Index of the next sibling of `node`,
 *                                    or false if the walk should be terminated
 */

/**
 * Perform a depth-first transversal of the descendants and
 *  make a change to every node in the tree
 *
 * @param {!Object[]} treeData - Tree data
 * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index
 * @param {function} callback - Function to call on each node
 * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`
 *
 * @return {Object[]} changedTreeData - The changed tree data
 */

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */

/**
 * Performs a depth-first traversal over all of the node descendants,
 * incrementing currentIndex by 1 for each
 */

/**
 * Pluralization helper.
 */

/**
 * Position an element relative some reference element using Popper.js
 *
 * @param referenceElement
 * @param popperElement
 * @param {object}      options
 * @param {object=}     options.modifiers Popper.js modifiers
 * @param {boolean=}    options.enabled toggle the popper functionality on/off
 * @param {string=}     options.placement The popper element placement relative to the reference element
 * @param {string=}     options.strategy the positioning strategy
 * @param {boolean=}    options.eventsEnabled have Popper listen on window resize events to reposition the element
 * @param {function=}   options.onCreate called when the popper is created
 * @param {function=}   options.onUpdate called when the popper is updated
 *
 * @returns {UsePopperState} The popper state
 */

/**
 * Precompute the log and anti-log tables for faster computation later
 *
 * For each possible value in the galois field 2^8, we will pre-compute
 * the logarithm and anti-logarithm (exponential) of this value
 *
 * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}
 */

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

/**
 * Prism: Lightweight, robust, elegant syntax highlighting
 * MIT license http://www.opensource.org/licenses/mit-license.php/
 * @author Lea Verou http://lea.verou.me
 */

/**
 * Proper state management for containers and the modals in those containers.
 *
 * @internal Used by the Modal to ensure proper styling of containers.
 */

/**
 * Provides a set of static methods for creating Disposables.
 * @param {Function} action Action to run during the first call to dispose.
 * The action is guaranteed to be run at most once.
 */

/**
 * QR Code
 *
 * @param {String | Array} data                 Input data
 * @param {Object} options                      Optional configurations
 * @param {Number} options.version              QR Code version
 * @param {String} options.errorCorrectionLevel Error correction level
 * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis
 */

/**
 * QRCode for JavaScript
 *
 * modified by Ryan Day for nodejs support
 * Copyright (c) 2011 Ryan Day
 *
 * Licensed under the MIT license:
 *   http://www.opensource.org/licenses/mit-license.php
 *
//---------------------------------------------------------------------
// QRCode for JavaScript
//
// Copyright (c) 2009 Kazuhiko Arase
//
// URL: http://www.d-project.com/
//
// Licensed under the MIT license:
//   http://www.opensource.org/licenses/mit-license.php
//
// The word "QR Code" is registered trademark of
// DENSO WAVE INCORPORATED
//   http://www.denso-wave.com/qrcode/faqpatent-e.html
//
//---------------------------------------------------------------------
*/

/**
 * RecordRTCPromisesHandler adds promises support in {@link RecordRTC}. Try a {@link https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/RecordRTCPromisesHandler.html|demo here}
 * @summary Promises for {@link RecordRTC}
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef RecordRTCPromisesHandler
 * @class
 * @example
 * var recorder = new RecordRTCPromisesHandler(mediaStream, options);
 * recorder.startRecording()
 *         .then(successCB)
 *         .catch(errorCB);
 * // Note: You can access all RecordRTC API using "recorder.recordRTC" e.g. 
 * recorder.recordRTC.onStateChanged = function(state) {};
 * recorder.recordRTC.setRecordingDuration(5000);
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.
 * @param {object} config - {type:"video", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}
 * @throws Will throw an error if "new" keyword is not used to initiate "RecordRTCPromisesHandler". Also throws error if first argument "MediaStream" is missing.
 * @requires {@link RecordRTC}
 */

/**
 * Recursively finds the scroll parent of a node. The scroll parrent of a node
 * is the closest node that is scrollable. A node is scrollable if:
 *  - it is allowed to scroll via CSS ('overflow-y' not visible or hidden);
 *  - and its children/content are "bigger" than the node's box height.
 *
 * The root of the document always scrolls by default.
 *
 * @param {HTMLElement} node Any DOM element.
 * @return {HTMLElement} The scroll parent element.
 */

/**
 * Recursively traverses the tree upwards from the given node, capturing all
 * ancestor nodes that scroll along with their current 'overflow-y' CSS
 * property.
 *
 * @param {HTMLElement} node Any DOM element.
 * @param {Map<HTMLElement,string>} [acc] Accumulator map.
 * @return {Map<HTMLElement,string>} Map of ancestors with their 'overflow-y' value.
 */

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */

/**
 * Removes the node at the specified path and returns the resulting treeData.
 *
 * @param {!Object[]} treeData
 * @param {number[]|string[]} path - Array of keys leading up to node to be deleted
 * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index
 * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`
 *
 * @return {Object[]} changedTreeData - The tree data with the node removed
 */

/**
 * Removes the node at the specified path and returns the resulting treeData.
 *
 * @param {!Object[]} treeData
 * @param {number[]|string[]} path - Array of keys leading up to node to be deleted
 * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index
 * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`
 *
 * @return {Object} result
 * @return {Object[]} result.treeData - The tree data with the node removed
 * @return {Object} result.node - The node that was removed
 * @return {number} result.treeIndex - The previous treeIndex of the removed node
 */

/**
 * Renders nested values (eg. objects, arrays, lists, etc.)
 */

/**
 * Renders simple values (eg. strings, numbers, booleans, etc)
 */

/**
 * Reorder `array` according to the specified indexes where the element at
 * the first index is assigned as the first element, the element at
 * the second index is assigned as the second element, and so on.
 *
 * @private
 * @param {Array} array The array to reorder.
 * @param {Array} indexes The arranged array indexes.
 * @returns {Array} Returns `array`.
 */

/**
 * Replaces all `placeholder` elements in `array` with an internal placeholder
 * and returns an array of their indexes.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {*} placeholder The placeholder to replace.
 * @returns {Array} Returns the new array of placeholder indexes.
 */

/**
 * Replaces node at path with object, or callback-defined object
 *
 * @param {!Object[]} treeData
 * @param {number[]|string[]} path - Array of keys leading up to node to be changed
 * @param {function|any} newNode - Node to replace the node at the path with, or a function producing the new node
 * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index
 * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`
 *
 * @return {Object[]} changedTreeData - The changed tree data
 */

/**
 * Represents a group of disposable resources that are disposed together.
 * @constructor
 */

/**
 * Represents a single media query, manages it's state and registered handlers for this query
 *
 * @constructor
 * @param {string} query the media query string
 * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design
 */

/**
 * Return a descriptor removing the value and returning a getter
 * The getter will return a .bind version of the function
 * and memoize the result against a symbol on the instance
 */

/**
 * Return human-readable file size.
 * @param {number} bytes - Pass bytes and get formatted string.
 * @returns {string} - formatted string
 * @example
 * bytesToSize(1024*1024*5) === '5 GB'
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 */

/**
 * Return mask value at given position
 *
 * @param  {Number} maskPattern Pattern reference value
 * @param  {Number} i           Row
 * @param  {Number} j           Column
 * @return {Boolean}            Mask value
 */

/**
 * Return mode name as string
 *
 * @param {Mode} mode Mode object
 * @returns {String}  Mode name
 */

/**
 * Return position on the page given an x, y, w, h.
 * left, top, width, height are all in pixels.
 * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calculations.
 * @param  {Number}  x                      X coordinate in grid units.
 * @param  {Number}  y                      Y coordinate in grid units.
 * @param  {Number}  w                      W coordinate in grid units.
 * @param  {Number}  h                      H coordinate in grid units.
 * @return {Position}                       Object containing coords.
 */

/**
 * Return the actively focused element safely.
 *
 * @param doc the document to checl
 */

/**
 * Return the bottom coordinate of the layout.
 *
 * @param  {Array} layout Layout array.
 * @return {Number}       Bottom coordinate.
 */

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */

/**
 * Returns UTF8 byte length
 *
 * @param  {String} str Input string
 * @return {Number}     Number of byte
 */

/**
 * Returns a controller object for setting a timeout that is properly cleaned up
 * once the component unmounts. New timeouts cancel and replace existing ones.
 */

/**
 * Returns a function that triggers a component update. the hook equivalent to
 * `this.forceUpdate()` in a class component. In most cases using a state value directly
 * is preferable but may be required in some advanced usages of refs for interop or
 * when direct DOM manipulation is required.
 *
 * ```ts
 * const forceUpdate = useForceUpdate();
 *
 * const updateOnClick = useCallback(() => {
 *  forceUpdate()
 * }, [forceUpdate])
 *
 * return <button type="button" onClick={updateOnClick}>Hi there</button>
 * ```
 */

/**
 * Returns a ref that is immediately updated with the new value
 *
 * @param value The Ref value
 * @category refs
 */

/**
 * Returns all of the ranges within a larger range that contain unloaded rows.
 */

/**
 * Returns an array containing the positions of each alignment pattern.
 * Each array's element represent the center point of the pattern as (x, y) coordinates
 *
 * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}
 * and filtering out the items that overlaps with finder pattern
 *
 * @example
 * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.
 * The alignment patterns, therefore, are to be centered on (row, column)
 * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).
 * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns
 * and are not therefore used for alignment patterns.
 *
 * var pos = getPositions(7)
 * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinates
 */

/**
 * Returns an array containing the positions of each finder pattern.
 * Each array's element represent the top-left point of the pattern as (x, y) coordinates
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinates
 */

/**
 * Returns anti-log value of n inside Galois Field
 *
 * @param  {Number} n
 * @return {Number}
 */

/**
 * Returns bit value at specified location
 *
 * @param  {Number}  row
 * @param  {Number}  col
 * @return {Boolean}
 */

/**
 * Returns format information with relative error correction bits
 *
 * The format information is a 15-bit sequence containing 5 data bits,
 * with 10 error correction bits calculated using the (15, 5) BCH code.
 *
 * @param  {Number} errorCorrectionLevel Error correction level
 * @param  {Number} mask                 Mask pattern
 * @return {Number}                      Encoded format information bits
 */

/**
 * Returns how many bits are needed to encode a string of
 * specified length with the specified mode
 *
 * @param  {Number} length String length
 * @param  {Mode} mode     Segment mode
 * @return {Number}        Bit length
 */

/**
 * Returns how much data can be stored with the specified QR code version
 * and error correction level
 *
 * @param  {Number} version              QR Code version (1-40)
 * @param  {Number} errorCorrectionLevel Error correction level
 * @param  {Mode}   mode                 Data mode
 * @return {Number}                      Quantity of storable data
 */

/**
 * Returns log value of n inside Galois Field
 *
 * @param  {Number} n
 * @return {Number}
 */

/**
 * Returns mask pattern from a value.
 * If value is not valid, returns undefined
 *
 * @param  {Number|String} value        Mask pattern value
 * @return {Number}                     Valid mask pattern or undefined
 */

/**
 * Returns mode from a value.
 * If value is not a valid mode, returns defaultValue
 *
 * @param  {Mode|String} value        Encoding mode
 * @param  {Mode}        defaultValue Fallback value
 * @return {Mode}                     Encoding mode
 */

/**
 * Returns the QR Code size for the specified version
 *
 * @param  {Number} version QR Code version
 * @return {Number}         size of QR code
 */

/**
 * Returns the best mask pattern for data
 *
 * @param  {BitMatrix} data
 * @return {Number} Mask pattern reference number
 */

/**
 * Returns the cartesian distance of the drag source component's position, based on its position
 * at the time when the current drag operation has started, and the movement difference.
 *
 * Returns null if no item is being dragged.
 *
 * @param state The offset state to compute from
 */

/**
 * Returns the first item this layout collides with.
 * It doesn't appear to matter which order we approach this from, although
 * perhaps that is the wrong thing to do.
 *
 * @param  {Object} layoutItem Layout item.
 * @return {Object|undefined}  A colliding layout item, or undefined.
 */

/**
 * Returns the minimum version needed to contain the amount of data
 *
 * @param  {Segment} data                    Segment of data
 * @param  {Number} [errorCorrectionLevel=H] Error correction level
 * @param  {Mode} mode                       Data mode
 * @return {Number}                          QR Code version
 */

/**
 * Returns the most efficient mode to store the specified data
 *
 * @param  {String} dataStr Input data string
 * @return {Mode}           Best mode
 */

/**
 * Returns the number of bits needed to store the data length
 * according to QR Code specifications.
 *
 * @param  {Mode}   mode    Data mode
 * @param  {Number} version QR Code version
 * @return {Number}         Number of bits
 */

/**
 * Returns the number of error correction block that the QR Code should contain
 * for the specified version and error correction level.
 *
 * @param  {Number} version              QR Code version
 * @param  {Number} errorCorrectionLevel Error correction level
 * @return {Number}                      Number of error correction blocks
 */

/**
 * Returns the number of error correction codewords to use for the specified
 * version and error correction level.
 *
 * @param  {Number} version              QR Code version
 * @param  {Number} errorCorrectionLevel Error correction level
 * @return {Number}                      Number of error correction codewords
 */

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */

/**
 * Returns the reference node of the reference object, or the reference object itself.
 * @method
 * @memberof Popper.Utils
 * @param {Element|Object} reference - the reference element (the popper will be relative to this)
 * @returns {Element} parent
 */

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */

/**
 * Returns the total number of codewords used to store data and EC information.
 *
 * @param  {Number} version QR Code version
 * @return {Number}         Data length in bits
 */

/**
 * Returns version information with relative error correction bits
 *
 * The version information is included in QR Code symbols of version 7 or larger.
 * It consists of an 18-bit sequence containing 6 data bits,
 * with 12 error correction bits calculated using the (18, 6) Golay code.
 *
 * @param  {Number} version QR Code version
 * @return {Number}         Encoded version info bits
 */

/**
 * Returns version number from a value.
 * If value is not a valid version, returns defaultValue
 *
 * @param  {Number|String} value        QR Code version
 * @param  {Number}        defaultValue Fallback value
 * @return {Number}                     QR Code version number
 */

/**
 * Safe chained function
 *
 * Will only create a new function if needed,
 * otherwise will pass back existing functions or null.
 *
 * @param {function} functions to chain
 * @returns {function|null}
 */

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

/**
 * Scroll to position
 * @param {number} value
 * @param {HTMLElement} element
 * @param {number} scrollDuration
 * @returns {Promise<*>}
 */

/**
 * See `fastRGLPropsEqual.js`.
 * We want this to run as fast as possible - it is called often - and to be
 * resilient to new props that we add. So rather than call lodash.isEqual,
 * which isn't suited to comparing props very well, we use this specialized
 * function in conjunction with preval to generate the fastest possible comparison
 * function, tuned for exactly our props.
 */

/**
 * Set bit value at specified location
 * If reserved flag is set, this bit will be ignored during masking process
 *
 * @param {Number}  row
 * @param {Number}  col
 * @param {Boolean} value
 * @param {Boolean} reserved
 */

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */

/**
 * Set the property of an object nested in one or more objects
 * If the property doesn't exist, it gets created.
 * @param {Object} object
 * @param {String} property
 * @param value the value to set
 * @returns object if no assignment was made or the value if the assignment was made
 */

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper
 * @param {Object} options - Popper.js options
 */

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */

/**
 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
 * with wrapper details in a comment at the top of the source body.
 *
 * @private
 * @param {Function} wrapper The function to modify.
 * @param {Function} reference The reference function.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Function} Returns `wrapper`.
 */

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

/**
 * Since RV components use shallowCompare we need to force a render (even though props haven't changed).
 * However InfiniteLoader may wrap a Grid or it may wrap a Table or List.
 * In the first case the built-in React forceUpdate() method is sufficient to force a re-render,
 * But in the latter cases we need to use the RV-specific forceUpdateGrid() method.
 * Else the inner Grid will not be re-rendered and visuals may be stale.
 *
 * Additionally, while a Grid is scrolling the cells can be cached,
 * So it's important to invalidate that cache by recalculating sizes
 * before forcing a rerender.
 */

/**
 * Sort layout items by column ascending then row ascending.
 *
 * Does not modify Layout.
 */

/**
 * Sort layout items by row ascending and column ascending.
 *
 * Does not modify Layout.
 */

/**
 * Splits a string in various segments with the modes which
 * best represent their content.
 * The produced segments are far from being optimized.
 * The output of this function is only used to estimate a QR Code version
 * which may contain the data.
 *
 * @param  {string} data Input string
 * @return {Array}       Array of segments
 */

/**
 * StereoAudioRecorder is a standalone class used by {@link RecordRTC} to bring "stereo" audio-recording in chrome.
 * @summary JavaScript standalone object for stereo audio recording.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef StereoAudioRecorder
 * @class
 * @example
 * var recorder = new StereoAudioRecorder(MediaStream, {
 *     sampleRate: 44100,
 *     bufferSize: 4096
 * });
 * recorder.record();
 * recorder.stop(function(blob) {
 *     video.src = URL.createObjectURL(blob);
 * });
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
 * @param {object} config - {sampleRate: 44100, bufferSize: 4096, numberOfAudioChannels: 1, etc.}
 */

/**
 * Storage is a standalone object used by {@link RecordRTC} to store reusable objects e.g. "new AudioContext".
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @example
 * Storage.AudioContext === webkitAudioContext
 * @property {webkitAudioContext} AudioContext - Keeps a reference to AudioContext object.
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 */

/**
 * Store the last of some value. Tracked via a `Ref` only updating it
 * after the component renders.
 *
 * Helpful if you need to compare a prop value to it's previous value during render.
 *
 * ```ts
 * function Component(props) {
 *   const lastProps = usePrevious(props)
 *
 *   if (lastProps.foo !== props.foo)
 *     resetValueFromProps(props.foo)
 * }
 * ```
 *
 * @param value the value to track
 */

/**
 * Tell if a nested object has a given property (or array a given index)
 * given an object such as a.b.c.d = 5, hasNestedProperty(a, "b.c.d") will return true.
 * It also returns true if the property is in the prototype chain.
 * @param {Object} object the object to get the property from
 * @param {String} property the path to the property as a string
 * @param {Object} options:
 *  - own: set to reject properties from the prototype
 * @returns true if has (property in object), false otherwise
 */

/**
 * Tell if an object is on the path to a nested property
 * If the object is on the path, and the path exists, it returns true, and false otherwise.
 * @param {Object} object to get the nested property from
 * @param {String} property name of the nested property
 * @param {Object} objectInPath the object to check
 * @param {Object} options:
 *  - validPath: return false if the path is invalid, even if the object is in the path
 * @returns {boolean} true if the object is on the path
 */

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

/**
 * The Kanji mode efficiently encodes Kanji characters in accordance with
 * the Shift JIS system based on JIS X 0208.
 * The Shift JIS values are shifted from the JIS X 0208 values.
 * JIS X 0208 gives details of the shift coded representation.
 * Each two-byte character value is compacted to a 13-bit binary codeword.
 *
 * @type {Object}
 */

/**
 * The `dataObject` is an object containing all the information used by Popper.js.
 * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10.
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */

/**
 * The `useRootClose` hook registers your callback on the document
 * when rendered. Powers the `<Overlay/>` component. This is used achieve modal
 * style behavior where your callback is triggered when the user tries to
 * interact with the rest of the document or hits the `esc` key.
 *
 * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary
 * @param {function} onRootClose
 * @param {object=}  options
 * @param {boolean=} options.disabled
 * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on
 */

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */

/**
 * The centers have moved more than the tolerance value?
 * @ignore
 * @param {Array<Array<number>>} centers - the K centers in format [x,y,z,...]
 * @param {Array<Array<number>>} oldCenters - the K old centers in format [x,y,z,...]
 * @param {function} distanceFunction - Distance function to use between the points
 * @param {number} tolerance - Allowed distance for the centroids to move
 * @return {boolean}
 */

/**
 * There are situations due to browser quirks or Bootstrap CSS where
 * an anchor tag is needed, when semantically a button tag is the
 * better choice. SafeAnchor ensures that when an anchor is used like a
 * button its accessible. It also emulates input `disabled` behavior for
 * links, which is usually desirable for Buttons, NavItems, DropdownItems, etc.
 */

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

/**
 * This function is like `composeArgs` except that the arguments composition
 * is tailored for `_.partialRight`.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to append to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

/**
 * This is the web browser implementation of `debug()`.
 */

/**
 * This is where the magic needs to happen - given a collision, move an element away from the collision.
 * We attempt to move it up if there's room, otherwise it goes below.
 *
 * @param  {Array} layout            Full layout to modify.
 * @param  {LayoutItem} collidesWith Layout item we're colliding with.
 * @param  {LayoutItem} itemToMove   Layout item we're moving.
 */

/**
 * This method can be used to get all recorded blobs from IndexedDB storage.
 * @param {string} type - 'all' or 'audio' or 'video' or 'gif'
 * @param {function} callback - Callback function to get all stored blobs.
 * @method
 * @memberof MRecordRTC
 * @example
 * MRecordRTC.getFromDisk('all', function(dataURL, type){
 *     if(type === 'audio') { }
 *     if(type === 'video') { }
 *     if(type === 'gif')   { }
 * });
 */

/**
 * This method can be used to store recorded blobs into IndexedDB storage.
 * @param {object} options - {audio: Blob, video: Blob, gif: Blob}
 * @method
 * @memberof MRecordRTC
 * @example
 * MRecordRTC.writeToDisk({
 *     audio: audioBlob,
 *     video: videoBlob,
 *     gif  : gifBlob
 * });
 */

/**
 * This method can be used to store recorded blobs into IndexedDB storage.
 * @param {object} options - {audio: Blob, video: Blob, gif: Blob}
 * @method
 * @memberof RecordRTC
 * @example
 * RecordRTC.writeToDisk({
 *     audio: audioBlob,
 *     video: videoBlob,
 *     gif  : gifBlob
 * });
 */

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */

/**
 * Track whether a component is current mounted. Generally less preferable than
 * properlly canceling effects so they don't run after a component is unmounted,
 * but helpful in cases where that isn't feasible, such as a `Promise` resolution.
 *
 * @returns a function that returns the current isMounted state of the component
 *
 * ```ts
 * const [data, setData] = useState(null)
 * const isMounted = useMounted()
 *
 * useEffect(() => {
 *   fetchdata().then((newData) => {
 *      if (isMounted()) {
 *        setData(newData);
 *      }
 *   })
 * })
 * ```
 */

/**
 * Transform HTML code to a PdfMake object
 * @param  {String} htmlText The HTML code to transform
 * @param  {Object} [options]
 *   @param  {Object} [defaultStyles] An object with the default styles for each elements
 *   @param  {Object} [window] The `window` object (only used for the tests)
 * @return {Object} it returns a PdfMake object
 *
 * @example
 * // Some styles are applied by defaults for the supported HTML elements
 * // but you can pass your own styles if you prefer
 * htmlToPdfMake('<div><h1>My Title</h1><p>My paragraph</p></div>');
 *
 * // If you want to overwrite the default styles, e.g. you want <li> to not have a margin-left, and links to be 'purple' and not 'blue', and links without 'underline'
 * htmlToPdfMake('<ul><li>this is <a href="...">a link</a></li><li>another item</li></ul>', {
 *   defaultStyles:{
 *     a:{
 *       color:'purple',
 *       decoration:null
 *     },
 *     li:null
 *   }
 * });
 */

/**
 * Translate x and y coordinates from pixels to grid units.
 * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calculations.
 * @param  {Number} top                     Top position (relative to parent) in pixels.
 * @param  {Number} left                    Left position (relative to parent) in pixels.
 * @param  {Number} w                       W coordinate in grid units.
 * @param  {Number} h                       H coordinate in grid units.
 * @return {Object}                         x and y in grid units.
 */

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */

/**
 * Update the center values based in the new configurations of the clusters
 * @ignore
 * @param {Array<Array<number>>} prevCenters - Centroids from the previous iteration
 * @param {Array <Array <number>>} data - the [x,y,z,...] points to cluster
 * @param {Array <number>} clusterID - the cluster identifier for each data dot
 * @param {number} K - Number of clusters
 * @return {Array} he K centers in format [x,y,z,...]
 */

/**
 * Updates the cluster identifier based in the new data
 * @ignore
 * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster
 * @param {Array<Array<number>>} centers - the K centers in format [x,y,z,...]
 * @param {Array <number>} clusterID - the cluster identifier for each data dot
 * @param {function} distance - Distance function to use between the points
 * @return {Array} the cluster identifier for each data dot
 */

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */

/**
 * Updates wrapper `details` based on `bitmask` flags.
 *
 * @private
 * @returns {Array} details The details to modify.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Array} Returns `details`.
 */

/**
 * Use boundMethod to bind all methods on the target.prototype
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * Validate a layout. Throws errors.
 *
 * @param  {Array}  layout        Array of layout items.
 * @param  {String} [contextName] Context name for errors.
 * @throw  {Error}                Validation error.
 */

/**
 * Validate if a step is valid
 *
 * @param {Object} step - A step object
 * @param {boolean} debug
 *
 * @returns {boolean} - True if the step is valid, false otherwise
 */

/**
 * Validate if steps is valid
 *
 * @param {Array} steps - A steps array
 * @param {boolean} debug
 *
 * @returns {boolean} - True if the steps are valid, false otherwise
 */

/**
 * Validate the flags part of a given RegExpLiteral.
 *
 * @param {RegExpValidationState} state The state to validate RegExp.
 * @returns {void}
 */

/**
 * Validate the pattern part of a given RegExpLiteral.
 *
 * @param {RegExpValidationState} state The state to validate RegExp.
 * @returns {void}
 */

/**
 * Walk all descendants of the given node, depth-first
 *
 * @param {Object} args - Function parameters
 * @param {function} args.callback - Function to call on each node
 * @param {function} args.getNodeKey - Function to get the key from the nodeData and tree index
 * @param {boolean} args.ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`
 * @param {boolean=} args.isPseudoRoot - If true, this node has no real data, and only serves
 *                                        as the parent of all the nodes in the tree
 * @param {Object} args.node - A tree node
 * @param {Object=} args.parentNode - The parent node of `node`
 * @param {number} args.currentIndex - The treeIndex of `node`
 * @param {number[]|string[]} args.path - Array of keys leading up to node to be changed
 * @param {number[]} args.lowerSiblingCounts - An array containing the count of siblings beneath the
 *                                             previous nodes in this path
 *
 * @return {number|false} nextIndex - Index of the next sibling of `node`,
 *                                    or false if the walk should be terminated
 */

/**
 * Walk descendants depth-first and call a callback on each
 *
 * @param {!Object[]} treeData - Tree data
 * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index
 * @param {function} callback - Function to call on each node
 * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`
 *
 * @return void
 */

/**
 * WebAssemblyRecorder lets you create webm videos in JavaScript via WebAssembly. The library consumes raw RGBA32 buffers (4 bytes per pixel) and turns them into a webm video with the given framerate and quality. This makes it compatible out-of-the-box with ImageData from a CANVAS. With realtime mode you can also use webm-wasm for streaming webm videos.
 * @summary Video recording feature in Chrome, Firefox and maybe Edge.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef WebAssemblyRecorder
 * @class
 * @example
 * var recorder = new WebAssemblyRecorder(mediaStream);
 * recorder.record();
 * recorder.stop(function(blob) {
 *     video.src = URL.createObjectURL(blob);
 * });
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
 * @param {object} config - {webAssemblyPath:'webm-wasm.wasm',workerPath: 'webm-worker.js', frameRate: 30, width: 1920, height: 1080, bitrate: 1024, realtime: true}
 */

/**
 * Weighted penalty scores for the undesirable features
 * @type {Object}
 */

/**
 * Whammy is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It is written by {@link https://github.com/antimatter15|antimatter15}
 * @summary A real time javascript webm encoder based on a canvas hack.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef Whammy
 * @class
 * @example
 * var recorder = new Whammy().Video(15);
 * recorder.add(context || canvas || dataURL);
 * var output = recorder.compile();
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 */

/**
 * WhammyRecorder is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It runs top over {@link Whammy}.
 * @summary Video recording feature in Chrome.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef WhammyRecorder
 * @class
 * @example
 * var recorder = new WhammyRecorder(mediaStream);
 * recorder.record();
 * recorder.stop(function(blob) {
 *     video.src = URL.createObjectURL(blob);
 * });
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
 * @param {object} config - {disableLogs: true, initCallback: function, video: HTMLVideoElement, etc.}
 */

/**
 * Wires up Dropdown toggle functionality, returning a set a props to attach
 * to the element that functions as the dropdown toggle (generally a button).
 *
 * @memberOf Dropdown
 */

/**
 * drop-in replacement for _.get
 * @param obj
 * @param path
 * @param defaultValue
 */

/**
 * drop-in replacement for _.isString
 * @param input
 */

/**
 * drop-in replacement for _.without
 */

/**
 * from: https://github.com/cheton/is-electron/blob/master/index.js
 **/

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/**
 * prism-react-renderer:
 * This file has been modified to remove:
 * - globals and window dependency
 * - worker support
 * - highlightAll and other element dependent methods
 * - _.hooks helpers
 * - UMD/node-specific hacks
 * It has also been run through prettier
 */

/**
 * repalcement for _.xor
 * @param itemsA
 * @param itemsB
 */

/**
 * replacement for _.intersection
 * @param itemsA
 * @param itemsB
 */

/**
 * useDragLayer Hook
 * @param collector The property collector
 */

/**
 * useDragSource hook
 * @param sourceSpec The drag source specification *
 */

/**
 * useDropTarget Hook
 * @param spec The drop target specification
 */

/**
 * {@link GetRecorderType} is an inner/private helper for {@link RecordRTC}.
 * @summary It returns best recorder-type available for your browser.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef GetRecorderType
 * @class
 * @example
 * var RecorderType = GetRecorderType(options);
 * var recorder = new RecorderType(options);
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
 * @param {object} config - {type:"video", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}
 */

/**
 * {@link RecordRTCConfiguration} is an inner/private helper for {@link RecordRTC}.
 * @summary It configures the 2nd parameter passed over {@link RecordRTC} and returns a valid "config" object.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef RecordRTCConfiguration
 * @class
 * @example
 * var options = RecordRTCConfiguration(mediaStream, options);
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
 * @param {object} config - {type:"video", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, getNativeBlob:true, etc.}
 */

/**
 * {@link https://github.com/muaz-khan/RecordRTC|RecordRTC} is a WebRTC JavaScript library for audio/video as well as screen activity recording. It supports Chrome, Firefox, Opera, Android, and Microsoft Edge. Platforms: Linux, Mac and Windows. 
 * @summary Record audio, video or screen inside the browser.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef RecordRTC
 * @class
 * @example
 * var recorder = RecordRTC(mediaStream or [arrayOfMediaStream], {
 *     type: 'video', // audio or video or gif or canvas
 *     recorderType: MediaStreamRecorder || CanvasRecorder || StereoAudioRecorder || Etc
 * });
 * recorder.startRecording();
 * @see For further information:
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.
 * @param {object} config - {type:"video", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, desiredSampRate: 16000, video: HTMLVideoElement, etc.}
 */

/**
 String representation of component state for styling with class names.

 Expects an array of strings OR a string/object pair:
 - className(['comp', 'comp-arg', 'comp-arg-2'])
   @returns 'react-select__comp react-select__comp-arg react-select__comp-arg-2'
 - className('comp', { some: true, state: false })
   @returns 'react-select__comp react-select__comp--some'
*/

/**
*
*	COMPUTE: argmax
*
*
*	DESCRIPTION:
*		- Computes the maximum value of a numeric array and returns the corresponding array indices.
*
*
*	NOTES:
*		[1]
*
*
*	TODO:
*		[1]
*
*
*	LICENSE:
*		MIT
*
*	Copyright (c) 2014. Athan Reines.
*
*
*	AUTHOR:
*		Athan Reines. kgryte@gmail.com. 2014.
*
*/

/**
*
*	COMPUTE: chunkify
*
*
*	DESCRIPTION:
*		- Segments an array into chunks.
*
*
*	NOTES:
*		[1]
*
*
*	TODO:
*		[1]
*
*
*	LICENSE:
*		MIT
*
*	Copyright (c) 2014. Athan Reines.
*
*
*	AUTHOR:
*		Athan Reines. kgryte@gmail.com. 2014.
*
*/

/**
*
*	VALIDATE: function
*
*
*	DESCRIPTION:
*		- Validates if a value is a function.
*
*
*	NOTES:
*		[1]
*
*
*	TODO:
*		[1]
*
*
*	LICENSE:
*		MIT
*
*	Copyright (c) 2014. Athan Reines.
*
*
*	AUTHOR:
*		Athan Reines. kgryte@gmail.com. 2014.
*
*/

/**
*
*	VALIDATE: integer
*
*
*	DESCRIPTION:
*		- Validates if a value is an integer.
*
*
*	NOTES:
*		[1]
*
*
*	TODO:
*		[1]
*
*
*	LICENSE:
*		MIT
*
*	Copyright (c) 2014. Athan Reines.
*
*
*	AUTHOR:
*		Athan Reines. kgryte@gmail.com. 2014.
*
*/

/**
*
*	VALIDATE: number
*
*
*	DESCRIPTION:
*		- Validates if a value is a number.
*
*
*	NOTES:
*		[1]
*
*
*	TODO:
*		[1]
*
*
*	LICENSE:
*		MIT
*
*	Copyright (c) 2014. Athan Reines.
*
*
*	AUTHOR:
*		Athan Reines. kgryte@gmail.com. 2014.
*
*/

/**
*
*	VALIDATE: string
*
*
*	DESCRIPTION:
*		- Validates if a value is a string.
*
*
*	NOTES:
*		[1]
*
*
*	TODO:
*		[1]
*
*
*	LICENSE:
*		MIT
*
*	Copyright (c) 2014. Athan Reines.
*
*
*	AUTHOR:
*		Athan Reines. kgryte@gmail.com. 2014.
*
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/fn/d9lgmc.f}.
*
* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/slatec/fnlib/albeta.f}.
*
* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/slatec/fnlib/}.
*
* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log10.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
*
* Optimized by Bruce D. Evans.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_log.h}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FDLIBM]{@link http://www.netlib.org/fdlibm/s_expm1.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FDLIBM]{@link http://www.netlib.org/fdlibm/s_log1p.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_atanh.c?view=markup}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_lgamma_r.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_tan.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cos.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_erf.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_sin.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_tan.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code and copyright notice are from the [source implementation]{@link http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/CODES/mt19937ar.c}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
*   1. Redistributions of source code must retain the above copyright
*      notice, this list of conditions and the following disclaimer.
*
*   2. Redistributions in binary form must reproduce the above copyright
*      notice, this list of conditions and the following disclaimer in the
*      documentation and/or other materials provided with the distribution.
*
*   3. The names of its contributors may not be used to endorse or promote
*      products derived from this software without specific prior written
*      permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1995, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_48_0/boost/math/special_functions/detail/erf_inv.hpp}. This implementation follows the original, but has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_60_0/boost/math/special_functions/powm1.hpp}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006-7, 2013-14.
* (C) Copyright Paul A. Bristow 2007, 2013-14.
* (C) Copyright Nikhar Agrawal 2013-14.
* (C) Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/tools/roots.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/lgamma_small.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006-7, 2013-14.
* (C) Copyright Paul A. Bristow 2007, 2013-14.
* (C) Copyright Nikhar Agrawal 2013-14.
* (C) Copyright Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006-7, 2013-14.
* (C) Copyright Paul A. Bristow 2007, 2013-14.
* (C) Copyright Nikhar Agrawal 2013-14.
* (C) Copyright Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14.
* Copyright Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/lanczos.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{http://www.boost.org/doc/libs/1_65_1/doc/html/boost/random/uniform_int_distribution.html}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Steven Watanabe 2011.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/**
* @license nested-property https://github.com/cosmosio/nested-property
*
* The MIT License (MIT)
*
* Copyright (c) 2014-2015 Olivier Scherrer <pode.fr@gmail.com>
*/

/**
* @name LogNormal
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/stats/base/dists/lognormal/ctor}
*/

/**
* @name cdf
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/stats/base/dists/lognormal/cdf}
*/

/**
* @name entropy
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/stats/base/dists/lognormal/entropy}
*/

/**
* @name kurtosis
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/stats/base/dists/lognormal/kurtosis}
*/

/**
* @name logpdf
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/stats/base/dists/lognormal/logpdf}
*/

/**
* @name mean
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/stats/base/dists/lognormal/mean}
*/

/**
* @name median
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/stats/base/dists/lognormal/median}
*/

/**
* @name mode
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/stats/base/dists/lognormal/mode}
*/

/**
* @name pdf
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/stats/base/dists/lognormal/pdf}
*/

/**
* @name quantile
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/stats/base/dists/lognormal/quantile}
*/

/**
* @name skewness
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/stats/base/dists/lognormal/skewness}
*/

/**
* @name stdev
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/stats/base/dists/lognormal/stdev}
*/

/**
* @name variance
* @memberof lognormal
* @readonly
* @type {Function}
* @see {@link module:@stdlib/stats/base/dists/lognormal/variance}
*/

/**
* A 32-bit Mersenne Twister pseudorandom number generator.
*
* @module @stdlib/random/base/mt19937
*
* @example
* var mt19937 = require( '@stdlib/random/base/mt19937' );
*
* var v = mt19937();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/mt19937' ).factory;
*
* var mt19937 = factory({
*     'seed': 1234
* });
*
* var v = mt19937();
* // returns 822569775
*/

/**
* A Venn diagram builder.
*
* @property {number} nobs - total number of observations
* @property {boolean} three - controls whether to display three circles
* @property {boolean} feedback - controls whether to display feedback buttons
*/

/**
* A basic bootstrap table.
*
* @property {boolean} bordered - adds borders on all sides of the table and cells
* @property {boolean} borderless - removes all borders on the table and cells, including table header
* @property {boolean} hover - enable a hover state on table rows within a <tbody>
* @property {(boolean|string)} responsive - responsive tables allow tables to be scrolled horizontally with ease. Across every breakpoint, use responsive for horizontally scrolling tables. Responsive tables are wrapped automatically in a div. Use responsive="sm", responsive="md", responsive="lg", or responsive="xl" as needed to create responsive tables up to a particular breakpoint. From that breakpoint and up, the table will behave normally and not scroll horizontally
* @property {string} size - make tables more compact by cutting cell padding in half by setting size as `sm`
* @property {boolean} striped - adds zebra-striping to any table row within the <tbody>
* @property {string} variant - invert the colors of the table — with light text on dark backgrounds by setting variant as dark
*/

/**
* A button component that becomes deactivated for a specified duration upon clicking.
*
* @property {number} duration - the time (in seconds) it takes until the button gets reactivated
* @property {Function} block - display bottom in full width
* @property {Function} onClick - callback invoked when clicking the button
* @property {boolean} disabled - if disabled the button will be inactive, but the countdown starts
* @property {string} size - button size (passed to the react-bootstrap button component)
* @property {string} type - button type (passed to the react-bootstrap button component)
* @property {string} variant - button variant (passed to the react-bootstrap button component)
* @property {Object} style - CSS inline styles
* @property {boolean} autoActivate - controls whether to always timeout the button when clicked; if `false`, the timeout is only applied when the callback passed to the `onClick` event handler is invoked with `true`
*/

/**
* A button for joining and leaving chat rooms.
*
* @property {string} for - chat room identifier
* @property {boolean} showTooltip - controls whether to show tooltip
* @property {string} size - button size
* @property {string} tooltipPlacement - position of button tooltip
* @property {Object} style - CSS inline styles
*/

/**
* A button for joining and leaving video chats.
*
* @property {string} for - chat room identifier
* @property {boolean} showTooltip - controls whether to show tooltip
* @property {string} size - button size
* @property {string} tooltipPlacement - position of button tooltip
* @property {Object} style - CSS inline styles
*/

/**
* A button to be displayed at the end of a lesson for students to click on. By default, a message confirming completion of the lesson is sent to their email address.
*
* @property {string} label - label of submit button
* @property {boolean} requireLogin - controls whether to require user to be signed in for button to be active (for anonymous users, no email confirmation is sent out)
* @property {boolean} sendConfirmationEmail - controls whether to send confirmation email upon lesson submission
* @property {string} message - message for confirmation email
* @property {Object} style - CSS inline styles
* @property {Function} onClick - callback invoked when clicking on the submission button
*/

/**
* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.
*
* @property {string} bind - name of global variable for the checkbox value to be assigned to
* @property {boolean} defaultValue - A boolean value indicating the default value of the checkbox
* @property {boolean} disabled - indicates whether the input is active or not
* @property {boolean} inline - indicates whether the checkbox is displayed inline
* @property {string} legend - text displayed next to the checkbox
* @property {string} tooltip - text displayed when hovering over checkbox
* @property {Object} style - CSS inline styles
* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value
*/

/**
* A component displaying an image in the style of a polaroid.
*
* @property {string} image - the URL of the image to be displayed in the polaroid frame
* @property {boolean} draggable - controls whether one can drag the polaroid around the screen
* @property {Function} onClick - event handler invoked when image is clicked (receives the id of the Polaroid as parameter)
* @property {boolean} showPin - shows a pin
* @property {Object} style - CSS inline styles
*/

/**
* A component for generating other components (e.g., automatically generated questions).
*/

/**
* A component for making a child component draggable and optionally resizable.
*
* @property {boolean} resizable - whether resize handlers should be attached to the edges of the child element
* @property {Function} onStop - event handler called when dragging is stopped
* @property {Function} onEscape - event handler called when the escape key is pressed
* @property {Object} style - CSS inline styles
*/

/**
* A component rendering data in a tabular display. Built on top of [react-table](https://react-table.js.org/).
*
* @property {(Object|Array)} data - A data object or array to be viewed. If it is an object, the keys correspond to column values while an array will expect an array of objects with a named field corresponding to each column
* @property {Object} dataInfo - object with `info` string array describing the data set, the `name` of the dataset, an `object` of `variables` with keys corresponding to variable names and values to variable descriptions, an a `showOnStartup` boolean controlling whether to display the info modal on startup
* @property {Array} editable - array of names for columns that shall be editable
* @property {boolean} deletable - controls whether columns for which no `info` exist have a button which when clicked calls the `onColumnDelete` callback function
* @property {Array<string>} undeletableVars - array of variable names of columns which may not be deleted
* @property {boolean} filterable - controls whether columns are filterable
* @property {boolean} showRemove - indicates whether to display checkboxes for rows to be removed
* @property {boolean} showIdColumn - controls whether to show an ID column
* @property {Object} style - An object allowing for custom css styling. Defaults to an empty object
* @property {Function} getTrProps - callback function executed for each row to customize its styling (passed table state, row info,
column, and the table instance)
* @property {Function} onClickRemove - A function specifying an action to take for rows removed from the data (defaults to an empty function)
* @property {Function} onColumnDelete - function invoked with the name of a column when the respective delete button for a column is clicked
* @property {Function} onEdit - function invoked with the updated data set after the value of a cell was changed by the user (only applies when table is `editable`)
* @property {Function} onTutorialCompletion - function invoked when user has completed the data table tutorial
*/

/**
* A component showing a question and a five-point scale for students to answer.
*
* @property {string} question - question to be printed
* @property {Array} options - an array of five elements holding the labels for the different scale levels
* @property {boolean} noMultipleResponses - disallow multiple submissions from a single student
* @property {boolean} disableSubmitNotification - controls whether to disable submission notifications
*/

/**
* A component that allows the display of shapes, triggered by images with alpha channel
*
* @property {boolean} background - if set the component can hold and display child elements
* @property {string} src - the image url
* @property {number} margin - the margin in regards to the floating text, in pixels. Default: 10
* @property {Object} style - the style of the object, it can hold any css including animations
* @property {number} threshold - alpha threshold, number between 0 and 1
* @property {Function} onClick - event handler invoked when image is clicked
*/

/**
* A component that allows the display of shapes, triggered by images with alpha channel
*
* @property {string} image - the background image url
* @property {string} svg - the svg background image url
* @property {number} margin - the margin in regards to the floating text, in pixels. Default: 10
* @property {Object} style - the style of the object, it can hold any css including animations
* @property {Function} onClick - event handler invoked when image is clicked
*/

/**
* A component which displays its children in a slideshow or carousel.
*
* @property {string} title - title for the slideshow / carousel to be displayed at its top
* @property {boolean} dots - display dots at the bottom for quickly navigating to any slide
* @property {boolean} fade - controls whether fading is used for transitioning between the slides
* @property {boolean} draggable - controls whether users can drag the slides to navigate between them
* @property {number} goto - If property is changed, the component jumps to the slide with the selected index
* @property {boolean} infinite - controls whether the slideshow wraps around it's contents
* @property {number} interval - sets a time interval for an automatic slide change
* @property {boolean} swipe - enables drag/swipe behavior
* @property {Object} style - CSS inline styles
* @property {Function} onClick - callback invoked when clicking on the next/previous buttons
*/

/**
* A drawing sketchpad for note taking on lecture slides or empty pages.
*
* @property {boolean} autoSave - controls whether the editor should save the current text to the local storage of the browser at a given time interval
* @property {boolean} feedbackButtons - controls whether to display feedback buttons on each slide
* @property {number} intervalTime - time between auto saves
* @property {boolean} hideInputButtons - controls whether to hide drawing and text input buttons
* @property {boolean} hideNavigationButtons - controls whether to hide buttons for navigating between pages
* @property {boolean} hideSaveButtons - controls whether to hide the save buttons
* @property {boolean} hideTransmitButtons - controls whether to hide buttons for transmitting user actions
* @property {number} brushSize - size of the brush to paint with
* @property {string} color - color of the brush and texts
* @property {number} canvasWidth - width of the canvas element (in px)
* @property {number} canvasHeight - height of the canvas element (in px)
* @property {boolean} dynamicallyHideButtons - controls whether to start hiding buttons when toolbar width is not sufficient (otherwise a new line will be started)
* @property {boolean} fullscreen - controls whether to automatically resize the canvas to the width and height of the browser window
* @property {string} fill - if `horizontal`, fill all available horizontal space when drawing a PDF; if `vertical`, all vertical space is used to prevent y-axis overflow
* @property {boolean} disabled - whether to make the component read-only and forbid drawing on the sketchpad
* @property {string} fontFamily - font family
* @property {number} fontSize - font size
* @property {Object} nodes - components to be rendered on top of specified slides; `keys` should correspond to page numbers, `values` to the components
* @property {number} noPages - initial number of pages
* @property {string} pdf - Link to PDF file for baked-in page backgrounds
* @property {boolean} showTutorial - show a tutorial for the sketchpad
* @property {boolean} transmitOwner - whether owner actions should be transmitted to other users in real-time
* @property {boolean} groupMode - controls whether all user's actions are transmitted to everyone else
* @property {strings} voiceID - voice control identifier
* @property {Object} style - CSS inline styles
* @property {Function} onChange - callback invoked whenever a new line element is drawn
*/

/**
* A dynamic background component that changes a background image at a specified interval.
*
* @property {Array} images - list of image URLs to be displayed
* @property {number} time - duration each background image is displayed (in seconds)
* @property {string} in - entrance effect name (either `fade-in`, `slide-left-in`, and `flip-hor-bottom-in`)
* @property {string} out - exit effect name (either `fade-out`, `slide-right-out`, and `flip-hor-bottom-out`)
* @property {number} inTime - length of the enter effect (in seconds)
* @property {number} outTime - length of the exit effect (in seconds)
* @property {boolean} parent - sets the parent div's backgroundColor to transparent, overflow to hidden
*/

/**
* A dynamic background component that changes a background image at a specified interval.
*
* @property {Array} list - list of image URLs to be displayed
* @property {boolean} loop - indicates whether the process shall be displayed infinitely
* @property {string} direction - the direction of the text flow (either `left`, `right`, `up`, `down`, `tracking`, `focus`, or `swirl`)
* @property {number} still - the time the text remains still (in seconds)
* @property {number} interval - the interval between the calls (in seconds)
* @property {number} inTime - time of the entrance effect (in seconds)
* @property {number} outTime - time of the exit effect (in seconds)
* @property {Object} style - style definition of the text
*/

/**
* A form component combining different question components together with a single submission button.
*
* @property {string} buttonLabel - label of the submit button
* @property {Function} onSubmit - callback invoked when the submit button is clicked
*/

/**
* A learning component for calculating probabilities of a Student's t distribution.
*
* @property {number} step - step size of the scroll input
* @property {Object} style - CSS inline styles
*/

/**
* A learning component for calculating probabilities of a binomial distribution.
*
* @property {boolean} hideCDF - controls whether to hide the CDF display
* @property {number} step - step size of the scroll input
* @property {Object} style - CSS inline styles
*/

/**
* A learning component for calculating probabilities of a exponential distribution.
*
* @property {boolean} hideCDF - controls whether to hide the CDF plots
* @property {number} step - step size of the scroll input
* @property {Object} style - CSS inline styles
*/

/**
* A learning component for calculating probabilities of a normal distribution.
*
* @property {boolean} hideCDF - controls whether to hide the CDF plots
* @property {Object} domain - object of `x` and `y` arrays with the starting and end points for the respective axis
* @property {Array} tabs - which tabs to display (either `smaller`, `greater`, or `range`)
* @property {number} minStDev - minimum standard deviation
* @property {number} step - step size of the scroll input
* @property {Object} style - CSS inline styles
*/

/**
* A learning component illustrating conditional probability for two dependent binary variables.
*/

/**
* A learning component illustrating coverage of confidence intervals for the mean of a binomial distribution.
*
* @property {(string|node)} intro - overrides default (interactive) intro text
* @property {boolean} quartileNotation - controls whether to use quartile notation in intro text
* @property {boolean} sampleStats - controls whether one should be able to switch between using the sample proportion or the known population success probability when calculating the standard error
*/

/**
* A learning component illustrating coverage of confidence intervals for the mean of a normal distribution.
*
* @property {(string|node)} intro - overrides default (interactive) intro text
* @property {boolean} quartileNotation - controls whether to use `alpha/2` as the subscript for the critical value or just `critical`
* @property {boolean} sampleStats - controls whether one should be able to switch between using the sample standard deviation or the known population standard deviation when calculating the standard error
*/

/**
* A learning component illustrating the Central Limit Theorem (CLT) for a canonical discrete distribution, the binomial distribution.
*/

/**
* A learning component illustrating the Central Limit Theorem (CLT) for a chosen continuous distribution.
*/

/**
* A learning component illustrating the Central Limit Theorem (CLT) when sampling from a supplied data set.
*/

/**
* A learning component illustrating the law of large numbers using dice throwing.
*/

/**
* A learning component on hypothesis tests for a population proportion.
*
* @property {Array} types - the type(s) of test (`One-Sample`, `Two-Sample`) the widget should expose
* @property {boolean} feedback - controls whether to display feedback buttons
* @property {boolean} nullHypothesisAsValue - always display the null hypothesis as a single value
* @property {Object} style - CSS inline styles
*/

/**
* A linear congruential pseudorandom number generator (LCG) based on Park and Miller.
*
* @module @stdlib/random/base/minstd
*
* @example
* var minstd = require( '@stdlib/random/base/minstd' );
*
* var v = minstd();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/minstd' ).factory;
*
* var minstd = factory({
*     'seed': 1234
* });
*
* var v = minstd();
* // returns 20739838
*/

/**
* A linear congruential pseudorandom number generator (LCG) whose output is shuffled.
*
* @module @stdlib/random/base/minstd-shuffle
*
* @example
* var minstd = require( '@stdlib/random/base/minstd-shuffle' );
*
* var v = minstd();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/minstd-shuffle' ).factory;
*
* var minstd = factory({
*     'seed': 1234
* });
*
* var v = minstd();
* // returns 1421600654
*/

/**
* A link component.
*
* @property {string} href - URL of website to link to
*/

/**
* A number input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.
*
* @property {string} bind - name of global variable for the number to be assigned to
* @property {number} value - number value (for controlled component)
* @property {number} defaultValue - value indicating the default value of the input at startup
* @property {boolean} disabled - boolean indicating whether the input is active or not
* @property {number} min - number indicating the smallest possible value that may be inserted
* @property {number} max - number indicating the maximum value that may be inserted
* @property {(number|string)} step - number indicating the incremental changes when using the increment arrows
* @property {boolean} inline - indicates whether the input is displayed inline
* @property {string} legend - string indicating the text displayed next to the number input
* @property {boolean} numbersOnly - controls whether only numbers are accepted
* @property {string} tooltip - tooltip string (if not set, the tooltip is automatically generated)
* @property {string} tooltipPlacement - direction of the tooltip
* @property {Object} style - CSS inline styles
* @property {Object} inputStyle - CSS inline styles for input element
* @property {Function} onBlur - callback function to be invoked when using a blur method
* @property {Function} onChange - callback function to be invoked when number input is changed
* @property {Function} onKeyPress - callback function to be invoked when any key is entered
* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down
* @property {Function} onKeyUp - callback function to be invoked when key is released
*/

/**
* A pixel color picker explaining RGB colors using example images.
*/

/**
* A proportions input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.
*
* @property {number} nElements - number of elements
* @property {Array} legends - group labels
* @property {boolean} disabled - controls whether the input field is deactivated
* @property {number} precision - displayed precision of proportion values
* @property {number} step - the step of the arrows seen when hovering the cursor above the input box
* @property {Array} colors - array of colors for the pie chart components. If not defined, a custom color scale will be used
* @property {number} height - proportions input height (in px)
* @property {number} innerRadius - inner radius of proportions pie chart (in px)
* @property {number} margin - proportion input margin (in px)
* @property {Function} onChange - callback function to be invoked when a choice is made
*/

/**
* A quiz component displaying a sequence of question components.
*
* @property {Array} questions - array of questions from which questions will be randomly selected
* @property {number} count - number of questions to include in the quiz
* @property {boolean} confidence - whether to display a Likert scale asking for the confidence of the user's answer
* @property {boolean} forceConfidence - controls whether a user has to supply a confidence level before moving to the next question
* @property {boolean} skippable - controls whether questions in  the quiz are skippable
* @property {Array} footerNodes - array of nodes to be displayed in the footer of each question
* @property {string} nextLabel - label of button to advance to next question
* @property {boolean} showFinishButton - controls whether to display button to finish quiz and jump directly to results page
* @property {string} finishLabel - label of button to finish quiz
* @property {boolean} provideFeedback - controls whether to show students feedback on correctness of their answers after quiz completion
* @property {boolean} active - controls whether the timer for the quiz is active
* @property {number} duration - duration of the quiz (in minutes); once time is up, the summary page will be displayed
* @property {Function} onFinished - callback invoked when the quiz is finished and the results page is displayed
* @property {Function} onSubmit - callback invoked when user submits an answer
*/

/**
* A select question component.
*
* @property {string} question - question for which the student has to select one of the available answer options
* @property {Array} options - available answer options from which the student can select
* @property {integer} solution - index of solution element in `options`
* @property {integer} preselected - index of preselected answer option
* @property {boolean} inline - controls whether the component is rendered inline or not
* @property {Array<string>} hints - hints providing guidance on how to answer the question
* @property {string} hintPlacement - placement of the hints (either `top`, `left`, `right`, or `bottom`)
* @property {boolean} feedback - controls whether to display feedback buttons
* @property {boolean} chat - controls whether the element should have an integrated chat
* @property {boolean} provideFeedback - indicates whether feedback including the correct answer should be displayed after learners submit their answers
* @property {string} failureMsg - message to be displayed when student selects a wrong answer
* @property {string} successMsg - message to be displayed when student selects the correct answer
* @property {Object} style - CSS inline styles
* @property {Function} onChange - callback  which is triggered after the submit action
* @property {Function} onSubmit - callback invoked when answer is submitted; has as first parameter a `boolean` indicating whether the answer was correctly answered (if applicable, `null` otherwise) and the supplied answer as the second parameter
 */

/**
* A slider input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.
*
* @property {string} legend - caption of the input
* @property {number} defaultValue - The starting value of the slider
* @property {number} min - The minimum value of the slider
* @property {number} max - The maximum value of the slider
* @property {(number|string)} step - step size of the slider
* @property {boolean} inline - controls whether to place the slider inline with text or outside
* @property {number} precision - rounding of the input. The value will be rounded to have no more significant digits than the precision. For example, if one wishes to only use integers, a precision of 10 would be used, while if one wishes to round to the hundreds place, one would use a precision of 0.001
* @property {boolean} disabled - controls whether the slider input is active or not. If set to true, the slider will be present on the screen, albeit grayed-out
* @property {Object} style - CSS inline styles
* @property {Object} numberInputStyle - CSS inline styles for number input component
* @property {Object} rangeInputStyle - CSS inline style for range input component
* @property {Function} onChange - callback invoked with the new value when the slider value changes
*/

/**
* A sticky note rendering some text.
*
* @property {string} title - note title
* @property {string} body - text of the note
* @property {string} color - available options: red, green, blue, pink, orange
* @property {Object} style - CSS inline styles
* @property {string} date - a date displayed for the note
* @property {boolean} editable - controls whether the component is editable
* @property {boolean} minimizable - controls whether the component is minimizable
* @property {boolean} minimized - if set, the component is minimized at the start
* @property {boolean} stain - controls whether to show a coffee stain
* @property {Function} onClick - callback function invoked when the note is clicked
* @property {boolean} removable - controls whether the note is removed when clicked
*/

/**
* A text area component. Used as a stand-alone component, changes should be handled via the `onChange` attribute.
*
* @property {string} defaultValue - default value of the text area
* @property {string} value - text value (for controlled component)
* @property {boolean} disabled - controls whether the text area shall be disabled
* @property {string} legend - legend text
* @property {string} placeholder - placeholder text
* @property {boolean} resizable - controls whether the text area shall be resizable
* @property {number} rows - number of rows
* @property {Object} style - CSS inline styles
* @property {Function} onBlur - callback function invoked when the text area loses focus
* @property {Function} onChange - callback function invoked with the new text when the area text changes
*/

/**
* A text input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.
*
* @property {Function} onChange - A function to be called when a text value is changed
* @property {string} defaultValue - A value indicating the default value of the input at start
* @property {boolean} disabled - A boolean indicating whether the input is active or not
* @property {number} width - A number indicating the width of the input in pixels
* @property {boolean} inline - Indicates whether the input is displayed inline
* @property {string} legend - A string indicating the text displayed next to the number input
* @property {string} value - text value (for controlled component)
* @property {string} bind - name of global variable for the number to be assigned to
* @property {string} placeholder - A string indicating the value to be displayed before an initial choice is made
* @property {Object} style - CSS inline styles
* @property {Function} onBlur - callback function invoked when the text area loses focus
* @property {Function} onKeyPress - callback function to be invoked when any key is entered
* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down
* @property {Function} onKeyUp - callback function to be invoked when key is released
*/

/**
* A thin wrapper around [react-sortable-tree](https://www.npmjs.com/package/react-sortable-tree) that supports all properties of said component.
*
* @property {string} title - header title
*/

/**
* A tooltip overlay.
*
* @property {string} tooltip - tooltip content
* @property {string} placement - direction of the tooltip
* @property {boolean} show - controls whether the tooltip shall be displayed
*/

/**
* A venn diagram visualizing co-occurrence of words in documents of a supplied term-document matrix.
*
* @property {Array} tdm - `array` that is to represent a [term document matrix](https://en.wikipedia.org/wiki/Document-term_matrix)
* @property {number} nTexts - number of sources from which text was gathered
* @property {number} vocabulary - `array` in the order of the `tdm` array passed so that the indices may be matches to their words
* @property {number} height - height of the Venn diagram in pixels
* @property {number} width - width of the Venn diagram in pixels
* @property {Function} onClick - callback for what is to be done when "Draw Venn Diagram" is clicked
*/

/**
* A visualization explaining cross-validation.
*/

/**
* A voice input component.
*
* @property {boolean} autorecord - controls whether to automatically start recording
* @property {string} defaultValue - default text value
* @property {Array} grammars - speech grammar list (unsupported)
* @property {string} language - language identifier
* @property {string} legend - legend displayed in front of input field
* @property {string} mode - set to `full` to display a text input field alongside the microphone, `status` to only display a statusbar with the transcribed texts, `microphone` to show just a button to toggle recording, or `none` when the voice input should be invisible and purely controlled via hotkeys / voice commands
* @property {number} maxAlternatives - maximum number of alternatives provided per speech recognition result
* @property {Function} onChange - callback function invoked when text input value is updated
* @property {Function} onClick - callback function invoked when clicking on the microphone button
* @property {Function} onFinalText - callback function invoked once final text is received
* @property {Function} onSegment - callback function invoked with text segments
* @property {Function} onRecordingStart - callback function invoked when recording is started
* @property {Function} onRecordingStop - callback function invoked once recording is stopped
* @property {Function} onSubmit - callback function when submitting text input value by hitting "Enter"
* @property {string} placeholder - text input placeholder
* @property {Object} remote - object with `start`, `stop`, and `toggle` and associated hotkeys
* @property {Function} timeout - number of milliseconds after which to timeout the recording
* @property {Function} stopTooltip - tooltip message displayed while recording
* @property {Function} startTooltip - tooltip message displayed while not recording
* @property {string} tooltipPlacement - direction of the tooltip
* @property {number} width - voice input width (in px)
* @property {number} height - voice input height (in px)
* @property {Object} style - CSS inline styles
*/

/**
* A word cloud component built on top of [d3-cloud](https://github.com/jasondavies/d3-cloud).
*
* @property {Array} data - either an array of texts from which to generate the word cloud or, if `precalculated` is set to `true`, and array of word count objects (with `text` and `value` keys)
* @property {Function} font - accessor function specifying the font face for each word. Also accepts a constant instead of a function
* @property {Function} fontSizeMapper - accessor function indicating the font size for each word. Defaults to `( count - min + 1 ) / ( max - min + 6 ) * 30.0 + 12.0`, where `min` and `max` denote the minimum and maximum word `counts`, respectively
* @property {boolean} precalculated - controls whether the word cloud expects an array of precalculated word counts or will generate them for given texts
* @property {(Function|number)} rotate - accessor function indicating the rotation angle (in degrees) for each word. Also accepts a constant instead of a function
* @property {number} width - width of the word cloud (in px)
* @property {number} height - height of the word clloud (in px)
* @property {string} language - language identifier (determines the stopwords to be removed)
* @property {number} minCount - if set, only include words that appear more than `minCount` times in the given data
* @property {boolean} saveButton - controls whether to display a button for saving the word cloud as an image
* @property {(Function|number)} padding - accessor function or constant indicating the numerical padding for each word
* @property {number} updateThreshold - batch size of new documents in `data` before the word cloud is re-rendered
* @property {boolean} triggerRender - rerender when the data set is exchanged
* @property {Array} stopwords - additional stopwords to remove before rendering the word cloud
* @property {Object} style - CSS inline styles
* @property {Function} onClick - callback function invoked when a word on the word cloud is clicked
*/

/**
* A wrapper around String objects for specifying ordered categories.
*
* @param {string} name - variable name
* @param {Array} categories - ordered categories
* @returns {String} factor variable string object
*/

/**
* A wrapper for the [react-color](https://casesandberg.github.io/react-color/) color picker.
*
* @property {(string|Object)} color - `string` holding an HeX code or an `object` holding RGB or HSL values such as `{ r: 255, g: 255, b: 255 }` or `{ h: 0, s: 0, l: .10 }`, which determines the active color. Both accept an `a` property for alpha values other than one
* @property {boolean} disableAlpha - controls whether to remove alpha slider and options
* @property {Array<string>} presetColors - HeX `strings` specifying the default colors at the bottom of the colorpicker
* @property {number} width - width of the color picker (in px)
* @property {Function} onChange - callback invoked every time color is changed
* @property {Function} onChangeComplete - callback invoked once a color change is complete
*/

/**
* Adapted from:
*
* simplemde v1.11.2
* Copyright Next Step Webs, Inc.
* @link https://github.com/NextStepWebs/simplemde-markdown-editor
* @license MIT
*/

/**
* Adds a value to the stack.
*
* @name push
* @memberof Stack.prototype
* @type {Function}
* @returns {Stack} stack instance
*
* @example
* var s = new Stack();
*
* // Add values to the stack:
* s.push( 'foo' ).push( 'bar' );
*
* // Remove the top value:
* var v = s.pop();
* // returns 'bar'
*
* // Add a new value to the stack:
* s.push( 'beep' );
*
* // Remove the top value:
* v = s.pop();
* // returns 'beep'
*/

/**
* Algorithm adapted from Introduction to Information Retrieval by Manning et al., Cambridge University Press. 2008 [p.386].
*
* @param {Array} data - input data
* @param {Function} linkage - used linkage function
* @param {Function} distance - used distance metric
* @return {Array} a list holding merge instructions
*/

/**
* Alias for `eval` global.
*
* @module @stdlib/utils/eval
*
* @example
* var evil = require( '@stdlib/utils/eval' );
*
* var v = evil( '5*4*3*2*1' );
* // returns 120
*/

/**
* Allocate a buffer containing a provided string.
*
* @module @stdlib/buffer/from-string
*
* @example
* var string2buffer = require( '@stdlib/buffer/from-string' );
*
* var buf = string2buffer( 'beep boop' );
* // returns <Buffer>
*/

/**
* Allocate a buffer having a specified number of bytes.
*
* @module @stdlib/buffer/alloc-unsafe
*
* @example
* var allocUnsafe = require( '@stdlib/buffer/alloc-unsafe' );
*
* var buf = allocUnsafe( 10 );
* // returns <Buffer>
*/

/**
* Allocates a buffer containing a provided string.
*
* @param {string} str - input string
* @param {string} [encoding="utf8"] - character encoding
* @throws {TypeError} first argument must be a string
* @throws {TypeError} second argument must be a string
* @throws {TypeError} second argument must be a valid encoding
* @returns {Buffer} new `Buffer` instance
*
* @example
* var buf = fromString( 'beep boop' );
* // returns <Buffer>
*/

/**
* Allocates a buffer having a specified number of bytes.
*
* ## Notes
*
* -   The underlying memory of returned `Buffer` instances is not initialized. Memory contents are unknown and may contain sensitive data.
* -   When the size is less than half the pool size (specified on the `Buffer` constructor), memory is allocated from the `Buffer` pool for faster allocation of new `Buffer` instances.
*
*
* @param {NonNegativeInteger} size - number of bytes to allocate
* @throws {TypeError} must provide a nonnegative integer
* @returns {Buffer} new `Buffer` instance
*
* @example
* var buf = allocUnsafe( 10 );
* // returns <Buffer>
*/

/**
* Allows a function to be called with a vector instead of a single number.
*
* @private
* @param {Function} fun - input function
* @returns {Function} vectorized function
*/

/**
* An ISLE component for questions where the answers by the students should be supplied in the form of free text. What differentiates this component from the **FreeTextQuestion** is the fact that the aggregated group data is displayed to everyone in real-time.
*
* @property {string} question - the question to ask the students
* @property {boolean} allowMultipleAnswers - controls whether one wishes to allow students to answer the survey multiple times
* @property {boolean} anonymous - controls whether student answers are anonymized
* @property {boolean} multipleAnswers - controls whether students may select more than one answer. Note that this differs from `allowMultipleAnswers`, which allows students able to submit an answer multiple times
* @property {number} rows - number of text rows in the input field
* @property {Object} style - CSS inline styles
* @property {Function} onSubmit - callback function called when an answer is submitted
*/

/**
* An ISLE component for recording audio, screen and video.
*
* @property {boolean} audio - indicates whether audio should be recorded
* @property {boolean} camera - indicates whether webcam should be recorded
* @property {boolean} screen - indicates whether the screen should be captured
* @property {boolean} autostart - indicates whether recording should start immediately
* @property {boolean} downloadable - indicates whether users should be able to download the recording
* @property {boolean} uploadable - indicates whether users should be able to upload the recording to the server
* @property {number} bitsPerSecond - bits per second
* @property {string} voiceID - voice control identifier
* @property {Object} style - CSS inline styles
*/

/**
* An ISLE component that allows to apply animation on components and child elements.
*
* @property {Object} in - the style which is applied at the beginning
* @property {Object} over - mouseOver style
* @property {Object} out - mouseOut style
* @property {string} preset - name of the preset
*/

/**
* An ISLE component that allows to display its children only to reserved audiences.
*
* @property {boolean} user - when set the gated content is displayed to subscribed users
* @property {boolean} notUser - when set the gated content is **not** displayed to subscribed users
* @property {boolean} enrolled - when set the gated content is displayed to the students enrolled in the course
* @property {boolean} notEnrolled - when set the gated content is **not** displayed to the students enrolled in the course
* @property {boolean} owner - when set the gated content is displayed to the owner of the course (usually the instructor)
* @property {boolean} notOwner - when set the gated content is **not** displayed to the owner of the course (usually the instructor)
* @property {Node} banner - a message which is visible to the visitors lacking the gate privilege
* @property {boolean} disabled - if a gate is disabled, the banner will be displayed no matter what
* @property {Function} check - callback function returning a `boolean` indicating whether gate should display child components; the function is invoked whenever session actions arrive
*/

/**
* An ISLE component that allows to slideDown and slideUp - JQuery style - the body section.
*/

/**
* An ISLE component that allows to slideDown and slideUp - JQuery style - the header section.
*/

/**
* An ISLE component that allows to slideDown and slideUp - JQuery style.
*
* @property {boolean} defaultVisible - if set, the body is visible right from the start
* @property {boolean} visible - controls whether slider is visible; turns it into a controlled component where state needs to be handled externally
* @property {string} header - header string
* @property {string} headerClassName - this overrules the given className of the header
* @property {Object} headerStyle - one may also assign a style to the header bar
* @property {Function} onClick - event handler invoked when header is clicked
*/

/**
* An ISLE component that allows two render two-sides.
*
* @property {(string|node)} button - button label
* @property {Array<Object>} cardStyles - allows to override the given styles
* @property {boolean} draggable - controls whether the card may be dragged around
* @property {number} flipSpeedBackToFront - the speed by which the card turns from background to foreground, in seconds
* @property {number} flipSpeedFrontToBack {number} the speed by which the card turns from foreground to background, in seconds
* @property {boolean} isFlipped - initial flip state of the card
* @property {number} perspective - CSS property value to give 3d-positioned element a perspective
* @property {Function} onChange - callback invoked once the card is flipped; receives the current flipped status as its sole argument
* @property {boolean} oneTime - indicates whether the flip process may be executed just once
*/

/**
* An ISLE component that allows you to create a typewriter effect
*
* @property {number} deviation - allows you to specify the randomness
* @property {number} hold - if text is an array of strings, hold specified the duration the full will be displayed before it passes over to the next item in the array
* @property {number} interval - the interval of the typewriter (in milliseconds)
* @property {number} delay - initial delay before typewriter starts (in milliseconds)
* @property {boolean} random - if random is set, the keystrokes will be performed with a certain, "humane" randomness
* @property {boolean} sound - the typed keystroke will be also heard
* @property {string} text - the full text to be displayed
* @property {Object} style - CSS inline styles
*/

/**
* An ISLE component that allows you to create and control multiple flippable cards (e.g. in a game of Memory).
*
* @property {Array<Object>} values - the values for the respective cards, input in an array that has entry fields for a `front` and `back` value. Such a value could be a string, but also a full fledged ISLE component
* @property {Array<Object>} cardStyles - allows to override the given styles. Handles objects with  `container`, `front` and `back` keys
* @property {string} game - multi-card games. Can be either `memory` or `bingo`.
* @property {string} language - voice recognition language identifier
* @property {Function} onChange - a function that receives the matrix of the flippable cards
* @property {boolean} oneTime - indicates whether the flip process may be executed just once
* @property {Object} animation - if set the component uses an entry animation; the object contains a name (like `anim-scale-up`) and a duration (like `1.7s` = 1.7 seconds)
* @property {Object} style - CSS inline styles
*/

/**
* An ISLE component that renders a matrix of multiple choice questions with the same answers.
*
* @property {Array} questions - an array of questions
* @property {Array} answers - an array of answers
* @property {(Node|string)} title - title to be displayed on top of the question matrix
* @property {string} type - question type (`radio` corresponds to "Select one", `checkbox` to "Select all that apply")
* @property {Array<Array>} solution - boolean matrix the element of which indicate whether the respective radio button or checkbox should be ticked
* @property {boolean} disableSubmitNotification - controls whether to disable submission notifications
* @property {Function} onChange - callback invoked when the value of a checkbox / radio button changes; invoked with the two-dimensional boolean array of the active status for each answer option
* @property {Function} onSubmit - callback invoked when user clicks the "Submit" button; invoked with the two-dimensional boolean array of the active status for each answer option
*/

/**
* An ISLE component that renders a question in which the learner has to match elements from two lists with each other in the correct way.
*
* @property {string} question - question to be displayed at the top of the match list question component
* @property {Array} elements - an `array` holding the correct pairs displayed at the top of the free text question component. Each `array` element must be an `object` with `a` and `b` properties
* @property {Array<string>} hints - hints providing guidance on how to answer the question
* @property {string} hintPlacement - placement of the hints (either `top`, `left`, `right`, or `bottom`)
* @property {boolean} provideFeedback - indicates whether the solution should be accessible after learners submit their answers
* @property {boolean} feedback - controls whether to display feedback buttons
* @property {boolean} chat - controls whether the element should have an integrated chat
* @property {Array} colorScale - if set, the supplied colors are used for the tiles
* @property {string} shuffle - specifies whether to shuffle the `left`, `right`, or `both` columns whose elements have to be matched
* @property {boolean} disableSubmitNotification - controls whether to disable submission notifications
* @property {string} submissionMsg - notification displayed when the learner first submits his answer
* @property {string} resubmissionMsg - notification displayed for all submissions after the first one
* @property {number} maxlength - maximum allowed number of characters
* @property {Object} style - CSS inline styles
* @property {Function} onSubmit - callback invoked when students submits an answer
*/

/**
* An ISLE pagination component that allows the user to step through a sequence of pages.
*
* @property {string} title - displayed title of the pages container
* @property {string} size - size of the pagination buttons (one of `default`, `lg`, `large`, `sm`, `small`, `xs`, or `xsmall`)
* @property {number} height - the maximum height of the container. If an embedded page is taller, a vertical scrollbar is added
* @property {number} activePage - active page
* @property {boolean} disabled - controls whether the navigation bar is active or not
* @property {strings} voiceID - voice control identifier
* @property {Object} style - CSS inline styles
* @property {Function} onSelect - Function invoked when active change is changed. Receives the new active page index as a sole parameter
*/

/**
* An `Object.create` shim for older JavaScript engines.
*
* @private
* @param {Object} proto - prototype
* @returns {Object} created object
*
* @example
* var obj = createObject( Object.prototype );
* // returns {}
*/

/**
* An accordion component controlling vertical sliders.
*
* @property {number} active - index of slider to be opened at the beginning
* @property {Array} headers - array of header names
* @property {string} headerClassName - this overrules the given className of the headers
* @property {object} headerStyle - one may also assign a style to the header bars
*/

/**
* An approval seal.
*
* @property {boolean} active - controls whether seal is active or grayed out
* @property {number} scale - object size (if not explicitly set, the seal is not rescaled)
* @property {string} title - seal title
* @property {string} lower - the lower text
* @property {number} lowerArc - the arc for the lower text
* @property {string} upper - the upper text
* @property {number} upperArc - the arc for the upper text
* @property {Object} style - the style for the element
* @property {Object} innerStyle - the style for the inner circle
* @property {boolean} noOrnaments - prevents rendering of the ornaments
* @property {boolean} removable - controls whether the note is removed when clicked
* @property {Function} onClick - callback function invoked when the note is clicked
*/

/**
* An enlargeable grid.
*
* @property {boolean} enlargeable - controls whether items can be enlarged
* @property {number} enlargedHeight - height of item after enlarging it
* @property {boolean} isDraggable - controls whether the grid elements are draggable
* @property {boolean} isResizable - controls whether the grid elements are resizable
* @property {number} itemHeight - height of items (in px)
*/

/**
* An iFrame component.
*
* @property {string} title - iFrame title
* @property {string} src - source URL
* @property {boolean} fullscreen - controls whether to display the iFrame in fullscreen mode
* @property {number} width - iFrame width (in px)
* @property {number} height - iFrame height (in px)
* @property {Object} style - CSS inline styles
*/

/**
* An interactive Javascript shell that can be used to execute JavaScript commands. The shell contains a console that displays error messages, warnings etc.
*
* @property {string} code - JavaScript code to be evaluated
* @property {string} solution - for programming questions, code `string` representing the official solution for the problem
* @property {Array<string>} hints - for programming questions, an array of hints providing guidance on how to approach the problem
* @property {boolean} precompute - controls whether the default code should be executed once the component has mounted
* @property {boolean} chat - controls whether group chat functionality should be enabled
* @property {boolean} check - appended JavaScript code to check the `code` to be evaluated
* @property {boolean} disabled - controls whether to disable all user inputs and make the code block static
* @property {number} lines - number of lines to display
* @property {Object} vars - scope object with variables that should be made available to evaluated `code`
* @property {string} voiceID - voice control identifier
* @property {Object} style - CSS inline styles
* @property {Function} onChange - callback invoked whenever the text field input changes
* @property {Function} onEvaluate - callback invoked whenever the `Evaluate` button is clicked
*/

/**
* An interactive game testing student's ability in detecting the median and mean of a given distribution.
*
* @property {string} id - component identifier
* @property {string} header - title of the panel in which the mean and the median will be generated
* @property {node} intro - any introductory material that may be needed
* @property {boolean} showStatistics - controls whether to display student and group performance statistics
* @property {boolean} feedback - controls whether to display feedback buttons
* @property {number} seed - seed to initialize pseudorandom number generator
* @property {Object} style - CSS inline styles
*/

/**
* Arbitrary constant `g` to be used in Lanczos approximation functions.
*
* @constant
* @type {number}
* @default 10.900511
* @see [Lanczos Approximation]{@link https://en.wikipedia.org/wiki/Lanczos_approximation}
*/

/**
* Arbitrary constant `g` to be used in Lanczos approximation functions.
*
* @module @stdlib/constants/math/float64-gamma-lanczos-g
* @type {number}
*
* @example
* var FLOAT64_GAMMA_LANCZOS_G = require( '@stdlib/constants/math/float64-gamma-lanczos-g' );
* // returns 10.900511
*/

/**
* Assigns a non-empty string to the `returnValue` property of the unload event, which causes a dialog box to appear, asking the user for confirmation to leave the page.
*
* @param {Event} event - unload event
* @returns {string} confirmation message
*/

/**
* Asymptotic expansions of the incomplete gamma functions when `a` is large and `x ~ a` (IEEE double precision or 10^-17).
*
* @private
* @param {number} a - function parameter
* @param {number} x - function parameter
* @returns {number} value of asymptotic expansion
*/

/**
* Attempts to call a `Date` method.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if able to call a `Date` method
*/

/**
* Attempts to call a `RegExp` method.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if able to call a `RegExp` method
*/

/**
* Attempts to extract a string value.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a string can be extracted
*/

/**
* Attempts to serialize a value to a string.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value can be serialized
*/

/**
* Bernoulli distribution probability mass function (PMF).
*
* @module @stdlib/stats/base/dists/bernoulli/pmf
*
* @example
* var pmf = require( '@stdlib/stats/base/dists/bernoulli/pmf' );
*
* var y = pmf( 0.0, 0.3 );
* // returns 0.7
*
* y = pmf( 1.0, 0.7 );
* // returns 0.7
*
* y = pmf( -1.0, 0.5 );
* // returns 0.0
*
* var mypmf = pmf.factory( 0.5 );
* y = mypmf( 2.0 );
* // returns 0.0
*
* y = mypmf( 1.0 );
* // returns 0.5
*/

/**
* Bias of a double-precision floating-point number's exponent.
*
* ## Notes
*
* The bias can be computed via
*
* ```tex
* \mathrm{bias} = 2^{k-1} - 1
* ```
*
* where \\(k\\) is the number of bits in the exponent; here, \\(k = 11\\).
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* Bibliography component which prints all references used in the lesson (specified via `references` field in the preamble).
*
* @prop {string} title - heading to be displayed in front of references
*/

/**
* Binary search algorithm returning the index at which the element if inserted would be larger than all elements to the left and smaller than those to the right.
*/

/**
* Binomial distributed pseudorandom numbers.
*
* @module @stdlib/random/base/binomial
*
* @example
* var binomial = require( '@stdlib/random/base/binomial' );
*
* var v = binomial( 20, 0.4 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/binomial' ).factory;
*
* var binomial = factory( 90, 0.8, {
*     'seed': 297
* });
*
* var v = binomial();
* // returns <number>
*/

/**
* Binomial distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/binomial/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/binomial/cdf' );
*
* var y = cdf( 3.0, 20, 0.2 );
* // returns ~0.411
*
* y = cdf( 21.0, 20, 0.2 );
* // returns 1.0
*
* y = cdf( 5.0, 10, 0.4 );
* // returns ~0.834
*
* y = cdf( 0.0, 10, 0.4 );
* // returns ~0.06
*
* @example
* var factory = require( '@stdlib/stats/base/dists/binomial/cdf' ).factory;
*
* var cdf = factory( 10, 0.5 );
*
* var y = cdf( 3.0 );
* // returns ~0.172
*
* y = cdf( 1.0 );
* // returns ~0.011
*/

/**
* Binomial distribution probability mass function (PMF).
*
* @module @stdlib/stats/base/dists/binomial/pmf
*
* @example
* var pmf = require( '@stdlib/stats/base/dists/binomial/pmf' );
*
* var y = pmf( 3.0, 20, 0.2 );
* // returns ~0.205
*
* y = pmf( 21.0, 20, 0.2 );
* // returns 0.0
*
* y = pmf( 5.0, 10, 0.4 );
* // returns ~0.201
*
* y = pmf( 0.0, 10, 0.4 );
* // returns ~0.06
*
* @example
* var factory = require( '@stdlib/stats/base/dists/binomial/pmf' ).factory;
*
* var pmf = factory( 10, 0.5 );
*
* var y = pmf( 3.0 );
* // returns ~0.117
*
* y = pmf( 5.0 );
* // returns ~0.246
*/

/**
* Blas level 1 routine to copy values from `x` into `y`.
*
* @module @stdlib/blas/base/gcopy
*
* @example
* var gcopy = require( '@stdlib/blas/base/gcopy' );
*
* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];
* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];
*
* gcopy( x.length, x, 1, y, 1 );
* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]
*
* @example
* // Use the `ndarray` interface...
* var gcopy = require( '@stdlib/blas/base/gcopy' ).ndarray;
*
* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];
* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];
*
* gcopy( x.length, x, 1, 0, y, 1, 0 );
* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]
*/

/**
* Buffer constructor.
*
* @module @stdlib/buffer/ctor
*
* @example
* var ctor = require( '@stdlib/buffer/ctor' );
*
* var b = new ctor( [ 1, 2, 3, 4 ] );
* // returns <Buffer>
*/

/**
* Buffer constructor.
*
* @throws {Error} not implemented
*/

/**
* Building array of decision trees.
*/

/**
* Calculate a continued fraction approximation.
*
* @module @stdlib/math/base/tools/continued-fraction
*
* @example
* var continuedFraction = require( '@stdlib/math/base/tools/continued-fraction' );
*
* // Continued fraction for (e-1)^(-1):
* var gen = generator()
* var out = continuedFraction( gen );
* // returns ~0.582
*
* function generator() {
*    var i = 0;
*    return function() {
*        i++;
*        return [ i, i ];
*    };
* }
*/

/**
* Calculate p(X=x,C=i), i.e. the joint probability of observation x and class i.
*
* @param {Array} x - new observation
* @param {number} i - class indicator
* @returns {number} log probability
*/

/**
* Calculate the Lanczos sum for the approximation of the gamma function (scaled by `exp(-g)`, where `g = 10.900511`.
*
* @module @stdlib/math/base/special/gamma-lanczos-sum-expg-scaled
*
* @example
* var gammaLanczosSumExpGScaled = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' );
*
* var v = gammaLanczosSumExpGScaled( 4.0 );
* // returns ~0.018
*
* v = gammaLanczosSumExpGScaled( -1.5 );
* // returns ~25.337
*
* v = gammaLanczosSumExpGScaled( -0.5 );
* // returns ~-12.911
*
* v = gammaLanczosSumExpGScaled( 0.5 );
* // returns ~1.772
*
* v = gammaLanczosSumExpGScaled( 0.0 );
* // returns Infinity
*
* v = gammaLanczosSumExpGScaled( NaN );
* // returns NaN
*/

/**
* Calculate the Lanczos sum for the approximation of the gamma function.
*
* @module @stdlib/math/base/special/gamma-lanczos-sum
*
* @example
* var gammaLanczosSum = require( '@stdlib/math/base/special/gamma-lanczos-sum' );
*
* var v = gammaLanczosSum( 4.0 );
* // returns ~950.366
*
* v = gammaLanczosSum( -1.5 );
* // returns ~1373366.245
*
* v = gammaLanczosSum( -0.5 );
* // returns ~-699841.735
*
* v = gammaLanczosSum( 0.5 );
* // returns ~96074.186
*
* v = gammaLanczosSum( 0.0 );
* // returns Infinity
*
* v = gammaLanczosSum( NaN );
* // returns NaN
*/

/**
* Calculate the ratio of two gamma functions.
*
* @module @stdlib/math/base/special/gamma-delta-ratio
*
* @example
* var gammaDeltaRatio = require( '@stdlib/math/base/special/gamma-delta-ratio' );
*
* var y = gammaDeltaRatio( 2.0, 3.0 );
* // returns ~0.042
*
* y = gammaDeltaRatio( 4.0, 0.5 );
* // returns 2.0
*
* y = gammaDeltaRatio( 100.0, 0.0 );
* // returns 1.0
*/

/**
* Calculates a weight for the i-th observation.
*
* @param {Function} kernel - kernel function
* @param {number} bandwidth - kernel bandwidth
* @param {number} x0 - point for which to calculate density
* @param {number} xi - observation for which to calculate weight
* @returns {number} i-th weight
*/

/**
* Calculates class membership probabilities.
*
* @param {(Matrix|Array)} x - design matrix
* @returns {Array} class probabilities
*/

/**
* Calculates either a kernel density estimator or the MLE of a chosen parametric distribution.
*/

/**
* Calculates multinomial probability.
*
* @param {Array} x - new observation
* @param {number} i - class indicator
* @param {number} j - variable indicator
* @returns {number} probability
*/

/**
* Calculates normalized Q when a is a half-integer.
*
* @private
* @param {number} a - function parameter
* @param {number} x - function parameter
* @returns {number} upper gamma fraction
*/

/**
* Calculates normalized Q when a is an integer.
*
* @private
* @param {integer} a - function parameter
* @param {number} x - function parameter
* @returns {number} upper gamma fraction
*/

/**
* Calculates the Lanczos sum approximation.
*
* @name gammaLanczosSum
* @type {Function}
* @param {number} x - input value
* @returns {number} Lanczos sum approximation
*
* @example
* var v = gammaLanczosSum( 4.0 );
* // returns ~950.366
*
* @example
* var v = gammaLanczosSum( -1.5 );
* // returns ~1373366.245
*
* @example
* var v = gammaLanczosSum( -0.5 );
* // returns ~-699841.735
*
* @example
* var v = gammaLanczosSum( 0.5 );
* // returns ~96074.186
*
* @example
* var v = gammaLanczosSum( 0.0 );
* // returns Infinity
*
* @example
* var v = gammaLanczosSum( NaN );
* // returns NaN
*/

/**
* Calculates the Lanczos sum for the approximation of the gamma function (scaled by `exp(-g)`, where `g = 10.900511`.
*
* @name gammaLanczosSumExpGScaled
* @type {Function}
* @param {number} x - input value
* @returns {number} Lanczos sum approximation
*
* @example
* var v = gammaLanczosSumExpGScaled( 4.0 );
* // returns ~0.018
*
* @example
* var v = gammaLanczosSumExpGScaled( -1.5 );
* // returns ~25.337
*
* @example
* var v = gammaLanczosSumExpGScaled( -0.5 );
* // returns ~-12.911
*
* @example
* var v = gammaLanczosSumExpGScaled( 0.5 );
* // returns ~1.772
*
* @example
* var v = gammaLanczosSumExpGScaled( 0.0 );
* // returns Infinity
*
* @example
* var v = gammaLanczosSumExpGScaled( NaN );
* // returns NaN
*/

/**
* Calculates the current model fitted values (yhat) and residuals (e = y - yhat).
*
* @returns {Object} fitted values and residuals
*/

/**
* Calculates the dot product between j-th column vectors of the two input matrices skipping zero elements.
*
* @param {Matrix} x - first input matrix
* @param {Matrix} y - second input matrix
* @param {number} j - column index
* @returns {number} dot product value
*/

/**
* Calculates the dot product between two arrays.
*
* @param {NumberArray} x - first vector
* @param {NumberArray} y - second vector
* @returns {number} dot product
*/

/**
* Calculates the fitted value `ys` for a value `xs` on the horizontal axis.
*
* ## Methods
*
* -   The smoothed value for the x-axis value at the current index is computed using a (robust) locally weighted regression of degree one.  The tricube weight function is used with `h` equal to the maximum of `xs - x[ nleft ]` and `x[ nright ] - xs`.
*
* ## References
*
* -   Cleveland, William S. 1979. "Robust Locally and Smoothing Weighted Regression Scatterplots." _Journal of the American Statistical Association_ 74 (368): 829–36. doi:[10.1080/01621459.1979.10481038](https://doi.org/10.1080/01621459.1979.10481038).
* -   Cleveland, William S. 1981. "Lowess: A program for smoothing scatterplots by robust locally weighted regression." _American Statistician_ 35 (1): 54–55. doi:[10.2307/2683591](https://doi.org/10.2307/2683591).
*
* @private
* @param {NumericArray} x - ordered x-axis values (abscissa values)
* @param {NumericArray} y - corresponding y-axis values (ordinate values)
* @param {PositiveInteger} n - number of observations
* @param {NonNegativeInteger} i - current index
* @param {NonNegativeInteger} nleft - index of the first point used in computing the fitted value
* @param {NonNegativeInteger} nright - index of the last point used in computing the fitted value
* @param {ProbabilityArray} w - weights at indices from `nleft` to `nright` to be used in the calculation of the fitted value
* @param {boolean} userw - boolean indicating whether a robust fit is carried out using the weights in `rw`
* @param {ProbabilityArray} rw - robustness weights
* @returns {number} fitted value
*/

/**
* Calculates the inverse of the incomplete beta function.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {Probability} p - function parameter
* @param {Probability} q - probability equal to `1 - p`
* @returns {Array} two-element array holding function value `y` and `1-y`
*/

/**
* Calculates the mean accuracy of the given test data and labels.
*
* @param {(Matrix|Array)} x - design matrix
* @param {Array} y - vector of class memberships
* @returns {number} mean accuracy
*/

/**
* Calculates the mean of a variable.
*
* @param values - array of values
*/

/**
* Calculates the power term prefix `(z^a)(e^-z)` used in the non-normalized incomplete gammas.
*
* @private
* @param {number} a - function parameter
* @param {number} z - function parameter
* @returns {number} power term prefix
*/

/**
* Calculates the ratio of two gamma functions via Lanczos approximation.
*
* ## Notes
*
* -   When \\( z < \epsilon \\), we get spurious numeric overflow unless we're very careful. This can occur either inside `lanczosSum(z)` or in the final combination of terms. To avoid this, split the product up into 2 (or 3) parts:
*
*     ```tex
*     \begin{align*}
*     G(z) / G(L) &= 1 / (z \cdot G(L)) ; z < \eps, L = z + \delta = \delta \\
*     z * G(L) &= z * G(lim) \cdot (G(L)/G(lim)) ; lim = \text{largest factorial}
*     \end{align*}
*     ```
*
* @private
* @param {number} z - first gamma parameter
* @param {number} delta - difference
* @returns {number} gamma ratio
*/

/**
* Calculates the variance of a variable.
*
* @param values - array of values
*/

/**
* Calculating entropy of a variable.
*
* @param values - array of values
*/

/**
* Calculating how many elements have the same
* values
*
* @param values - array of values
*/

/**
* Capitalize the first character in a string.
*
* @module @stdlib/string/capitalize
*
* @example
* var capitalize = require( '@stdlib/string/capitalize' );
*
* var out = capitalize( 'last man standing' );
* // returns 'Last man standing'
*
* out = capitalize( 'Hidden Treasures' );
* // returns 'Hidden Treasures';
*/

/**
* Capitalize the first letter of each word in an input string.
*
* @module @stdlib/string/startcase
*
* @example
* var startcase = require( '@stdlib/string/startcase' );
*
* var str = startcase( 'beep boop foo bar' );
* // returns 'Beep Boop Foo Bar'
*/

/**
* Capitalizes the first character in a string.
*
* @param {string} str - input string
* @throws {TypeError} must provide a string primitive
* @returns {string} capitalized string
*
* @example
* var out = capitalize( 'last man standing' );
* // returns 'Last man standing'
*
* @example
* var out = capitalize( 'presidential election' );
* // returns 'Presidential election'
*
* @example
* var out = capitalize( 'javaScript' );
* // returns 'JavaScript'
*
* @example
* var out = capitalize( 'Hidden Treasures' );
* // returns 'Hidden Treasures'
*/

/**
* Capitalizes the first letter of each word in an input string.
*
* @param {string} str - string to convert
* @throws {TypeError} must provide a primitive string
* @returns {string} start case string
*
* @example
* var str = startcase( 'beep boop foo bar' );
* // returns 'Beep Boop Foo Bar'
*/

/**
* Captures everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
*
* Regular expression: `/^\s*function\s*([^(]*)/i`
*
* -   `/^\s*`
*     -   Match zero or more spaces at beginning
*
* -   `function`
*     -   Match the word `function`
*
* -   `\s*`
*     -   Match zero or more spaces after the word `function`
*
* -   `()`
*     -   Capture
*
* -   `[^(]*`
*     -   Match anything except a left parenthesis `(` zero or more times
*
* -   `/i`
*     -   ignore case
*
* @constant
* @type {RegExp}
* @default /^\s*function\s*([^(]*)/i
*/

/**
* Card component.
*
* @property {string} className - CSS class name
* @property {(string|node)} header - panel heading (h3)
* @property {(string|node)} footer - panel footer
* @property {boolean} minimizable - whether the panel can be minimized
* @property {boolean} fullscreen - whether the panel can be made fullscreen
* @property {Function} onHide - callback invoked when the close button is clicked
* @property {Object} style - CSS inline styles
*/

/**
* Carries out the first method by Temme (described in section 2).
*
* ## References
*
* -   Temme, N. M. 1992. "Incomplete Laplace Integrals: Uniform Asymptotic Expansion with Application to the Incomplete Beta Function." _Journal of Computational and Applied Mathematics_ 41 (1–2): 1638–63. doi:[10.1016/0377-0427(92)90244-R](https://doi.org/10.1016/0377-0427(92)90244-R).
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {Probability} z - function parameter
* @returns {number} function value
*/

/**
* Carries out the second method by Temme (described in section 3).
*
* ## References
*
* -   Temme, N. M. 1992. "Incomplete Laplace Integrals: Uniform Asymptotic Expansion with Application to the Incomplete Beta Function." _Journal of Computational and Applied Mathematics_ 41 (1–2): 1638–63. doi:[10.1016/0377-0427(92)90244-R](https://doi.org/10.1016/0377-0427(92)90244-R).
*
* @private
* @param {number} z - function parameter
* @param {number} r - function parameter
* @param {number} theta - function parameter
* @returns {number} function value
*/

/**
* Carries out the third method by Temme (described in section 4).
*
* ## References
*
* -   Temme, N. M. 1992. "Incomplete Laplace Integrals: Uniform Asymptotic Expansion with Application to the Incomplete Beta Function." _Journal of Computational and Applied Mathematics_ 41 (1–2): 1638–63. doi:[10.1016/0377-0427(92)90244-R](https://doi.org/10.1016/0377-0427(92)90244-R).
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {Probability} p - function parameter
* @param {Probability} q - probability equal to `1-p`
* @returns {number} function value
*/

/**
* Casts buffer elements by copying those elements to a buffer of another data type.
*
* @private
* @param {(Array|TypedArray|Buffer)} buffer - input buffer
* @param {NonNegativeInteger} len - number of elements to cast
* @param {string} dtype - data type
* @returns {(Array|TypedArray|Buffer)} output buffer
*
* @example
* var b = castBuffer( [ 1.0, 2.0, 3.0 ], 3, 'float64' );
* // returns <Float64Array>[ 1.0, 2.0, 3.0 ]
*/

/**
* Checks the Karush-Khun-Tucker (KKT) conditions for an optimal solution.
*
* @returns {boolean} returns true if optimal conditions are satisfied, false otherwise
*/

/**
* Checks whether a polyfill is needed when using the `typeof` operator.
*
* @private
* @returns {boolean} boolean indicating whether a polyfill is needed
*/

/**
* Chi-squared distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/chisquare/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/chisquare/cdf' );
*
* var y = cdf( 2.0, 8.0 );
* // returns ~0.019
*
* y = cdf( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/stats/base/dists/chisquare/cdf' ).factory;
*
* var cdf = factory( 1.0 );
*
* var y = cdf( 2.0 );
* // returns ~0.843
*
* y = cdf( 1.2 );
* // returns ~0.727
*/

/**
* Citation component.
*
* @property {string} citeKey - item reference
* @property {boolean} parens - controls whether to display citation in parentheses
* @property {string} label - label for citation (e.g., page or range of pages)
*/

/**
* Clears the stack.
*
* @name clear
* @memberof Stack.prototype
* @type {Function}
* @returns {Stack} stack instance
*
* @example
* var s = new Stack();
*
* // Add values to the stack:
* s.push( 'foo' ).push( 'bar' );
*
* // Peek at the top value:
* var v = s.first();
* // returns 'bar'
*
* // Examine the stack length:
* var len = s.length;
* // returns 2
*
* // Clear all stack items:
* s.clear();
*
* // Peek at the top value:
* v = s.first();
* // returns undefined
*
* // Examine the stack length:
* len = s.length;
* // returns 0
*/

/**
* Clock component displaying the current time.
*
* @property {Object} style - CSS inline styles
* @property {boolean} duration - if set, the duration of the session is displayed (not the actual time)
* @property {string} format - time format (either `HH:MM`, `HH:MM:SS`, or `HH:MM:SSS`)
*/

/**
* Clones a class instance.
*
* ## Notes
*
* -   This should **only** be used for simple cases. Any instances with privileged access to variables (e.g., within closures) cannot be cloned. This approach should be considered **fragile**.
* -   The function is greedy, disregarding the notion of a `level`. Instead, the function deep copies all properties, as we assume the concept of `level` applies only to the class instance reference but not to its internal state. This prevents, in theory, two instances from sharing state.
*
*
* @private
* @param {Object} val - class instance
* @returns {Object} new instance
*/

/**
* Code adapted from Nikita Rokotyan. MIT licensed. Source: http://bl.ocks.org/Rokotyan/0556f8facbaf344507cdc45dc3622177
*/

/**
* Comparator function used to sort (x,y)-pairs in ascending order by the first coordinate.
*
* @private
* @param {Array} a - first pair
* @param {Array} b - second pair
* @returns {number} difference between `a` and `b`
*/

/**
* Comparator function used to sort values in ascending order.
*
* @private
* @param {number} a
* @param {number} b
* @returns {number} difference between `a` and `b`
*/

/**
* Comparator function used to sort values in ascending order.
*
* @private
* @param {number} a - first number
* @param {number} b - second number
* @returns {number} difference between `a` and `b`
*/

/**
* Comparator function used to sort values in ascending order.
*
* @private
* @param {number} a - first value
* @param {number} b - second value
* @returns {number} difference between `a` and `b`
*/

/**
* Component allowing retrieval of member actions corresponding to a specified component ID from the database.
*
* @property {string} for - ID of component whose actions should be retrieved
* @property {number} interval - interval at which to call the database; if falsy, retrievals have to be manually triggered by clicking on the displayed button
* @property {Function} onData - callback function called with an array of all actions
*/

/**
* Component allowing students upload a *.csv spreadsheet.
*
* @property {string} title - card title
* @property {Function} onUpload - callback function called with ( err, output ) after loading of file
*/

/**
* Component for rendering R output inside an ISLE lesson.
*
* @property {string} code - R code used to evaluate
* @property {Array<string>} libraries - R libraries that should be loaded automatically when the input `code` is executed
* @property {(string|Array<string>)} prependCode - R code (or `array` of code blocks) to be prepended to the code stored in `code` when evaluating
*/

/**
* Component for rendering a R data frame or matrix in a tabular display.
*
* @property {string} code - R code returning a data.frame containing the data to be displayed in the table
* @property {Array<string>} libraries - R libraries that should be loaded automatically when the input `code` is executed
* @property {(string|Array<string>)} prependCode - R code `string` (or `array` of R code blocks) to be prepended to the code stored in `code` when evaluating
* @property {number} width - width (between 0 and 1)
*/

/**
* Component for rendering an R plot inside an ISLE lesson.
*
* @property {string} code - R code to generate the plot
* @property {number} width - width of the plot (in px)
* @property {number} height - height of the plot (in px)
* @property {boolean} draggable - controls whether the plot should be draggable
* @property {string} fileType - file type of the plot (`png` or `svg`)
* @property {Array} libraries - R libraries that should be loaded automatically when the input `code` is executed
* @property {(string|Array<string>)} prependCode - `string` or an `array` of R code snippets to be prepended to the code stored in `code` when evaluating
* @property {Object} meta - plot meta-information
* @property {Function} onDone - callback invoked with `err`, `img` and `body` arguments once a plot is created
*/

/**
* Component supplying the session object to all its children.
*
* @property {string} currentRole - current user role (used in editor)
* @property {Object} session - active session
*/

/**
* Component to display an image.
*
* @property {string} src - image source location
* @property {string} className - class name
* @property {string} body - base64 encoded data of image
* @property {number} height - image height (in px)
* @property {number} width - image width (in px)
* @property {string} id - component identifier
* @property {boolean} showModal - controls whether to display fullscreen modal view
* @property {string} alt - image description
* @property {Object} style - CSS inline styles
* @property {Function} onShare - callback invoked with the image if the "share" button is clicked
*/

/**
* Component to sample observations from a dataset and pass it to child components.
*/

/**
* Compute `exp(x) - 1`.
*
* @module @stdlib/math/base/special/expm1
*
* @example
* var expm1 = require( '@stdlib/math/base/special/expm1' );
*
* var v = expm1( 0.2 );
* // returns ~0.221
*
* v = expm1( -9.0 );
* // returns ~-0.999
*
* v = expm1( 0.0 );
* // returns 0.0
*
* v = expm1( NaN );
* // returns NaN
*/

/**
* Compute `gamma(x+1) - 1` without cancellation errors.
*
* @module @stdlib/math/base/special/gamma1pm1
*
* @example
* var gamma1pm1 = require( '@stdlib/math/base/special/gamma1pm1' );
*
* var v = gamma1pm1( 0.2 );
* // returns ~-0.082
*
* v = gamma1pm1( -5.3 );
* // returns ~-1.102
*
* v = gamma1pm1( 0.0 );
* // returns 0.0
*
* v = gamma1pm1( NaN );
* // returns NaN
*/

/**
* Compute `x * ln(y)` so that the result is `0` if `x = 0`.
*
* @module @stdlib/math/base/special/xlogy
*
* @example
* var xlogy = require( '@stdlib/math/base/special/xlogy' );
*
* var out = xlogy( 3.0, 2.0 );
* // returns ~2.079
*
* out = xlogy( 1.5, 5.9 );
* // returns ~2.662
*
* out = xlogy( 0.9, 1.0 );
* // returns 0.0
*
* out = xlogy( 0.0, -2.0 );
* // returns 0.0
*
* out = xlogy( 1.5, NaN );
* // returns NaN
*
* out = xlogy( 0.0, NaN );
* // returns NaN
*
* out = xlogy( NaN, 2.3 );
* // returns NaN
*/

/**
* Compute `x - nπ/2 = r`.
*
* @module @stdlib/math/base/special/rempio2
*
* @example
* var rempio2 = require( '@stdlib/math/base/special/rempio2' );
*
* var y = new Array( 2 );
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*/

/**
* Compute a Pearson product-moment correlation test between paired samples.
*
* @module @stdlib/stats/pcorrtest
*
* @example
* var pcorrtest = require( '@stdlib/stats/pcorrtest' );
* var incrspace = require( '@stdlib/math/utils/incrspace' );
*
* var a = incrspace( 1, 11, 1 );
* var b = incrspace( 11, 21, 1 );
*
* var out = pcorrtest( a, b );
* var table = out.print();
*/

/**
* Compute a corrected sample standard deviation incrementally.
*
* @module @stdlib/stats/incr/stdev
*
* @example
* var incrstdev = require( '@stdlib/stats/incr/stdev' );
*
* var accumulator = incrstdev();
*
* var s = accumulator();
* // returns null
*
* s = accumulator( 2.0 );
* // returns 0.0
*
* s = accumulator( -5.0 );
* // returns ~4.95
*
* s = accumulator();
* // returns ~4.95
*/

/**
* Compute a one-sample Student's t-Test.
*
* @module @stdlib/stats/ttest
*
* @example
* var ttest = require( '@stdlib/stats/ttest' );
* var normal = require( '@stdlib/random/base/normal' ).factory;
*
* var rnorm;
* var out;
* var i;
* var x;
* var y;
*
* rnorm = normal( 1.0, 2.0, {
*     'seed': 786
* });
*
* // One-sample t-test:
* x = new Array( 100 );
* for ( i = 0; i < x.length; i++ ) {
*     x[ i ] = rnorm();
* }
* out = ttest( x );
*
* // Paired t-test:
* x = new Array( 100 );
* y = new Array( 100 );
* for ( i = 0; i < x.length; i++ ) {
*     x[ i ] = rnorm();
*     y[ i ] = rnorm();
* }
* out = ttest( x, y );
*/

/**
* Compute a one-sample z-Test.
*
* @module @stdlib/stats/ztest
*
* @example
* var ztest = require( '@stdlib/stats/ztest' );
* var normal = require( '@stdlib/random/base/normal' ).factory;
*
* var rnorm;
* var out;
* var i;
* var x;
* var y;
*
* rnorm = normal( 1.0, 2.0, {
*     'seed': 786
* });
*
* // One-sample z-test:
* x = new Array( 300 );
* for ( i = 0; i < x.length; i++ ) {
*     x[ i ] = rnorm();
* }
* out = ztest( x, 2.0 );
*/

/**
* Compute a sum of squared absolute values incrementally.
*
* @module @stdlib/stats/incr/sumabs2
*
* @example
* var incrsumabs2 = require( '@stdlib/stats/incr/sumabs2' );
*
* var accumulator = incrsumabs2();
*
* var sum = accumulator();
* // returns null
*
* sum = accumulator( 2.0 );
* // returns 4.0
*
* sum = accumulator( -5.0 );
* // returns 29.0
*
* sum = accumulator();
* // returns 29.0
*/

/**
* Compute a two-sample Student's t-Test.
*
* @module @stdlib/stats/ttest2
*
* @example
* var ttest2 = require( '@stdlib/stats/ttest2' );
* var incrspace = require( '@stdlib/math/utils/incrspace' );
*
* var a = incrspace( 1, 11, 1 );
* var b = incrspace( 7, 21, 1 );
*
* var out = ttest2( a, b );
* var table = out.print();
*/

/**
* Compute a two-sample z-Test.
*
* @module @stdlib/stats/ztest2
*
* @example
* var ztest2 = require( '@stdlib/stats/ztest2' );
* var incrspace = require( '@stdlib/math/utils/incrspace' );
*
* var a = incrspace( 1, 11, 1 );
* var b = incrspace( 7, 21, 1 );
*
* var out = ztest2( a, b );
* var table = out.print();
*/

/**
* Compute an absolute value.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

/**
* Compute an arithmetic mean incrementally.
*
* @module @stdlib/stats/incr/mean
*
* @example
* var incrmean = require( '@stdlib/stats/incr/mean' );
*
* var accumulator = incrmean();
*
* var mu = accumulator();
* // returns null
*
* mu = accumulator( 2.0 );
* // returns 2.0
*
* mu = accumulator( -5.0 );
* // returns -1.5
*
* mu = accumulator();
* // returns -1.5
*/

/**
* Compute ranks for the values of an array-like object.
*
* @module @stdlib/stats/ranks
*
* @example
* var ranks = require( '@stdlib/stats/ranks' );
*
* var arr = [ 1.1, 2.0, 3.5, 0.0, 2.4 ];
* var out = ranks( arr );
* // returns [ 2, 3, 5, 1, 4 ]
*
* // Ties are averaged:
* arr = [ 2, 2, 1, 4, 3 ];
* out = ranks ( arr );
* // returns [ 2.5, 2.5, 1, 5, 4 ];
*
* // Missing values are placed last:
* arr = [ null, 2, 2, 1, 4, 3, NaN, NaN ];
* out = ranks( arr );
* // returns [ 6, 2.5, 2.5, 1, 5, 4, 7 ,8 ]
*/

/**
* Compute the Kruskal-Wallis test for equal medians.
*
* @module @stdlib/stats/kruskal-test
*
* @example
* var kruskalTest = require( '@stdlib/stats/kruskal-test' );
*
* // Data from Hollander & Wolfe (1973), p. 116:
* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];
* var y = [ 3.8, 2.7, 4.0, 2.4 ];
* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];
*
* var out = kruskalTest( x, y, z );
* // returns {...}
*/

/**
* Compute the absolute difference.
*
* @module @stdlib/math/base/utils/absolute-difference
*
* @example
* var diff = require( '@stdlib/math/base/utils/absolute-difference' );
*
* var d = diff( 2.0, 5.0 );
* // returns 3.0
*
* d = diff( -1.0, 3.14 );
* // returns ~4.14
*
* d = diff( 10.1, -2.05 );
* // returns ~12.15
*
* d = diff( -0.0, 0.0 );
* // returns +0.0
*
* d = diff( NaN, 5.0 );
* // returns NaN
*
* d = diff( Infinity, -Infinity  );
* // returns Infinity
*
* d = diff( Infinity, Infinity  );
* // returns NaN
*/

/**
* Compute the arccosine of a number.
*
* @module @stdlib/math/base/special/acos
*
* @example
* var acos = require( '@stdlib/math/base/special/acos' );
*
* var v = acos( 1.0 );
* // returns 0.0
*
* v = acos( 0.707 ); // ~pi/4
* // returns ~0.7855
*
* v = acos( NaN );
* // returns NaN
*/

/**
* Compute the arcsine of a number.
*
* @module @stdlib/math/base/special/asin
*
* @example
* var asin = require( '@stdlib/math/base/special/asin' );
*
* var v = asin( 0.0 );
* // returns 0.0
*
* v = asin( 3.141592653589793/4.0 );
* // returns ~0.903
*
* v = asin( -3.141592653589793/6.0 );
* // returns ~-0.551
*
* v = asin( NaN );
* // returns NaN
*/

/**
* Compute the base `b` logarithm.
*
* @module @stdlib/math/base/special/log
*
* @example
* var log = require( '@stdlib/math/base/special/log' );
*
* var v = log( 100.0, 10.0 );
* // returns 2.0
*
* v = log( 16.0, 2.0 );
* // returns 4.0
*
* v = log( 5.0, 1.0 );
* // returns Infinity
*/

/**
* Compute the binomial coefficient.
*
* @module @stdlib/math/base/special/binomcoef
*
* @example
* var binomcoef = require( '@stdlib/math/base/special/binomcoef' );
*
* var v = binomcoef( 8, 2 );
* // returns 28
*
* v = binomcoef( 0, 0 );
* // returns 1
*
* v = binomcoef( -4, 2 );
* // returns 10
*
* v = binomcoef( 5, 3 );
* // returns 10
*
* v = binomcoef( NaN, 3 );
* // returns NaN
*
* v = binomcoef( 5, NaN );
* // returns NaN
*
* v = binomcoef( NaN, NaN );
* // returns NaN
*/

/**
* Compute the cosine of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-cos
*
* @example
* var kernelCos = require( '@stdlib/math/base/special/kernel-cos' );
*
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* v = kernelCos( 3.141592653589793/6.0, 0.0 );
* // returns ~0.866
*
* v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* v = kernelCos( NaN, 0.0 );
* // returns NaN
*/

/**
* Compute the cosine of a number.
*
* @module @stdlib/math/base/special/cos
*
* @example
* var cos = require( '@stdlib/math/base/special/cos' );
*
* var v = cos( 0.0 );
* // returns 1.0
*
* v = cos( 3.141592653589793/4.0 );
* // returns ~0.707
*
* v = cos( -3.141592653589793/6.0 );
* // returns ~0.866
*/

/**
* Compute the full upper fraction (Q) when `a` is very small.
*
* @private
* @param {number} a - function parameter
* @param {number} x - function parameter
* @param {boolean} invert - boolean indicating if the upper tail of the incomplete gamma function should be evaluated
* @returns {Array} full upper fraction (Q) and pgam
*/

/**
* Compute the hyperbolic arctangent of a number.
*
* @module @stdlib/math/base/special/atanh
*
* @example
* var atanh = require( '@stdlib/math/base/special/atanh' );
*
* var v = atanh( 0.0 );
* // returns 0.0
*
* v = atanh( 0.9 );
* // returns ~1.472
*
* v = atanh( 1.0 );
* // returns Infinity
*
* v = atanh( -1.0 );
* // returns -Infinity
*
* v = atanh( NaN );
* // returns NaN
*/

/**
* Compute the hyperbolic tangent of a number.
*
* @module @stdlib/math/base/special/tanh
*
* @example
* var tanh = require( '@stdlib/math/base/special/tanh' );
*
* var v = tanh( 0.0 );
* // returns 0.0
*
* var v = tanh( -0.0 );
* // returns -0.0
*
* v = tanh( 2.0 );
* // returns ~0.964
*
* v = tanh( -2.0 );
* // returns ~-0.964
*
* v = tanh( NaN );
* // returns NaN
*/

/**
* Compute the inverse of the lower incomplete gamma function.
*
* @module @stdlib/math/base/special/gammaincinv
*
* @example
* var gammaincinv = require( '@stdlib/math/base/special/gammaincinv' );
*
* var val = gammaincinv( 0.5, 2.0 );
* // returns ~1.678
*
* val = gammaincinv( 0.1, 10.0 );
* // returns ~6.221
*
* val = gammaincinv( 0.75, 3.0 );
* // returns ~3.92
*
* val = gammaincinv( 0.75, 3.0, true );
* // returns ~1.727
*
* val = gammaincinv( 0.75, NaN );
* // returns NaN
*
* val = gammaincinv( NaN, 3.0 );
* // returns NaN
*/

/**
* Compute the log gamma correction factor for `x >= 10`.
*
* ```tex
* \log(\gamma(x)) = \log(\sqrt{2*\Pi}) + (x-0.5) \cdot \log(x) - x \operatorname{R9LGMC}(x).
* ```
*
* @private
* @param {number} x - input value
* @returns {number} correction value
*/

/**
* Compute the minimum and maximum linear indices in an underlying data buffer which are accessible to an array view.
*
* @module @stdlib/ndarray/base/minmax-view-buffer-index
*
* @example
* var minmaxViewBufferIndex = require( '@stdlib/ndarray/base/minmax-view-buffer-index' );
*
* var shape = [ 10, 10 ];
* var strides = [ 10, 1 ];
* var offset = 10;
*
* var idx = minmaxViewBufferIndex( shape, strides, offset );
* // returns [ 10, 109 ]
*
* @example
* var minmaxViewBufferIndex = require( '@stdlib/ndarray/base/minmax-view-buffer-index' );
*
* var shape = [ 10, 10 ];
* var strides = [ -10, -1 ];
* var offset = 99;
*
* var idx = minmaxViewBufferIndex( shape, strides, offset );
* // returns [ 0, 99 ]
*
* @example
* var minmaxViewBufferIndex = require( '@stdlib/ndarray/base/minmax-view-buffer-index' );
*
* var shape = [ 10, 10 ];
* var strides = [ 1, 10 ];
* var offset = 10;
*
* var idx = minmaxViewBufferIndex( shape, strides, offset );
* // returns [ 10, 109 ]
*
* @example
* var minmaxViewBufferIndex = require( '@stdlib/ndarray/base/minmax-view-buffer-index' );
*
* var shape = [ 10, 10 ];
* var strides = [ -1, -10 ];
* var offset = 99;
*
* var idx = minmaxViewBufferIndex( shape, strides, offset );
* // returns [ 0, 99 ]
*/

/**
* Compute the multiplicative inverse.
*
* @module @stdlib/math/base/special/inv
*
* @example
* var inv = require( '@stdlib/math/base/special/inv' );
*
* var v = inv( -1.0 );
* // returns -1.0
*
* v = inv( 2.0 );
* // returns 0.5
*
* v = inv( 0.0 );
* // returns Infinity
*
* v = inv( -0.0 );
* // returns -Infinity
*
* v = inv( NaN );
* // returns NaN
*/

/**
* Compute the natural logarithm of the binomial coefficient.
*
* @module @stdlib/math/base/special/binomcoefln
*
* @example
* var binomcoefln = require( '@stdlib/math/base/special/binomcoefln' );
*
* var v = binomcoefln( 8, 2 );
* // returns ~3.332
*
* v = binomcoefln( 0, 0 );
* // returns 0.0
*
* v = binomcoefln( -4, 2 );
* // returns ~2.302
*
* v = binomcoefln( 88, 3 );
* // returns ~11.606
*
* v = binomcoefln( NaN, 3 );
* // returns NaN
*
* v = binomcoefln( 5, NaN );
* // returns NaN
*
* v = binomcoefln( NaN, NaN );
* // returns NaN
*/

/**
* Compute the principal square root.
*
* @module @stdlib/math/base/special/sqrt
*
* @example
* var sqrt = require( '@stdlib/math/base/special/sqrt' );
*
* var v = sqrt( 4.0 );
* // returns 2.0
*
* v = sqrt( 9.0 );
* // returns 3.0
*
* v = sqrt( 0.0 );
* // returns 0.0
*
* v = sqrt( -4.0 );
* // returns NaN
*
* v = sqrt( NaN );
* // returns NaN
*/

/**
* Compute the relative difference in units of double-precision floating-point epsilon.
*
* @module @stdlib/math/base/utils/float64-epsilon-difference
*
* @example
* var epsdiff = require( '@stdlib/math/base/utils/float64-epsilon-difference' );
*
* var d = epsdiff( 12.15, 12.149999999999999 ); // => ~0.658ε
* // returns ~0.658
*
* d = epsdiff( 2.4341309458983933, 2.4341309458633909, 'mean-abs' ); // => ~64761.5ε => ~1.438e-11
* // returns ~64761.5
*
* function scale( x, y ) {
*      // Return the minimum value:
*      return ( x > y ) ? y : x;
* }
*
* d = epsdiff( 1.0000000000000002, 1.0000000000000100, scale ); // => ~44ε
* // returns ~44
*/

/**
* Compute the relative difference of two real numbers.
*
* @module @stdlib/math/base/utils/relative-difference
*
* @example
* var reldiff = require( '@stdlib/math/base/utils/relative-difference' );
*
* var d = reldiff( 2.0, 5.0 ); // => 3/5
* // returns 0.6
*
* d = reldiff( -1.0, 3.14 ); // => 4.14/3.14
* // returns ~1.318
*
* d = reldiff( -2.0, 5.0, 'max-abs' ); // => |-7/5|
* // returns 1.4
*
* d = reldiff( -2.0, 5.0, 'max' ); // => |-7/5|
* // returns 1.4
*
* d = reldiff( -2.0, 5.0, 'min-abs' ); // => |-7/2|
* // returns 3.5
*
* d = reldiff( -2.0, 5.0, 'min' ); // => |-7/-2|
* // returns 3.5
*
* d = reldiff( -2.0, 5.0, 'mean-abs' ); // => |-7/3.5|
* // returns 2.0
*
* d = reldiff( -2.0, 5.0, 'mean' ); // => |-7/1.5|
* // returns ~4.67
*
* d = reldiff( -2.0, 5.0, 'x' ); // => |-7/-2|
* // returns 3.5
*
* d = reldiff( 5.0, -2.0, 'x' ); // => |7/5|
* // returns 1.4
*
* d = reldiff( -2.0, 5.0, 'y' ); // => |-7/5|
* // returns 1.4
*
* d = reldiff( 5.0, -2.0, 'y' ); // => |7/-2|
* // returns 3.5
*/

/**
* Compute the sine of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-sin
*
* @example
* var kernelSin = require( '@stdlib/math/base/special/kernel-sin' );
*
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* v = kernelSin( 3.141592653589793/6.0, 0.0 );
* // returns ~0.5
*
* v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.581
*
* v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* v = kernelSin( 3.0, NaN );
* // returns NaN
*
* v = kernelSin( NaN, NaN );
* // returns NaN
*/

/**
* Compute the sine of a number.
*
* @module @stdlib/math/base/special/sin
*
* @example
* var sin = require( '@stdlib/math/base/special/sin' );
*
* var v = sin( 0.0 );
* // returns ~0.0
*
* v = sin( 3.141592653589793/2.0 );
* // returns ~1.0
*
* v = sin( -3.141592653589793/6.0 );
* // returns ~-0.5
*
* v = sin( NaN );
* // returns NaN
*/

/**
* Compute the tangent of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-tan
*
* @example
* var kernelTan = require( '@stdlib/math/base/special/kernel-tan' );
*
* var out = kernelTan( 3.141592653589793/4.0, 0.0, 1 );
* // returns ~1.0
*
* out = kernelTan( 3.141592653589793/4.0, 0.0, -1 );
* // returns ~-1.0
*
* out = kernelTan( 3.141592653589793/6.0, 0.0, 1 );
* // returns ~0.577
*
* out = kernelTan( 0.664, 5.288e-17, 1 );
* // returns ~0.783
*/

/**
* Compute the value of `sin(πx)`.
*
* @module @stdlib/math/base/special/sinpi
*
* @example
* var sinpi = require( '@stdlib/math/base/special/sinpi' );
*
* var y = sinpi( 0.0 );
* // returns 0.0
*
* y = sinpi( 0.5 );
* // returns 1.0
*
* y = sinpi( 0.9 );
* // returns ~0.309
*
* y = sinpi( NaN );
* // returns NaN
*/

/**
* Computes Pearson product-moment correlation coefficients between one or more numeric arrays.
*
* @param {...Array} arr - numeric array
* @returns {Array} correlation matrix
*/

/**
* Computes \\(2^{\mathrm{hp} + \mathrm{lp}\\).
*
* @private
* @param {number} j - high word of `hp + lp`
* @param {number} hp - first power summand
* @param {number} lp - second power summand
* @returns {number} function value
*
* @example
* var z = pow2( 1065961648, -0.3398475646972656, -0.000002438187359100815 );
* // returns ~0.79
*/

/**
* Computes \\(\operatorname{log2}(ax)\\).
*
* @private
* @param {Array} out - output array
* @param {number} ax - absolute value of `x`
* @param {number} ahx - high word of `ax`
* @returns {Array} output array containing a tuple comprised of high and low parts
*
* @example
* var t = log2ax( [ 0.0, 0.0 ], 9.0, 1075970048 ); // => [ t1, t2 ]
* // returns [ 3.169923782348633, 0.0000012190936795504075 ]
*/

/**
* Computes \\(\operatorname{log}(x)\\) assuming \\(|1-x|\\) is small and using the approximation \\(x - x^2/2 + x^3/3 - x^4/4\\).
*
* @private
* @param {Array} out - output array
* @param {number} ax - absolute value of `x`
* @returns {Array} output array containing a tuple comprised of high and low parts
*
* @example
* var t = logx( [ 0.0, 0.0 ], 9.0 ); // => [ t1, t2 ]
* // returns [ -1265.7236328125, -0.0008163940840404393 ]
*/

/**
* Computes \\(e^{r} 2^k\\) where \\(r = \mathrm{hi} - \mathrm{lo}\\) and \\(|r| \leq \ln(2)/2\\).
*
* @private
* @param {number} hi - upper bound
* @param {number} lo - lower bound
* @param {integer} k - power of 2
* @returns {number} function value
*/

/**
* Computes `(z^a)*(e^-z) / gamma(a)`.
*
* @private
* @param {number} a - input value
* @param {number} z - input value
* @returns {number} function value
*/

/**
* Computes `exp(x) - 1`.
*
* ## Method
*
* 1.  Given \\(x\\), we use argument reduction to find \\(r\\) and an integer \\(k\\) such that
*
*     ```tex
*     x = k \cdot \ln(2) + r
*     ```
*
*     where
*
*     ```tex
*     |r| \leq \frac{\ln(2)}{2} \approx 0.34658
*     ```
*
*     <!-- <note> -->
*
*     A correction term \\(c\\) will need to be computed to compensate for the error in \\(r\\) when rounded to a floating-point number.
*
*     <!-- </note> -->
*
* 2.  To approximate \\(\operatorname{expm1}(r)\\), we use a special rational function on the interval \\(\[0,0.34658]\\). Since
*
*     ```tex
*     r \frac{e^r + 1}{e^r - 1} = 2 + \frac{r^2}{6} - \frac{r^4}{360} + \ldots
*     ```
*
*     we define \\(\operatorname{R1}(r^2)\\) by
*
*     ```tex
*     r \frac{e^r + 1}{e^r - 1} = 2 + \frac{r^2}{6} \operatorname{R1}(r^2)
*     ```
*
*     That is,
*
*     ```tex
*     \begin{align*}
*     \operatorname{R1}(r^2) &= \frac{6}{r} \biggl(\frac{e^r+1}{e^r-1} - \frac{2}{r}\biggr) \\
*     &= \frac{6}{r} \biggl( 1 + 2 \biggl(\frac{1}{e^r-1} - \frac{1}{r}\biggr)\biggr) \\
*     &= 1 - \frac{r^2}{60} + \frac{r^4}{2520} - \frac{r^6}{100800} + \ldots
*     \end{align*}
*     ```
*
*     We use a special Remes algorithm on \\(\[0,0.347]\\) to generate a polynomial of degree \\(5\\) in \\(r^2\\) to approximate \\(\mathrm{R1}\\). The maximum error of this polynomial approximation is bounded by \\(2^{-61}\\). In other words,
*
*     ```tex
*     \operatorname{R1}(z) \approx 1 + \mathrm{Q1} \cdot z + \mathrm{Q2} \cdot z^2 + \mathrm{Q3} \cdot z^3 + \mathrm{Q4} \cdot z^4 + \mathrm{Q5} \cdot z^5
*     ```
*
*     where
*
*     ```tex
*     \begin{align*}
*     \mathrm{Q1} &= -1.6666666666666567384\mbox{e-}2 \\
*     \mathrm{Q2} &= 3.9682539681370365873\mbox{e-}4 \\
*     \mathrm{Q3} &= -9.9206344733435987357\mbox{e-}6 \\
*     \mathrm{Q4} &= 2.5051361420808517002\mbox{e-}7 \\
*     \mathrm{Q5} &= -6.2843505682382617102\mbox{e-}9
*     \end{align*}
*     ```
*
*     where \\(z = r^2\\) and the values of \\(\mathrm{Q1}\\) to \\(\mathrm{Q5}\\) are listed in the source. The error is bounded by
*
*     ```tex
*     \biggl| 1 + \mathrm{Q1} \cdot z + \ldots + \mathrm{Q5} \cdot z - \operatorname{R1}(z) \biggr| \leq 2^{-61}
*     ```
*
*     \\(\operatorname{expm1}(r) = e^r - 1\\) is then computed by the following specific way which minimizes the accumulated rounding error
*
*     ```tex
*     \operatorname{expm1}(r) = r + \frac{r^2}{2} + \frac{r^3}{2} \biggl( \frac{3 - (\mathrm{R1} + \mathrm{R1} \cdot \frac{r}{2})}{6 - r ( 3 - \mathrm{R1} \cdot \frac{r}{2})} \biggr)
*     ```
*
*     To compensate for the error in the argument reduction, we use
*
*     ```tex
*     \begin{align*}
*     \operatorname{expm1}(r+c) &= \operatorname{expm1}(r) + c + \operatorname{expm1}(r) \cdot c \\
*     &\approx \operatorname{expm1}(r) + c + rc
*     \end{align*}
*     ```
*
*     Thus, \\(c + rc\\) will be added in as the correction terms for \\(\operatorname{expm1}(r+c)\\). Now, we can rearrange the term to avoid optimization screw up.
*
*     ```tex
*     \begin{align*}
*     \operatorname{expm1}(r+c) &\approx r - \biggl( \biggl( r + \biggl( \frac{r^2}{2} \biggl( \frac{\mathrm{R1} - (3 - \mathrm{R1} \cdot \frac{r}{2})}{6 - r (3 - \mathrm{R1} \cdot \frac{r}{2})} \biggr) - c \biggr) - c \biggr) - \frac{r^2}{2} \biggr) \\
*     &= r - \mathrm{E}
*     \end{align*}
*     ```
*
* 3.  To scale back to obtain \\(\operatorname{expm1}(x)\\), we have (from step 1)
*
*     ```tex
*     \operatorname{expm1}(x) = \begin{cases}
*     2^k  (\operatorname{expm1}(r) + 1) - 1 \\
*     2^k (\operatorname{expm1}(r) + (1-2^{-k}))
*     \end{cases}
*     ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{expm1}(\infty) &= \infty \\
* \operatorname{expm1}(-\infty) &= -1 \\
* \operatorname{expm1}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align*}
* ```
*
*
* ## Notes
*
* -   For finite arguments, only \\(\operatorname{expm1}(0) = 0\\) is exact.
*
* -   To save one multiplication, we scale the coefficient \\(\mathrm{Qi}\\) to \\(\mathrm{Qi} \cdot {2^i}\\) and replace \\(z\\) by \\(\frac{x^2}{2}\\).
*
* -   To achieve maximum accuracy, we compute \\(\operatorname{expm1}(x)\\) by
*
*     -   if \\(x < -56 \cdot \ln(2)\\), return \\(-1.0\\) (raise inexact if \\(x\\) does not equal \\(\infty\\))
*
*     -   if \\(k = 0\\), return \\(r-\mathrm{E}\\)
*
*     -   if \\(k = -1\\), return \\(\frac{(r-\mathrm{E})-1}{2}\\)
*
*     -   if \\(k = 1\\),
*
*         -   if \\(r < -0.25\\), return \\(2((r+0.5)- \mathrm{E})\\)
*         -   else return \\(1+2(r-\mathrm{E})\\)
*
*     -   if \\(k < -2\\) or \\(k > 56\\), return \\(2^k(1-(\mathrm{E}-r)) - 1\\) (or \\(e^x-1\\))
*
*     -   if \\(k \leq 20\\), return \\(2^k((1-2^{-k})-(\mathrm{E}-r))\\)
*
*     -   else return \\(2^k(1-((\mathrm{E}+2^{-k})-r))\\)
*
* -   For IEEE 754 double, if \\(x > 7.09782712893383973096\mbox{e+}02\\), then \\(\operatorname{expm1}(x)\\) will overflow.
*
* -   The hexadecimal values listed in the source are the intended ones for the implementation constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.
*
* -   According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = expm1( 0.2 );
* // returns ~0.221
*
* @example
* var v = expm1( -9.0 );
* // returns ~-0.9999
*
* @example
* var v = expm1( 0.0 );
* // returns 0.0
*
* @example
* var v = expm1( NaN );
* // returns NaN
*/

/**
* Computes `gamma(x+1) - 1`.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = gammap1m1( 0.2 );
* // returns ~-0.082
*
* @example
* var v = gammap1m1( -9.2 );
* // returns ~-1.0
*
* @example
* var v = gammap1m1( 0.0 );
* // returns 0.0
*
* @example
* var v = gammap1m1( -3.0 );
* // returns NaN
*
* @example
* var v = gammap1m1( NaN );
* // returns NaN
*/

/**
* Computes `x * ln(y)` so that the result is `0` if `x = 0`.
*
* @param {number} x - input value
* @param {number} y - input value
* @returns {number} function value
*
* @example
* var out = xlogy( 3.0, 2.0 );
* // returns ~2.079
*
* @example
* var out = xlogy( 1.5, 5.9 );
* // returns ~2.662
*
* @example
* var out = xlogy( 0.9, 1.0 );
* // returns 0.0
*
* @example
* var out = xlogy( 0.0, -2.0 );
* // returns 0.0
*
* @example
* var out = xlogy( 1.5, NaN );
* // returns NaN
*
* @example
* var out = xlogy( 0.0, NaN );
* // returns NaN
*
* @example
* var out = xlogy( NaN, 2.3 );
* // returns NaN
*/

/**
* Computes `x - nπ/2 = r` for medium-sized inputs.
*
* @private
* @param {number} x - input value
* @param {uint32} ix - high word of `x`
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*/

/**
* Computes `x - nπ/2 = r`.
*
* ## Notes
*
* -   Returns `n` and stores the remainder `r` as two numbers `y[0]` and `y[1]`, such that `y[0]+y[1] = r`.
*
*
* @param {number} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*
* @example
* var y = new Array( 2 );
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*
* @example
* var y = new Array( 2 );
* var n = rempio2( NaN, y );
* // returns 0
*
* var y1 = y[ 0 ];
* // returns NaN
*
* var y2 = y[ 1 ];
* // returns NaN
*/

/**
* Computes `x` in the equations `P(a,xr) = p` and `Q(a,xr) = q`, where `a` is a positive parameter and `p` and `q` satisfy `p+q = 1`.
*
* ## Notes
*
* -   The equation is inverted with `min(p,q)`.
*
* @private
* @param {number} a - scale value of incomplete gamma function
* @param {Probability} p - probability value
* @param {Probability} q - probability value
* @returns {number} solution of the equations `P(a,xr) = p` and `Q(a,xr) = q` where `a` is a positive parameter
*/

/**
* Computes a Pearson product-moment correlation test between paired samples.
*
* @param {NumericArray} x - first data array
* @param {NumericArray} y - second data array
* @param {Options} [options] - function options
* @param {number} [options.alpha=0.05] - significance level
* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)
* @param {number} [options.rho=0.0] - correlation under H0
* @throws {TypeError} x argument has to be a typed array or array of numbers
* @throws {TypeError} y argument has to be a typed array or array of numbers
* @throws {Error} x and y must be arrays of the same length
* @throws {Error} x and y must contain at least four elements
* @throws {TypeError} options has to be simple object
* @throws {TypeError} must provide valid options
* @returns {Object} test result object
*
* @example
* var x = [ 2, 4, 3, 1, 2, 3 ];
* var y = [ 3, 2, 4, 1, 2, 4 ];
* var out = pcorrTest( x, y );
*/

/**
* Computes a matrix product of a n x p matrix and a column vector of length p.
*
* @param {Matrix} A - n x p matrix
* @param {Array} b - p x 1 column vector
* @returns {Array} result of matrix multiplication
*/

/**
* Computes a one-sample or paired Student's t test.
*
* @param {NumericArray} x - data array
* @param {NumericArray} [y] - optional paired data array
* @param {Options} [options] - function options
* @param {number} [options.alpha=0.05] - significance level
* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)
* @param {number} [options.mu=0] - mean under H0
* @throws {TypeError} x argument has to be a typed array or array of numbers
* @throws {TypeError} y argument has to be a typed array or array of numbers
* @throws {TypeError} options has to be simple object
* @throws {TypeError} alpha option has to be a number primitive
* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`
* @throws {TypeError} alternative option has to be a string primitive
* @throws {Error} alternative option must be `two-sided`, `less` or `greater`
* @throws {TypeError} mu option has to be a number primitive
* @returns {Object} test result object
*
* @example
* var arr = [ 4, 4, 6, 6, 5 ];
* var out = ttest( arr, {
*     'mu': 5
* });
*
* @example
* var arr = [ 4, 4, 6, 6, 5 ];
* var out = ttest( arr, {
*     'alternative': 'greater'
* });
*/

/**
* Computes a one-sample z-test.
*
* @param {NumericArray} x - data array
* @param {PositiveNumber} sigma - known standard deviation
* @param {Options} [options] - function options
* @param {number} [options.alpha=0.05] - significance level
* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)
* @param {number} [options.mu=0] - mean under H0
* @throws {TypeError} x argument has to be a typed array or array of numbers
* @throws {TypeError} sigma argument has to be a positive number
* @throws {TypeError} options has to be simple object
* @throws {TypeError} alpha option has to be a number primitive
* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`
* @throws {TypeError} alternative option has to be a string primitive
* @throws {Error} alternative option must be `two-sided`, `less` or `greater`
* @throws {TypeError} mu option has to be a number primitive
* @throws {TypeError} sigma option has to be a positive number
* @returns {Object} test result object
*
* @example
* var arr = [ 4, 4, 6, 6, 5 ];
* var out = ztest( arr, 1.0, {
*     'mu': 5
* });
*
* @example
* var arr = [ 4, 4, 6, 6, 5 ];
* var out = ztest( arr, 1.0, {
*     'alternative': 'greater'
* });
*/

/**
* Computes a quantile of the values in a numeric array.
*
* @param {Array} arr - input array
* @param {number} prob - quantile prob [0,1]
* @param {number} [method=7] - number indicating the method used to interpolate a quantile value
* @returns {(number|null)} quantile or null
*/

/**
* Computes a quantile of the values in a numeric array.
*
* @private
* @param {NumericArray} arr - sorted 1d array
* @param {Probability} p - quantile prob [0,1]
* @returns {number} quantile
*/

/**
* Computes a two-sample Student's t test.
*
* @param {NumericArray} x - first data array
* @param {NumericArray} y - second data array
* @param {Options} [options] - function options
* @param {number} [options.alpha=0.05] - significance level
* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)
* @param {number} [options.difference=0] - difference in means under H0
* @param {string} [options.variance='unequal'] - whether variances are `equal` or `unequal` under H0
* @throws {TypeError} x argument has to be a typed array or array of numbers
* @throws {TypeError} y argument has to be a typed array or array of numbers
* @throws {TypeError} options has to be simple object
* @throws {TypeError} alpha option has to be a number primitive
* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`
* @throws {TypeError} alternative option has to be a string primitive
* @throws {Error} alternative option must be `two-sided`, `less` or `greater`
* @throws {TypeError} difference option has to be a number primitive
* @throws {TypeError} variance option has to be a string primitive
* @throws {Error} variance option must be `equal` or `unequal`
* @returns {Object} test result object
*/

/**
* Computes a two-sample z-test.
*
* @param {NumericArray} x - first data array
* @param {NumericArray} y - second data array
* @param {PositiveNumber} sigmax - known standard deviation of first group
* @param {PositiveNumber} sigmay - known standard deviation of second group
* @param {Options} [options] - function options
* @param {number} [options.alpha=0.05] - significance level
* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)
* @param {number} [options.difference=0] - difference in means under H0
* @throws {TypeError} x argument has to be a typed array or array of numbers
* @throws {TypeError} y argument has to be a typed array or array of numbers
* @throws {TypeError} sigmax argument has to be a positive number
* @throws {TypeError} sigmay argument has to be a positive number
* @throws {TypeError} options has to be simple object
* @throws {TypeError} must provide valid options
* @throws {Error} `alternative` option  must be either `two-sided`, `less`, or `greater`
* @returns {Object} test result object
*/

/**
* Computes an element-wise division.
*
* @param {NumberArray} arr - input array
* @param {(NumberArray|number)} x - either an array of equal length or a scalar
* @returns {NumberArray} output array
*/

/**
* Computes an element-wise multiplication of two arrays.
*
* @param {Array} x - numeric array
* @param {Array} y - numeric array
*/

/**
* Computes an element-wise multiplication.
*
* @param {NumberArray} arr - input array
* @param {(NumberArray|number)} x - either an array of equal length or a scalar
* @returns {NumberArray} output array
*/

/**
* Computes an element-wise subtraction.
*
* @param {NumberArray} arr - input array
* @param {(NumberArray|number)} x - either an array of equal length or a scalar
* @returns {NumberArray} output array
*/

/**
* Computes for each array element whether it is a missing value.
*
* @private
* @param {Array} arr - input array
* @param {Array} encoding - array whose elements encode missing values
* @returns {BooleanArray} output array
*/

/**
* Computes the Epanechnikov kernel for a value.
*
* @private
* @param {number} u - value for which we wish to calculate the Epanechnikov kernel
* @returns {number} the value for the kernel at u
*
* @example
* var u = 5.0;
* var out = epanechnikov( u );
* // returns 0.0
*/

/**
* Computes the Gaussian kernel for a value.
*
* @private
* @param {number} u - input value
* @returns {number} the value for the Gaussian kernel at u
*
* @example
* var u = 5.0;
* var out = gaussian( u );
* // returns ~0.0
*/

/**
* Computes the Kruskal-Wallis test for equality of medians.
*
* @param {...NumberArray} arguments - either two or more number arrays or a single numeric array if an array of group indicators is supplied as an option
* @param {Options} [options] - function options
* @param {number} [options.alpha=0.05] - significance level
* @param {Array} [options.groups] - array of group indicators
* @throws {Error} must provide at least two array-like arguments if `groups` is not set
* @throws {TypeError} must provide array-like arguments
* @throws {TypeError} options has to be simple object
* @throws {TypeError} must provide valid options
* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`
* @returns {Object} test results
*
* @example
* // Data from Hollander & Wolfe (1973), p. 116:
* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];
* var y = [ 3.8, 2.7, 4.0, 2.4 ];
* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];
*
* var out = kruskal( x, y, z );
* // returns {...}
*/

/**
* Computes the Pearson product-moment correlation coefficient between `x` and `y`.
*
* @private
* @param {NumericArray} x - first data array
* @param {NumericArray} y - second data array
* @returns {number} correlation coefficient
*
* @example
* var x = [ 1.0, 2.0, 2.0, 1.0 ];
* var y = [ 1.8, 2.2, 2.5, 1.4 ];
* var r = pcorr( x, y );
* // returns ~0.905
*/

/**
* Computes the Stirling series corresponding to asymptotic series for the logarithm of the gamma function.
*
* ```tex
* \frac{1}{12x}-\frac{1}{360x^3}\ldots; x \ge 3
* ```
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/

/**
* Computes the Triweight kernel for a value.
*
* @private
* @param {number} u - value for which we wish to calculate the Triweight kernel
* @returns {number} the value for the kernel at u
*
* @example
* var u = 5;
* out = triweight(u); // returns 0
*/

/**
* Computes the absolute difference.
*
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} absolute difference
*
* @example
* var d = absoluteDifference( 2.0, 5.0 );
* // returns 3.0
*
* @example
* var d = absoluteDifference( -1.0, 3.14 );
* // returns ~4.14
*
* @example
* var d = absoluteDifference( 10.1, -2.05 );
* // returns ~12.15
*
* @example
* var d = absoluteDifference( -0.0, 0.0 );
* // returns +0.0
*
* @example
* var d = absoluteDifference( NaN, 5.0 );
* // returns NaN
*
* @example
* var d = absoluteDifference( Infinity, -Infinity  );
* // returns Infinity
*
* @example
* var d = absoluteDifference( Infinity, Infinity  );
* // returns NaN
*/

/**
* Computes the absolute value of `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/

/**
* Computes the arccosine of a number.
*
* ## Method
*
* -   Analytically,
*
*     ```tex
*     \operatorname{acos}(x) = \frac{\pi}{2} - \operatorname{asin}(x)
*     ```
*
*     However, if \\(\|x\|\\) is near \\(1\\), there is cancellation error in subtracting \\(\opertorname{asin}(x)\\) from \\(\pi/2\\). Hence, if \\(x < -0.5\\),
*
*     ```tex
*     \operatorname{acos}(x) = \pi - 2.0 \cdot \operatorname{asin}(\sqrt{(1+x)/2})
*     ```
*
*     or, if \\(x > +0.5\\),
*
*     ```tex
*     \operatorname{acos}(x) = 2.0 \cdot \operatorname{asin}( \sqrt{(1-x)/2} )}
*     ```
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain | # trials | peak    | rms     |
*     |:-----------|:------:|:---------|:--------|:--------|
*     | DEC        | -1, 1  | 50000    | 3.3e-17 | 8.2e-18 |
*     | IEEE       | -1, 1  | 10^6     | 2.2e-16 | 6.5e-17 |
*
*
* @param {number} x - input value
* @returns {number} arccosine (in radians)
*
* @example
* var v = acos( 1.0 );
* // returns 0.0
*
* @example
* var v = acos( 0.707 ); // ~pi/4
* // returns ~0.7855
*
* @example
* var v = acos( NaN );
* // returns NaN
*/

/**
* Computes the arcsine of a number.
*
* ## Method
*
* -   A rational function of the form
*
*     ```tex
*     x + x^3 \frac{P(x^2)}{Q(x^2)}
*     ```
*
*     is used for \\(\|x\|\\) in the interval \\(\[0, 0.5\]\\). If \\(\|x\| > 0.5\\), it is transformed by the identity
*
*     ```tex
*     \operatorname{asin}(x) = \frac{\pi}{2} - 2 \operatorname{asin}( \sqrt{ (1-x)/2 } )
*     ```
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain | # trials | peak    | rms     |
*     |:-----------|:-------|:---------|:--------|:--------|
*     | DEC        | -1, 1  | 40000    | 2.6e-17 | 7.1e-18 |
*     | IEEE       | -1, 1  | 10^6     | 1.9e-16 | 5.4e-17 |
*
* @param {number} x - input value
* @returns {number} arcsine (in radians)
*
* @example
* var v = asin( 0.0 );
* // returns ~0.0
*
* @example
* var v = asin( 3.141592653589793/4.0 );
* // returns ~0.903
*
* @example
* var v = asin( -3.141592653589793/6.0 );
* // returns ~-0.551
*
* @example
* var v = asin( NaN );
* // returns NaN
*/

/**
* Computes the arithmetic mean of a numeric array.
*
* @param {Array} arr - input array
* @returns {(number|null)} arithmetic mean or null
*/

/**
* Computes the arithmetic mean of a numeric array.
*
* @private
* @param {NumericArray} arr - input array
* @returns {number} arithmetic mean
*
* @example
* var arr = [ 2.0, 6.0, 10.0 ];
* var out = mean( arr );
* // returns 6.0
*/

/**
* Computes the arithmetic mean of a numeric array.
*
* @private
* @param {NumericArray} arr - input array
* @returns {number} arithmetic mean
*/

/**
* Computes the base `b` logarithm of `x`.
*
* @param {NonNegativeNumber} x - input value
* @param {NonNegativeNumber} b - base
* @returns {number} logarithm (base `b`)
*
* @example
* var v = log( 100.0, 10.0 );
* // returns 2.0
*
* @example
* var v = log( 16.0, 2.0 );
* // returns 4.0
*
* @example
* var v = log( 5.0, 1.0 );
* // returns Infinity
*
* @example
* var v = log( NaN, 2.0 );
* // returns NaN
*
* @example
* var v = log( 1.0, NaN );
* // returns NaN
*
* @example
* var v = log( -4.0, 2.0 );
* // returns NaN
*
* @example
* var v = log( 4.0, -2.0 );
* // returns NaN
*/

/**
* Computes the binomial coefficient of two integers.
*
* ## Method
*
* -   Instead of evaluating the factorial form, which is inefficient and prone to overflow for large inputs arguments, this module computes the following multiplicative representation of the binomial coefficient for integer arguments
*
*     ```tex
*     \binom nk = \prod_{i=1}^k \frac{n+1-i}{i}
*     ```
*
* @param {integer} n - input value
* @param {integer} k - second input value
* @returns {integer} function value
*
* @example
* var v = binomcoef( 8, 2 );
* // returns 28
*
* @example
* var v = binomcoef( 0, 0 );
* // returns 1
*
* @example
* var v = binomcoef( -4, 2 );
* // returns 10
*
* @example
* var v = binomcoef( NaN, 3 );
* // returns NaN
*
* @example
* var v = binomcoef( 5, NaN );
* // returns NaN
*
* @example
* var v = binomcoef( NaN, NaN );
* // returns NaN
*/

/**
* Computes the cosine kernel for a value.
*
* @private
* @param {number} u - value for which we wish to calculate the cosine kernel
* @returns {number} the value for the kernel at u
*
* @example
* var u = 5;
* var out = cosine( u );
* // returns 0
*/

/**
* Computes the cosine of a number.
*
* @param {number} x - input value (in radians)
* @returns {number} cosine
*
* @example
* var v = cos( 0.0 );
* // returns 1.0
*
* @example
* var v = cos( 3.141592653589793/4.0 );
* // returns ~0.707
*
* @example
* var v = cos( -3.141592653589793/6.0 );
* // returns ~0.866
*
* @example
* var v = cos( NaN );
* // returns NaN
*/

/**
* Computes the cosine on \\( \[-\pi/4, \pi/4] \\), where \\( \pi/4 \approx 0.785398164 \\).
*
* ## Method
*
* -   Since \\( \cos(-x) = \cos(x) \\), we need only to consider positive \\(x\\).
*
* -   If \\( x < 2^{-27} \\), return \\(1\\) which is inexact if \\( x \ne 0 \\).
*
* -   \\( cos(x) \\) is approximated by a polynomial of degree \\(14\\) on \\( \[0,\pi/4] \\).
*
*     ```tex
*     \cos(x) \approx 1 - \frac{x \cdot x}{2} + C_1 \cdot x^4 + \ldots + C_6 \cdot x^{14}
*     ```
*
*     where the Remez error is
*
*     ```tex
*     \left| \cos(x) - \left( 1 - \frac{x^2}{2} + C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{15} \right) \right| \le 2^{-58}
*     ```
*
* -   Let \\( C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{14} \\), then
*
*     ```tex
*     \cos(x) \approx 1 - \frac{x \cdot x}{2} + r
*     ```
*
*     Since
*
*     ```tex
*     \cos(x+y) \approx \cos(x) - \sin(x) \cdot y \approx \cos(x) - x \cdot y
*     ```
*
*     a correction term is necessary in \\( \cos(x) \\). Hence,
*
*     ```tex
*     \cos(x+y) = 1 - \left( \frac{x \cdot x}{2} - (r - x \cdot y) \right)
*     ```
*
*     For better accuracy, rearrange to
*
*     ```tex
*     \cos(x+y) \approx w + \left( t + ( r - x \cdot y ) \right)
*     ```
*
*     where \\( w = 1 - \frac{x \cdot x}{2} \\) and \\( t \\) is a tiny correction term (\\( 1 - \frac{x \cdot x}{2} = w + t \\) exactly in infinite precision). The exactness of \\(w + t\\) in infinite precision depends on \\(w\\) and \\(t\\) having the same precision as \\(x\\).
*
*
* @param {number} x - input value (in radians, assumed to be bounded by ~pi/4 in magnitude)
* @param {number} y - tail of `x`
* @returns {number} cosine
*
* @example
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* @example
* var v = kernelCos( 3.141592653589793/6.0, 0.0 );
* // returns ~0.866
*
* @example
* var v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* @example
* var v = kernelCos( NaN, 0.0 );
* // returns NaN
*/

/**
* Computes the delta in `beta(a,b,x) = prefix + delta * beta(a+k,b,x)`.
*
* ## Notes
*
* Specifically, the function calculates
*
* ```tex
* \frac{ (a)(a+1)(a+2)...(a+k-1) }{ (b)(b+1)(b+2)...(b+k-1) }
* ```
*
* The function should only called with small `k`; for large `k`, it is grossly inefficient.
*
* @private
* @param {number} a - input value
* @param {number} b - input value
* @param {NonNegativeInteger} k - input value
* @returns {number} ratio value
*/

/**
* Computes the difference between `ibeta(a,b,x)` and `ibeta(a+k,b,x)`.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {NonNegativeInteger} k - function input
* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element
* @returns {number} difference between ibeta(a,b,x) and ibeta(a+k,b,x)
*/

/**
* Computes the hyperbolic arctangent of a number.
*
* ## Method
*
* 1.  Reduce \\( x \\) to positive by \\( \operatorname{atanh}(-x) = -\operatorname{atanh}(x) \\)
*
* 2.  For \\( x \ge 0.5 \\), we calculate
*
*     ```tex
*     \operatorname{atanh}(x) = \frac{1}{2} \cdot \log\left( 1 + \tfrac{2x}{1-x} \right) = \frac{1}{2} \cdot \operatorname{log1p}\left( 2 \tfrac{x}{1-x} \right)
*     ```
*
*     For \\( x < 0.5 \\), we have
*
*     ```tex
*     \operatorname{atanh}(x) = \frac{1}{2} \cdot \operatorname{log1p}\left( 2x + \tfrac{2x^2}{1-x} \right)
*     ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{atanh}(\mathrm{NaN}) &= \mathrm{NaN}\\
* \operatorname{atanh}(1.0) &= \infty \\
* \operatorname{atanh}(-1.0) &= -\infty \\
* \end{align*}
* ```
*
* @param {number} x - input value
* @returns {number} hyperbolic arctangent (in radians)
*
* @example
* var v = atanh( 0.0 );
* // returns 0.0
*
* @example
* var v = atanh( 0.9 );
* // returns ~1.472
*
* @example
* var v = atanh( 1.0 );
* // returns Infinity
*
* @example
* var v = atanh( -1.0 );
* // returns -Infinity
*
* @example
* var v = atanh( NaN );
* // returns NaN
*/

/**
* Computes the hyperbolic tangent of a number.
*
* ## Method
*
* For \\( |x| < 0.625 \\), we use a rational function of the form (Cody and Waite)
*
* ```tex
* x + x^3 \frac{\mathrm{P}(x)}{\mathrm{Q}(x)}
* ```
*
* Otherwise,
*
* ```tex
* \begin{align*}
* \operatorname{tanh}(x) &= \frac{\operatorname{sinh}(x)}{\operatorname{cosh(x)}} \\
* &= 1 - \frac{2}{e^{2x} + 1}
* \end{align*}
* ```
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain | # trials | peak    | rms     |
*     |:----------:|:------:|:--------:|:-------:|:-------:|
*     | DEC        | -2,2   | 50000    | 3.3e-17 | 6.4e-18 |
*     | IEEE       | -2,2   | 30000    | 2.5e-16 | 5.8e-17 |
*
*
* @param {number} x - input value (in radians)
* @returns {number} hyperbolic tangent
*
* @example
* var v = tanh( 0.0 );
* // returns 0.0
*
* @example
* var v = tanh( 2.0 );
* // returns ~0.964
*
* @example
* var v = tanh( -2.0 );
* // returns ~-0.964
*
* @example
* var v = tanh( NaN );
* // returns NaN
*/

/**
* Computes the inter-quartile range for a numeric array.
*
* @private
* @param {NumericArray} data - ndarray like data
* @param {number} j - column index for which to get the IQR
* @returns {number} inter-quartile range
*/

/**
* Computes the interquartile range for an array.
*
* @param {Array} arr - array of values
* @returns {number} interquartile range
*/

/**
* Computes the leading power terms in the incomplete beta function.
*
* When normalized,
*
* ```tex
* \frac{ x^a y^b }{ \operatorname{Beta}(a,b) }
* ```
*
* and otherwise
*
* ```tex
* x^a y^b
* ```
*
* ## Notes
*
* -   Almost all of the error in the incomplete beta comes from this function, particularly when \\( a \\) and \\( b \\) are large. Computing large powers are _hard_ though, and using logarithms just leads to horrendous cancellation errors.
*
* -   For \\( l1 * l2 > 0 \\) or \\( \operatorname{min}( a, b ) < 1 \\), the two power terms both go in the same direction (toward zero or toward infinity). In this case if either term overflows or underflows, then the product of the two must do so also. Alternatively, if one exponent is less than one, then we can't productively use it to eliminate overflow or underflow from the other term.  Problems with spurious overflow/underflow can't be ruled out. In this case, but it is _very_ unlikely since one of the power terms will evaluate to a number close to 1.
*
* -   If \\( \max( \abs(l1), \abs(l2) ) < 0.5 \\), both exponents are near one and both the exponents are greater than one, and, further, these two power terms tend in opposite directions (one toward zero, the other toward infinity), so we have to combine the terms to avoid any risk of overflow or underflow. We do this by moving one power term inside the other, we have:
*
*     ```tex
*     (1 + l_1)^a \cdot (1 + l_2)^b \\
*     = ((1 + l_1) \cdot (1 + l_2)^(b/a))^a \\
*     = (1 + l_1 + l_3 + l_1*l_3)^a
*     ```
*
*     and
*
*     ```tex
*     l_3 = (1 + l_2)^(b/a) - 1 \\
*     = \exp((b/a) * \ln(1 + l_2)) - 1
*     ```
*
*     The tricky bit is deciding which term to move inside. By preference, we move the larger term inside, so that the size of the largest exponent is reduced.  However, that can only be done as long as l3 (see above) is also small.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @returns {number} power terms
*/

/**
* Computes the maximum value of a numeric array.
*
* @param {Array} arr - array of values
* @returns {number} max value
*/

/**
* Computes the median of an array.
*
* @param {Array} arr - input array
* @returns {(number|null)} median value or null
*/

/**
* Computes the minimum and maximum linear indices in an underlying data buffer which are accessible to an array view.
*
* @param {(Array|TypedArray|Object)} [out] - output object
* @param {NonNegativeIntegerArray} shape - array shape
* @param {IntegerArray} strides - stride array
* @param {NonNegativeInteger} offset - index offset
* @returns {(Array|TypedArray|Object)} linear indices
*
* @example
* var shape = [ 10, 10 ];
* var strides = [ 10, 1 ];
* var offset = 10;
*
* var idx = minmaxViewBufferIndex( shape, strides, offset );
* // returns [ 10, 109 ]
*
* @example
* var shape = [ 10, 10 ];
* var strides = [ -10, -1 ];
* var offset = 99;
*
* var idx = minmaxViewBufferIndex( shape, strides, offset );
* // returns [ 0, 99 ]
*
* @example
* var shape = [ 10, 10 ];
* var strides = [ 1, 10 ];
* var offset = 10;
*
* var idx = minmaxViewBufferIndex( shape, strides, offset );
* // returns [ 10, 109 ]
*
* @example
* var shape = [ 10, 10 ];
* var strides = [ -1, -10 ];
* var offset = 99;
*
* var idx = minmaxViewBufferIndex( shape, strides, offset );
* // returns [ 0, 99 ]
*
* @example
* var shape = [ 10, 10 ];
* var strides = [ -1, -10 ];
* var offset = 99;
*
* var out = new Array( 2 );
* var idx = minmaxViewBufferIndex( out, shape, strides, offset );
* // returns [ 0, 99 ]
*
* var bool = ( idx === out );
* // returns true
*/

/**
* Computes the minimum and maximum linear indices in an underlying data buffer which are accessible to an array view.
*
* @private
* @param {(Array|TypedArray|Object)} out - output object
* @param {NonNegativeIntegerArray} shape - array shape
* @param {IntegerArray} strides - stride array
* @param {NonNegativeInteger} offset - index offset
* @returns {(Array|TypedArray|Object)} linear indices
*
* @example
* var shape = [ 10, 10 ];
* var strides = [ 10, 1 ];
* var offset = 10;
*
* var out = new Array( 2 );
* var idx = minmaxViewBufferIndex( out, shape, strides, offset );
* // returns [ 10, 109 ]
*
* var bool = ( idx === out );
* // returns true
*
* @example
* var shape = [ 10, 10 ];
* var strides = [ -10, -1 ];
* var offset = 99;
*
* var out = new Array( 2 );
* var idx = minmaxViewBufferIndex( out, shape, strides, offset );
* // returns [ 0, 99 ]
*
* var bool = ( idx === out );
* // returns true
*
* @example
* var shape = [ 10, 10 ];
* var strides = [ 1, 10 ];
* var offset = 10;
*
* var out = new Array( 2 );
* var idx = minmaxViewBufferIndex( out, shape, strides, offset );
* // returns [ 10, 109 ]
*
* var bool = ( idx === out );
* // returns true
*
* @example
* var shape = [ 10, 10 ];
* var strides = [ -1, -10 ];
* var offset = 99;
*
* var out = new Array( 2 );
* var idx = minmaxViewBufferIndex( out, shape, strides, offset );
* // returns [ 0, 99 ]
*
* var bool = ( idx === out );
* // returns true
*/

/**
* Computes the minimum and maximum value of an array.
*
* @param {Array} arr - array of values
* @returns {Array} minimum and maximum value
*/

/**
* Computes the minimum value of an array.
*
* @param {Array} arr - array of values
* @returns {number} min value
*/

/**
* Computes the multiplicative inverse of `x`.
*
* @param {number} x - input value
* @returns {number} multiplicative inverse
*
* @example
* var v = inv( -1.0 );
* // returns -1.0
*
* @example
* var v = inv( 2.0 );
* // returns 0.5
*
* @example
* var v = inv( 0.0 );
* // returns Infinity
*
* @example
* var v = inv( -0.0 );
* // returns -Infinity
*
* @example
* var v = inv( NaN );
* // returns NaN
*/

/**
* Computes the natural logarithm of the binomial coefficient of two integers.
*
* @param {integer} n - input value
* @param {integer} k - second input value
* @returns {number} function value
*
* @example
* var v = binomcoefln( 8, 2 );
* // returns ~3.332
*
* @example
* var v = binomcoefln( 0, 0 );
* // returns 0.0
*
* @example
* var v = binomcoefln( -4, 2 );
* // returns ~2.303
*
* @example
* var v = binomcoefln( 88, 3 );
* // returns ~11.606
*
* @example
* var v = binomcoefln( NaN, 3 );
* // returns NaN
*
* @example
* var v = binomcoefln( 5, NaN );
* // returns NaN
*
* @example
* var v = binomcoefln( NaN, NaN );
* // returns NaN
*/

/**
* Computes the principal square root.
*
* @type {Function}
* @param {number} x - input value
* @returns {number} principal square root
*
* @example
* var v = sqrt( 4.0 );
* // returns 2.0
*
* v = sqrt( 9.0 );
* // returns 3.0
*
* v = sqrt( 0.0 );
* // returns 0.0
*
* v = sqrt( -4.0 );
* // returns NaN
*
* v = sqrt( NaN );
* // returns NaN
*/

/**
* Computes the quartic kernel for a value.
*
* @private
* @param {number} u - input value
* @returns {number} kernel value at u
*
* @example
* var u = 5;
* var out = quartic(u);
* // returns 0
*/

/**
* Computes the ratio of two gamma functions.
*
* ## Notes
*
* -   Specifically, the function evaluates
*
*     ```tex
*     \frac{ \Gamma( z ) }{ \Gamma( z + \delta ) }
*     ```
*
* @param {number} z - first gamma parameter
* @param {number} delta - difference
* @returns {number} gamma ratio
*
* @example
* var y = gammaDeltaRatio( 2.0, 3.0 );
* // returns ~0.042
*
* @example
* var y = gammaDeltaRatio( 4.0, 0.5 );
* // returns ~0.516
*
* @example
* var y = gammaDeltaRatio( 100.0, 0.0 );
* // returns 1.0
*/

/**
* Computes the regularized incomplete gamma function. The upper tail is calculated via the modified Lentz's method for computing continued fractions, the lower tail using a power expansion.
*
*
* ## Notes
*
* -   When `a >= MAX_FACTORIAL` and computing the non-normalized incomplete gamma, result is rather hard to compute unless we use logs. There are really two options a) if `x` is a long way from `a` in value then we can reliably use methods 2 and 4 below in logarithmic form and go straight to the result. Otherwise we let the regularized gamma take the strain (the result is unlikely to underflow in the central region anyway) and combine with `lgamma` in the hopes that we get a finite result.
*
* @param {NonNegativeNumber} x - function parameter
* @param {PositiveNumber} a - function parameter
* @param {boolean} [regularized=true] - boolean indicating if the function should evaluate the regularized or non-regularized incomplete gamma functions
* @param {boolean} [upper=false] - boolean indicating if the function should return the upper tail of the incomplete gamma function
* @returns {number} function value
*/

/**
* Computes the regulated gamma function.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/

/**
* Computes the relative difference in units of double-precision floating-point epsilon.
*
* @param {number} x - first number
* @param {number} y - second number
* @param {(string|Function)} [scale='max-abs'] - scale function
* @returns {number} relative difference in units of double-precision floating-point epsilon
*
* @example
* var d = epsilonDifference( 12.15, 12.149999999999999 ); // => ~0.658ε
* // returns ~0.658
*
* @example
* var d = epsilonDifference( 2.4341309458983933, 2.4341309458633909, 'mean-abs' ); // => ~64761.5ε => ~1.438e-11
* // returns ~64761.5
*
* @example
* function scale( x, y ) {
*      // Return the minimum value:
*      return ( x > y ) ? y : x;
* }
*
* var d = epsilonDifference( 1.0000000000000002, 1.0000000000000100, scale ); // => ~44ε
* // returns ~44
*/

/**
* Computes the relative difference of two real numbers.
*
* @param {number} x - first number
* @param {number} y - second number
* @param {(string|Function)} [scale='max-abs'] - scale function
* @throws {Error} must provide a recognized scale function name
* @returns {number} relative difference
*
* @example
* var d = relativeDifference( 2.0, 5.0 ); // => 3/5
* // returns 0.6
*
* @example
* var d = relativeDifference( -1.0, 3.14 ); // => 4.14/3.14
* // returns ~1.318
*
* @example
* var d = relativeDifference( -2.0, 5.0, 'max-abs' ); // => |-7/5|
* // returns 1.4
*
* @example
* var d = relativeDifference( -2.0, 5.0, 'max' ); // => |-7/5|
* // returns 1.4
*
* @example
* var d = relativeDifference( -2.0, 5.0, 'min-abs' ); // => |-7/2|
* // returns 3.5
*
* @example
* var d = relativeDifference( -2.0, 5.0, 'min' ); // => |-7/-2|
* // returns 3.5
*
* @example
* var d = relativeDifference( -2.0, 5.0, 'mean-abs' ); // => |-7/3.5|
* // returns 2.0
*
* @example
* var d = relativeDifference( -2.0, 5.0, 'mean' ); // => |-7/1.5|
* // returns ~4.67
*
* @example
* var d = relativeDifference( -2.0, 5.0, 'x' ); // => |-7/-2|
* // returns 3.5
*
* @example
* var d = relativeDifference( 5.0, -2.0, 'x' ); // => |7/5|
* // returns 1.4
*
* @example
* var d = relativeDifference( -2.0, 5.0, 'y' ); // => |-7/5|
* // returns 1.4
*
* @example
* var d = relativeDifference( 5.0, -2.0, 'y' ); // => |7/-2|
* // returns 3.5
*/

/**
* Computes the rule-of-thumb bandwidth for the values in a column of `x`.
*
* @private
* @param {ndarrayLike} arr - input ndarray
* @param {number} j - index of the column from which to obtain the values
* @returns {NumericArray} array with bandwidth values
*
* @example
* var ndarrayLike = require( './ndarray_like.js' );
*
* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];
* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];
* var arr = ndarrayLike( x, y );
* var out = pickBandwidth( arr, 1 );
* // returns ~1.717
*/

/**
* Computes the sample ranks for the values of an array-like object.
*
* @param {Collection} x - data array
* @param {Object} [options] - options object
* @param {string} [options.method='average'] - method name determining how ties are treated
* @param {string} [options.missing='last'] - determines where missing values go (`first`,`last`, or `remove`)
* @param {Array} [options.encoding=[null,NaN]] - array of values encoding missing values
* @throws {TypeError} first argument has to be an array-like object
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Array} array containing the computed ranks for the elements of x
*
* @example
* var arr = [ 1.1, 2.0, 3.5, 0.0, 2.4 ];
* var out = ranks( arr );
* // returns [ 2, 3, 5, 1, 4 ]
*
* @example
* // Ties are averaged:
* arr = [ 2, 2, 1, 4, 3 ];
* out = ranks( arr );
* // returns [ 2.5, 2.5, 1, 5, 4 ]
*
* @example
* // Missing values are placed last:
* arr = [ null, 2, 2, 1, 4, 3, NaN, NaN ];
* out = ranks( arr );
* // returns [ 6, 2.5, 2.5, 1, 5, 4, 7 ,8 ]
*/

/**
* Computes the sample standard deviation over an array of values.
*
* @param {Array} arr - array of values
* @returns {number} sample standard deviation
*/

/**
* Computes the sine of a number.
*
* ## Method
*
* -   Let \\(S\\), \\(C\\), and \\(T\\) denote the \\(\sin\\), \\(\cos\\), and \\(\tan\\), respectively, on \\(\[-\pi/4, +\pi/4\]\\).
*
* -   Reduce the argument \\(x\\) to \\(y1+y2 = x-k\pi/2\\) in \\(\[-\pi/4, +\pi/4\]\\), and let \\(n = k \mod 4\\).
*
* -   We have
*
*     | n | sin(x) | cos(x) | tan(x) |
*     | - | ------ | ------ | ------ |
*     | 0 |   S    |   C    |    T   |
*     | 1 |   C    |  -S    |  -1/T  |
*     | 2 |  -S    |  -C    |    T   |
*     | 3 |  -C    |   S    |  -1/T  |
*
*
* @param {number} x - input value (in radians)
* @returns {number} sine
*
* @example
* var v = sin( 0.0 );
* // returns ~0.0
*
* @example
* var v = sin( 3.141592653589793/2.0 );
* // returns ~1.0
*
* @example
* var v = sin( -3.141592653589793/6.0 );
* // returns ~-0.5
*
* @example
* var v = sin( NaN );
* // returns NaN
*/

/**
* Computes the sine on \\( \approx \[-\pi/4, \pi/4] \\) (except on \\(-0\\)), where \\( \pi/4 \approx 0.7854 \\).
*
* ## Method
*
* -   Since \\( \sin(-x) = -\sin(x) \\), we need only to consider positive \\(x\\).
*
* -   Callers must return \\( \sin(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\(-0\\). Callers may do the optimization \\( \sin(x) \approx x \\) for tiny \\(x\\).
*
* -   \\( \sin(x) \\) is approximated by a polynomial of degree \\(13\\) on \\( \left\[0,\tfrac{pi}{4}\right] \\)
*
*     ```tex
*     \sin(x) \approx x + S_1 \cdot x^3 + \ldots + S_6 \cdot x^{13}
*     ```
*
*     where
*
*     ```tex
*     \left| \frac{\sin(x)}{x} \left( 1 + S_1 \cdot x + S_2 \cdot x + S_3 \cdot x + S_4 \cdot x + S_5 \cdot x + S_6 \cdot x \right) \right| \le 2^{-58}
*     ```
*
* -   We have
*
*     ```tex
*     \sin(x+y) = \sin(x) + \sin'(x') \cdot y \approx \sin(x) + (1-x*x/2) \cdot y
*     ```
*
*     For better accuracy, let
*
*     ```tex
*     r = x^3 * \left( S_2 + x^2 \cdot \left( S_3 + x^2 * \left( S_4 + x^2 \cdot ( S_5+x^2 \cdot S_6 ) \right) \right) \right)
*     ```
*
*     then
*
*     ```tex
*     \sin(x) = x + \left( S_1 \cdot x + ( x \cdot (r-y/2) + y ) \right)
*     ```
*
*
* @param {number} x - input value (in radians, assumed to be bounded by `~pi/4` in magnitude)
* @param {number} y - tail of `x`
* @returns {number} sine
*
* @example
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* @example
* var v = kernelSin( 3.141592653589793/6.0, 0.0 );
* // returns ~0.5
*
* @example
* var v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.58
*
* @example
* var v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* @example
* var v = kernelSin( 3.0, NaN );
* // returns NaN
*
* @example
* var v = kernelSin( NaN, NaN );
* // returns NaN
*/

/**
* Computes the sum of a Chebyshev polynomial.
*
* @private
* @param {PositiveInteger} n - degree of polynomial
* @param {number} t - input value
* @returns {number} Chebyshev sum
*/

/**
* Computes the sum of elements of a numeric array.
*
* @param {Array} arr - input array
* @returns {(number|null)} sum or null
*/

/**
* Computes the sum of elements of an numeric array.
*
* @private
* @param {NumericArray} arr - input array
* @returns {number} sum
*
* @example
* var arr = [ 2.0, 6.0, 10.0 ];
* var out = sum( arr );
* // returns 18.0
*/

/**
* Computes the tangent on \\( \approx\[-\pi/4, \pi/4] \\) (except on -0), \\( \pi/4 \approx 0.7854 \\).
*
* ## Method
*
* -   Since \\( \tan(-x) = -\tan(x) \\), we need only to consider positive \\( x \\).
*
* -   Callers must return \\( \tan(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\( -0 \\). Callers may do the optimization \\( \tan(x) \approx x \\) for tiny \\( x \\).
*
* -   \\( \tan(x) \\) is approximated by a odd polynomial of degree 27 on \\( \[0, 0.67434] \\)
*
*     ```tex
*     \tan(x) \approx x + T_1 x^3 + \ldots + T_{13} x^{27}
*     ```
*     where
*
*     ```tex
*     \left| \frac{\tan(x)}{x} - \left( 1 + T_1 x^2 + T_2 x^4 + \ldots + T_{13} x^{26} \right) \right|  \le 2^{-59.2}
*     ```
*
* -   Note: \\( \tan(x+y) = \tan(x) + \tan'(x) \cdot y \approx \tan(x) + ( 1 + x \cdot x ) \cdot y \\). Therefore, for better accuracy in computing \\( \tan(x+y) \\), let
*
*     ```tex
*     r = x^3 \cdot \left( T_2+x^2 \cdot (T_3+x^2 \cdot (\ldots+x^2 \cdot (T_{12}+x^2 \cdot T_{13}))) \right)
*     ```
*
*     then
*
*     ```tex
*     \tan(x+y) = x^3 + \left( T_1 \cdot x^2 + (x \cdot (r+y)+y) \right)
*     ```
*
* -   For \\( x \\) in \\( \[0.67434, \pi/4] \\),  let \\( y = \pi/4 - x \\), then
*
*     ```tex
*     \tan(x) = \tan\left(\tfrac{\pi}{4}-y\right) = \frac{1-\tan(y)}{1+\tan(y)} \\
*     = 1 - 2 \cdot \left( \tan(y) - \tfrac{\tan(y)^2}{1+\tan(y)} \right)
*     ```
*
*
* @param {number} x - input value (in radians, assumed to be bounded by ~π/4 in magnitude)
* @param {number} y - tail of `x`
* @param {integer} k - indicates whether tan (if k = 1) or -1/tan (if k = -1) is returned
* @returns {number} tangent
*
* @example
* var out = kernelTan( 3.141592653589793/4.0, 0.0, 1 );
* // returns ~1.0
*
* @example
* var out = kernelTan( 3.141592653589793/4.0, 0.0, -1 );
* // returns ~-1.0
*
* @example
* var out = kernelTan( 3.141592653589793/6.0, 0.0, 1 );
* // returns ~0.577
*
* @example
* var out = kernelTan( 0.664, 5.288e-17, 1 );
* // returns ~0.783
*
* @example
* var out = kernelTan( NaN, 0.0, 1 );
* // returns NaN
*
* @example
* var out = kernelTan( 3.0, NaN, 1 );
* // returns NaN
*
* @example
* var out = kernelTan( NaN, NaN, 1 );
* // returns NaN
*/

/**
* Computes the triangular kernel for a value.
*
* @private
* @param {number} u - input value
* @returns {number} kernel value at u
*
* @example
* var u = 0.2;
* var out = triangular( u );
* // returns 0.8
*/

/**
* Computes the tricube kernel for a value.
*
* @private
* @param {number} u - value for which we wish to calculate the tricube kernel
* @returns {number} the value for the kernel at u
*
* @example
* var u = 5;
* out = tricube(u);
* // returns 0
*/

/**
* Computes the unbiased standard deviation of an array.
*
* @private
* @param {NumericArray} arr - input array
* @returns {number} standard deviation
*
* @example
* var arr = [ 2, 3, 4, 3, 5 ];
* var out = stdev( arr );
* // returns ~1.14
*/

/**
* Computes the unbiased standard deviation.
*
* @private
* @param {ndarrayLike} arr - input array
* @param {number} j - column for which to calculate the standard deviation
* @returns {number} standard deviation
*
* @example
* var ndarrayLike = require( './ndarray_like.js' );
*
* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];
* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];
* var arr = ndarrayLike( x, y );
* var out = stdev( arr, 1 );
* // returns ~2.568
*/

/**
* Computes the unbiased variance of an array.
*
* @private
* @param {NumericArray} arr - input array
* @returns {number} variance
*/

/**
* Computes the uniform kernel.
*
* @private
* @param {number} u - input value
* @returns {number} kernel value at u
*
* @example
* var u = 0.2;
* var out = uniform( u );
* // returns 0.5
*/

/**
* Computes the value of `sin(πx)`.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = sinpi( 0.0 );
* // returns 0.0
*
* @example
* var y = sinpi( 0.5 );
* // returns 1.0
*
* @example
* var y = sinpi( 0.9 );
* // returns ~0.309
*
* @example
* var y = sinpi( NaN );
* // returns NaN
*/

/**
* Computes the variance of an array.
*
* @param {Array} arr - input array
* @param {boolean} [bias=false] - boolean indicating whether to calculate a biased or unbiased estimate of the variance
* @returns {(number|null)} variance or null
*/

/**
* Computes the vector of means for each treatment.
*
* @private
* @param {NumericArray} x - measured values
* @param {Array} factor - array of treatments
* @param {Array} treats - unique treatments
* @returns {Object} summary statistics for the categories.
*/

/**
* Computes two-dimensional kernel density estimates.
*
* @param {NumericArray} x - array of x values
* @param {NumericArray} y - array of y values
* @param {Options} [options] - function options
* @param {NumericArray} [options.h] - array of length two containing the bandwidth values for x and y
* @param {number} [options.n=25] - number of partitions on the x- and y-axes
* @param {number} [options.xMin] - lower limit of x
* @param {number} [options.xMax] - upper limit of x
* @param {number} [options.yMin] - lower limit of y
* @param {number} [options.yMax] - upper limit of y
* @param {(string|Function)} [options.kernel='gaussian'] - a string or function to specifying the used kernel function
* @throws {TypeError} first argument must be an array or matrix-like
* @throws {TypeError} second argument must be an array
* @throws {Error} first and second arguments must be of the same length
* @throws {RangeError} `xMin` must be smaller than `xMax`
* @throws {RangeError} `yMin` must be smaller than `yMax`
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Object} object containing the density estimates (`z`) along grid points (`x` and `y` values)
*
* @example
* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];
* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];
* var out = kde2d( x, y );
*/

/**
* Constructor which returns a `Number` object.
*
* @module @stdlib/number/ctor
*
* @example
* var Number = require( '@stdlib/number/ctor' );
*
* var v = new Number( 10.0 );
* // returns <Number>
*/

/**
* Container wrapper.
*
* @property {boolean} fluid - turn any fixed-width container layout into a full-width layout
*/

/**
* Contains MIT-licensed code:
*
* The MIT License (MIT)
*
* Copyright (c) 2013 Yurii Lahodiuk
*
* Permission is hereby granted, free of charge, to any person obtaining a copy of
* this software and associated documentation files (the "Software"), to deal in
* the Software without restriction, including without limitation the rights to
* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
* the Software, and to permit persons to whom the Software is furnished to do so,
* subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/**
* Continued fraction for the incomplete beta.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @returns {Function} series function
*/

/**
* Convert a string to lowercase.
*
* @module @stdlib/string/lowercase
*
* @example
* var lowercase = require( '@stdlib/string/lowercase' );
*
* var str = lowercase( 'bEEp' );
* // returns 'beep'
*/

/**
* Convert a string to uppercase.
*
* @module @stdlib/string/uppercase
*
* @example
* var uppercase = require( '@stdlib/string/uppercase' );
*
* var str = uppercase( 'bEEp' );
* // returns 'BEEP'
*/

/**
* Convert an unsigned 32-bit integer to a signed 32-bit integer.
*
* @module @stdlib/number/uint32/base/to-int32
*
* @example
* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );
* var uint32ToInt32 = require( '@stdlib/number/uint32/base/to-int32' );
*
* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );
* // returns -1
*
* y = uint32ToInt32( float64ToUint32( 3 ) );
* // returns 3
*/

/**
* Converts a base-64 encoded string to a blob.
*
* @param {string} b64Data - base-64 encoded string
* @param {string} [contentType=''] - content type
* @param {integer} [sliceSize=512] - slice size
* @returns {Blob} created blob
*/

/**
* Converts a string to lowercase.
*
* @param {string} str - string to convert
* @throws {TypeError} must provide a primitive string
* @returns {string} lowercase string
*
* @example
* var str = lowercase( 'bEEp' );
* // returns 'beep'
*/

/**
* Converts a string to uppercase.
*
* @param {string} str - string to convert
* @throws {TypeError} must provide a primitive string
* @returns {string} uppercase string
*
* @example
* var str = uppercase( 'bEEp' );
* // returns 'BEEP'
*/

/**
* Converts an unsigned 32-bit integer to a signed 32-bit integer.
*
* @param {uinteger32} x - unsigned 32-bit integer
* @returns {integer32} signed 32-bit integer
*
* @example
* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );
* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );
* // returns -1
*
* @example
* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );
* var y = uint32ToInt32( float64ToUint32( 3 ) );
* // returns 3
*/

/**
* Converts two arrays .
*
* @private
* @param {NumericArray} x - array of x values
* @param {NumericArray} y - array of y values
* @throws {TypeError} first argument must be a numeric array
* @throws {TypeError} second argument must be a numeric array
* @throws {Error} first and second arguments must be of the same length
* @returns {Object} object that mirrors an `ndarray`
*
* @example
* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];
* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];
* var out = ndarrayLike( x, y );
*/

/**
* Copies a `Float32Array`.
*
* @private
* @param {Float32Array} arr - array to copy
* @returns {Float32Array} new array
*/

/**
* Copies a `Float64Array`.
*
* @private
* @param {Float64Array} arr - array to copy
* @returns {Float64Array} new array
*/

/**
* Copies a `Uint16Array`.
*
* @private
* @param {Uint16Array} arr - array to copy
* @returns {Uint16Array} new array
*/

/**
* Copies a `Uint32Array`.
*
* @private
* @param {Uint32Array} arr - array to copy
* @returns {Uint32Array} new array
*/

/**
* Copies a `Uint8Array`.
*
* @private
* @param {Uint8Array} arr - array to copy
* @returns {Uint8Array} new array
*/

/**
* Copies a `Uint8ClampedArray`.
*
* @private
* @param {Uint8ClampedArray} arr - array to copy
* @returns {Uint8ClampedArray} new array
*/

/**
* Copies an `Int16Array`.
*
* @private
* @param {Int16Array} arr - array to copy
* @returns {Int16Array} new array
*/

/**
* Copies an `Int32Array`.
*
* @private
* @param {Int32Array} arr - array to copy
* @returns {Int32Array} new array
*/

/**
* Copies an `Int8Array`.
*
* @private
* @param {Int8Array} arr - array to copy
* @returns {Int8Array} new array
*/

/**
* Copies an error object.
*
* @private
* @param {(Error|TypeError|SyntaxError|URIError|ReferenceError|RangeError|EvalError)} error - error to copy
* @returns {(Error|TypeError|SyntaxError|URIError|ReferenceError|RangeError|EvalError)} error copy
*
* @example
* var err1 = new TypeError( 'beep' );
*
* var err2 = copyError( err1 );
* // returns <TypeError>
*/

/**
* Copies an ndarray view to a data buffer.
*
* @private
* @param {ndarray} arr - input ndarray
* @param {string} dtype - data type
* @returns {(Array|TypedArray|Buffer)} output data buffer
*
* @example
* var ndarray = require( '@stdlib/ndarray/ctor' );
*
* var vector = ndarray( 'generic', 1 );
*
* var buffer = [ 1.0, 2.0, 3.0 ];
* var shape = [ 3 ];
* var strides = [ -1 ];
* var vec = vector( buffer, shape, strides, 2, 'row-major' );
*
* var b = copyView( vec, 'float64' );
* // returns <Float64Array>[ 3.0, 2.0, 1.0 ]
*/

/**
* Copies buffer data to a new `Buffer` instance.
*
* @param {Buffer} buffer - buffer from which to copy
* @throws {TypeError} must provide a `Buffer` instance
* @returns {Buffer} new `Buffer` instance
*
* @example
* var fromArray = require( '@stdlib/buffer/from-array' );
*
* var b1 = fromArray( [ 1, 2, 3, 4 ] );
* // returns <Buffer>
*
* var b2 = fromBuffer( b1 );
* // returns <Buffer>
*/

/**
* Copies ndarray flags.
*
* @private
* @param {Object} flags - flags
* @returns {Object} copy of input object
*/

/**
* Copies or deep clones a value to an arbitrary depth.
*
* @param {*} value - value to copy
* @param {NonNegativeInteger} [level=+infinity] - copy depth
* @throws {TypeError} `level` must be a nonnegative integer
* @returns {*} value copy
*
* @example
* var out = copy( 'beep' );
* // returns 'beep'
*
* @example
* var value = [
*     {
*         'a': 1,
*         'b': true,
*         'c': [ 1, 2, 3 ]
*     }
* ];
* var out = copy( value );
* // returns [ { 'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ]
*
* var bool = ( value[0].c === out[0].c );
* // returns false
*/

/**
* Copies the contents of array-like object to a new array.
*
*
* @private
* @param {ArrayLike} arr - input array
* @param {NonNegativeInteger} len - array length
* @returns {Array} output array
*
* @example
* var arr = [ 1.0, 2.0, 3.0 ];
*
* var out = copy( arr, arr.length );
* // returns [ 1.0, 2.0, 3.0 ]
*
* var bool = ( arr === out );
* // returns false
*/

/**
* Copies values from `x` into `y`.
*
* @param {PositiveInteger} N - number of values to copy
* @param {(Array|TypedArray)} x - input array
* @param {integer} strideX - `x` stride length
* @param {(Array|TypedArray)} y - destination array
* @param {integer} strideY - `y` stride length
* @returns {(Array|TypedArray)} `y`
*
* @example
* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];
* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];
*
* gcopy( x.length, x, 1, y, 1 );
* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]
*/

/**
* Copies values from `x` into `y`.
*
* @param {PositiveInteger} N - number of values to copy
* @param {(Array|TypedArray)} x - input array
* @param {integer} strideX - `x` stride length
* @param {NonNegativeInteger} offsetX - starting `x` index
* @param {(Array|TypedArray)} y - destination array
* @param {integer} strideY - `y` stride length
* @param {NonNegativeInteger} offsetY - starting `y` index
* @returns {(Array|TypedArray)} `y`
*
* @example
* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];
* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];
*
* gcopy( x.length, x, 1, 0, y, 1, 0 );
* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]
*/

/**
* Copy buffer data to a new `Buffer` instance.
*
* @module @stdlib/buffer/from-buffer
*
* @example
* var fromArray = require( '@stdlib/buffer/from-array' );
* var copyBuffer = require( '@stdlib/buffer/from-buffer' );
*
* var b1 = fromArray( [ 1, 2, 3, 4 ] );
* // returns <Buffer>
*
* var b2 = copyBuffer( b1 );
* // returns <Buffer>
*/

/**
* Copy or deep clone a value to an arbitrary depth.
*
* @module @stdlib/utils/copy
*
* @example
* var copy = require( '@stdlib/utils/copy' );
*
* var out = copy( 'beep' );
* // returns 'beep'
*
* @example
* var copy = require( '@stdlib/utils/copy' );
*
* var value = [
*     {
*         'a': 1,
*         'b': true,
*         'c': [ 1, 2, 3 ]
*     }
* ];
* var out = copy( value );
* // returns [ {'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ]
*
* var bool = ( value[0].c === out[0].c );
* // returns false
*/

/**
* Create a constant function.
*
* @module @stdlib/utils/constant-function
*
* @example
* var constantFunction = require( '@stdlib/utils/constant-function' );
*
* var fcn = constantFunction( 3.14 );
*
* var v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*/

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/

/**
* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/from-words
*
* @example
* var fromWords = require( '@stdlib/number/float64/base/from-words' );
*
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* v = fromWords( 3221823995, 1413754136 );
* // returns -3.141592653589793
*
* v = fromWords( 0, 0 );
* // returns 0.0
*
* v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* v = fromWords( 2146959360, 0 );
* // returns NaN
*
* v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/

/**
* Create a memoized ndarray constructor.
*
* @module @stdlib/ndarray/base/memoized-ctor
*
* @example
* var ctor = require( '@stdlib/ndarray/base/memoized-ctor' );
*
* var f1 = ctor( 'float64', 3 );
* // returns <Function>
*
* var f2 = ctor( 'float64', 3 );
* // returns <Function>
*
* var bool = ( f1 === f2 );
* // returns true
*
* var buffer = [ 1, 2, 3, 4, 5, 6 ];
* var shape = [ 3, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var out = f1( buffer, shape, strides, offset, 'row-major' );
*/

/**
* Create a memoized ndarray constructor.
*
* @module @stdlib/ndarray/memoized-ctor
*
* @example
* var ctor = require( '@stdlib/ndarray/memoized-ctor' );
*
* var f1 = ctor( 'float64', 3 );
* // returns <Function>
*
* var f2 = ctor( 'float64', 3 );
* // returns <Function>
*
* var bool = ( f1 === f2 );
* // returns true
*
* var buffer = [ 1, 2, 3, 4, 5, 6 ];
* var shape = [ 3, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var out = f1( buffer, shape, strides, offset, 'row-major' );
*/

/**
* Create a regular expression from a regular expression string.
*
* @module @stdlib/utils/regexp-from-string
*
* @example
* var reFromString = require( '@stdlib/utils/regexp-from-string' );
*
* var re = reFromString( '/beep/' );
* // returns /beep/
*/

/**
* Create a string from a sequence of Unicode code points.
*
* @module @stdlib/string/from-code-point
*
* @example
* var fromCodePoint = require( '@stdlib/string/from-code-point' );
*
* var str = fromCodePoint( 9731 );
* // returns '☃'
*/

/**
* Create a zero-filled contiguous linear ndarray data buffer.
*
* @module @stdlib/ndarray/base/buffer
*
* @example
* var buffer = require( '@stdlib/ndarray/base/buffer' );
*
* var buf = buffer( 'float64', 3 );
* // returns <Float64Array>[ 0.0, 0.0, 0.0 ]
*/

/**
* Create an ndarray constructor.
*
* @module @stdlib/ndarray/base/ctor
*
* @example
* var ctor = require( '@stdlib/ndarray/base/ctor' );
*
* var ndarray = ctor( 'float64', 3 );
* // returns <Function>
*
* var buffer = [ 1, 2, 3, 4, 5, 6 ];
* var shape = [ 3, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var out = ndarray( buffer, shape, strides, offset, 'row-major' );
*/

/**
* Create an ndarray constructor.
*
* @module @stdlib/ndarray/ctor
*
* @example
* var ctor = require( '@stdlib/ndarray/ctor' );
*
* var ndarray = ctor( 'generic', 3 );
* // returns <Function>
*
* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];
* var shape = [ 3, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var out = ndarray( buffer, shape, strides, offset, 'row-major' );
*/

/**
* Create code to be added in front of user-supplied R code.
*
* @param {Array} libs - array of libraries to requireLibs
* @param {(Array|string)} prependCode - array of strings or single string of code to prepend
* @param {Object} session - session object
* @param {string} generated code
*/

/**
* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
*
* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
* @returns {number} floating-point number
*
* @example
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* @example
* var v = fromWords( 3221823995, 1413754136 );
* // returns -3.141592653589793
*
* @example
* var v = fromWords( 0, 0 );
* // returns 0.0
*
* @example
* var v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* @example
* var v = fromWords( 2146959360, 0 );
* // returns NaN
*
* @example
* var v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* @example
* var v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/

/**
* Creates a function to evaluate a series expansion of the incomplete gamma function.
*
* @private
* @param {number} a1 - function parameter
* @param {number} z1 - function parameter
* @returns {Function} series function
*/

/**
* Creates a function to evaluate a series expansion of the upper incomplete gamma fraction.
*
* @private
* @param {number} a1 - function parameter
* @param {number} z1 - function parameter
* @returns {Function} series function
*/

/**
* Creates a function which always returns the same value.
*
* @param {*} [value] - value to always return
* @returns {Function} constant function
*
* @example
* var fcn = wrap( 3.14 );
*
* var v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*/

/**
* Creates a string from a sequence of Unicode code points.
*
* ## Notes
*
* -   UTF-16 encoding uses one 16-bit unit for non-surrogates (U+0000 to U+D7FF and U+E000 to U+FFFF).
* -   UTF-16 encoding uses two 16-bit units (surrogate pairs) for U+10000 to U+10FFFF and encodes U+10000-U+10FFFF by subtracting 0x10000 from the code point, expressing the result as a 20-bit binary, and splitting the 20 bits of 0x0-0xFFFFF as upper and lower 10-bits. The respective 10-bits are stored in two 16-bit words: a high and a low surrogate.
*
*
* @param {...NonNegativeInteger} args - sequence of code points
* @throws {Error} must provide either an array-like object of code points or one or more code points as separate arguments
* @throws {TypeError} a code point must be a nonnegative integer
* @throws {RangeError} must provide a valid Unicode code point
* @returns {string} created string
*
* @example
* var str = fromCodePoint( 9731 );
* // returns '☃'
*/

/**
* Creates a two-dimensional array.
*
* @param {number} m - number of rows
* @param {number} n - number of columns
* @return {Array} an empty array of arrays
*/

/**
* Creates an instance of RandomForest with specific number of trees.
*
* @constructor
* @param opts - contains configuration parameters for building decision trees
*/

/**
* Creates an instance of a decision tree for classification problems.
*
* @constructor
* @param opts - contains training set and some configuration parameters
*/

/**
* Data range picker.
*
* @property {string} size - button size
* @property {Object} style - CSS inline styles
* @property {Function} onChange - callback invoked when the data selection is changed; called with the current period (object with `from` and `to` properties)
*/

/**
* Define (or modify) an object property.
*
* @module @stdlib/utils/define-property
*
* @example
* var defineProperty = require( '@stdlib/utils/define-property' );
*
* var obj = {};
* defineProperty( obj, 'foo', {
*     'value': 'bar',
*     'writable': false,
*     'configurable': false,
*     'enumerable': false
* });
* obj.foo = 'boop'; // => throws
*/

/**
* Define a non-enumerable property.
*
* @module @stdlib/utils/define-nonenumerable-property
*
* @example
* var objectKeys = require( '@stdlib/utils/keys' );
* var setNonEnumerableProperty = require( '@stdlib/utils/define-nonenumerable-property' );
*
* var obj = {};
*
* setNonEnumerableProperty( obj, 'foo', 'bar' );
*
* var v = obj.foo;
* // returns 'bar'
*
* var keys = objectKeys( obj );
* // returns []
*/

/**
* Define a non-enumerable read-only accessor.
*
* @module @stdlib/utils/define-nonenumerable-read-only-accessor
*
* @example
* var setNonEnumerableReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );
*
* function getter() {
*     return 'bar';
* }
*
* var obj = {};
*
* setNonEnumerableReadOnlyAccessor( obj, 'foo', getter );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

/**
* Define a non-enumerable read-only property.
*
* @module @stdlib/utils/define-nonenumerable-read-only-property
*
* @example
* var setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
*
* var obj = {};
*
* setNonEnumerableReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

/**
* Define a non-enumerable read-write accessor.
*
* @module @stdlib/utils/define-nonenumerable-read-write-accessor
*
* @example
* var setNonEnumerableReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );
*
* function getter() {
*     return name + ' foo';
* }
*
* function setter( v ) {
*     name = v;
* }
*
* var name = 'bar';
* var obj = {};
*
* setNonEnumerableReadWriteAccessor( obj, 'foo', getter, setter );
*
* var v = obj.foo;
* // returns 'bar foo'
*
* obj.foo = 'beep';
*
* v = obj.foo;
* // returns 'beep foo'
*/

/**
* Define a read-only property.
*
* @module @stdlib/utils/define-read-only-property
*
* @example
* var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
*
* var obj = {};
*
* setReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

/**
* Defines (or modifies) an object property.
*
* ## Notes
*
* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.
*
* @name defineProperty
* @type {Function}
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {Object} descriptor - property descriptor
* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object
* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties
* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator
* @param {*} [descriptor.value] - property value
* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.
* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.
* @throws {TypeError} first argument must be an object
* @throws {TypeError} third argument must be an object
* @throws {Error} property descriptor cannot have both a value and a setter and/or getter
* @returns {Object} object with added property
*
* @example
* var obj = {};
*
* defineProperty( obj, 'foo', {
*     'value': 'bar'
* });
*
* var str = obj.foo;
* // returns 'bar'
*/

/**
* Defines (or modifies) an object property.
*
* ## Notes
*
* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.
*
* @param {Object} obj - object on which to define the property
* @param {string} prop - property name
* @param {Object} descriptor - property descriptor
* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object
* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties
* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator
* @param {*} [descriptor.value] - property value
* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.
* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.
* @throws {TypeError} first argument must be an object
* @throws {TypeError} third argument must be an object
* @throws {Error} property descriptor cannot have both a value and a setter and/or getter
* @returns {Object} object with added property
*
* @example
* var obj = {};
*
* defineProperty( obj, 'foo', {
*     'value': 'bar'
* });
*
* var str = obj.foo;
* // returns 'bar'
*/

/**
* Defines a non-enumerable property.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {*} value - value to set
*
* @example
* var objectKeys = require( '@stdlib/utils/keys' );
*
* var obj = {};
*
* setNonEnumerableProperty( obj, 'foo', 'bar' );
*
* var v = obj.foo;
* // returns 'bar'
*
* var keys = objectKeys( obj );
* // returns []
*/

/**
* Defines a non-enumerable read-only accessor.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {Function} getter - accessor
*
* @example
* function getter() {
*     return 'bar';
* }
*
* var obj = {};
*
* setNonEnumerableReadOnlyAccessor( obj, 'foo', getter );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

/**
* Defines a non-enumerable read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
*
* setNonEnumerableReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

/**
* Defines a non-enumerable read-write accessor.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {Function} getter - get accessor
* @param {Function} setter - set accessor
*
* @example
* function getter() {
*     return name + ' foo';
* }
*
* function setter( v ) {
*     name = v;
* }
*
* var name = 'bar';
* var obj = {};
*
* setNonEnumerableReadWriteAccessor( obj, 'foo', getter, setter );
*
* var v = obj.foo;
* // returns 'bar foo'
*
* obj.foo = 'beep';
*
* v = obj.foo;
* // returns 'beep foo'
*/

/**
* Defines a read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
*
* setReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

/**
* Degenerate distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/degenerate/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/degenerate/cdf' );
*
* var y = cdf( 2.0, 5.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/stats/base/dists/degenerate/cdf' ).factory;
*
* var cdf = factory( 5.0 );
*
* var y = cdf( 3.0 );
* // returns 0.0
*
* y = cdf( 6.0 );
* // returns 1.0
*/

/**
* Degenerate distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/degenerate/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/degenerate/pdf' );
*
* var y = pdf( 2.0, 0.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/stats/base/dists/degenerate/pdf' ).factory;
*
* var pdf = factory( 10.0 );
*
* var y = pdf( 10.0 );
* // returns Infinity
*/

/**
* Degenerate distribution probability mass function (PDF).
*
* @module @stdlib/stats/base/dists/degenerate/pmf
*
* @example
* var pmf = require( '@stdlib/stats/base/dists/degenerate/pmf' );
*
* var y = pmf( 2.0, 0.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/stats/base/dists/degenerate/pmf' ).factory;
*
* var pmf = factory( 10.0 );
*
* var y = pmf( 10.0 );
* // returns 1.0
*/

/**
* Degenerate distribution quantile function.
*
* @module @stdlib/stats/base/dists/degenerate/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/degenerate/quantile' );
*
* var y = quantile( 0.5, 2.0 );
* // returns 2.0
*
* @example
* var factory = require( '@stdlib/stats/base/dists/degenerate/quantile' ).factory;
*
* var quantile = factory( 10.0 );
*
* var y = quantile( 0.5 );
* // returns 10.0
*/

/**
* Delete the element passed to parameter `elem` from the queue, if present.
*/

/**
* Detects a JSON string.
*
* Regular expression: `/^\{[\s\S]*\}$|^\[[\s\S]*\]$/`
*
* -   `^\{`
*
*     -   match a `{` literal which is the first character
*
* -   `[\s\S]*`
*
*     -   match any whitespace and non-whitespace characters which occur `0` or more times
*
* -   `\}$`
*
*     -   match a `}` literal which is the last character
*
* -   `|`
*
*     -   alternatively
*
* -   `^\[`
*
*     -   match a `[` literal which is the first character
*
* -   `[\s\S]*`
*
*     -   match any whitespace and non-whitespace characters which occur `0` or more times
*
* -   `\]$`
*
*     -   match a `]` literal which is the last character
*
*
* Example matching strings:
*
* -   `'{}'`
* -   `'[]'`
* -   `'{adjlkfaj3743.,><\n\t\rdf}'`
* -   `'[adjlkfaj3743.,><\n\t\rdf]'`
* -   `'{"a":5}'`
*
* @constant
* @type {RegExp}
* @default /^\{[\s\S]*\}$|^\[[\s\S]*\]$/
*/

/**
* Detects whether an environment returns the expected internal class of the `arguments` object.
*
* @private
* @returns {boolean} boolean indicating whether an environment behaves as expected
*
* @example
* var bool = detect();
* // returns <boolean>
*/

/**
* Determine (nested) array dimensions.
*
* @module @stdlib/array/shape
*
* @example
* var arrayShape = require( '@stdlib/array/shape' );
*
* var arr = [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ];
*
* var shape = arrayShape( arr );
* // returns [ 3, 3 ]
*
* @example
* var arrayShape = require( '@stdlib/array/shape' );
*
* var arr = [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8 ] ];
*
* var shape = arrayShape( arr );
* // returns [ 3 ]
*
* @example
* var arrayShape = require( '@stdlib/array/shape' );
*
* var arr = [ [ 1, 2, 3 ], [ 4, 5, 6 ], null ];
*
* var shape = arrayShape( arr );
* // returns [ 3 ]
*/

/**
* Determine a value's type.
*
* @module @stdlib/utils/type-of
*
* @example
* var typeOf = require( '@stdlib/utils/type-of' );
*
* var str = typeOf( 'a' );
* // returns 'string'
*
* str = typeOf( 5 );
* // returns 'number'
*/

/**
* Determine if an array data type can be cast to another array data type according to a specified casting rule.
*
* @module @stdlib/ndarray/base/assert/is-allowed-data-type-cast
*
* @example
* var isAllowedCast = require( '@stdlib/ndarray/base/assert/is-allowed-data-type-cast' );
*
* var bool = isAllowedCast( 'float32', 'float64', 'safe' );
* // returns true
*
* bool = isAllowedCast( 'float64', 'int32', 'safe' );
* // returns false
*/

/**
* Determine if an ndarray data type can be safely cast to another ndarray data type.
*
* @module @stdlib/ndarray/base/assert/is-safe-data-type-cast
*
* @example
* var isSafeCast = require( '@stdlib/ndarray/base/assert/is-safe-data-type-cast' );
*
* var bool = isSafeCast( 'float32', 'float64' );
* // returns true
*
* bool = isSafeCast( 'float64', 'int32' );
* // returns false
*/

/**
* Determine if an ndarray data type can be safely cast to, or is of the same "kind" as, another ndarray data type.
*
* @module @stdlib/ndarray/base/assert/is-same-kind-data-type-cast
*
* @example
* var isSameKindCast = require( '@stdlib/ndarray/base/assert/is-same-kind-data-type-cast' );
*
* var bool = isSameKindCast( 'float32', 'float64' );
* // returns true
*
* bool = isSameKindCast( 'uint16', 'int16' );
* // returns false
*/

/**
* Determine the index offset which specifies the location of the first indexed value in a multidimensional array based on a stride array.
*
* @module @stdlib/ndarray/strides2offset
*
* @example
* var strides2offset = require( '@stdlib/ndarray/base/strides2offset' );
*
* var shape = [ 2, 3, 10 ];
* var strides = [ 30, -10, 1 ];
*
* var offset = strides2offset( shape, strides );
* // returns 20
*/

/**
* Determine the name of a value's constructor.
*
* @module @stdlib/utils/constructor-name
*
* @example
* var constructorName = require( '@stdlib/utils/constructor-name' );
*
* var v = constructorName( 'a' );
* // returns 'String'
*
* v = constructorName( {} );
* // returns 'Object'
*
* v = constructorName( true );
* // returns 'Boolean'
*/

/**
* Determine the order of a multidimensional array based on a provided stride array.
*
* @module @stdlib/ndarray/base/strides2order
*
* @example
* var strides2order = require( '@stdlib/ndarray/base/strides2order' );
*
* var order = strides2order( [ 2, 1 ] );
* // returns 'row-major'
*
* order = strides2order( [ 1, 2 ] );
* // returns 'column-major'
*
* order = strides2order( [ 1, 1, 1 ] );
* // returns 'both'
*
* order = strides2order( [ 2, 3, 1 ] );
* // returns 'none'
*/

/**
* Determines (nested) array dimensions.
*
* @param {Array} arr - array
* @throws {TypeError} must provide an array
* @returns {Array} array shape
*
* @example
* var arr = [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ];
*
* var shape = arrayShape( arr );
* // returns [ 3, 3 ]
*
* @example
* var arr = [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8 ] ];
*
* var shape = arrayShape( arr );
* // returns [ 3 ]
*
* @example
* var arr = [ [ 1, 2, 3 ], [ 4, 5, 6 ], null ];
*
* var shape = arrayShape( arr );
* // returns [ 3 ]
*/

/**
* Determines a value's type.
*
* @param {*} v - input value
* @returns {string} string indicating the value's type
*/

/**
* Determines if an array is column-major contiguous.
*
* @private
* @param {string} order - **inferred** array order
* @param {boolean} contiguous - boolean indicating is an array is contiguous
* @returns {boolean} boolean indicating if an array is column-major contiguous
*/

/**
* Determines if an array is contiguous.
*
* @private
* @param {NonNegativeInteger} len - array length
* @param {NonNegativeIntegerArray} shape - array shape
* @param {IntegerArray} strides - stride array
* @param {NonNegativeInteger} offset - index offset
* @param {integer} iterationOrder - iteration order
* @returns {boolean} boolean indicating if an array is contiguous
*/

/**
* Determines if an array is row-major contiguous.
*
* @private
* @param {string} order - **inferred** array order
* @param {boolean} contiguous - boolean indicating is an array is contiguous
* @returns {boolean} boolean indicating if an array is row-major contiguous
*/

/**
* Determines the name of a value's constructor.
*
* @param {*} v - input value
* @returns {string} name of a value's constructor
*
* @example
* var v = constructorName( 'a' );
* // returns 'String'
*
* @example
* var v = constructorName( 5 );
* // returns 'Number'
*
* @example
* var v = constructorName( null );
* // returns 'Null'
*
* @example
* var v = constructorName( undefined );
* // returns 'Undefined'
*
* @example
* var v = constructorName( function noop() {} );
* // returns 'Function'
*/

/**
* Determines the order of a multidimensional array based on a provided stride array.
*
* @param {IntegerArray} strides - stride array
* @returns {string} order
*
* @example
* var strides2order = require( '@stdlib/ndarray/base/strides2order' );
*
* var order = strides2order( [ 2, 1 ] );
* // returns 'row-major'
*
* order = strides2order( [ 1, 2 ] );
* // returns 'column-major'
*
* order = strides2order( [ 1, 1, 1 ] );
* // returns 'both'
*
* order = strides2order( [ 2, 3, 1 ] );
* // returns 'none'
*/

/**
* Determines whether an environment throws when comparing to the prototype of a value's constructor (e.g., [IE9][1]).
*
* [1]: https://stackoverflow.com/questions/7688070/why-is-comparing-the-constructor-property-of-two-windows-unreliable
*
* @private
* @returns {boolean} boolean indicating whether an environment is buggy
*/

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* ## Notes
*
* The difference is
*
* ```tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/constants/math/float64-eps' );
* // returns 2.220446049250313e-16
*/

/**
* Discrete uniform distribution pseudorandom numbers.
*
* @module @stdlib/random/base/discrete-uniform
*
* @example
* var discreteUniform = require( '@stdlib/random/base/discrete-uniform' );
*
* var v = discreteUniform( 1, 10 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/discrete-uniform' ).factory;
* var discreteUniform = factory( -5, 5, {
*     'seed': 297
* });
*
* var v = discreteUniform();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/discrete-uniform' ).factory;
* var discreteUniform = factory({
*     'seed': 297
* });
*
* var v = discreteUniform( -5, 5 );
* // returns <number>
*/

/**
* Displays a random video from a list of videos.
*
* @property {Array<string>} videos - video URLs
*/

/**
* Displays a timer that will trigger a predefined callback when the time is up. An example use case is the timing of quizzes.
*
* @property {boolean} active - flag that can be toggled to start or pause the timer
* @property {number} duration - duration in seconds for the timer
* @property {boolean} invisible - controls whether the timer should be hidden
* @property {string} id - the unique `string` ID for the timer. If an ID is set, the timer component is persistent over page refreshes
* @property {string} legend - text displayed in front of the timer
* @property {Object} style - CSS inline styles
* @property {Function} onTimeUp - callback invoked when the timer runs out
*/

/**
* Double-precision floating-point negative infinity.
*
* ## Notes
*
* Double-precision floating-point negative infinity has the bit sequence
*
* ```binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/constants/math/float64-ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/constants/math/float64-ninf' );
* // returns -Infinity
*/

/**
* Double-precision floating-point positive infinity.
*
* ## Notes
*
* Double-precision floating-point positive infinity has the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/constants/math/float64-pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/constants/math/float64-pinf' );
* // returns Infinity
*/

/**
* Draws a cardinal spline through given point array. Points must be arranged
* as: [x1, y1, x2, y2, ..., xn, yn]. It adds the points to the current path.
*
* There must be a minimum of two points in the input array but the function
* is only useful where there are three points or more.
*
* The method continues previous path of the context. If you don't want that
* then you need to use moveTo() with the first point from the input array.
*
* The points for the cardinal spline are returned as a new array.
*
* @param {CanvasRenderingContext2D} ctx - context to use
* @param {Array} points - point array
* @param {integer} width - canvas width
* @param {integer} height - canvas height
* @param {number} [tension=0.9] - tension. Typically between [0.0, 1.0] but can be exceeded
* @param {number} [numOfSeg=30] - number of segments between two points (line resolution)
* @param {boolean} [close=false] - Close the ends making the line continuous
* @returns {Float32Array} New array with the calculated points that was added to the path
*/

/**
* Dummy constructor.
*
* @private
*/

/**
* Dummy function.
*
* @private
*/

/**
* Escape a regular expression string or pattern.
*
* @module @stdlib/utils/escape-regexp-string
*
* @example
* var rescape = require( '@stdlib/utils/escape-regexp-string' );
*
* var str = rescape( '[A-Z]*' );
* // returns '\\[A\\-Z\\]\\*'
*/

/**
* Escapes a regular expression string.
*
* @param {string} str - regular expression string
* @throws {TypeError} first argument must be a string primitive
* @returns {string} escaped string
*
* @example
* var str = rescape( '[A-Z]*' );
* // returns '\\[A\\-Z\\]\\*'
*/

/**
* Euler's number.
*
* @constant
* @type {number}
* @default 2.718281828459045
* @see [OEIS]{@link https://oeis.org/A001113}
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/E_(mathematical_constant)}
*/

/**
* Euler's number.
*
* @module @stdlib/constants/math/float64-e
* @type {number}
*
* @example
* var E = require( '@stdlib/constants/math/float64-e' );
* // returns 2.718281828459045
*/

/**
* Evaluate `bˣ - 1`.
*
* @module @stdlib/math/base/special/powm1
*
* @example
* var powm1 = require( '@stdlib/math/base/special/powm1' );
*
* var y = powm1( 2.0, 3.0 );
* // returns 7.0
*
* y = powm1( 4.0, 0.5 );
* // returns 1.0
*
* y = powm1( 0.0, 100.0 );
* // returns -1.0
*
* y = powm1( 100.0, 0.0 );
* // returns 0.0
*
* y = powm1( 0.0, 0.0 );
* // returns 0.0
*
* y = powm1( 3.141592653589793, 5.0 );
* // returns ~305.0197
*
* y = powm1( NaN, 3.0 );
* // returns NaN
*
* y = powm1( 5.0, NaN );
* // returns NaN
*/

/**
* Evaluate a polynomial.
*
* @module @stdlib/math/base/tools/evalpoly
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var polyval = evalpoly.factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/

/**
* Evaluate the beta function.
*
* @module @stdlib/math/base/special/beta
*
* @example
* var beta = require( '@stdlib/math/base/special/beta' );
*
* var v = beta( 0.0, 0.5 );
* // returns Infinity
*
* v = beta( 1.0, 1.0 );
* // returns 1.0
*
* v = beta( -1.0, 2.0 );
* // returns NaN
*
* v = beta( 5.0, 0.2 );
* // returns ~3.382
*
* v = beta( 4.0, 1.0 );
* // returns 0.25
*
* v = beta( NaN, 2.0 );
* // returns NaN
*/

/**
* Evaluate the beta function.
*
* @param {NonNegativeNumber} a - input value
* @param {NonNegativeNumber} b - input value
* @returns {number} evaluated beta function
*
* @example
* var v = beta( 0.0, 0.5 );
* // returns Infinity
*
* @example
* var v = beta( 1.0, 1.0 );
* // returns 1.0
*
* @example
* var v = beta( -1.0, 2.0 );
* // returns NaN
*
* @example
* var v = beta( 5.0, 0.2 );
* // returns ~3.382
*
* @example
* var v = beta( 4.0, 1.0 );
* // returns 0.25
*
* @example
* var v = beta( NaN, 2.0 );
* // returns NaN
*/

/**
* Evaluate the binary logarithm (base two).
*
* @module @stdlib/math/base/special/log2
*
* @example
* var log2 = require( '@stdlib/math/base/special/log2' );
*
* var v = log2( 4.0 );
* // returns 2.0
*
* v = log2( 8.0 );
* // returns 3.0
*
* v = log2( 0.0 );
* // returns -Infinity
*
* v = log2( Infinity );
* // returns Infinity
*
* v = log2( NaN );
* // returns NaN
*
* v = log2( -4.0 );
* // returns NaN
*/

/**
* Evaluate the common logarithm (base ten).
*
* @module @stdlib/math/base/special/log10
*
* @example
* var log10 = require( '@stdlib/math/base/special/log10' );
*
* var v = log10( 100.0 );
* // returns ~0.602
*
* v = log10( 8.0 );
* // returns ~0.903
*
* v = log10( 0.0 );
* // returns -Infinity
*
* v = log10( Infinity );
* // returns Infinity
*
* v = log10( NaN );
* // returns NaN
*
* v = log10( -4.0 );
* // returns NaN
*/

/**
* Evaluate the complementary error function.
*
* @module @stdlib/math/base/special/erfc
*
* @example
* var erfc = require( '@stdlib/math/base/special/erfc' );
*
* var y = erfc( 2.0 );
* // returns ~0.0047
*
* y = erfc( -1.0 );
* // returns ~1.8427
*
* y = erfc( 0.0 );
* // returns 1.0
*
* y = erfc( Infinity );
* // returns 0.0
*
* y = erfc( -Infinity );
* // returns 2.0
*
* y = erfc( NaN );
* // returns NaN
*/

/**
* Evaluate the cumulative distribution function (CDF) for an F distribution.
*
* @module @stdlib/stats/base/dists/f/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/f/cdf' );
*
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.608
*
* y = cdf( 2.0, 8.0, 4.0 );
* // returns ~0.737
*
* y = cdf( -1.0, 2.0, 2.0 );
* // returns 0.0
*
* var mycdf = cdf.factory( 10.0, 2.0 );
*
* y = mycdf( 10.0 );
* // returns ~0.906
*
* y = mycdf( 8.0 );
* // returns ~0.884
*/

/**
* Evaluate the exponential function.
*
* @module @stdlib/math/base/special/pow
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var v = pow( 2.0, 3.0 );
* // returns 8.0
*
* v = pow( 4.0, 0.5 );
* // returns 2.0
*
* v = pow( 100.0, 0.0 );
* // returns 1.0
*
* v = pow( 3.141592653589793, 5.0 );
* // returns ~306.0197
*
* v = pow( 3.141592653589793, -0.2 );
* // returns ~0.7954
*
* v = pow( NaN, 3.0 );
* // returns NaN
*
* v = pow( 5.0, NaN );
* // returns NaN
*
* v = pow( NaN, NaN );
* // returns NaN
*/

/**
* Evaluate the factorial function.
*
* @module @stdlib/math/base/special/factorial
*
* @example
* var factorial = require( '@stdlib/math/base/special/factorial' );
*
* var v = factorial( 3.0 );
* // returns 6.0
*
* v = factorial( -1.5 );
* // returns ~-3.545
*
* v = factorial( -0.5 );
* // returns ~1.772
*
* v = factorial( 0.5 );
* // returns ~0.886
*
* v = factorial( -10.0 );
* // returns NaN
*
* v = factorial( 171.0 );
* // returns Infinity
*
* v = factorial( NaN );
* // returns NaN
*/

/**
* Evaluate the gamma function.
*
* @module @stdlib/math/base/special/gamma
*
* @example
* var gamma = require( '@stdlib/math/base/special/gamma' );
*
* var v = gamma( 4.0 );
* // returns 6.0
*
* v = gamma( -1.5 );
* // returns ~2.363
*
* v = gamma( -0.5 );
* // returns ~-3.545
*
* v = gamma( 0.5 );
* // returns ~1.772
*
* v = gamma( 0.0 );
* // returns Infinity
*
* v = gamma( -0.0 );
* // returns -Infinity
*
* v = gamma( NaN );
* // returns NaN
*/

/**
* Evaluate the incomplete beta function and its first derivative.
*
* @module @stdlib/math/base/special/kernel-betainc
*
* @example
* var kernelBetainc = require( '@stdlib/math/base/special/kernel-betainc' );
*
* var out = kernelBetainc( 0.5, 2.0, 2.0, false, false );
* // returns [ ~0.083, ~1.5 ]
*
* out = kernelBetainc( 0.2, 1.0, 2.0, true, false );
* // returns [ 0.32, 1.6 ]
*
* var arr = new Array( 2 );
* out = kernelBetainc( arr, 0.2, 1.0, 2.0, true, true );
* // returns [ 0.64, 1.6 ]
*
* var bool = ( arr === out );
* // returns true
*/

/**
* Evaluate the incomplete beta function.
*
* @module @stdlib/math/base/special/betainc
*
* @example
* var betainc = require( '@stdlib/math/base/special/betainc' );
*
* var y = betainc( 0.5, 2.0, 2.0 );
* // returns 0.5
*
* y = betainc( 0.5, 2.0, 2.0, false );
* // returns ~0.083
*
* y = betainc( 0.2, 1.0, 2.0 );
* // returns 0.36
*
* y = betainc( 0.2, 1.0, 2.0, true, true );
* // returns 0.64
*/

/**
* Evaluate the incomplete gamma function.
*
* @module @stdlib/math/base/special/gammainc
*
* @example
* var gammainc = require( '@stdlib/math/base/special/gammainc' );
*
* var v = gammainc( 6.0, 2.0 );
* // returns ~0.9826
*
* v = gammainc( 1.0, 2.0, true, true );
* // returns ~0.7358
*
* v = gammainc( 7.0, 5.0 );
* // returns ~0.8270
*
* v = gammainc( 7.0, 5.0, false );
* // returns ~19.8482
*
* v = gammainc( NaN, 2.0 );
* // returns NaN
*
* v = gammainc( 6.0, NaN );
* // returns NaN
*/

/**
* Evaluate the inverse complementary error function.
*
* @module @stdlib/math/base/special/erfcinv
*
* @example
* var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
*
* var y = erfcinv( 0.5 );
* // returns ~0.4769
*
* y = erfcinv( 0.8 );
* // returns ~-0.1791
*
* y = erfcinv( 0.0 );
* // returns Infinity
*
* y = erfcinv( 2.0 );
* // returns -Infinity
*
* y = erfcinv( NaN );
* // returns NaN
*/

/**
* Evaluate the inverse error function.
*
* @module @stdlib/math/base/special/erfinv
*
* @example
* var erfinv = require( '@stdlib/math/base/special/erfinv' );
*
* var y = erfinv( 0.5 );
* // returns ~0.4769
*
* y = erfinv( 0.8 );
* // returns ~0.9062
*
* y = erfinv( 0.0 );
* // returns 0.0
*
* y = erfinv( -0.0 );
* // returns -0.0
*
* y = erfinv( -1.0 );
* // returns -Infinity
*
* y = erfinv( 1.0 );
* // returns Infinity
*
* y = erfinv( NaN );
* // returns NaN
*/

/**
* Evaluate the inverse of the incomplete beta function.
*
* @module @stdlib/math/base/special/kernel-betaincinv
*
* @example
* var kernelBetaincinv = require( '@stdlib/math/base/special/kernel-betaincinv' );
*
* var y = kernelBetaincinv( 3.0, 3.0, 0.2, 0.8 );
* // returns [ ~0.327, ~0.673 ]
*
* y = kernelBetaincinv( 3.0, 3.0, 0.4, 0.6 );
* // returns [ ~0.446, ~0.554 ]
*
* y = kernelBetaincinv( 1.0, 6.0, 0.4, 0.6 );
* // returns [ ~0.082, ~0.918 ]
*
* y = kernelBetaincinv( 1.0, 6.0, 0.8, 0.2 );
* // returns [ ~0.235, ~0.765 ]
*/

/**
* Evaluate the lognormal distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/lognormal/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/lognormal/cdf' );
*
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.756
*
* y = cdf( 5.0, 10.0, 3.0 );
* // returns ~0.003
*
* var mycdf = cdf.factory( 3.0, 1.5 );
*
* y = mycdf( 1.0 );
* // returns ~0.023
*
* y = mycdf( 4.0 );
* // returns ~0.141
*/

/**
* Evaluate the lower incomplete gamma integral via a series expansion and divide by `gamma(z)` to normalize.
*
* @private
* @param {number} a - function parameter
* @param {number} z - function parameter
* @returns {number} function value
*/

/**
* Evaluate the n-term Chebyshev series at `x`.
*
* ## References
*
* -   Broucke, Roger. 1973. "Algorithm: Ten Subroutines for the Manipulation of Chebyshev Series." _Communications of the ACM_ 16 (4). New York, NY, USA: ACM: 254–56. doi:[10.1145/362003.362037](https://doi.org/10.1145/362003.362037).
* -   Fox, Leslie, and Ian Bax Parker. 1968. _Chebyshev polynomials in numerical analysis_. Oxford Mathematical Handbooks. London, United Kingdom: Oxford University Press. <https://books.google.com/books?id=F8NzsEtJCD0C>.
*
* @private
* @param {number} x - value at which the series is to be evaluated
* @returns {number} series value
*/

/**
* Evaluate the natural exponential function.
*
* @module @stdlib/math/base/special/exp
*
* @example
* var exp = require( '@stdlib/math/base/special/exp' );
*
* var v = exp( 4.0 );
* // returns ~54.5982
*
* v = exp( -9.0 );
* // returns ~1.234e-4
*
* v = exp( 0.0 );
* // returns 1.0
*
* v = exp( NaN );
* // returns NaN
*/

/**
* Evaluate the natural logarithm of \\(1+x\\).
*
* @module @stdlib/math/base/special/log1p
*
* @example
* var log1p = require( '@stdlib/math/base/special/log1p' );
*
* var v = log1p( 4.0 );
* // returns ~1.609
*
* v = log1p( -1.0 );
* // returns -Infinity
*
* v = log1p( 0.0 );
* // returns 0.0
*
* v = log1p( -0.0 );
* // returns -0.0
*
* v = log1p( -2.0 );
* // returns NaN
*
* v = log1p( NaN );
* // returns NaN
*/

/**
* Evaluate the natural logarithm of the beta function.
*
* @module @stdlib/math/base/special/betaln
*
* @example
* var betaln = require( '@stdlib/math/base/special/betaln' );
*
* var v = betaln( 0.0, 0.0 );
* // returns Infinity
*
* v = betaln( 1.0, 1.0 );
* // returns 0.0
*
* v = betaln( -1.0, 2.0 );
* // returns NaN
*
* v = betaln( 5.0, 0.2 );
* // returns ~1.218
*
* v = betaln( 4.0, 1.0 );
* // returns ~-1.386
*
* v = betaln( NaN, 2.0 );
* // returns NaN
*/

/**
* Evaluate the natural logarithm of the beta function.
*
* @param {NonNegativeNumber} a - first input value
* @param {NonNegativeNumber} b - second input value
* @returns {number} natural logarithm of beta function
*
* @example
* var v = betaln( 0.0, 0.0 );
* // returns Infinity
*
* @example
* var v = betaln( 1.0, 1.0 );
* // returns 0.0
*
* @example
* var v = betaln( -1.0, 2.0 );
* // returns NaN
*
* @example
* var v = betaln( 5.0, 0.2 );
* // returns ~1.218
*
* @example
* var v = betaln( 4.0, 1.0 );
* // returns ~-1.386
*
* @example
* var v = betaln( NaN, 2.0 );
* // returns NaN
*/

/**
* Evaluate the natural logarithm of the gamma function.
*
* @module @stdlib/math/base/special/gammaln
*
* @example
* var gammaln = require( '@stdlib/math/base/special/gammaln' );
*
* var v = gammaln( 1.0 );
* // returns 0.0
*
* v = gammaln( 2.0 );
* // returns 0.0
*
* v = gammaln( 4.0 );
* // returns ~1.792
*
* v = gammaln( -0.5 );
* // returns ~1.266
*
* v = gammaln( 0.5 );
* // returns ~0.572
*
* v = gammaln( 0.0 );
* // returns Infinity
*
* v = gammaln( NaN );
* // returns NaN
*/

/**
* Evaluate the natural logarithm of the probability density function (PDF) for a lognormal distribution.
*
* @module @stdlib/stats/base/dists/lognormal/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/lognormal/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-1.852
*
* y = logpdf( 1.0, 0.0, 1.0 );
* // returns ~-0.919
*
* y = logpdf( 1.0, 3.0, 1.0 );
* // returns ~-5.419
*
* var mylogpdf = logpdf.factory( 4.0, 2.0 );
* y = mylogpdf( 10.0 );
* // returns ~-4.269
*
* y = mylogpdf( 2.0 );
* // returns ~-3.689
*/

/**
* Evaluate the natural logarithm.
*
* @module @stdlib/math/base/special/ln
*
* @example
* var ln = require( '@stdlib/math/base/special/ln' );
*
* var v = ln( 4.0 );
* // returns ~1.386
*
* v = ln( 0.0 );
* // returns -Infinity
*
* v = ln( Infinity );
* // returns Infinity
*
* v = ln( NaN );
* // returns NaN
*
* v = ln( -4.0 );
* // returns NaN
*/

/**
* Evaluate the probability density function (PDF) for a lognormal distribution.
*
* @module @stdlib/stats/base/dists/lognormal/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/lognormal/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.157
*
* y = pdf( 1.0, 0.0, 1.0 );
* // returns ~0.399
*
* y = pdf( 1.0, 3.0, 1.0 );
* // returns ~0.004
*
* var mypdf = pdf.factory( 4.0, 2.0 );
* y = mypdf( 10.0 );
* // returns ~0.014
*
* y = mypdf( 2.0 );
* // returns ~0.025
*/

/**
* Evaluate the quantile function for a Student's t distribution.
*
* @module @stdlib/stats/base/dists/t/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/t/quantile' );
*
* var y = quantile( 0.8, 1.0 );
* // returns ~1.376
*
* y = quantile( 0.1, 1.0 );
* // returns ~-3.078
*
* y = quantile( 0.5, 0.1 );
* // returns 0.0
*
* var myquantile = quantile.factory( 4.0 );
*
* y = myquantile( 0.2 );
* // returns ~-0.941
*
* y = myquantile( 0.9 );
* // returns ~1.533
*/

/**
* Evaluate the quantile function for a lognormal distribution.
*
* @module @stdlib/stats/base/dists/lognormal/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/lognormal/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~2.32
*
* y = quantile( 0.5, 4.0, 2.0 );
* // returns ~54.598
*
* var myquantile = quantile.factory( 4.0, 2.0 );
*
* y = myquantile( 0.2 );
* // returns ~10.143
*
* y = myquantile( 0.8 );
* // returns ~293.901
*/

/**
* Evaluate the signum function.
*
* @module @stdlib/math/base/special/signum
*
* @example
* var signum = require( '@stdlib/math/base/special/signum' );
*
* var sign = signum( -5.0 );
* // returns -1.0
*
* sign = signum( 5.0 );
* // returns 1.0
*
* sign = signum( -0.0 );
* // returns -0.0
*
* sign = signum( 0.0 );
* // returns 0.0
*
* sign = signum( NaN );
* // returns NaN
*/

/**
* Evaluate the tangent of a number.
*
* @module @stdlib/math/base/special/tan
*
* @example
* var tan = require( '@stdlib/math/base/special/tan' );
*
* var v = tan( 0.0 );
* // returns ~0.0
*
* v = tan( -3.141592653589793/4.0 );
* // returns ~-1.0
*
* v = tan( 3.141592653589793/4.0 );
* // returns ~1.0
*
* v = tan( NaN );
* // returns NaN
*/

/**
* Evaluates Student's t quantiles via a body series expansion. Tail and body series are due to Shaw.
*
* ## References
*
* -   Shaw, William T. 2006. "Sampling Student's T distribution – use of the inverse cumulative distribution function." _Journal of Computational Finance_ 9 (4): 37–73. [www.mth.kcl.ac.uk/~shaww/web\_page/papers/Tdistribution06.pdf](www.mth.kcl.ac.uk/~shaww/web_page/papers/Tdistribution06.pdf).
*
* @private
* @param {PositiveNumber} df - degrees of freedom
* @param {Probability} u - input probability
* @returns {number} function value
*/

/**
* Evaluates Student's t quantiles via a method due to Hill.
*
* ## References
*
* -   Hill, G. W. 1970. "Algorithm 396: Student's T-Quantiles." _Communications of the ACM_ 13 (10). New York, NY, USA: ACM: 619–20. doi:[10.1145/355598.355600](https://doi.org/10.1145/355598.355600).
*
* @private
* @param {PositiveNumber} ndf - degrees of freedom
* @param {Probability} u - input probability
* @returns {number} function value
*/

/**
* Evaluates Student's t quantiles via a tail series expansion. Tail and body series are due to Shaw.
*
* ## References
*
* -   Shaw, William T. 2006. "Sampling Student's T distribution – use of the inverse cumulative distribution function." _Journal of Computational Finance_ 9 (4): 37–73. [www.mth.kcl.ac.uk/~shaww/web\_page/papers/Tdistribution06.pdf](www.mth.kcl.ac.uk/~shaww/web_page/papers/Tdistribution06.pdf).
*
* @private
* @param {number} df - degrees of freedom
* @param {number} v - function value
* @returns {number} tail value
*/

/**
* Evaluates Student's t quantiles.
*
* @private
* @param {PositiveNumber} df - degrees of freedom
* @param {Probability} u - input probability
* @param {Probability} v - probability equal to `1-u`
* @returns {number} function value
*/

/**
* Evaluates `bˣ - 1`.
*
* @param {number} b - base
* @param {number} x - exponent
* @returns {number} function value
*
* @example
* var y = powm1( 2.0, 3.0 );
* // returns 7.0
*
* @example
* var y = powm1( 4.0, 0.5 );
* // returns 1.0
*
* @example
* var y = powm1( 0.0, 100.0 );
* // returns -1.0
*
* @example
* var y = powm1( 100.0, 0.0 );
* // returns 0.0
*
* @example
* var y = powm1( 0.0, 0.0 );
* // returns 0.0
*
* @example
* var y = powm1( 3.141592653589793, 5.0 );
* // returns ~305.0197
*
* @example
* var y = powm1( NaN, 3.0 );
* // returns NaN
*
* @example
* var y = powm1( 5.0, NaN );
* // returns NaN
*/

/**
* Evaluates a continued fraction expansion.
*
* ```text
*           a1
*      ---------------
*      b1 +     a2
*           ----------
*            b2 +   a3
*                -----
*                b3 + ...
* ```
*
* @private
* @param {Function} gen - function giving terms of continued fraction expansion
* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} evaluated expansion
*/

/**
* Evaluates a continued fraction expansion.
*
* ```text
*      b0 +    a1
*      ---------------
*      b1 +     a2
*           ----------
*           b2 +   a3
*                -----
*                b3 + ...
* ```
*
* @private
* @param {Function} gen - function giving terms of continued fraction expansion
* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} evaluated expansion
*/

/**
* Evaluates a continued fraction expansion.
*
* ```text
*      b0 +   a1
*      ---------------
*      b1 +   a2
*           ----------
*           b2 +   a3
*                -----
*                b3 + ...
* ```
*
* @private
* @param {Function} gen - function giving terms of continued fraction expansion
* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} evaluated expansion
*/

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*
* @example
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*/

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/

/**
* Evaluates the `eps1` function.
*
* @private
* @param {number} eta - eta value
* @returns {number} function value
*/

/**
* Evaluates the `eps2` function.
*
* @private
* @param {number} eta - eta value
* @returns {number} function value
*/

/**
* Evaluates the `eps3` function.
*
* @private
* @param {number} eta - eta value
* @returns {number} function value
*/

/**
* Evaluates the binary logarithm (base two).
*
* @param {NonNegativeNumber} x - input value
* @returns {number} function value
*
* @example
* var v = log2( 4.0 );
* // returns 2.0
*
* @example
* var v = log2( 8.0 );
* // returns 3.0
*
* @example
* var v = log2( 0.0 );
* // returns -Infinity
*
* @example
* var v = log2( Infinity );
* // returns Infinity
*
* @example
* var v = log2( NaN );
* // returns NaN
*
* @example
* var v = log2( -4.0 );
* // returns NaN
*/

/**
* Evaluates the common logarithm (base ten).
*
* @param {NonNegativeNumber} x - input value
* @returns {number} function value
*
* @example
* var v = log10( 4.0 );
* // returns ~0.602
*
* @example
* var v = log10( 8.0 );
* // returns ~0.903
*
* @example
* var v = log10( 0.0 );
* // returns -Infinity
*
* @example
* var v = log10( Infinity );
* // returns Infinity
*
* @example
* var v = log10( NaN );
* // returns NaN
*
* @example
* var v = log10( -4.0 );
* // returns NaN
*/

/**
* Evaluates the complementary error function.
*
* ```tex
* \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}} \int^{x}_{0} e^{-t^2}\ \mathrm{dt}
* ```
*
* Note that
*
* ```tex
* \begin{align*}
* \operatorname{erfc}(x) &= 1 - \operatorname{erf}(x) \\
* \operatorname{erf}(-x) &= -\operatorname{erf}(x) \\
* \operatorname{erfc}(-x) &= 2 - \operatorname{erfc}(x)
* \end{align*}
* ```
*
* ## Method
*
* 1.  For \\(|x| \in [0, 0.84375)\\),
*
*     ```tex
*     \operatorname{erf}(x) = x + x \cdot \operatorname{R}(x^2)
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     1 - \operatorname{erf}(x) & \textrm{if}\ x \in (-.84375,0.25) \\
*     0.5 + ((0.5-x)-x \mathrm{R}) & \textrm{if}\ x \in [0.25,0.84375)
*     \end{cases}
*     ```
*
*     where \\(R = P/Q\\) and where \\(P\\) is an odd polynomial of degree \\(8\\) and \\(Q\\) is an odd polynomial of degree \\(10\\).
*
*     ```tex
*     \biggl| \mathrm{R} - \frac{\operatorname{erf}(x)-x}{x} \biggr| \leq 2^{-57.90}
*     ```
*
*     <!-- <note> -->
*
*     The formula is derived by noting
*
*     ```tex
*     \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}}\biggl(x - \frac{x^3}{3} + \frac{x^5}{10} - \frac{x^7}{42} + \ldots \biggr)
*     ```
*
*     and that
*
*     ```tex
*     \frac{2}{\sqrt{\pi}} = 1.128379167095512573896158903121545171688
*     ```
*
*     is close to unity. The interval is chosen because the fix point of \\(\operatorname{erf}(x)\\) is near \\(0.6174\\) (i.e., \\(\operatorname{erf(x)} = x\\) when \\(x\\) is near \\(0.6174\\)), and, by some experiment, \\(0.84375\\) is chosen to guarantee the error is less than one ulp for \\(\operatorname{erf}(x)\\).
*
*     <!-- </note> -->
*
* 2.  For \\(|x| \in [0.84375,1.25)\\), let \\(s = |x|-1\\), and \\(c = 0.84506291151\\) rounded to single (\\(24\\) bits)
*
*     ```tex
*     \operatorname{erf}(x) = \operatorname{sign}(x) \cdot \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr)
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     (1-c) - \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)} & \textrm{if}\ x > 0 \\
*     1 + \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr) & \textrm{if}\ x < 0
*     \end{cases}
*     ```
*
*     where
*
*     ```tex
*     \biggl|\frac{\mathrm{P1}}{\mathrm{Q1}} - (\operatorname{erf}(|x|)-c)\biggr| \leq 2^{-59.06}
*     ```
*
*     <!-- <note> -->
*
*     Here, we use the Taylor series expansion at \\(x = 1\\)
*
*     ```tex
*     \begin{align*}
*     \operatorname{erf}(1+s) &= \operatorname{erf}(1) + s\cdot \operatorname{poly}(s) \\
*     &= 0.845.. + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}
*     \end{align*}
*     ```
*
*     using a rational approximation to approximate
*
*     ```tex
*     \operatorname{erf}(1+s) - (c = (\mathrm{single})0.84506291151)
*     ```
*
*     <!-- </note> -->
*
*     Note that, for \\(x \in [0.84375,1.25)\\), \\(|\mathrm{P1}/\mathrm{Q1}| < 0.078\\), where
*
*     -   \\(\operatorname{P1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*     -   \\(\operatorname{Q1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*
* 3.  For \\(x \in [1.25,1/0.35)\\),
*
*     ```tex
*     \begin{align*}
*     \operatorname{erfc}(x) &= \frac{1}{x}e^{-x^2-0.5625+(\mathrm{R1}/\mathrm{S1})} \\
*     \operatorname{erf}(x) &= 1 - \operatorname{erfc}(x)
*     \end{align*}
*     ```
*
*     where
*
*     -   \\(\operatorname{R1}(z)\\) is a degree \\(7\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*     -   \\(\operatorname{S1}(z)\\) is a degree \\(8\\) polynomial in \\(z\\)
*
* 4.  For \\(x \in [1/0.35,28)\\),
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ x > 0 \\
*     2.0 - \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ -6 < x < 0 \\
*     2.0 - \mathrm{tiny} & \textrm{if}\ x \leq -6
*     \end{cases}
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erf}(x) = \begin{cases}
*     \operatorname{sign}(x) \cdot (1.0 - \operatorname{erfc}(x)) & \textrm{if}\ x < 6 \\
*     \operatorname{sign}(x) \cdot (1.0 - \mathrm{tiny}) & \textrm{otherwise}
*     \end{cases}
*     ```
*
*     where
*
*     -   \\(\operatorname{R2}(z)\\) is a degree \\(6\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*     -   \\(\operatorname{S2}(z)\\) is a degree \\(7\\) polynomial in \\(z\\)
*
* 5.  For \\(x \in [28, \infty)\\),
*
*     ```tex
*     \begin{align*}
*     \operatorname{erf}(x) &= \operatorname{sign}(x) \cdot (1 - \mathrm{tiny}) & \textrm{(raise inexact)}
*     \end{align*}
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     \mathrm{tiny} \cdot \mathrm{tiny} & \textrm{if}\ x > 0\ \textrm{(raise underflow)} \\
*     2 - \mathrm{tiny} & \textrm{if}\ x < 0
*     \end{cases}
*     ```
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{erf}(0) &= 0 \\
* \operatorname{erf}(-0) &= -0 \\
* \operatorname{erf}(\infty) &= 1 \\
* \operatorname{erf}(-\infty) &= -1 \\
* \operatorname{erfc}(0) &= 1 \\
* \operatorname{erfc}(\infty) &= 0 \\
* \operatorname{erfc}(-\infty) &= 2 \\
* \operatorname{erf}(\mathrm{NaN}) &= \mathrm{NaN} \\
* \operatorname{erfc}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align*}
* ```
*
*
* ## Notes
*
* -   To compute \\(\exp(-x^2-0.5625+(\mathrm{R}/\mathrm{S}))\\), let \\(s\\) be a single precision number and \\(s := x\\); then
*
*     ```tex
*     -x^2 = -s^2 + (s-x)(s+x)
*     ```
*
*     and
*
*     ```tex
*     e^{-x^2-0.5626+(\mathrm{R}/\mathrm{S})} = e^{-s^2-0.5625} e^{(s-x)(s+x)+(\mathrm{R}/\mathrm{S})}
*     ```
*
* -   `#4` and `#5` make use of the asymptotic series
*
*     ```tex
*     \operatorname{erfc}(x) \approx \frac{e^{-x^2}}{x\sqrt{\pi}} (1 + \operatorname{poly}(1/x^2))
*     ```
*
*     We use a rational approximation to approximate
*
*     ```tex
*     g(s) = f(1/x^2) = \ln(\operatorname{erfc}(x) \cdot x) - x^2 + 0.5625
*     ```
*
* -   The error bound for \\(\mathrm{R1}/\mathrm{S1}\\) is
*
*     ```tex
*     |\mathrm{R1}/\mathrm{S1} - f(x)| < 2^{-62.57}
*     ```
*
*     and for \\(\mathrm{R2}/\mathrm{S2}\\) is
*
*     ```tex
*     |\mathrm{R2}/\mathrm{S2} - f(x)| < 2^{-61.52}
*     ```
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erfc( 2.0 );
* // returns ~0.0047
*
* @example
* var y = erfc( -1.0 );
* // returns ~1.8427
*
* @example
* var y = erfc( 0.0 );
* // returns 1.0
*
* @example
* var y = erfc( Infinity );
* // returns 0.0
*
* @example
* var y = erfc( -Infinity );
* // returns 2.0
*
* @example
* var y = erfc( NaN );
* // returns NaN
*/

/**
* Evaluates the continued fraction approximation for the supplied series generator using the modified Lentz algorithm.
*
* ## References
*
* -   Lentz, William J. 1976. "Generating bessel functions in Mie scattering calculations using continued fractions." _Applied Optics_ 15 (3): 668–71. doi:[10.1364/AO.15.000668](https://doi.org/10.1364/AO.15.000668).
*
* @param {Function} generator - function returning terms of continued fraction expansion
* @param {Object} [options] - function options
* @param {PositiveInteger} [options.maxIter=1000000] - maximum number of iterations
* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {boolean} [options.keep=false] - whether to keep the leading b term
* @returns {number} value of continued fraction
*
* @example
* // Continued fraction for (e-1)^(-1):
* var gen = generator()
* var out = continuedFraction( gen );
* // returns ~0.582
*
* function generator() {
*    var i = 0;
*    return function() {
*        i++;
*        return [ i, i ];
*    };
* }
*/

/**
* Evaluates the continued fraction approximation for the supplied series generator using the modified Lentz algorithm.
*
* ## References
*
* -   Lentz, William J. 1976. "Generating bessel functions in Mie scattering calculations using continued fractions." _Applied Optics_ 15 (3): 668–71. doi:[10.1364/AO.15.000668](https://doi.org/10.1364/AO.15.000668).
*
* @param {Function} generator - function returning terms of continued fraction expansion
* @param {Object} [options] - function options
* @param {PositiveInteger} [options.maxIter=1000] - maximum number of iterations
* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {boolean} [options.keep=false] - whether to keep the leading b term
* @returns {number} value of continued fraction
*
* @example
* // Continued fraction for (e-1)^(-1):
* var gen = generator();
* var out = continuedFraction( gen );
* // returns ~0.582
*
* function* generator() {
*    var i = 0;
*    while ( true ) {
*        i++;
*        yield [ i, i ];
*    }
* }
*/

/**
* Evaluates the cumulative distribution function (CDF) for a Normal distribution with mean `mu` and standard deviation `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {Probability} evaluated cumulative distribution function
*
* @example
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.977
*
* @example
* var y = cdf( -1.0, -1.0, 2.0 );
* // returns 0.5
*
* @example
* var y = cdf( -1.0, 4.0, 2.0 );
* // returns ~0.006
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative standard deviation:
* var y = cdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/

/**
* Evaluates the cumulative distribution function (CDF) for a Student's t distribution with degrees of freedom `v` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} v - degrees of freedom
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.1 );
* // returns ~0.611
*
* @example
* var y = cdf( 1.0, 2.0 );
* // returns ~0.789
*
* @example
* var y = cdf( -1.0, 4.0 );
* // returns ~0.187
*
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/

/**
* Evaluates the cumulative distribution function (CDF) for a binomial distribution with number of trials `n` and success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 3.0, 20, 0.2 );
* // returns ~0.411
*
* @example
* var y = cdf( 21.0, 20, 0.2 );
* // returns 1.0
*
* @example
* var y = cdf( 5.0, 10, 0.4 );
* // returns ~0.834
*
* @example
* var y = cdf( 0.0, 10, 0.4 );
* // returns ~0.006
*
* @example
* var y = cdf( NaN, 20, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 20, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.5, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 20, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 20, 1.5 );
* // returns NaN
*/

/**
* Evaluates the cumulative distribution function (CDF) for a chi-squared distribution with degrees of freedom `k` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 3.0 );
* // returns ~0.428
*
* @example
* var y = cdf( 1.0, 0.5 );
* // returns ~0.846
*
* @example
* var y = cdf( -1.0, 4.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative degrees of freedom:
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/

/**
* Evaluates the cumulative distribution function (CDF) for a degenerate distribution with mean value `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of distribution
* @returns {Probability} evaluated cumulative distribution function
*
* @example
* var y = cdf( 2.0, 3.0 );
* // returns 0.0
*
* @example
* var y = cdf( 4.0, 3.0 );
* // returns 1.0
*
* @example
* var y = cdf( 3.0, 3.0 );
* // returns 1.0
*
* @example
* var y = cdf( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*/

/**
* Evaluates the cumulative distribution function (CDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.865
*
* @example
* var y = cdf( 2.0, 3.0, 1.0 );
* // returns ~0.323
*
* @example
* var y = cdf( -1.0, 2.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
*
* @example
* var y = cdf( -Infinity, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, -1.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.0, -1.0 );
* // returns NaN
*/

/**
* Evaluates the cumulative distribution function (CDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.756
*
* @example
* var y = cdf( 5.0, 10.0, 3.0 );
* // returns ~0.003
*
* @example
* var y = cdf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*/

/**
* Evaluates the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 9.0, 0.0, 10.0 );
* // returns 0.9
*
* @example
* var y = cdf( 0.5, 0.0, 2.0 );
* // returns 0.25
*
* @example
* var y = cdf( +Infinity, 2.0, 4.0 );
* // returns 1.0
*
* @example
* var y = cdf( -Infinity, 2.0, 4.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.0, 0.0 );
* // returns NaN
*/

/**
* Evaluates the cumulative distribution function (CDF) for an F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.608
*
* @example
* var y = cdf( 2.0, 8.0, 4.0 );
* // returns ~0.737
*
* @example
* var y = cdf( -1.0, 2.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
*
* @example
* var y = cdf( -Infinity, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, -1.0, 1.0 );
* // returns NaN
*/

/**
* Evaluates the cumulative distribution function (CDF) for an exponential distribution with rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.1 );
* // returns ~0.181
*
* @example
* var y = cdf( 1.0, 2.0 );
* // returns ~0.865
*
* @example
* var y = cdf( -1.0, 4.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative rate parameter:
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof LogNormal.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var lognormal = new LogNormal( 2.0, 4.0 );
*
* var v = lognormal.cdf( 0.5 );
* // returns ~0.25
*/

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/

/**
* Evaluates the exponential function when \\( y = \pm \infty\\).
*
* @private
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} function value
*
* @example
* var v = pow( -1.0, Infinity );
* // returns NaN
*
* @example
* var v = pow( -1.0, -Infinity  );
* // returns NaN
*
* @example
* var v = pow( 1.0, Infinity );
* // returns 1.0
*
* @example
* var v = pow( 1.0, -Infinity  );
* // returns 1.0
*
* @example
* var v = pow( 0.5, Infinity );
* // returns 0.0
*
* @example
* var v = pow( 0.5, -Infinity  );
* // returns Infinity
*
* @example
* var v = pow( 1.5, -Infinity  );
* // returns 0.0
*
* @example
* var v = pow( 1.5, Infinity );
* // returns Infinity
*/

/**
* Evaluates the exponential function when \\(|x| = 0\\).
*
* @private
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} function value
*
* @example
* var v = pow( 0.0, 2 );
* // returns 0.0
*
* @example
* var v = pow( -0.0, -9 );
* // returns -Infinity
*
* @example
* var v = pow( 0.0, -9 );
* // returns Infinity
*
* @example
* var v = pow( -0.0, 9 );
* // returns 0.0
*
* @example
* var v = pow( 0.0, -Infinity  );
* // returns Infinity
*
* @example
* var v = pow( 0.0, Infinity );
* // returns 0.0
*/

/**
* Evaluates the exponential function when \\(|y| > 2^64\\).
*
* @private
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} overflow or underflow result
*
* @example
* var v = pow( 9.0, 3.6893488147419103e19 );
* // returns Infinity
*
* @example
* var v = pow( -3.14, -3.6893488147419103e19 );
* // returns 0.0
*/

/**
* Evaluates the exponential function.
*
* ## Method
*
* 1.  Let \\(x = 2^n (1+f)\\).
*
* 2.  Compute \\(\operatorname{log2}(x)\\) as
*
*     ```tex
*     \operatorname{log2}(x) = w_1 + w_2
*     ```
*
*     where \\(w_1\\) has \\(53 - 24 = 29\\) bit trailing zeros.
*
* 3.  Compute
*
*     ```tex
*     y \cdot \operatorname{log2}(x) = n + y^\prime
*     ```
*
*     by simulating multi-precision arithmetic, where \\(|y^\prime| \leq 0.5\\).
*
* 4.  Return
*
*     ```tex
*     x^y = 2^n e^{y^\prime \cdot \mathrm{log2}}
*     ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* x^{\mathrm{NaN}} &= \mathrm{NaN} & \\
* (\mathrm{NaN})^y &= \mathrm{NaN} & \\
* 1^y &= 1 & \\
* x^0 &= 1 & \\
* x^1 &= x & \\
* (\pm 0)^\infty &= +0 & \\
* (\pm 0)^{-\infty} &= +\infty & \\
* (+0)^y &= +0 & \mathrm{if}\ y > 0 \\
* (+0)^y &= +\infty & \mathrm{if}\ y < 0 \\
* (-0)^y &= -\infty & \mathrm{if}\ y\ \mathrm{is\ an\ odd\ integer\ and}\ y < 0 \\
* (-0)^y &= +\infty & \mathrm{if}\ y\ \mathrm{is\ not\ an\ odd\ integer\ and}\ y < 0 \\
* (-0)^y &= -0 & \mathrm{if}\ y\ \mathrm{is\ an\ odd\ integer\ and}\ y > 0 \\
* (-0)^y &= +0 & \mathrm{if}\ y\ \mathrm{is\ not\ an\ odd\ integer\ and}\ y > 0 \\
* (-1)^{\pm\infty} &= \mathrm{NaN} & \\
* x^{\infty} &= +\infty & |x| > 1 \\
* x^{\infty} &= +0 & |x| < 1 \\
* x^{-\infty} &= +0 & |x| > 1 \\
* x^{-\infty} &= +\infty & |x| < 1 \\
* (-\infty)^y &= (-0)^y & \\
* \infty^y &= +0 & y < 0 \\
* \infty^y &= +\infty & y > 0 \\
* x^y &= \mathrm{NaN} & \mathrm{if}\ y\ \mathrm{is\ not\ a\ finite\ integer\ and}\ x < 0
* \end{align*}
* ```
*
* ## Notes
*
* -   \\(\operatorname{pow}(x,y)\\) returns \\(x^y\\) nearly rounded. In particular, \\(\operatorname{pow}(<\mathrm{integer}>,<\mathrm{integer}>)\\) **always** returns the correct integer, provided the value is representable.
* -   The hexadecimal values shown in the source code are the intended values for used constants. Decimal values may be used, provided the compiler will accurately convert decimal to binary in order to produce the hexadecimal values.
*
*
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} function value
*
* @example
* var v = pow( 2.0, 3.0 );
* // returns 8.0
*
* @example
* var v = pow( 4.0, 0.5 );
* // returns 2.0
*
* @example
* var v = pow( 100.0, 0.0 );
* // returns 1.0
*
* @example
* var v = pow( 3.141592653589793, 5.0 );
* // returns ~306.0197
*
* @example
* var v = pow( 3.141592653589793, -0.2 );
* // returns ~0.7954
*
* @example
* var v = pow( NaN, 3.0 );
* // returns NaN
*
* @example
* var v = pow( 5.0, NaN );
* // returns NaN
*
* @example
* var v = pow( NaN, NaN );
* // returns NaN
*/

/**
* Evaluates the factorial of `x`.
*
* @param {number} x - input value
* @returns {number} factorial
*
* @example
* var v = factorial( 3.0 );
* // returns 6.0
*
* @example
* var v = factorial( -1.5 );
* // returns ~-3.545
*
* @example
* var v = factorial( -0.5 );
* // returns ~1.772
*
* @example
* var v = factorial( 0.5 );
* // returns ~0.886
*
* @example
* var v = factorial( -10.0 );
* // returns NaN
*
* @example
* var v = factorial( 171.0 );
* // returns Infinity
*
* @example
* var v = factorial( NaN );
* // returns NaN
*/

/**
* Evaluates the gamma function using Stirling's formula. The polynomial is valid for \\(33 \leq x \leq 172\\).
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/

/**
* Evaluates the gamma function using a small-value approximation.
*
* @private
* @param {number} x - input value
* @param {number} z - scale factor
* @returns {number} function value
*/

/**
* Evaluates the gamma function.
*
* ## Method
*
* 1.  Arguments \\(|x| \leq 34\\) are reduced by recurrence and the function approximated by a rational function of degree \\(6/7\\) in the interval \\((2,3)\\).
* 2.  Large negative arguments are made positive using a reflection formula.
* 3.  Large arguments are handled by Stirling's formula.
*
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain    | # trials | peak    | rms     |
*     |:----------:|:---------:|:--------:|:-------:|:-------:|
*     | DEC        | -34,34    | 10000    | 1.3e-16 | 2.5e-17 |
*     | IEEE       | -170,-33  | 20000    | 2.3e-15 | 3.3e-16 |
*     | IEEE       | -33, 33   | 20000    | 9.4e-16 | 2.2e-16 |
*     | IEEE       | 33, 171.6 | 20000    | 2.3e-15 | 3.2e-16 |
*
* -   Error for arguments outside the test range will be larger owing to error amplification by the exponential function.
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = gamma( 4.0 );
* // returns 6.0
*
* @example
* var v = gamma( -1.5 );
* // returns ~2.363
*
* @example
* var v = gamma( -0.5 );
* // returns ~-3.545
*
* @example
* var v = gamma( 0.5 );
* // returns ~1.772
*
* @example
* var v = gamma( 0.0 );
* // returns Infinity
*
* @example
* var v = gamma( -0.0 );
* // returns -Infinity
*
* @example
* var v = gamma( NaN );
* // returns NaN
*/

/**
* Evaluates the incomplete beta function and its first derivative.
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {Probability} x - function input
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {boolean} invert - boolean indicating if the function should return the upper tail of the incomplete beta function instead
* @param {boolean} normalized - boolean indicating if the function should evaluate the regularized boolean beta function
* @returns {(Array|TypedArray|Object)} function value and first derivative
*
* @example
* var out = kernelBetainc( 0.5, 2.0, 2.0, false, false );
* // returns [ ~0.083, ~1.5 ]
*
* @example
* var out = kernelBetainc( 0.2, 1.0, 2.0, true, false );
* // returns [ 0.32, 1.6 ]
*
* @example
* var arr = new Array( 2 );
* var out = kernelBetainc( arr, 0.2, 1.0, 2.0, true, true );
* // returns [ 0.64, 1.6 ]
*
* var bool = ( arr === out );
* // returns true
*/

/**
* Evaluates the incomplete beta function and its first derivative. This function divides up the input range and selects the right implementation method for each domain.
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {Probability} x - function input
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {boolean} invert - boolean indicating if the function should return the upper tail of the incomplete beta function instead
* @param {boolean} normalized - boolean indicating if the function should evaluate the regularized boolean beta function
* @returns {(Array|TypedArray|Object)} function value and first derivative
*
* @example
* var out = ibetaImp( new Array( 2 ), 0.5, 2.0, 2.0, false, false );
* // returns [ ~0.083, ~1.5 ]
*
* @example
* var out = ibetaImp( new Array( 2 ), 0.2, 1.0, 2.0, true, false );
* // returns [ 0.32, 1.6 ]
*
* @example
* var out = ibetaImp( new Array( 2 ), 0.2, 1.0, 2.0, true, true );
* // returns [ 0.64, 1.6 ]
*/

/**
* Evaluates the incomplete beta function.
*
* @param {Probability} x - function parameter
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {boolean} [regularized=true] - boolean indicating if the function should evaluate the regularized or non-regularized incomplete beta function
* @param {boolean} [upper=false] - boolean indicating if the function should return the upper tail of the incomplete beta function
* @returns {number} function value
*
* @example
* var y = betainc( 0.5, 2.0, 2.0 );
* // returns 0.5
*
* @example
* var y = betainc( 0.5, 2.0, 2.0, false );
* // returns ~0.083
*
* @example
* var y = betainc( 0.2, 1.0, 2.0 );
* // returns 0.36
*/

/**
* Evaluates the incomplete beta via the continued fraction representation.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element
* @returns {number} incomplete beta value
*/

/**
* Evaluates the inverse complementary error function.
*
* Note that
*
* ```tex
* \operatorname{erfc^{-1}}(1-z) = \operatorname{erf^{-1}}(z)
* ```
*
* ## Method
*
* 1.  For \\(|x| \leq 0.5\\), we evaluate the inverse error function using the rational approximation
*
*     ```tex
*     \operatorname{erf^{-1}}(x) = x(x+10)(\mathrm{Y} + \operatorname{R}(x))
*     ```
*
*     where \\(Y\\) is a constant and \\(\operatorname{R}(x)\\) is optimized for a low absolute error compared to \\(|Y|\\).
*
*     <!-- <note> -->
*
*     Max error \\(2.001849\mbox{e-}18\\). Maximum deviation found (error term at infinite precision) \\(8.030\mbox{e-}21\\).
*
*     <!-- </note> -->
*
* 2.  For \\(0.5 > 1-|x| \geq 0\\), we evaluate the inverse error function using the rational approximation
*
*     ```tex
*     \operatorname{erf^{-1}} = \frac{\sqrt{-2 \cdot \ln(1-x)}}{\mathrm{Y} + \operatorname{R}(1-x)}
*     ```
*
*     where \\(Y\\) is a constant, and \\(\operatorname{R}(q)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*     <!-- <note> -->
*
*     Max error \\(7.403372\mbox{e-}17\\). Maximum deviation found (error term at infinite precision) \\(4.811\mbox{e-}20\\).
*
*     <!-- </note> -->
*
* 3.  For \\(1-|x| < 0.25\\), we have a series of rational approximations all of the general form
*
*     ```tex
*     p = \sqrt{-\ln(1-x)}
*     ```
*
*     Accordingly, the result is given by
*
*     ```tex
*     \operatorname{erf^{-1}}(x) = p(\mathrm{Y} + \operatorname{R}(p-B))
*     ```
*
*     where \\(Y\\) is a constant, \\(B\\) is the lowest value of \\(p\\) for which the approximation is valid, and \\(\operatorname{R}(x-B)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*     <!-- <note> -->
*
*     Almost all code will only go through the first or maybe second approximation.  After that we are dealing with very small input values.
*
*     -   If \\(p < 3\\), max error \\(1.089051\mbox{e-}20\\).
*     -   If \\(p < 6\\), max error \\(8.389174\mbox{e-}21\\).
*     -   If \\(p < 18\\), max error \\(1.481312\mbox{e-}19\\).
*     -   If \\(p < 44\\), max error \\(5.697761\mbox{e-}20\\).
*     -   If \\(p \geq 44\\), max error \\(1.279746\mbox{e-}20\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     The Boost library can accommodate \\(80\\) and \\(128\\) bit long doubles. JavaScript only supports a \\(64\\) bit double (IEEE 754). Accordingly, the smallest \\(p\\) (in JavaScript at the time of this writing) is \\(\sqrt{-\ln(\sim5\mbox{e-}324)} = 27.284429111150214\\).
*
*     <!-- </note> -->
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erfcinv( 0.5 );
* // returns ~0.4769
*
* @example
* var y = erfcinv( 0.8 );
* // returns ~0.1791
*
* @example
* var y = erfcinv( 0.0 );
* // returns Infinity
*
* @example
* var y = erfcinv( 2.0 );
* // returns -Infinity
*
* @example
* var y = erfcinv( NaN );
* // returns NaN
*/

/**
* Evaluates the inverse error function.
*
* ## Method
*
* 1.  For \\(|x| \leq 0.5\\), we evaluate the inverse error function using the rational approximation
*
*     ```tex
*     \operatorname{erf^{-1}}(x) = x(x+10)(\mathrm{Y} + \operatorname{R}(x))
*     ```
*
*     where \\(Y\\) is a constant and \\(\operatorname{R}(x)\\) is optimized for a low absolute error compared to \\(|Y|\\).
*
*     <!-- <note> -->
*
*     Max error \\(2.001849\mbox{e-}18\\). Maximum deviation found (error term at infinite precision) \\(8.030\mbox{e-}21\\).
*
*     <!-- </note> -->
*
* 2.  For \\(0.5 > 1-|x| \geq 0\\), we evaluate the inverse error function using the rational approximation
*
*     ```tex
*     \operatorname{erf^{-1}} = \frac{\sqrt{-2 \cdot \ln(1-x)}}{\mathrm{Y} + \operatorname{R}(1-x)}
*     ```
*
*     where \\(Y\\) is a constant, and \\(\operatorname{R}(q)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*     <!-- <note> -->
*
*     Max error \\(7.403372\mbox{e-}17\\). Maximum deviation found (error term at infinite precision) \\(4.811\mbox{e-}20\\).
*
*     <!-- </note> -->
*
* 3.  For \\(1-|x| < 0.25\\), we have a series of rational approximations all of the general form
*
*     ```tex
*     p = \sqrt{-\ln(1-x)}
*     ```
*
*     Accordingly, the result is given by
*
*     ```tex
*     \operatorname{erf^{-1}}(x) = p(\mathrm{Y} + \operatorname{R}(p-B))
*     ```
*
*     where \\(Y\\) is a constant, \\(B\\) is the lowest value of \\(p\\) for which the approximation is valid, and \\(\operatorname{R}(x-B)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*     <!-- <note> -->
*
*     Almost all code will only go through the first or maybe second approximation.  After that we are dealing with very small input values.
*
*     -   If \\(p < 3\\), max error \\(1.089051\mbox{e-}20\\).
*     -   If \\(p < 6\\), max error \\(8.389174\mbox{e-}21\\).
*     -   If \\(p < 18\\), max error \\(1.481312\mbox{e-}19\\).
*     -   If \\(p < 44\\), max error \\(5.697761\mbox{e-}20\\).
*     -   If \\(p \geq 44\\), max error \\(1.279746\mbox{e-}20\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     The Boost library can accommodate \\(80\\) and \\(128\\) bit long doubles. JavaScript only supports a \\(64\\) bit double (IEEE 754). Accordingly, the smallest \\(p\\) (in JavaScript at the time of this writing) is \\(\sqrt{-\ln(\sim5\mbox{e-}324)} = 27.284429111150214\\).
*
*     <!-- </note> -->
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erfinv( 0.5 );
* // returns ~0.4769
*
* @example
* var y = erfinv( 0.8 );
* // returns ~0.9062
*
* @example
* var y = erfinv( 0.0 );
* // returns 0.0
*
* @example
* var y = erfinv( -0.0 );
* // returns -0.0
*
* @example
* var y = erfinv( -1.0 );
* // returns -Infinity
*
* @example
* var y = erfinv( 1.0 );
* // returns Infinity
*
* @example
* var y = erfinv( NaN );
* // returns NaN
*/

/**
* Evaluates the natural exponential function.
*
* ## Method
*
* 1.  We reduce \\( x \\) to an \\( r \\) so that \\( |r| \leq 0.5 \cdot \ln(2) \approx 0.34658 \\). Given \\( x \\), we find an \\( r \\) and integer \\( k \\) such that
*
*     ```tex
*     \begin{align*}
*     x &= k \cdot \ln(2) + r \\
*     |r| &\leq 0.5 \cdot \ln(2)
*     \end{align*}
*     ```
*
*     <!-- <note> -->
*
*     \\( r \\) can be represented as \\( r = \mathrm{hi} - \mathrm{lo} \\) for better accuracy.
*
*     <!-- </note> -->
*
* 2.  We approximate of \\( e^{r} \\) by a special rational function on the interval \\(\[0,0.34658]\\):
*
*     ```tex
*     \begin{align*}
*     R\left(r^2\right) &= r \cdot \frac{ e^{r}+1 }{ e^{r}-1 } \\
*     &= 2 + \frac{r^2}{6} - \frac{r^4}{360} + \ldots
*     \end{align*}
*     ```
*
*     We use a special Remes algorithm on \\(\[0,0.34658]\\) to generate a polynomial of degree \\(5\\) to approximate \\(R\\). The maximum error of this polynomial approximation is bounded by \\(2^{-59}\\). In other words,
*
*     ```tex
*     R(z) \sim 2 + P_1 z + P_2 z^2 + P_3 z^3 + P_4 z^4 + P_5 z^5
*     ```
*
*     where \\( z = r^2 \\) and
*
*     ```tex
*     \left|  2 + P_1 z + \ldots + P_5 z^5  - R(z) \right| \leq 2^{-59}
*     ```
*
*     <!-- <note> -->
*
*     The values of \\( P_1 \\) to \\( P_5 \\) are listed in the source code.
*
*     <!-- </note> -->
*
*     The computation of \\( e^{r} \\) thus becomes
*
*     ```tex
*     \begin{align*}
*     e^{r} &= 1 + \frac{2r}{R-r} \\
*           &= 1 + r + \frac{r \cdot R_1(r)}{2 - R_1(r)}\ \text{for better accuracy}
*     \end{align*}
*     ```
*
*     where
*
*     ```tex
*     R_1(r) = r - P_1\ r^2 + P_2\ r^4 + \ldots + P_5\ r^{10}
*     ```
*
* 3.  We scale back to obtain \\( e^{x} \\). From step 1, we have
*
*     ```tex
*     e^{x} = 2^k e^{r}
*     ```
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* e^\infty &= \infty \\
* e^{-\infty} &= 0 \\
* e^{\mathrm{NaN}} &= \mathrm{NaN} \\
* e^0 &= 1\ \mathrm{is\ exact\ for\ finite\ argument\ only}
* \end{align*}
* ```
*
* ## Notes
*
* -   According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
*
* -   For an IEEE double,
*
*     -   if \\(x > 7.09782712893383973096\mbox{e+}02\\), then \\(e^{x}\\) overflows
*     -   if \\(x < -7.45133219101941108420\mbox{e+}02\\), then \\(e^{x}\\) underflows
*
* -   The hexadecimal values included in the source code are the intended ones for the used constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = exp( 4.0 );
* // returns ~54.5982
*
* @example
* var v = exp( -9.0 );
* // returns ~1.234e-4
*
* @example
* var v = exp( 0.0 );
* // returns 1.0
*
* @example
* var v = exp( NaN );
* // returns NaN
*/

/**
* Evaluates the natural logarithm of \\(1+x\\).
*
* ## Method
*
* 1.  Argument Reduction: find \\(k\\) and \\(f\\) such that
*
*     ```tex
*     1+x = 2^k (1+f)
*     ```
*
*     where
*
*     ```tex
*     \frac{\sqrt{2}}{2} < 1+f < \sqrt{2}
*     ```
*
*     <!-- <note> -->
*
*     If \\(k=0\\), then \\(f=x\\) is exact. However, if \\(k \neq 0\\), then \\(f\\) may not be representable exactly. In that case, a correction term is needed. Let
*
*     ```tex
*     u = \operatorname{round}(1+x)
*     ```
*
*     and
*
*     ```tex
*     c = (1+x) - u
*     ```
*
*     then
*
*     ```tex
*     \ln (1+x) - \ln u \approx \frac{c}{u}
*     ```
*
*     We can thus proceed to compute \\(\ln(u)\\), and add back the correction term \\(c/u\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     When \\(x > 2^{53}\\), one can simply return \\(\ln(x)\\).
*
*     <!-- </note> -->
*
* 2.  Approximation of \\(\operatorname{log1p}(f)\\). Let
*
*     ```tex
*     s = \frac{f}{2+f}
*     ```
*
*     based on
*
*     ```tex
*     \begin{align*}
*     \ln 1+f &= \ln (1+s) - \ln (1-s) \\
*             &= 2s + \frac{2}{3} s^3 + \frac{2}{5} s^5 + ... \\
*             &= 2s + sR \\
*     \end{align*}
*     ```
*
*     We use a special Reme algorithm on \\(\[0,0.1716\]\\) to generate a polynomial of degree \\(14\\) to approximate \\(R\\). The maximum error of this polynomial approximation is bounded by \\(2^{-58.45}\\). In other words,
*
*     ```tex
*     R(z) \approx \mathrm{Lp}_1 s^2 + \mathrm{Lp}_2 s^4 + \mathrm{Lp}_3 s^6 + \mathrm{Lp}_4 s^8 + \mathrm{Lp}_5 s^{10} + \mathrm{Lp}_6 s^{12} + \mathrm{Lp}_7 s^{14}
*     ```
*
*     and
*
*     ```tex
*     | \mathrm{Lp}_1 s^2 + \ldots + \mathrm{Lp}_7 s^14 - R(z) | \leq 2^{-58.45}
*     ```
*
*     <!-- <note> -->
*
*     The values of \\(Lp1\\) to \\(Lp7\\) may be found in the source.
*
*     <!-- </note> -->
*
*     Note that
*
*     ```tex
*     \begin{align*}
*     2s &= f - sf \\
*        &= f - \frac{f^2}{2} + s \frac{f^2}{2} \\
*     \end{align*}
*     ```
*
*     In order to guarantee error in \\(\ln\\) below \\(1\ \mathrm{ulp}\\), we compute the log by
*
*     ```tex
*     \operatorname{log1p}(f) = f - \biggl(\frac{f^2}{2} - s\biggl(\frac{f^2}{2}+R\biggr)\biggr)
*     ```
*
* 3.  Finally,
*
*     ```tex
*     \begin{align*}
*     \operatorname{log1p}(x) &= k \cdot \mathrm{ln2} + \operatorname{log1p}(f) \\
*     &= k \cdot \mathrm{ln2}_{hi}+\biggl(f-\biggl(\frac{f^2}{2}-\biggl(s\biggl(\frac{f^2}{2}+R\biggr)+k \cdot \mathrm{ln2}_{lo}\biggr)\biggr)\biggr) \\
*     \end{align*}
*     ```
*
*     Here \\(\mathrm{ln2}\\) is split into two floating point numbers:
*
*     ```tex
*     \mathrm{ln2}_{hi} + \mathrm{ln2}_{lo}
*     ```
*
*     where \\(n \cdot \mathrm{ln2}_{hi}\\) is always exact for \\(|n| < 2000\\).
*
*
* ## Special Cases
*
* -   \\(\operatorname{log1p}(x) = \mathrm{NaN}\\) with signal if \\(x < -1\\) (including \\(-\infty\\))
* -   \\(\operatorname{log1p}(+\infty) = +\infty\\)
* -   \\(\operatorname{log1p}(-1) = -\infty\\) with signal
* -   \\(\operatorname{log1p}(\mathrm{NaN})= \mathrm{NaN}\\) with no signal
*
*
* ## Notes
*
* -   According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
*
* -   The hexadecimal values are the intended ones for the used constants. The decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the hexadecimal values shown.
*
* -   Assuming \\(\ln(x)\\) is accurate, the following algorithm can be used to evaluate \\(\operatorname{log1p}(x)\\) to within a few ULP:
*
*     ```javascript
*     var u = 1.0 + x;
*     if ( u === 1.0 ) {
*         return x;
*     } else {
*         return ln(u) * (x/(u-1.0));
*     }
*     ```
*
*     See HP-15C Advanced Functions Handbook, p.193.
*
*
* @param {number} x - input value
* @returns {number} the natural logarithm of `1+x`
*
* @example
* var v = log1p( 4.0 );
* // returns ~1.609
*
* @example
* var v = log1p( -1.0 );
* // returns -Infinity
*
* @example
* var v = log1p( 0.0 );
* // returns 0.0
*
* @example
* var v = log1p( -0.0 );
* // returns -0.0
*
* @example
* var v = log1p( -2.0 );
* // returns NaN
*
* @example
* var v = log1p( NaN );
* // returns NaN
*/

/**
* Evaluates the natural logarithm of the gamma function for small arguments.
*
* ## Method
*
* 1.  For \\( z > 2 \\), begin by performing argument reduction until \\( z \\) is in \\(\[2,3)\\). Use the following form:
*
*     ```tex
*     \operatorname{gammaln}(z) = (z-2)(z+1)(Y + R(z-2))
*     ```
*
*     where \\( R(z-2) \\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\( Y \\), then any rounding error in the computation will get wiped out.
*
* 2.  If \\( z < 1 \\), use recurrence to shift to \\( z \\) in the interval \\(\[1,2\]\\). Then, use one of two approximations: one for \\( z \\) in \\(\[1,1.5\]\\) and one for \\( z \\) in \\(\[1.5,2\]\\):
*
*     -   For \(( z \\) in \\(\[1,1.5\]\\), use
*
*         ```tex
*         \operatorname{gammaln}(z) = (z-1)(z-2)(Y + R(z-1))
*         ```
*
*         where \\( R(z-1) \\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\( Y \\), then any rounding error in the computation will get wiped out.
*
*     -   For \\( z \\) in \\(\[1.5,2\]\\), use
*
*         ```tex
*         \operatorname{gammaln}(z) = (2-z)(1-z)(Y + R(2-z))
*         ```
*
*         where \\( R(2-z) \\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\( Y \\), then any rounding error in the computation will get wiped out.
*
*
* ## Notes
*
* -   Relative error:
*
*     | function | peak         | maximum deviation |
*     |:--------:|:------------:|:-----------------:|
*     | R(Z-2)   | 4.231e-18    | 5.900e-24         |
*     | R(Z-1)   | 1.230011e-17 | 3.139e-021        |
*     | R(2-Z)   | 1.797565e-17 | 2.151e-021        |
*
*
* @private
* @param {number} z - input value
* @param {number} zm1 - `z` minus one
* @param {number} zm2 - `z` minus two
* @returns {number} function value
*/

/**
* Evaluates the natural logarithm of the gamma function.
*
* ## Method
*
* 1.  Argument reduction for \\(0 < x \leq 8\\). Since \\(\Gamma(1+s) = s \Gamma(s)\\), for \\(x \in \[0,8]\\), we may reduce \\(x\\) to a number in \\(\[1.5,2.5]\\) by
*
*     ```tex
*     \operatorname{lgamma}(1+s) = \ln(s) + \operatorname{lgamma}(s)
*     ```
*
*     For example,
*
*     ```tex
*     \begin{align*}
*     \operatorname{lgamma}(7.3) &= \ln(6.3) + \operatorname{lgamma}(6.3) \\
*     &= \ln(6.3 \cdot 5.3) + \operatorname{lgamma}(5.3) \\
*     &= \ln(6.3 \cdot 5.3 \cdot 4.3 \cdot 3.3 \cdot2.3) + \operatorname{lgamma}(2.3)
*     \end{align*}
*     ```
*
* 2.  Compute a polynomial approximation of \\(\mathrm{lgamma}\\) around its minimum (\\(\mathrm{ymin} = 1.461632144968362245\\)) to maintain monotonicity. On the interval \\(\[\mathrm{ymin} - 0.23, \mathrm{ymin} + 0.27]\\) (i.e., \\(\[1.23164,1.73163]\\)), we let \\(z = x - \mathrm{ymin}\\) and use
*
*     ```tex
*     \operatorname{lgamma}(x) = -1.214862905358496078218 + z^2 \cdot \operatorname{poly}(z)
*     ```
*
*     where \\(\operatorname{poly}(z)\\) is a \\(14\\) degree polynomial.
*
* 3.  Compute a rational approximation in the primary interval \\(\[2,3]\\). Let \\( s = x - 2.0 \\). We can thus use the approximation
*
*     ```tex
*     \operatorname{lgamma}(x) = \frac{s}{2} + s\frac{\operatorname{P}(s)}{\operatorname{Q}(s)}
*     ```
*
*     with accuracy
*
*     ```tex
*     \biggl|\frac{\mathrm{P}}{\mathrm{Q}} - \biggr(\operatorname{lgamma}(x)-\frac{s}{2}\biggl)\biggl| < 2^{-61.71}
*     ```
*
*     The algorithms are based on the observation
*
*     ```tex
*     \operatorname{lgamma}(2+s) = s(1 - \gamma) + \frac{\zeta(2) - 1}{2} s^2 - \frac{\zeta(3) - 1}{3} s^3 + \ldots
*     ```
*
*     where \\(\zeta\\) is the zeta function and \\(\gamma = 0.5772156649...\\) is the Euler-Mascheroni constant, which is very close to \\(0.5\\).
*
* 4.  For \\(x \geq 8\\),
*
*     ```tex
*     \operatorname{lgamma}(x) \approx \biggl(x-\frac{1}{2}\biggr) \ln(x) - x + \frac{\ln(2\pi)}{2} + \frac{1}{12x} - \frac{1}{360x^3} + \ldots
*     ```
*
*     which can be expressed
*
*     ```tex
*     \operatorname{lgamma}(x) \approx \biggl(x-\frac{1}{2}\biggr)(\ln(x)-1)-\frac{\ln(2\pi)-1}{2} + \ldots
*     ```
*
*     Let \\(z = \frac{1}{x}\\). We can then use the approximation
*
*     ```tex
*     f(z) = \operatorname{lgamma}(x) - \biggl(x-\frac{1}{2}\biggr)(\ln(x)-1)
*     ```
*
*     by
*
*     ```tex
*     w = w_0 + w_1 z + w_2 z^3 + w_3 z^5 + \ldots + w_6 z^{11}
*     ```
*
*     where
*
*     ```tex
*     |w - f(z)| < 2^{-58.74}
*     ```
*
* 5.  For negative \\(x\\), since
*
*     ```tex
*     -x \Gamma(-x) \Gamma(x) = \frac{\pi}{\sin(\pi x)}
*     ```
*
*     where \\(\Gamma\\) is the gamma function, we have
*
*     ```tex
*     \Gamma(x) = \frac{\pi}{\sin(\pi x)(-x)\Gamma(-x)}
*     ```
*
*     Since \\(\Gamma(-x)\\) is positive,
*
*     ```tex
*     \operatorname{sign}(\Gamma(x)) = \operatorname{sign}(\sin(\pi x))
*     ```
*
*     for \\(x < 0\\). Hence, for \\(x < 0\\),
*
*     ```tex
*     \mathrm{signgam} = \operatorname{sign}(\sin(\pi x))
*     ```
*
*     and
*
*     ```tex
*     \begin{align*}
*     \operatorname{lgamma}(x) &= \ln(|\Gamma(x)|) \\
*     &= \ln\biggl(\frac{\pi}{|x \sin(\pi x)|}\biggr) - \operatorname{lgamma}(-x)
*     \end{align*}
*     ```
*
*     <!-- <note> -->
*
*     Note that one should avoid computing \\(\pi (-x)\\) directly in the computation of \\(\sin(\pi (-x))\\).
*
*     <!-- </note> -->
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{lgamma}(2+s) &\approx s (1-\gamma) & \mathrm{for\ tiny\ s} \\
* \operatorname{lgamma}(x) &\approx -\ln(x) & \mathrm{for\ tiny\ x} \\
* \operatorname{lgamma}(1) &= 0 & \\
* \operatorname{lgamma}(2) &= 0 & \\
* \operatorname{lgamma}(0) &= \infty & \\
* \operatorname{lgamma}(\infty) &= \infty & \\
* \operatorname{lgamma}(-\mathrm{integer}) &= \pm \infty
* \end{align*}
* ```
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = gammaln( 1.0 );
* // returns 0.0
*
* @example
* var v = gammaln( 2.0 );
* // returns 0.0
*
* @example
* var v = gammaln( 4.0 );
* // returns ~1.792
*
* @example
* var v = gammaln( -0.5 );
* // returns ~1.266
*
* @example
* var v = gammaln( 0.5 );
* // returns ~0.572
*
* @example
* var v = gammaln( 0.0 );
* // returns Infinity
*
* @example
* var v = gammaln( NaN );
* // returns NaN
*/

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-1.852
*
* @example
* var y = logpdf( 1.0, 0.0, 1.0 );
* // returns ~-0.919
*
* @example
* var y = logpdf( 1.0, 3.0, 1.0 );
* // returns ~-5.419
*
* @example
* var y = logpdf( -1.0, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof LogNormal.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var lognormal = new LogNormal( 2.0, 4.0 );
*
* var v = lognormal.logpdf( 0.8 );
* // returns ~-2.237
*/

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/

/**
* Evaluates the natural logarithm.
*
* @param {NonNegativeNumber} x - input value
* @returns {number} function value
*
* @example
* var v = ln( 4.0 );
* // returns ~1.386
*
* @example
* var v = ln( 0.0 );
* // returns -Infinity
*
* @example
* var v = ln( Infinity );
* // returns Infinity
*
* @example
* var v = ln( NaN );
* // returns NaN
*
* @example
* var v = ln( -4.0 );
* // returns NaN
*/

/**
* Evaluates the probability density function (PDF) for a Student's t distribution with degrees of freedom `v` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} v - degrees of freedom
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.3, 4.0 );
* // returns ~0.355
*
* @example
* var y = pdf( 2.0, 0.7 );
* // returns ~0.058
*
* @example
* var y = pdf( -1.0, 0.5 );
* // returns ~0.118
*
* @example
* var y = pdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( NaN, 2.0 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, -1.0 );
* // returns NaN
*/

/**
* Evaluates the probability density function (PDF) for a degenerate distribution centered at `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of the distribution
* @returns {number} evaluated probability density function
*
* @example
* var y = pdf( 2.0, 3.0 );
* // returns 0.0
*
* @example
* var y = pdf( 3.0, 3.0 );
* // returns Infinity
*
* @example
* var y = pdf( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN );
* // returns NaN
*/

/**
* Evaluates the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.157
*
* @example
* var y = pdf( 1.0, 0.0, 1.0 );
* // returns ~0.399
*
* @example
* var y = pdf( 1.0, 3.0, 1.0 );
* // returns ~0.004
*
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/

/**
* Evaluates the probability density function (PDF) for a normal distribution with mean `mu` and standard deviation `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {number} evaluated probability density function
*
* @example
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.054
*
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns ~0.009
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative standard deviation:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 8.0, 0.0 );
* // returns 0.0
*
* @example
* var y = pdf( 8.0, 8.0, 0.0 );
* // returns Infinity
*/

/**
* Evaluates the probability density function (PDF) for a uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 4.0 );
* // returns 0.25
*
* @example
* var y = pdf( 5.0, 0.0, 4.0 );
* // returns 0.0
*
* @example
* var y = pdf( 0.25, 0.0, 1.0 );
* // returns 1.0
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 3.0, 1.0 );
* // returns NaN
*/

/**
* Evaluates the probability density function (PDF) for an exponential distribution with rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.3, 4.0 );
* // returns ~1.205
*
* @example
* var y = pdf( 2.0, 0.7 );
* // returns ~0.173
*
* @example
* var y = pdf( -1.0, 0.5 );
* // returns 0.0
*
* @example
* var y = pdf( 0, NaN );
* // returns NaN
*
* @example
* var y = pdf( NaN, 2.0 );
* // returns NaN
*
* @example
* // Negative rate:
* var y = pdf( 2.0, -1.0 );
* // returns NaN
*/

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof LogNormal.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var lognormal = new LogNormal( 2.0, 4.0 );
*
* var v = lognormal.pdf( 0.8 );
* // returns ~0.107
*/

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/

/**
* Evaluates the probability mass function (PMF) for a Bernoulli distribution with success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {Probability} p - success probability
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 1.0, 0.3 );
* // returns 0.3
*
* @example
* var y = pmf( 0.0, 0.3 );
* // returns 0.7
*
* @example
* var y = pmf( -1.0, 0.5 );
* // returns 0.0
*
* @example
* var y = pmf( 0.8, 0.5 );
* // returns 0.0
*
* @example
* var y = pmf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = pmf( NaN, 0.5 );
* // returns NaN
*
* @example
* // Invalid success probability:
* var y = pmf( 1.0, 1.5 );
* // returns NaN
*/

/**
* Evaluates the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 3.0, 20, 0.2 );
* // returns ~0.205
*
* @example
* var y = pmf( 21.0, 20, 0.2 );
* // returns 0.0
*
* @example
* var y = pmf( 5.0, 10, 0.4 );
* // returns ~0.201
*
* @example
* var y = pmf( 0.0, 10, 0.4 );
* // returns ~0.006
*
* @example
* var y = pmf( NaN, 20, 0.5 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, 20, NaN );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 1.5, 0.5 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 20, -1.0 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 20, 1.5 );
* // returns NaN
*/

/**
* Evaluates the probability mass function (PMF) for a degenerate distribution centered at `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of the distribution
* @returns {number} evaluated probability mass function
*
* @example
* var y = pmf( 2.0, 3.0 );
* // returns 0.0
*
* @example
* var y = pmf( 3.0, 3.0 );
* // returns 1.0
*
* @example
* var y = pmf( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, NaN );
* // returns NaN
*/

/**
* Evaluates the quantile function for a Student's t distribution with degrees of freedom `v` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} v - degrees of freedom
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0 );
* // returns ~1.376
*
* @example
* var y = quantile( 0.1, 1.0 );
* // returns ~-3.078
*
* @example
* var y = quantile( 0.5, 0.1 );
* // returns 0.0
*
* @example
* var y = quantile( -0.2, 0.1 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*/

/**
* Evaluates the quantile function for a degenerate distribution centered at `mu`.
*
* @param {Probability} p - input value
* @param {number} mu - constant value of the distribution
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.5, 2.0 );
* // returns 2.0
*
* @example
* var y = quantile( 0.9, 4.0 );
* // returns 4.0
*
* @example
* var y = quantile( 1.1, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
*/

/**
* Evaluates the quantile function for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~2.32
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~54.598
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/

/**
* Evaluates the quantile function for a normal distribution with mean `mu` and standard deviation `sigma` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.842
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns 4.0
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative standard deviation:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/

/**
* Evaluates the quantile function for an exponential distribution with rate parameter `lambda` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0 );
* // returns ~1.609
*
* @example
* var y = quantile( 0.5, 4.0 );
* // returns ~0.173
*
* @example
* var y = quantile( 0.5, 0.1 );
* // returns ~6.931
*
* @example
* var y = quantile( -0.2, 0.1 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative rate parameter:
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*/

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof LogNormal.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var lognormal = new LogNormal( 2.0, 4.0 );
*
* var v = lognormal.quantile( 0.5 );
* // returns ~7.389
*/

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/

/**
* Evaluates the signum function.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var sign = signum( -5.0 );
* // returns -1.0
*
* @example
* var sign = signum( 5.0 );
* // returns 1.0
*
* @example
* var sign = signum( -0.0 );
* // returns -0.0
*
* @example
* var sign = signum( 0.0 );
* // returns 0.0
*
* @example
* var sign = signum( NaN );
* // returns NaN
*/

/**
* Evaluates the tangent of a number.
*
* ## Method
*
* -   Let \\(S\\), \\(C\\), and \\(T\\) denote the \\(\sin\\), \\(\cos\\), and \\(\tan\\), respectively, on \\(\[-\pi/4, +\pi/4\]\\).
*
* -   Reduce the argument \\(x\\) to \\(y1+y2 = x-k\pi/2\\) in \\(\[-\pi/4, +\pi/4\]\\), and let \\(n = k \mod 4\\).
*
* -   We have
*
*     | n | sin(x) | cos(x) | tan(x) |
*     | - | ------ | ------ | ------ |
*     | 0 |    S   |    C   |   T    |
*     | 1 |    C   |   -S   |  -1/T  |
*     | 2 |   -S   |   -C   |   T    |
*     | 3 |   -C   |    S   |  -1/T  |
*
*
* @param {number} x - input value (in radians)
* @returns {number} tangent
*
* @example
* var v = tan( 0.0 );
* // returns ~0.0
*
* @example
* var v = tan( -3.141592653589793/4.0 );
* // returns ~-1.0
*
* @example
* var v = tan( 3.141592653589793/4.0 );
* // returns ~1.0
*
* @example
* var v = tan( NaN );
* // returns NaN
*/

/**
* Exclusion test for all predictors not in active set. If one or more predictors fail the test, they are included in the active set.
*
* @returns {boolean} returns true if active set was changed, false otherwise
*/

/**
* Expands a strides array to accommodate an expanded array shape (i.e., an array shape with prepended singleton dimensions).
*
* @private
* @param {NonNegativeInteger} ndims - number of dimensions
* @param {Array} shape - expanded array shape
* @param {Array} strides - strides array
* @param {string} order - memory layout order
* @returns {Array} output strides array
*
* @example
* var out = expandStrides( 4, [ 1, 1, 2, 2 ], [ 1, 2 ], 'column-major' );
* // returns [ 1, 1, 1, 2 ]
*
* @example
* var out = expandStrides( 4, [ 1, 1, 2, 2 ], [ 2, 1 ], 'row-major' );
* // returns [ 4, 4, 2, 1 ]
*/

/**
* Exponential distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/exponential/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/exponential/cdf' );
*
* var y = cdf( 2.0, 0.1 );
* // returns ~0.181
*
* var myCDF = cdf.factory( 0.5 );
* y = myCDF( 3.0 );
* // returns ~0.777
*/

/**
* Exponential distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/exponential/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/exponential/pdf' );
*
* var y = pdf( 0.3, 4.0 );
* // returns ~1.205
*
* var myPDF = pdf.factory( 0.5 );
*
* y = myPDF( 3.0 );
* // returns ~0.112
*
* y = myPDF( 1.0 );
* // returns ~0.303
*/

/**
* Exponential distribution quantile function.
*
* @module @stdlib/stats/base/dists/exponential/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/exponential/quantile' );
*
* var y = quantile( 0.5, 4.0 );
* // returns ~0.173
*
* var myQuantile = quantile.factory( 0.4 );
*
* y = myQuantile( 0.4 );
* // returns ~1.277
*
* y = myQuantile( 1.0 );
* // returns Infinity
*/

/**
* Exponentially distributed pseudorandom numbers.
*
* @module @stdlib/random/base/exponential
*
* @example
* var exponential = require( '@stdlib/random/base/exponential' );
*
* var v = exponential( 4.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/exponential' ).factory;
*
* var exponential = factory( 4.0, {
*     'seed': 297
* });
*
* var v = exponential();
* // returns <number>
*/

/**
* Extends an array by the elements of another array.
*
* @private
* @param {Array} arr - input array
* @param {Array} ext - array to extend `arr` with
* @returns {Array} mutated input array
*
* @example
* var arr = [ 1, 2, 3 ];
* var out = extend( arr, [ 4, 5 ] );
* // returns [ 1, 2, 3, 4, 5 ]
*/

/**
* Extract a property value from each element of an object array.
*
* @module @stdlib/utils/pluck
*
* @example
* var pluck = require( '@stdlib/utils/pluck' );
*
* var arr = [
*     { 'a': 1, 'b': 2 },
*     { 'a': 0.5, 'b': 3 }
* ];
*
* var out = pluck( arr, 'a' );
* // returns [ 1, 0.5 ]
*
* arr = [
*     { 'a': 1, 'b': 2 },
*     { 'a': 0.5, 'b': 3 }
* ];
*
* out = pluck( arr, 'a', {'copy':false} );
* // returns [ 1, 0.5 ]
*
* var bool = ( arr[ 0 ] === out[ 0 ] );
* // returns true
*/

/**
* Extracts a property value from each element of an object array.
*
* @param {Array} arr - source array
* @param {*} prop - property to access
* @param {Options} [options] - function options
* @param {boolean} [options.copy=true] - boolean indicating whether to return a new data structure
* @throws {TypeError} first argument must be an object array
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Array} destination array
*
* @example
* var arr = [
*     { 'a': 1, 'b': 2 },
*     { 'a': 0.5, 'b': 3 }
* ];
*
* var out = pluck( arr, 'a' );
* // returns [ 1, 0.5 ]
*
* @example
* var arr = [
*     { 'a': 1, 'b': 2 },
*     { 'a': 0.5, 'b': 3 }
* ];
*
* var out = pluck( arr, 'a', {'copy':false} );
* // returns [ 1, 0.5 ]
*
* var bool = ( arr[ 0 ] === out[ 0 ] );
* // returns true
*/

/**
* Extracts the second to last word of an action type, as these should be most informative about the nature of the action (recall that project convention is to use `_` to separate words in action types)
*
* @private
* @param {string} str - action type
* @returns {string} substring of action type
*/

/**
* FUNCTION: argmax( arr )
*	Computes the maximum value of a numeric array and returns the corresponding array indices.
*
* @param {Array} arr - array of values
* @returns {Array} array indices
*/

/**
* FUNCTION: chebyshev( x, y[, accessor] )
*	Computes the Chebyshev distance between two arrays.
*
* @param {Number[]|Array} x - input array
* @param {Number[]|Array} y - input array
* @param {Function} [accessor] - accessor function for accessing array values
* @returns {Number|Null} Chebyshev distance or null
*/

/**
* FUNCTION: chunkify( arr, n[, opts] )
*	Segments an array into chunks.
*
* @param {Array} arr - array to be chunked
* @param {Number} n - chunk size
* @param {Object} [opts] - function options
* @param {Number} [opts.start] - array index from which to begin chunking (default: 0)
* @param {Boolean} [opts.truncate] - indicates whether last chunk should be truncated if it contains padded values (default: false)
* @param {Boolean} [opts.padding] - indicates whether chunks should be allowed to contain padded values (default: true)
* @param {*} [opts.padding_value] - value used for padding (default: null)
* @param {Number} [opts.delay] - integer specifying the number of padded values to add to the first chunk (default: 0)
* @param {Number} [opts.overlap] - integer specifying extent of chunk overlap/underlap (default: 0)
* @returns {Array} array of chunks
*/

/**
* FUNCTION: distance( x, y[, accessor] )
*	Computes the cosine distance between two arrays.
*
* @param {Number[]|Array} x - input array
* @param {Number[]|Array} y - input array
* @param {Function} [accessor] - accessor function for accessing array values
* @returns {Number|Null} Cosine distance
*/

/**
* FUNCTION: dot( x, y[, accessor] )
*	Computes the dot product between two arrays.
*
* @param {Array} x - input array
* @param {Array} y - input array
* @param {Function} [accessor] - accessor function for accessing array values
* @returns {Number|Null} dot product
*/

/**
* FUNCTION: euclidean( x, y[, accessor] )
*	Computes the Euclidean distance between two arrays.
*
* @param {Number[]|Array} x - input array
* @param {Number[]|Array} y - input array
* @param {Function} [accessor] - accessor function for accessing array values
* @returns {Number|Null} Euclidean distance or null
*/

/**
* FUNCTION: hamming( a, b, accessor )
*	Computes the Hamming distance between two sequences.
*
* @param {String|Array} a - array or string sequence
* @param {String|Array} b - array or string sequence
* @param {Function} [accessor] - accessor function for accessing array values
* @returns {Number} Hamming distance
*/

/**
* FUNCTION: isArray( value )
*	Validates if a value is an array.
*
* @param {*} value - value to be validated
* @returns {Boolean} boolean indicating whether value is an array
*/

/**
* FUNCTION: isFunction( value )
*	Validates if a value is a function.
*
* @param {*} value - value to be validated
* @returns {Boolean} boolean indicating whether value is a function
*/

/**
* FUNCTION: isInteger( value )
*	Validates if a value is an integer.
*
* @param {Number} value - value to be validated
* @returns {Boolean} boolean indicating whether value is an integer
*/

/**
* FUNCTION: isNumber( value )
*	Validates if a value is a number.
*
* @param {*} value - value to be validated
* @returns {Boolean} boolean indicating whether value is a number
*/

/**
* FUNCTION: isObject( value )
*	Validates if a value is a object; e.g., {}.
*
* @param {*} value - value to be validated
* @returns {Boolean} boolean indicating whether value is a object
*/

/**
* FUNCTION: isString( value )
*	Validates if a value is a string.
*
* @param {*} value - value to be validated
* @returns {Boolean} boolean indicating whether value is a string
*/

/**
* FUNCTION: l2norm( arr[, accessor] )
*	Calculates the L2 norm (Euclidean norm) of an array.
*
* @param {Array} arr - input array
* @param {Function} [accessor] - accessor function for accessing array values
* @returns {Number|Null} L2 norm or null
*/

/**
* FUNCTION: manhattan( x, y[, accessor] )
*	Computes the Manhattan distance between two arrays.
*
* @param {Number[]|Array} x - input array
* @param {Number[]|Array} y - input array
* @param {Function} [accessor] - accessor function for accessing array values
* @returns {Number|Null} Manhattan distance or null
*/

/**
* FUNCTION: similarity( x, y[, accessor] )
*	Computes the cosine similarity between two arrays.
*
* @param {Number[]|Array} x - input array
* @param {Number[]|Array} y - input array
* @param {Function} [accessor] - accessor function for accessing array values
* @returns {Number|Null} cosine similarity or null
*/

/**
* FUNCTION: validate( arr, n, opts )
*	Validates `chunkify` arguments.
*
* @param {Array} arr - input array
* @param {Number} n - chunk size
* @param {Object} opts - options object
*/

/**
* Fills an array-like object with zeros.
*
* @private
* @param {(Array|TypedArray|Buffer)} v - array-like object to fill
* @returns {(Array|TypedArray|Buffer)} input value
*
* @example
* var arr = zeros( new Array( 2 ) );
* // returns [ 0, 0 ]
*/

/**
* Find adjacent modules in row/column with the same color
* and assign a penalty value.
*
* Points: N1 + i
* i is the amount by which the number of adjacent modules of the same color exceeds 5
*/

/**
* Finding value which is most frequent in an array.
*
* @param values - array of values
*/

/**
* Fit lasso regression via coordinate descent.
*
* @param {Matrix|Array} x - design matrix
* @param {NumberArray} y - response vector
* @param {number} lambda - L1 penalty value
* @returns {Object} regression model
*/

/**
* Fit the data under the assumption that p(x_i|c) follows a multinomial distribution.
*
* ## Notes
*
* -   Assigns prior and conditional probabilities of BayesFit instance.
*
* @param {Matrix} x - design matrix
* @param {Array} y - vector of class memberships
* @returns {Void}
*/

/**
* Fit the data under the assumption that p(x_i|c) follows a normal distribution.
*
* ## Notes
*
* -   Assigns prior and conditional probabilities of BayesFit instance.
*
* @param {Matrix} x - design matrix
* @param {Array} y - vector of class memberships
* @returns {void}
*/

/**
* Fits a Gaussian naive Bayes model.
*
* @param {(Matrix|Array)} x - design matrix
* @param {Array} y - vector of class memberships
* @returns {GaussianFit} model fit
*/

/**
* Fits a multinomial naive Bayes model.
*
* @param {(Matrix|Array)} x - design matrix
* @param {Array} y - vector of class memberships
* @param {Object} [opts] - function options
* @param {number} [opts.alpha] - Laplace smoothing parameter
* @returns {MultinomialFit} MultinomialFit instance
*/

/**
* Flatten an array.
*
* @module @stdlib/utils/flatten-array
*
* @example
* var flattenArray = require( '@stdlib/utils/flatten-array' );
*
* var arr = [ 1, [2, [3, [4, [ 5 ], 6], 7], 8], 9 ];
*
* var out = flattenArray( arr );
* // returns [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
*
* @example
* var flattenArray = require( '@stdlib/utils/flatten-array' );
*
* var flatten = flattenArray.factory( [2,2], {
*     'copy': false
* });
*
* var out = flatten( [[1,2],[3,4]] );
* // returns [ 1, 2, 3, 4 ]
*
* out = flatten( [[5,6],[7,8]] );
* // returns [ 5, 6, 7, 8 ]
*/

/**
* Flattens an array.
*
* @param {Array} arr - input array
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.depth] - maximum depth to flatten
* @param {boolean} [options.copy=false] - boolean indicating whether to deep copy array elements
* @throws {TypeError} first argument must be an array
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Array} flattened array
*
* @example
* var arr = [ 1, [2, [3, [4, [ 5 ], 6], 7], 8], 9 ];
*
* var out = flattenArray( arr );
* // returns [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
*/

/**
* For integer arguments we can relate the incomplete beta to the complement of the binomial distribution cdf and use this finite sum.
*
* @private
* @param {NonNegativeInteger} n - number of trials
* @param {NonNegativeInteger} k - function input
* @param {Probability} x - function input
* @param {Probability} y - probability equal to `1-x`
* @returns {number} sum
*/

/**
* Formats time in the format `minutes:seconds`.
*
* @private
* @param {number} time - time in minutes
* @returns {string} formatted time string of the format `minutes:seconds`
*/

/**
* Function for building classification decision tree.
*/

/**
* Function to make shapes from breakpoints.
*/

/**
* Gamma distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/gamma/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/gamma/cdf' );
*
* var y = cdf( 2.0, 8.0, 3.0 );
* // returns ~0.256
*
* y = cdf( 0.0, 1.0, 1.0 );
* // returns 0.0
*
* var mycdf = cdf.factory( 2.0, 0.5 );
* y = mycdf( 6.0 );
* // returns ~0.801
*
* y = mycdf( 2.0 );
* // returns ~0.264
*/

/**
* Generate a frequency table.
*
* @module @stdlib/utils/tabulate
*
* @example
* var tabulate = require( '@stdlib/utils/tabulate' );
*
* var arr = [ 'beep', 'boop', 'foo', 'beep' ];
*
* var out = tabulate( arr );
* // returns [ [ 'beep', 2, 0.5 ], [ 'boop', 1, 0.25 ], [ 'foo', 1, 0.25 ] ]
*/

/**
* Generate a linearly spaced numeric array using a provided increment.
*
* @module @stdlib/math/utils/incrspace
*
* @example
* var incrspace = require( '@stdlib/math/utils/incrspace' );
*
* var arr = incrspace( 0, 11, 2 );
* // returns [ 0, 2, 4, 6, 8, 10 ]
*/

/**
* Generate a linearly spaced numeric array.
*
* @module @stdlib/math/utils/linspace
*
* @example
* var linspace = require( '@stdlib/math/utils/linspace' );
*
* var arr = linspace( 0, 100, 6 );
* // returns [ 0, 20, 40, 60, 80, 100 ]
*/

/**
* Generate a stride array from an array shape.
*
* @module @stdlib/ndarray/base/shape2strides
*
* @example
* var shape2strides = require( '@stdlib/ndarray/base/shape2strides' );
*
* var strides = shape2strides( [ 3, 2 ], 'row-major' );
* // returns [ 2, 1 ]
*
* strides = shape2strides( [ 3, 2 ], 'column-major' );
* // returns [ 1, 3 ]
*/

/**
* Generates a binomially distributed pseudorandom number by computing the sum of Bernoulli random variables.
*
* @private
* @param {PRNG} rand - PRNG for uniformly distributed numbers
* @param {PositiveInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} pseudorandom number
*/

/**
* Generates a binomially distributed pseudorandom number.
*
* ## References
*
* -   Hörmann, Wolfgang. 1993. "The generation of binomial random variates." _Journal of Statistical Computation and Simulation_ 46 (1-2): 101–10. doi:[10.1080/00949659308811496][@hormann:1993a].
*
* [@hormann:1993a]: http://dx.doi.org/10.1080/00949659308811496
*
* @private
* @param {PRNG} rand - PRNG for uniformly distributed numbers
* @param {PositiveInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} pseudorandom number
*/

/**
* Generates a binomially distributed random number.
*
* ## Method
*
* -   For \\(np < 10\\), the function generates Bernoulli random variates and returns their sum.
* -   For \\(np \geq 10\\), the function uses the [BTRD algorithm][@hormann:1993a].
*
* ## References
*
* -   Hörmann, Wolfgang. 1993. "The generation of binomial random variates." _Journal of Statistical Computation and Simulation_ 46 (1-2): 101–10. doi:[10.1080/00949659308811496][@hormann:1993a].
*
* [@hormann:1993a]: http://dx.doi.org/10.1080/00949659308811496
*
* @name binomial
* @type {PRNG}
* @param {PositiveInteger} n - number of trials
* @param {Probability} p - success probability
* @throws {TypeError} `n` must be a positive integer
* @throws {TypeError} `p` must be a probability
* @returns {NonNegativeInteger} pseudorandom number
*
* @example
* var r = binomial( 20, 0.8 );
* // returns <number>
*/

/**
* Generates a frequency table.
*
* ## Notes
*
* -   The output is an array of arrays. Each sub-array corresponds to a unique value in the input collection and is structured as follows:
*
*     -   0: unique value
*     -   1: value count
*     -   2: frequency percentage
*
*
* @param {Collection} collection - input collection
* @throws {TypeError} first argument must be a collection
* @returns {(Array<Array>|Array)} frequency table
*
* @example
* var arr = [ 'beep', 'boop', 'foo', 'beep' ];
*
* var out = tabulate( arr );
* // returns [ [ 'beep', 2, 0.5 ], [ 'boop', 1, 0.25 ], [ 'foo', 1, 0.25 ] ]
*/

/**
* Generates a full table of safe casts for each ndarray data type.
*
* @private
* @returns {Object} table
*/

/**
* Generates a full table of same "kind" casts for each ndarray data type.
*
* @private
* @returns {Object} table
*/

/**
* Generates a function for evaluating a polynomial.
*
* ## Notes
*
* -   The compiled function uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: http://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @returns {Function} function for evaluating a polynomial
*
* @example
* var polyval = factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/

/**
* Generates a linearly spaced numeric array using a provided increment.
*
* @param {number} x1 - first array value
* @param {number} x2 - array element bound
* @param {number} [increment=1] - increment
* @throws {TypeError} first argument must be numeric
* @throws {TypeError} second argument must be numeric
* @throws {TypeError} third argument must be numeric
* @throws {RangeError} length of created array must be less than `4294967295` (`2**32 - 1`)
* @returns {Array} linearly spaced numeric array
*
* @example
* var arr = incrspace( 0, 11, 2 );
* // returns [ 0, 2, 4, 6, 8, 10 ]
*/

/**
* Generates a linearly spaced numeric array.
*
* @param {number} x1 - first array value
* @param {number} x2 - last array value
* @param {NonNegativeInteger} [len=100] - length of output array
* @throws {TypeError} first argument must be numeric
* @throws {TypeError} second argument must be numeric
* @throws {TypeError} third argument must be a nonnegative integer
* @returns {Array} linearly spaced numeric array
*
* @example
* var arr = linspace( 0, 100, 6 );
* // returns [ 0, 20, 40, 60, 80, 100 ]
*/

/**
* Generates a random string with the specified length.
*
* @param {integer} [len=32] - length of string
* @param {integer} [lower=48] - lower ASCII char point
* @param {integer} [upper=126] - upper ASCII char point
* @returns {string} random string with `len` characters
*/

/**
* Generates a standard normally distributed random number.
*
* ## Method
*
* The basic Ziggurat method works as follows:
*
*
*     ```tex
*     x_{C-1}(r) \left[ f(0) - f\left( x_{C-1}(r) \right) \right] - V(r) = 0
*     ```
*
*     where
*
*     ```tex
*     V(r) = r \; f(r) + \int_r^\infty \; f(x) \; dx
*     ```
*
*     and \\( r \\) denotes the right-most \\( x_1 \\).
*
* -   We then use the following rejection algorithm:
*
*     -   Draw a box \\( B_i \\) at random with probability \\( \tfrac{1}{C} \\).
*     -   Draw a random number from the box as \\( z = U_0 x_i \\) for \\( i > 0 \\) and \\( z = U_0 V / f(x_1) \\).
*     -   If \\( z < x_{i+1} \\), accept \\( z \\).
*     -   If \\( i = 0 \\), accept a \\( v \\) by transforming the tail of the normal distribution to the unit interval and then use rejection technique by Marsaglia, G. (1964) to generate a standard normal variable. Otherwise, if \\( i > 0 \\) and \\( U_1 \left[ f(x_i) - f(x_{i+1})\right] < f(z) - f(x_{i+1}) \\) accept \\( z \\).
*     -   Go back to the first step.
*
* -   The improved version by Doornik (2005) changes step four in order to correct a deficiency of the original Ziggurat algorithm. The updated version requires the generation of two random numbers, a uniform variable drawn from \\( U(-1,1) \\) and the last seven bits of a random integer.
*
* ## References
*
* -   Doornik, Jurgen A. 2005. "An Improved Ziggurat Method to Generate Normal Random Samples." <https://www.doornik.com/research/ziggurat.pdf>.
* -   Marsaglia, George, and Wai Wan Tsang. 2000. "The Ziggurat Method for Generating Random Variables." _Journal of Statistical Software_ 5 (1): 1–7. doi:[10.18637/jss.v005.i08](http://dx.doi.org/10.18637/jss.v005.i08).
* -   Marsaglia, George. 1964. "Generating a Variable from the Tail of the Normal Distribution." _Technometrics_ 6 (1): 101–2. doi:[10.1080/00401706.1964.10490150](http://dx.doi.org/10.1080/00401706.1964.10490150).
*
*
* @name randn
* @type {PRNG}
* @returns {number} pseudorandom number
*
* @example
* var r = randn();
* // returns <number>
*/

/**
* Generates a stride array from an array shape.
*
* @param {(Array|TypedArray|Object)} [out] - output object
* @param {NonNegativeIntegerArray} shape - array shape
* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)
* @returns {(Array|TypedArray|Object)} array strides
*
* @example
* var strides = shape2strides( [ 3, 2 ], 'row-major' );
* // returns [ 2, 1 ]
*
* strides = shape2strides( [ 3, 2 ], 'column-major' );
* // returns [ 1, 3 ]
*/

/**
* Generates a stride array from an array shape.
*
* @private
* @param {(Array|TypedArray|Object)} out - output object
* @param {NonNegativeIntegerArray} shape - array shape
* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)
* @returns {(Array|TypedArray|Object)} array strides
*
* @example
* var strides = new Array( 2 );
*
* var out = shape2strides( strides, [ 3, 2 ], 'row-major' );
* // returns [ 2, 1 ]
*
* var bool = ( out === strides );
* // returns true
*
* out = shape2strides( strides, [ 3, 2 ], 'column-major' );
* // returns [ 1, 3 ]
*/

/**
* Generates a string displaying the filters for the current active data subset.
*
* @private
* @param {Array} filters - data subset filters
* @param {boolean} abridged - controls whether to display all filters in multiple lines or an abridged version
* @returns {string} filter display string
*/

/**
* Generates a table of safe casts for each ndarray data type.
*
* @private
* @returns {Object} table
*/

/**
* Generates a table of same "kind" casts for each ndarray data type.
*
* @private
* @returns {Object} table
*/

/**
* Given a stride array, determine array iteration order.
*
* @module @stdlib/ndarray/base/iteration-order
*
* @example
* var iterationOrder = require( '@stdlib/ndarray/base/iteration-order' );
*
* var o = iterationOrder( [ 2, 1 ] );
* // returns 1
*
* o = iterationOrder( [ -2, 1 ] );
* // returns 0
*
* o = iterationOrder( [ -2, -1 ] );
* // returns -1
*/

/**
* Group values according to an indicator function and return group counts.
*
* @module @stdlib/utils/count-by
*
* @example
* var countBy = require( '@stdlib/utils/count-by' );
*
* function indicator( v ) {
*     return v[ 0 ];
* }
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
*
* var out = countBy( arr, indicator );
* // returns { 'b': 3, 'f': 1 }
*/

/**
* Group values according to an indicator function.
*
* @module @stdlib/utils/group-by
*
* @example
* var groupBy = require( '@stdlib/utils/group-by' );
*
* function indicator( v ) {
*     return v[ 0 ];
* }
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
*
* var out = groupBy( arr, indicator );
* // returns { 'b': [ 'beep', 'boop', 'bar' ], 'f': [ 'foo' ] }
*
* @example
* var groupBy = require( '@stdlib/utils/group-by' );
*
* function indicator( v ) {
*     return v[ 0 ];
* }
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
*
* var opts = {
*     'returns': 'indices'
* };
* var out = groupBy( arr, opts, indicator );
* // returns { 'b': [ 0, 1, 3 ], 'f': [ 2 ] }
*
* @example
* var groupBy = require( '@stdlib/utils/group-by' );
*
* function indicator( v ) {
*     return v[ 0 ];
* }
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
*
* var opts = {
*     'returns': '*'
* };
* var out = groupBy( arr, opts, indicator );
* // returns { 'b': [ [ 0, 'beep' ], [ 1, 'boop' ], [ 3, 'bar' ] ], 'f': [ [ 2, 'foo' ] ] }
*/

/**
* Group values as arrays associated with distinct keys.
*
* @module @stdlib/utils/group
*
* @example
* var group = require( '@stdlib/utils/group' );
*
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
* var groups = [ 'b', 'b', 'f', 'b' ];
*
* var out = group( arr, groups );
* // returns { 'b': [ 'beep', 'boop', 'bar' ], 'f': [ 'foo' ] }
*
* @example
* var group = require( '@stdlib/utils/group' );
*
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
* var groups = [ 'b', 'b', 'f', 'b' ];
*
* var opts = {
*     'returns': 'indices'
* };
*
* var out = group( arr, opts, groups );
* // returns { 'b': [ 0, 1, 3 ], 'f': [ 2 ] }
*
* @example
* var group = require( '@stdlib/utils/group' );
*
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
* var groups = [ 'b', 'b', 'f', 'b' ];
*
* var opts = {
*     'returns': '*'
* };
*
* var out = group( arr, opts, groups );
* // returns { 'b': [ [ 0, 'beep' ], [ 1, 'boop' ], [ 3, 'bar' ] ], 'f': [ [ 2, 'foo' ] ] }
*/

/**
* Groups values according to an indicator function and outputs results according to element indices.
*
* ## Notes
*
* -   Checking for an "own" property is necessary to guard against the edge case where an indicator function returns a group identifier which matches a method or property on the `Object` prototype.
*
*
* @private
* @param {Collection} collection - collection to group
* @param {Options} opts - function options
* @param {*} [opts.thisArg] - execution context
* @param {Function} indicator - indicator function specifying which group an element in the input collection belongs to
* @returns {Object} group results
*
* @example
* function indicator( v ) {
*     return v[ 0 ];
* }
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
*
* var out = groupBy( arr, {}, indicator );
* // returns { 'b': [ 0, 1, 3 ], 'f': [ 2 ] }
*/

/**
* Groups values according to an indicator function and outputs results as element values.
*
* ## Notes
*
* -   We need to cache the collection value to prevent the edge case where, during the invocation of the indicator function, the element at index `i` is swapped for some other value. For some, that might be a feature; here, we take the stance that one should be less clever.
* -   Checking for an "own" property is necessary to guard against the edge case where an indicator function returns a group identifier which matches a method or property on the `Object` prototype.
*
*
* @private
* @param {Collection} collection - collection to group
* @param {Options} opts - function options
* @param {*} [opts.thisArg] - execution context
* @param {Function} indicator - indicator function specifying which group an element in the input collection belongs to
* @returns {Object} group results
*
* @example
* function indicator( v ) {
*     return v[ 0 ];
* }
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
*
* var out = groupBy( arr, {}, indicator );
* // returns { 'b': [ 'beep', 'boop', 'bar' ], 'f': [ 'foo' ] }
*/

/**
* Groups values according to an indicator function and outputs results as index-element values.
*
* ## Notes
*
* -   We need to cache the collection value to prevent the edge case where, during the invocation of the indicator function, the element at index `i` is swapped for some other value. For some, that might be a feature; here, we take the stance that one should be less clever.
* -   Checking for an "own" property is necessary to guard against the edge case where an indicator function returns a group identifier which matches a method or property on the `Object` prototype.
*
*
* @private
* @param {Collection} collection - collection to group
* @param {Options} opts - function options
* @param {*} [opts.thisArg] - execution context
* @param {Function} indicator - indicator function specifying which group an element in the input collection belongs to
* @returns {Object} group results
*
* @example
* function indicator( v ) {
*     return v[ 0 ];
* }
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
*
* var out = groupBy( arr, {}, indicator );
* // returns { 'b': [ [ 0, 'beep' ], [ 1, 'boop' ], [ 3, 'bar' ] ], 'f': [ [ 2, 'foo' ] ] }
*/

/**
* Groups values according to an indicator function and returns group counts.
*
* @param {Collection} collection - input collection
* @param {Options} [options] - function options
* @param {*} [options.thisArg] - execution context
* @param {Function} indicator - indicator function specifying which group an element in the input collection belongs to
* @throws {TypeError} first argument must be a collection
* @throws {TypeError} options argument must be an object
* @throws {TypeError} last argument must be a function
* @throws {TypeError} must provide valid options
* @returns {Object} counts
*
* @example
* function indicator( v ) {
*     return v[ 0 ];
* }
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
*
* var out = countBy( arr, indicator );
* // returns { 'b': 3, 'f': 1 }
*/

/**
* Groups values according to an indicator function.
*
* @param {Collection} collection - collection to group
* @param {Options} [options] - function options
* @param {*} [options.thisArg] - execution context
* @param {string} [options.returns="values"] - if `values`, values are returned; if `indices`, indices are returned; if `*`, both indices and values are returned
* @param {Function} indicator - indicator function specifying which group an element in the input collection belongs to
* @throws {TypeError} first argument must be a collection
* @throws {TypeError} options argument must be an object
* @throws {TypeError} last argument must be a function
* @throws {TypeError} must provide valid options
* @returns {Object} group results
*
* @example
* function indicator( v ) {
*     return v[ 0 ];
* }
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
*
* var out = groupBy( arr, indicator );
* // returns { 'b': [ 'beep', 'boop', 'bar' ], 'f': [ 'foo' ] }
*
* @example
* function indicator( v ) {
*     return v[ 0 ];
* }
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
*
* var opts = {
*     'returns': 'indices'
* };
* var out = groupBy( arr, opts, indicator );
* // returns { 'b': [ 0, 1, 3 ], 'f': [ 2 ] }
*
* @example
* function indicator( v ) {
*     return v[ 0 ];
* }
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
*
* var opts = {
*     'returns': '*'
* };
* var out = groupBy( arr, opts, indicator );
* // returns { 'b': [ [ 0, 'beep' ], [ 1, 'boop' ], [ 3, 'bar' ] ], 'f': [ [ 2, 'foo' ] ] }
*/

/**
* Groups values as arrays associated with distinct keys and outputs element indices.
*
* ## Notes
*
* -   Checking for an "own" property is necessary to guard against the edge case where a group identifier which matches a method or property on the `Object` prototype.
*
*
* @private
* @param {Collection} collection - collection to group
* @param {Collection} groups - collection defining which group an element in the input collection belongs to
* @returns {Object} group results
*
* @example
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
* var groups = [ 'b', 'b', 'f', 'b' ];
*
* var out = group( arr, groups );
* // returns { 'b': [ 0, 1, 3 ], 'f': [ 2 ] }
*/

/**
* Groups values as arrays associated with distinct keys and outputs element values.
*
* ## Notes
*
* -   Checking for an "own" property is necessary to guard against the edge case where a group identifier which matches a method or property on the `Object` prototype.
*
*
* @private
* @param {Collection} collection - collection to group
* @param {Collection} groups - collection defining which group an element in the input collection belongs to
* @returns {Object} group results
*
* @example
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
* var groups = [ 'b', 'b', 'f', 'b' ];
*
* var out = group( arr, groups );
* // returns { 'b': [ 'beep', 'boop', 'bar' ], 'f': [ 'foo' ] }
*/

/**
* Groups values as arrays associated with distinct keys and outputs index-element pairs.
*
* ## Notes
*
* -   Checking for an "own" property is necessary to guard against the edge case where a group identifier which matches a method or property on the `Object` prototype.
*
*
* @private
* @param {Collection} collection - collection to group
* @param {Collection} groups - collection defining which group an element in the input collection belongs to
* @returns {Object} group results
*
* @example
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
* var groups = [ 'b', 'b', 'f', 'b' ];
*
* var out = group( arr, groups );
* // returns { 'b': [ [ 0, 'beep' ], [ 1, 'boop' ], [ 3, 'bar' ] ], 'f': [ [ 2, 'foo' ] ] }
*/

/**
* Groups values as arrays associated with distinct keys.
*
* @param {Collection} collection - collection to group
* @param {Options} [options] - function options
* @param {string} [options.returns="values"] - if `values`, values are returned; if `indices`, indices are returned; if `*`, both indices and values are returned
* @param {Collection} groups - collection defining which group an element in the input collection belongs to
* @throws {TypeError} first argument must be a collection
* @throws {TypeError} options argument must be an object
* @throws {TypeError} last argument must be a collection
* @throws {TypeError} must provide valid options
* @throws {RangeError} first and last arguments must be the same length
* @returns {Object} group results
*
* @example
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
* var groups = [ 'b', 'b', 'f', 'b' ];
*
* var out = group( arr, groups );
* // returns { 'b': [ 'beep', 'boop', 'bar' ], 'f': [ 'foo' ] }
*
* @example
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
* var groups = [ 'b', 'b', 'f', 'b' ];
*
* var opts = {
*     'returns': 'indices'
* };
*
* var out = group( arr, opts, groups );
* // returns { 'b': [ 0, 1, 3 ], 'f': [ 2 ] }
*
* @example
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
* var groups = [ 'b', 'b', 'f', 'b' ];
*
* var opts = {
*     'returns': '*'
* };
*
* var out = group( arr, opts, groups );
* // returns { 'b': [ [ 0, 'beep' ], [ 1, 'boop' ], [ 3, 'bar' ] ], 'f': [ [ 2, 'foo' ] ] }
*/

/**
* Helper function used by root finding code to convert `eta` to `x`.
*
* @private
* @param {number} t - first parameter
* @param {number} a - second parameter
* @returns {Function} root function
*/

/**
* Hierarchical clustering based on priority-queue algorithm. Implements single-linkage and complete-linkage.
*
* @param {Array} data - two-dimensional array
* @param {Object} [opts] - function options
* @param {String} [opts.linkage='complete'] - accessor function for accessing array values
* @param {String} [opts.distance='euclidean'] - boolean indicating whether to return a new array
* @return {Object} an object exposing two functions, `getTree` and `getClusters(k)`, where `k` is the number of clusters
*/

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* ## Notes
*
* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2146435072 \\), which corresponds to the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000
* ```
*
* @constant
* @type {uinteger32}
* @default 0x7ff00000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-high-word-exponent-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/constants/math/float64-high-word-exponent-mask' );
* // returns 2146435072
*/

/**
* Identity function.
*
* @module @stdlib/utils/identity-function
*
* @example
* var identity = require( '@stdlib/utils/identity-function' );
*
* var input = [];
* var output = identity( input );
*
* var bool = ( input === output );
* // returns true
*/

/**
* Identity function.
*
* @param {*} x - input value
* @returns {*} input value
*
* @example
* var v = identity( 3.14 );
* // returns 3.14
*/

/**
* Implement prototypical inheritance by replacing the prototype of one constructor with the prototype of another constructor.
*
* @module @stdlib/utils/inherit
*
* @example
* var inherit = require( '@stdlib/utils/inherit' );
*
* function Foo() {
*     return this;
* }
* Foo.prototype.beep = function beep() {
*     return 'boop';
* };
*
* function Bar() {
*     Foo.call( this );
*     return this;
* }
* inherit( Bar, Foo );
*
* var bar = new Bar();
* var v = bar.beep();
* // returns 'boop'
*/

/**
* Implementation of the high order Newton-like method.
*
* @private
* @param {number} x0 - initial value
* @param {number} a - scale parameter
* @param {number} m - indicator
* @param {Probability} p - probability value
* @param {Probability} q - probability value
* @param {number} lgama - logarithm of scale parameter
* @param {number} invfp - one over `fp`
* @param {boolean} pcase - boolean indicating whether p < 0.5
* @returns {number} function value of the inverse
*/

/**
* Implements prototypical inheritance by replacing the prototype of one constructor with the prototype of another constructor.
*
* ## Notes
*
* -   This implementation is not designed to work with ES2015/ES6 classes. For ES2015/ES6 classes, use `class` with `extends`.
* -   For reference, see [node#3455](https://github.com/nodejs/node/pull/3455), [node#4179](https://github.com/nodejs/node/issues/4179), [node#3452](https://github.com/nodejs/node/issues/3452), and [node commit](https://github.com/nodejs/node/commit/29da8cf8d7ab8f66b9091ab22664067d4468461e#diff-3deb3f32958bb937ae05c6f3e4abbdf5).
*
*
* @param {(Object|Function)} ctor - constructor which will inherit
* @param {(Object|Function)} superCtor - super (parent) constructor
* @throws {TypeError} first argument must be either an object or a function which can inherit
* @throws {TypeError} second argument must be either an object or a function from which a constructor can inherit
* @throws {TypeError} second argument must have an inheritable prototype
* @returns {(Object|Function)} child constructor
*
* @example
* function Foo() {
*     return this;
* }
* Foo.prototype.beep = function beep() {
*     return 'boop';
* };
*
* function Bar() {
*     Foo.call( this );
*     return this;
* }
* inherit( Bar, Foo );
*
* var bar = new Bar();
* var v = bar.beep();
* // returns 'boop'
*/

/**
* Incomplete beta series.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {NonNegativeInteger} s0 - initial value
* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element
* @param {Probability} y - probability equal to `1-x`
* @returns {number} function value
*/

/**
* Initializes a PRNG state array according to a seed array.
*
* @private
* @param {Uint32Array} state - state array
* @param {NonNegativeInteger} N - state array length
* @param {ArrayLikeObject} seed - seed array
* @param {NonNegativeInteger} M - seed array length
* @returns {Uint32Array} state array
*/

/**
* Initializes a shuffle table.
*
* @private
* @param {PRNG} rand - pseudorandom number generator
* @param {Int32Array} table - table
* @param {PositiveInteger} N - table size
* @throws {Error} PRNG returned `NaN`
* @returns {NumberArray} shuffle table
*/

/**
* Inverts the lower gamma function; i.e., computes `xr` such that `P(a,xr) = p`.
*
* ## Method
*
* The present code uses different methods of computation depending on the values of the input values: Taylor, asymptotic expansions and high-order Newton methods.
*
* ## Notes
*
* -   The claimed accuracy obtained using this inversion routine is near `1e-12`.
*
* ## References
*
* -   A. Gil, J. Segura and N.M. Temme, GammaCHI: a package for the inversion and computation of the gamma and chi-square distribution functions (central and noncentral). Computer Physics Commun
* -   A. Gil, J. Segura and N.M. Temme. Efficient and accurate algorithms for the computation and inversion of the incomplete gamma function ratios. SIAM J Sci Comput. (2012) 34(6), A2965-A2981
*
*
* @param {Probability} p - probability value
* @param {number} a - scale parameter
* @param {boolean} [upper=false] - boolean indicating if the function should invert the upper tail of the incomplete gamma function instead; i.e., compute `xr` such that `Q(a,xr) = p`.
* @returns {number} function value of the inverse
*/

/**
* Invisible component listening to incoming member actions and invoking a given callback.
*
* @property {string} for - ID of component whose actions should trigger callback(s)
* @property {Function} onData - callback function called with an array of all actions when a new member action arrives
* @property {Function} onDatum - callback function invoked with every individual incoming member action
* @property {boolean} returnFullObject - controls whether to invoke the supplied callback(s) with the full action object or only its value
*/

/**
* Invoke a function once for each element in a collection and update the collection in-place.
*
* @module @stdlib/utils/inmap
*
* @example
* var inmap = require( '@stdlib/utils/inmap' );
*
* function scale( value, index, collection ) {
*     return value * index;
* }
*
* var arr = [ 1, 2, 3, 4 ];
*
* var out = inmap( arr, scale );
* // returns [ 0, 2, 6, 12 ]
*
* var bool = ( out === arr );
* // returns true
*/

/**
* Invokes a function once for each element in a collection and updates the collection in-place.
*
* ## Notes
*
* -   The invoked function's return value is cached prior to updating a collection. Before updating the collection, a collection must be inspected to ensure that a collection has not been resized during invocation such that an index no longer has a corresponding element in the collection. Were a return value automatically used to update a collection, an input collection could be converted into a sparse data structure. While some might consider this a feature, here, we take stance that a user should be less clever.
*
*
* @param {Collection} collection - input collection
* @param {Function} fcn - function to invoke
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be a collection
* @throws {TypeError} second argument must be a function
* @returns {Collection} input collection
*
* @example
* function scale( value, index, collection ) {
*     return value * index;
* }
*
* var arr = [ 1, 2, 3, 4 ];
*
* var out = inmap( arr, scale );
* // returns [ 0, 2, 6, 12 ]
*
* var bool = ( out === arr );
* // returns true
*/

/**
* Iterate over the active set of predictors and perform coordinate descent until convergence.
*
* @returns {void}
*/

/**
* Iteratively re-weighted least squares algorithm.
*/

/**
* Iterator symbol.
*
* @module @stdlib/symbol/iterator
*
* @example
* var IteratorSymbol = require( '@stdlib/symbol/iterator' );
*
* function iterator() {
*     var it;
*     var i;
*
*     i = -1;
*
*     it = {};
*     it.next = next;
*     it.return = done;
*
*     if ( IteratorSymbol ) {
*         it[ IteratorSymbol ] = iterator;
*     }
*     return it;
*
*     function next() {
*         i += 1;
*         return {
*             'value': i,
*             'done': false
*         };
*     }
*
*     function done( value ) {
*         if ( arguments.length === 0 ) {
*             return {
*                 'done': true
*             };
*         }
*         return {
*             'value': value,
*             'done': true
*         };
*     }
* }
*
* var obj = iterator();
*/

/**
* Iterator symbol.
*
* @name IteratorSymbol
* @constant
* @type {(symbol|null)}
*
* @example
* function iterator() {
*     var it;
*     var i;
*
*     i = -1;
*
*     it = {};
*     it.next = next;
*     it.return = done;
*
*     if ( IteratorSymbol ) {
*         it[ IteratorSymbol ] = iterator;
*     }
*     return it;
*
*     function next() {
*         i += 1;
*         return {
*             'value': i,
*             'done': false
*         };
*     }
*
*     function done( value ) {
*         if ( arguments.length === 0 ) {
*             return {
*                 'done': true
*             };
*         }
*         return {
*             'value': value,
*             'done': true
*         };
*     }
* }
*
* var obj = iterator();
*/

/**
* Keyboard controls.
*
* @property {Object} actions - object mapping key codes to events
* @property {Node} container - DOM node for which to attach event listeners
*/

/**
* Lasso object to fit regression.
*
* @constructor
* @returns {LassoFit} instance
*/

/**
* Locally-weighted polynomial regression via the LOWESS algorithm.
*
* ## Methods
*
* -   Calculates fitted values using a nearest neighbor function and robust locally weighted regression of degree one with the tricube weight function.
*
* ## References
*
* -   Cleveland, William S. 1979. "Robust Locally and Smoothing Weighted Regression Scatterplots." _Journal of the American Statistical Association_ 74 (368): 829–36. doi:[10.1080/01621459.1979.10481038](https://doi.org/10.1080/01621459.1979.10481038).
* -   Cleveland, William S. 1981. "Lowess: A program for smoothing scatterplots by robust locally weighted regression." _American Statistician_ 35 (1): 54–55. doi:[10.2307/2683591](https://doi.org/10.2307/2683591).
*
* @private
* @param {NumericArray} x - ordered x-axis values (abscissa values)
* @param {NumericArray} y - corresponding y-axis values (ordinate values)
* @param {PositiveInteger} n - number of observations
* @param {PositiveNumber} f - smoother span (proportion of points which influence smoothing at each value)
* @param {NonNegativeInteger} nsteps - number of iterations in the robust fit
* @param {PositiveNumber} delta - nonnegative parameter which may be used to reduce the number of computations
* @returns {Object} sorted x-values and fitted values
*/

/**
* Locally-weighted polynomial regression via the LOWESS algorithm.
*
* ## References
*
* -   Cleveland, William S. 1979. "Robust Locally and Smoothing Weighted Regression Scatterplots." _Journal of the American Statistical Association_ 74 (368): 829–36. doi:[10.1080/01621459.1979.10481038](https://doi.org/10.1080/01621459.1979.10481038).
* -   Cleveland, William S. 1981. "Lowess: A program for smoothing scatterplots by robust locally weighted regression." _American Statistician_ 35 (1): 54–55. doi:[10.2307/2683591](https://doi.org/10.2307/2683591).
*
* @param {NumericArray} x - ordered x-axis values (abscissa values)
* @param {NumericArray} y - corresponding y-axis values (ordinate values)
* @param {Options} options - function options
* @param {PositiveNumber} [options.f=2/3] - smoother span (proportion of points which influence smoothing at each value)
* @param {integer} [options.nsteps=3] - number of iterations in the robust fit (fewer iterations translates to faster function execution)
* @param {NonNegativeNumber} [options.delta] - nonnegative parameter which may be used to reduce the number of computations
* @param {boolean} [options.sorted=false] - boolean indicating if the input array `x` is already in sorted order
* @throws {TypeError} first argument must be a numeric array
* @throws {TypeError} second argument must be a numeric array
* @throws {Error} arguments `x` and `y` must have the same length
* @returns {Object} ordered x-values and fitted values
*/

/**
* Locally-weighted polynomial regression via the LOWESS algorithm.
*
* @module @stdlib/stats/lowess
*
* @example
* var lowess = require( '@stdlib/stats/lowess' );
*
* var x = [
*     4, 4, 7, 7, 8, 9, 10, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14,
*     14, 14, 14, 15, 15, 15, 16, 16, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20,
*     20, 20, 20, 20, 22, 23, 24, 24, 24, 24, 25
* ];
* var y = [
*     2, 10, 4, 22, 16, 10, 18, 26, 34, 17, 28, 14, 20, 24, 28, 26, 34, 34, 46,
*     26, 36, 60, 80, 20, 26, 54, 32, 40, 32, 40, 50, 42, 56, 76, 84, 36, 46, 68,
*     32, 48, 52, 56, 64, 66, 54, 70, 92, 93, 120, 85
* ];
*
* var out = lowess( x, y );
* /* returns
*     {
*         'x': [
*             4,
*             4,
*             7,
*             7,
*             ...,
*             24,
*             24,
*             24,
*             25
*         ],
*         'y': [
*             ~4.857,
*             ~4.857,
*             ~13.1037,
*             ~13.1037,
*             ...,
*             ~79.102,
*             ~79.102,
*             ~79.102,
*             ~84.825
*         ]
*     }
* *\/
*/

/**
* Lognormal distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [sigma=1.0] - scale parameter
* @throws {TypeError} `sigma` must be a positive number
* @returns {LogNormal} distribution instance
*
* @example
* var lognormal = new LogNormal( 1.0, 1.0 );
*
* var y = lognormal.cdf( 1.5 );
* // returns ~0.276
*
* var v = lognormal.mean;
* // returns ~4.482
*/

/**
* Lognormal distribution constructor.
*
* @module @stdlib/stats/base/dists/lognormal/ctor
*
* @example
* var LogNormal = require( '@stdlib/stats/base/dists/lognormal/ctor' );
*
* var lognormal = new LogNormal( 1.0, 1.0 );
*
* var y = lognormal.cdf( 1.5 );
* // returns ~0.276
*
* var mean = lognormal.mean;
* // returns ~4.482
*/

/**
* Lognormal distribution differential entropy.
*
* @name entropy
* @memberof LogNormal.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.entropy;
* // returns ~7.904
*/

/**
* Lognormal distribution entropy.
*
* @module @stdlib/stats/base/dists/lognormal/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/lognormal/entropy' );
*
* var y = entropy( 0.0, 1.0 );
* // returns ~1.419
*
* y = entropy( 4.0, 2.0 );
* // returns ~6.112
*/

/**
* Lognormal distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/lognormal/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/lognormal/kurtosis' );
*
* var y = kurtosis( 0.0, 1.0 );
* // returns ~110.936
*
* y = kurtosis( 4.0, 2.0 );
* // returns ~9220556.977
*/

/**
* Lognormal distribution excess kurtosis.
*
* @name kurtosis
* @memberof LogNormal.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.kurtosis;
* // returns 1.4243659274306933e+250
*/

/**
* Lognormal distribution expected value.
*
* @module @stdlib/stats/base/dists/lognormal/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/lognormal/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns ~1.649
*
* y = mean( 4.0, 2.0 );
* // returns ~403.429
*/

/**
* Lognormal distribution expected value.
*
* @name mean
* @memberof LogNormal.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.mean;
* // returns 1.0148003881138887e+33
*/

/**
* Lognormal distribution median.
*
* @module @stdlib/stats/base/dists/lognormal/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/lognormal/median' );
*
* var y = median( 0.0, 1.0 );
* // returns 1.0
*
* y = median( 4.0, 2.0 );
* // returns ~54.598
*/

/**
* Lognormal distribution median.
*
* @name median
* @memberof LogNormal.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.median;
* // returns ~54.598
*/

/**
* Lognormal distribution mode.
*
* @module @stdlib/stats/base/dists/lognormal/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/lognormal/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns ~0.368
*
* y = mode( 4.0, 2.0 );
* // returns 1.0
*/

/**
* Lognormal distribution mode.
*
* @name mode
* @memberof LogNormal.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.mode;
* // returns 1.580420060273613e-61
*/

/**
* Lognormal distribution skewness.
*
* @module @stdlib/stats/base/dists/lognormal/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/lognormal/skewness' );
*
* var y = skewness( 0.0, 1.0 );
* // returns ~6.185
*
* y = skewness( 4.0, 2.0 );
* // returns ~414.359
*/

/**
* Lognormal distribution skewness.
*
* @name skewness
* @memberof LogNormal.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.skewness;
* // returns 6.421080152185613e+93
*/

/**
* Lognormal distribution standard deviation.
*
* @module @stdlib/stats/base/dists/lognormal/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/lognormal/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns ~2.161
*
* y = stdev( 4.0, 2.0 );
* // returns ~2953.533
*/

/**
* Lognormal distribution standard deviation.
*
* @name stdev
* @memberof LogNormal.prototype
* @type {NonNegativeNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.stdev;
* // returns 1.886180808490652e+64
*/

/**
* Lognormal distribution variance.
*
* @module @stdlib/stats/base/dists/lognormal/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/lognormal/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns ~4.671
*
* y = variance( 4.0, 2.0 );
* // returns ~8723355.729
*/

/**
* Lognormal distribution variance.
*
* @name variance
* @memberof LogNormal.prototype
* @type {NonNegativeNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.variance;
* // returns 3.55767804231845e+128
*/

/**
* Loop over the data and generate new labels.
*/

/**
* Make words pull up R documentation in a modal window when clicked.
*
* @property {Function} func - name of the `R function` for which to open the documentation. If not supplied, the content of the `RHelp` tag is assumed to be equal to the name of the function
* @property {string} library - name of the R package in which the function resides
* @property {boolean} visible - controls whether the help modal window should be opened at startup
*/

/**
* Map values from one object to a new object having the same keys.
*
* @module @stdlib/utils/map-values
*
* @example
* var mapValues = require( '@stdlib/utils/map-values' );
*
* function transform( value, key ) {
*     return key + value;
* }
*
* var obj1 = {
*     'a': 1,
*     'b': 2
* };
*
* var obj2 = mapValues( obj1, transform );
* // returns { 'a': 'a1', 'b': 'b2' }
*/

/**
* Maps values from one object to a new object having the same keys.
*
* ## Notes
*
* -   Iteration order is **not** guaranteed.
* -   The function only operates on own properties, not inherited properties.
*
*
* @param {Object} obj - source object
* @param {Function} transform - transform function
* @throws {TypeError} first argument must be an object
* @throws {TypeError} second argument must be a function
* @returns {Object} new object
*
* @example
* function transform( value, key ) {
*     return key + value;
* }
*
* var obj1 = {
*     'a': 1,
*     'b': 2
* };
*
* var obj2 = mapValues( obj1, transform );
* // returns { 'a': 'a1', 'b': 'b2' }
*/

/**
* Matches a space.
*
* Regular expression: `/[\u0009\u000A\u000B\u000C\u000D\u0020\u0085\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]/`
*
* -   `[]`
*     -   match any one of the listed characters
*
* -   `\u0009`
*     -   character tabulation (horizontal tab; `\t`)
*
* -   `\u000A`
*     -   line feed (LF; `\n`)
*
* -   `\u000B`
*     -   line tabulation (vertical tab; `\v`)
*
* -   `\u000C`
*     -   form feed (`\f`)
*
* -   `\u000D`
*     -   carriage return (CR; `\r`)
*
* -   `\u0020`
*     -   space (most common)
*
* -   `\u0085`
*     -   next line (NEL)
*
* -   `\u00A0`
*     -   non-breaking space
*
* -   `\u1680`
*     -   Ogham space mark
*
* -   `\u2000`
*     -   en quad
*
* -   `\u2001`
*     -   em quad
*
* -   `\u2002`
*     -   en space
*
* -   `\u2003`
*     -   em space
*
* -   `\u2004`
*
*     -   three-per-em space (thick space)
*
* -   `\u2005`
*     -   four-per-em space (mid space)
*
* -   `\u2006`
*     -   six-per-em space
*
* -   `\u2007`
*     -   figure space
*
* -   `\u2008`
*     -   punctuation space
*
* -   `\u2009`
*     -   thin space
*
* -   `\u200A`
*     -   hair space
*
* -   `\u2028`
*     -   line separator
*
* -   `\u2029`
*     -   paragraph separator
*
* -   `\u202F`
*     -   narrow no-break space
*
* -   `\u205F`
*     -   medium mathematical space
*
* -   `\u3000`
*     -   ideographic space
*
* -   `\uFEFF`
*     -   zero width non-breaking space
*
* @constant
* @type {RegExp}
* @default /[\u0009\u000A\u000B\u000C\u000D\u0020\u0085\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]/
* @see [whitespace]{@link https://en.wikipedia.org/wiki/Whitespace_character}
*/

/**
* Matches parts of a regular expression string.
*
* Regular expression: `/^\/((?:\\\/|[^\/])+)\/([imgy]*)$/`
*
* -   `/^\/`
*     -   match a string that begins with a `/`
*
* -   `()`
*     -   capture
*
* -   `(?:)+`
*     -   capture, but do not remember, a group of characters which occur one or more times
*
* -   `\\\/`
*     -   match the literal `\/`
*
* -   `|`
*     -   OR
*
* -   `[^\/]`
*     -   anything which is not the literal `\/`
*
* -   `\/`
*     -   match the literal `/`
*
* -   `([imgy]*)`
*     -   capture any characters matching `imgy` occurring zero or more times
*
* -   `$/`
*     -   string end
*
*
* @constant
* @type {RegExp}
* @default /^\/((?:\\\/|[^\/])+)\/([imgy]*)$/
*/

/**
* Matrix product of `A` and `B`.
*
* @param {Matrix} A - first input matrix
* @param {Matrix} B - second input matrix
* @returns {Matrix} A * B
*/

/**
* Maximum Unicode code point in the Basic Multilingual Plane (BMP).
*
* @constant
* @type {integer32}
* @default 65535
* @see [Unicode]{@link https://en.wikipedia.org/wiki/Unicode}
*/

/**
* Maximum Unicode code point in the Basic Multilingual Plane (BMP).
*
* @module @stdlib/constants/string/unicode-max-bmp
* @type {integer32}
*
* @example
* var UNICODE_MAX_BMP = require( '@stdlib/constants/string/unicode-max-bmp' );
* // returns 65535
*/

/**
* Maximum Unicode code point.
*
* @constant
* @type {integer32}
* @default 1114111
* @see [Unicode]{@link https://en.wikipedia.org/wiki/Unicode}
*/

/**
* Maximum Unicode code point.
*
* @module @stdlib/constants/string/unicode-max
* @type {integer32}
*
* @example
* var UNICODE_MAX = require( '@stdlib/constants/string/unicode-max' );
* // returns 1114111
*/

/**
* Maximum double-precision floating-point number.
*
* ## Notes
*
* The maximum is given by
*
* ```tex
* 2^{1023} (2 - 2^{-52})
* ```
*
* @constant
* @type {number}
* @default 1.7976931348623157e+308
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* Maximum double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max
* @type {number}
*
* @example
* var FLOAT64_MAX = require( '@stdlib/constants/math/float64-max' );
* // returns 1.7976931348623157e+308
*/

/**
* Maximum length of a generic array.
*
* @module @stdlib/constants/array/max-array-length
*
* @example
* var MAX_ARRAY_LENGTH = require( '@stdlib/constants/array/max-array-length' );
* // returns 4294967295
*/

/**
* Maximum length of a generic array.
*
* ```tex
* 2^{32} - 1
* ```
*
* @constant
* @type {uinteger32}
* @default 4294967295
*/

/**
* Maximum length of a typed array.
*
* @module @stdlib/constants/array/max-typed-array-length
*
* @example
* var MAX_TYPED_ARRAY_LENGTH = require( '@stdlib/constants/array/max-typed-array-length' );
* // returns 9007199254740991
*/

/**
* Maximum length of a typed array.
*
* ```tex
* 2^{53} - 1
* ```
*
* @constant
* @type {number}
* @default 9007199254740991
*/

/**
* Maximum safe double-precision floating-point integer.
*
* ## Notes
*
* The integer has the value
*
* ```tex
* 2^{53} - 1
* ```
*
* @constant
* @type {number}
* @default 9007199254740991
* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* Maximum safe double-precision floating-point integer.
*
* @module @stdlib/constants/math/float64-max-safe-integer
* @type {number}
*
* @example
* var FLOAT64_MAX_SAFE_INTEGER = require( '@stdlib/constants/math/float64-max-safe-integer' );
* // returns 9007199254740991
*/

/**
* Maximum signed 16-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{15} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 32767
*/

/**
* Maximum signed 16-bit integer.
*
* @module @stdlib/constants/math/int16-max
* @type {integer32}
*
* @example
* var INT16_MAX = require( '@stdlib/constants/math/int16-max' );
* // returns 32767
*/

/**
* Maximum signed 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{31} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 01111111111111111111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 2147483647
*/

/**
* Maximum signed 32-bit integer.
*
* @module @stdlib/constants/math/int32-max
* @type {integer32}
*
* @example
* var INT32_MAX = require( '@stdlib/constants/math/int32-max' );
* // returns 2147483647
*/

/**
* Maximum signed 8-bit integer.
*
* ## Notes
*
* The number is given by
*
* ```tex
* 2^{7} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 01111111
* ```
*
* @constant
* @type {integer32}
* @default 127
*/

/**
* Maximum signed 8-bit integer.
*
* @module @stdlib/constants/math/int8-max
* @type {integer32}
*
* @example
* var INT8_MAX = require( '@stdlib/constants/math/int8-max' );
* // returns 127
*/

/**
* Maximum single-precision floating-point number.
*
* ## Notes
*
* The maximum is given by
*
* ```tex
* 2^{127} (2 - 2^{-23})
* ```
*
* @constant
* @type {number}
* @default 3.4028234663852886e+38
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* Maximum single-precision floating-point number.
*
* @module @stdlib/constants/math/float32-max
* @type {number}
*
* @example
* var FLOAT32_MAX = require( '@stdlib/constants/math/float32-max' );
* // returns 3.4028234663852886e+38
*/

/**
* Maximum unsigned 16-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{16} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 1111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 65535
*/

/**
* Maximum unsigned 16-bit integer.
*
* @module @stdlib/constants/math/uint16-max
* @type {integer32}
*
* @example
* var UINT16_MAX = require( '@stdlib/constants/math/uint16-max' );
* // returns 65535
*/

/**
* Maximum unsigned 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{32} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111111111111111111111111111
* ```
*
* @constant
* @type {uinteger32}
* @default 4294967295
*/

/**
* Maximum unsigned 32-bit integer.
*
* @module @stdlib/constants/math/uint32-max
* @type {uinteger32}
*
* @example
* var UINT32_MAX = require( '@stdlib/constants/math/uint32-max' );
* // returns 4294967295
*/

/**
* Maximum unsigned 8-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{8} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111
* ```
*
* @constant
* @type {integer32}
* @default 255
*/

/**
* Maximum unsigned 8-bit integer.
*
* @module @stdlib/constants/math/uint8-max
* @type {integer32}
*
* @example
* var UINT8_MAX = require( '@stdlib/constants/math/uint8-max' );
* // returns 255
*/

/**
* Minimum signed 16-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* -(2^{15})
* ```
*
* which corresponds to the two's complement bit sequence
*
* ```binarystring
* 1000000000000000
* ```
*
* @constant
* @type {integer32}
* @default -32768
*/

/**
* Minimum signed 16-bit integer.
*
* @module @stdlib/constants/math/int16-min
* @type {integer32}
*
* @example
* var INT16_MIN = require( '@stdlib/constants/math/int16-min' );
* // returns -32768
*/

/**
* Minimum signed 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* -(2^{31})
* ```
*
* which corresponds to the two's complement bit sequence
*
* ```binarystring
* 10000000000000000000000000000000
* ```
*
* @constant
* @type {integer32}
* @default -2147483648
*/

/**
* Minimum signed 32-bit integer.
*
* @module @stdlib/constants/math/int32-min
* @type {integer32}
*
* @example
* var INT32_MIN = require( '@stdlib/constants/math/int32-min' );
* // returns -2147483648
*/

/**
* Minimum signed 8-bit integer.
*
* ## Notes
*
* The number is given by
*
* ```tex
* -(2^{7})
* ```
*
* which corresponds to the two's complement bit sequence
*
* ```binarystring
* 10000000
* ```
*
* @constant
* @type {integer32}
* @default -128
*/

/**
* Minimum signed 8-bit integer.
*
* @module @stdlib/constants/math/int8-min
* @type {integer32}
*
* @example
* var INT8_MIN = require( '@stdlib/constants/math/int8-min' );
* // returns -128
*/

/**
* Multidimensional array.
*
* @module @stdlib/ndarray/array
*
* @example
* var array = require( '@stdlib/ndarray/array' );
*
* var arr = array( [ [ 1, 2 ], [ 3, 4 ] ] );
* // returns <ndarray>
*
* var v = arr.get( 0, 0 );
* // returns 1
*
* @example
* var array = require( '@stdlib/ndarray/array' );
*
* var opts = {
*     'dtype': 'generic',
*     'flatten': false
* };
*
* var arr = array( [ [ 1, 2 ], [ 3, 4 ] ], opts );
* // returns <ndarray>
*
* var v = arr.get( 0 );
* // returns [ 1, 2 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var array = require( '@stdlib/ndarray/array' );
*
* var opts = {
*     'shape': [ 2, 2 ]
* };
*
* var arr = array( new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] ), opts );
* // returns <ndarray>
*
* var v = arr.get( 0, 0 );
* // returns 1.0
*/

/**
* Multiplies a double-precision floating-point number by an integer power of two.
*
* @param {number} frac - fraction
* @param {integer} exp - exponent
* @returns {number} double-precision floating-point number
*
* @example
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* @example
* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* @example
* var x = ldexp( 0.0, 20 );
* // returns 0.0
*
* @example
* var x = ldexp( -0.0, 39 );
* // returns -0.0
*
* @example
* var x = ldexp( NaN, -101 );
* // returns NaN
*
* @example
* var x = ldexp( Infinity, 11 );
* // returns Infinity
*
* @example
* var x = ldexp( -Infinity, -118 );
* // returns -Infinity
*/

/**
* Multiplies each column of matrix `A` with the elements of vector `b`.
*
* @param {Matrix} A - input matrix
* @param {NumberArray} b - input vector
* @returns {Matrix} `A` with columns multiplied by elements of `b`
*/

/**
* Multiply a double-precision floating-point number by an integer power of two.
*
* @module @stdlib/math/base/special/ldexp
*
* @example
* var ldexp = require( '@stdlib/math/base/special/ldexp' );
*
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* x = ldexp( 0.0, 20 );
* // returns 0.0
*
* x = ldexp( -0.0, 39 );
* // returns -0.0
*
* x = ldexp( NaN, -101 );
* // returns NaN
*
* x = ldexp( Infinity, 11 );
* // returns Infinity
*
* x = ldexp( -Infinity, -118 );
* // returns -Infinity
*/

/**
* Naive Bayes fitting object constructor for multinomial distribution.
*
* @constructor
* @param {Matrix} x - design matrix
* @param {Array} y - vector of class memberships
* @param {number} alpha - Laplace smoothing parameter
* @returns {MultinomialFit} MultinomialFit instance
*/

/**
* Naive Bayes fitting object constructor for normal distribution.
*
* @constructor
* @param {Matrix} x - design matrix
* @param {Array} y - vector of class memberships
* @returns {GaussianFit} GaussianFit instance
*/

/**
* Natural logarithm of `2`.
*
* @module @stdlib/constants/math/float64-ln-two
* @type {number}
*
* @example
* var LN2 = require( '@stdlib/constants/math/float64-ln-two' );
* // returns 0.6931471805599453
*/

/**
* Natural logarithm of `2`.
*
* ```tex
* \ln 2
* ```
*
* @constant
* @type {number}
* @default 0.6931471805599453
*/

/**
* Natural logarithm of the maximum double-precision floating-point number.
*
* ## Notes
*
* The natural logarithm of the maximum is given by
*
* ```tex
* \ln \left( 2^{1023} (2 - 2^{-52}) \right)
* ```
*
* @constant
* @type {number}
* @default 709.782712893384
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* Natural logarithm of the maximum double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max-ln
* @type {number}
*
* @example
* var FLOAT64_MAX_LN = require( '@stdlib/constants/math/float64-max-ln' );
* // returns 709.782712893384
*/

/**
* Natural logarithm of the smallest normalized double-precision floating-point number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* -\ln \left( 2^{1023-1} \right)
* ```
*
* @constant
* @type {number}
* @default -708.3964185322641
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* Natural logarithm of the smallest normalized double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-min-ln
* @type {number}
*
* @example
* var FLOAT64_MIN_LN = require( '@stdlib/constants/math/float64-min-ln' );
* // returns -708.3964185322641
*/

/**
* Natural logarithm of the square root of `2π`.
*
* @module @stdlib/constants/math/float64-ln-sqrt-two-pi
* @type {number}
*
* @example
* var LN_SQRT_TWO_PI = require( '@stdlib/constants/math/float64-ln-sqrt-two-pi' );
* // returns 0.9189385332046728
*/

/**
* Natural logarithm of the square root of `2π`.
*
* ```tex
* \ln \sqrt{2\pi}
* ```
*
* @constant
* @type {number}
* @default 0.9189385332046728
*/

/**
* No operation.
*
* @example
* noop();
* // ...does nothing.
*/

/**
* No operation.
*
* @module @stdlib/utils/noop
*
* @example
* var noop = require( '@stdlib/utils/noop' );
*
* noop();
* // ...does nothing.
*/

/**
* Normal distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/normal/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/normal/cdf' );
*
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.977
*
* var myCDF = cdf.factory( 10.0, 2.0 );
* y = myCDF( 10.0 );
* // returns 0.5
*/

/**
* Normal distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/normal/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/normal/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.054
*
* var myPDF = pdf.factory( 10.0, 2.0 );
* y = myPDF( 10.0 );
* // returns ~0.199
*/

/**
* Normal distribution quantile function.
*
* @module @stdlib/stats/base/dists/normal/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/normal/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.842
*
* var myQuantile = quantile.factory( 10.0, 2.0 );
* y = myQuantile( 0.5 );
* // returns 10.0
*/

/**
* Normally distributed pseudorandom numbers using the improved Ziggurat method.
*
* @module @stdlib/random/base/improved-ziggurat
*
* @example
* var randn = require( '@stdlib/random/base/improved-ziggurat' );
*
* var r = randn();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/improved-ziggurat' ).factory;
*
* var randn = factory({
*     'seed': 12345
* });
*
* var r = randn();
* // returns <number>
*/

/**
* Normally distributed pseudorandom numbers.
*
* @module @stdlib/random/base/normal
*
* @example
* var normal = require( '@stdlib/random/base/normal' );
*
* var v = normal( 0.0, 1.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/normal' ).factory;
* var normal = factory( 3.0, 2.0, {
*     'seed': 297
* });
*
* var v = normal();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/normal' ).factory;
* var normal = factory({
*     'seed': 297
* });
*
* var v = normal( -3.0, 2.0 );
* // returns <number>
*/

/**
* One fourth times the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 7.85398163397448309616e-1
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/

/**
* One fourth times the mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-fourth-pi
* @type {number}
*
* @example
* var FOURTH_PI = require( '@stdlib/constants/math/float64-fourth-pi' );
* // returns 7.85398163397448309616e-1
*/

/**
* One half times the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 1.5707963267948966
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/

/**
* One half times the mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-half-pi
* @type {number}
*
* @example
* var HALF_PI = require( '@stdlib/constants/math/float64-half-pi' );
* // returns 1.5707963267948966
*/

/**
* One half times the natural logarithm of 2.
*
* @module @stdlib/constants/math/float64-half-ln-two
* @type {number}
*
* @example
* var HALF_LN2 = require( '@stdlib/constants/math/float64-half-ln-two' );
* // returns 3.46573590279972654709e-01
*/

/**
* One half times the natural logarithm of 2.
*
* ```tex
* \frac{\ln 2}{2}
* ```
*
* @constant
* @type {number}
* @default 3.46573590279972654709e-01
*/

/**
* One-way analysis of variance.
*
* @module @stdlib/stats/anova1
*
* @example
* var anova1 = require( '@stdlib/stats/anova1' );
* var x = [ 1, 3, 5, 2, 4, 6, 8, 7, 10, 11, 12, 15 ];
* var f = [ 'control', 'treatA', 'treatB', 'treatC', 'control', 'treatA', 'treatB', 'treatC', 'control', 'treatA', 'treatB', 'treatC' ];
*
* var out = anova1( x, f );
* /* returns
*     {
*         'treatment': {
*             'df': 11,
*             'ss': ~20.667,
*             'mss': ~6.889
*          }
*         'error': {
*             'df': 8,
*             'ss': ~185.333,
*             'mss': ~23.1667,
*         },
*         'statistic': ~0.297,
*         'pValue': ~0.826,
*         'means': { 'control': { 'mean': 5.0, 'sampleSize': 3, 'SD': ~4.583 },
*            'treatA': { 'mean': ~6.667, 'sampleSize': 3, 'SD': ~4.041 },
*            'treatB': { 'mean': ~8.333, 'sampleSize': 3, 'SD': ~3.512 },
*            'treatC': { 'mean': 8.0, 'sampleSize': 3, 'SD': ~6.557 }
*         },
*         'method': 'One-Way ANOVA'
*     }
* *\/
*
* var table = out.print();
* /*
* One-Way ANOVA
*
* Null Hypothesis: All Means Equal
* Alternate Hypothesis: At Least one Mean not Equal
*
* 		df	Sum Squares	Mean Sum Sq.	F Score	P Value
* Treatment	11	15		5		0.3125	0.8161
* Errors		8	128		16
*
* *\/
*/

/**
* Parses a regular expression string and returns a new regular expression.
*
* @param {string} str - regular expression string
* @throws {TypeError} must provide a regular expression string
* @returns {(RegExp|null)} regular expression or null
*
* @example
* var re = reFromString( '/beep/' );
* // returns /beep/
*/

/**
* Partially apply function arguments.
*
* @module @stdlib/utils/papply
*
* @example
* var papply = require( '@stdlib/utils/papply' );
*
* function add( x, y ) {
*     return x + y;
* }
*
* var add2 = papply( add, 2 );
*
* var sum = add2( 3 );
* // returns 5
*/

/**
* Perform C-like multiplication of two unsigned 32-bit integers.
*
* @module @stdlib/math/base/special/uimul
*
* @example
* var uimul = require( '@stdlib/math/base/special/uimul' );
*
* var v = uimul( 10>>>0, 4>>>0 );
* // returns 40
*/

/**
* Perform a one-way analysis of variance (ANOVA).
*
* @param {NumericArray} x - measured values
* @param {Array} factor - array of treatments
* @param {Options} [options] - function options
* @param {number} [options.alpha=0.05] - significance level
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {TypeError} `x` must be a numeric array
* @throws {TypeError} `factor` must be an array
* @throws {RangeError} `factor` must have at least two unique elements
* @throws {RangeError} length of `x` must be greater than or equal to two
* @throws {RangeError} `x` and `factor` must have the same length
* @returns {Object} test results
*/

/**
* Performs C-like multiplication of two unsigned 32-bit integers.
*
* ## Method
*
* -   To emulate C-like multiplication without the aid of 64-bit integers, we recognize that a 32-bit integer can be split into two 16-bit words
*
*     ```tex
*     a = w_h*2^{16} + w_l
*     ```
*
*     where \\( w_h \\) is the most significant 16 bits and \\( w_l \\) is the least significant 16 bits. For example, consider the maximum unsigned 32-bit integer \\( 2^{32}-1 \\)
*
*     ```binarystring
*     11111111111111111111111111111111
*     ```
*
*     The 16-bit high word is then
*
*     ```binarystring
*     1111111111111111
*     ```
*
*     and the 16-bit low word
*
*     ```binarystring
*     1111111111111111
*     ```
*
*     If we cast the high word to 32-bit precision and multiply by \\( 2^{16} \\) (equivalent to a 16-bit left shift), then the bit sequence is
*
*     ```binarystring
*     11111111111111110000000000000000
*     ```
*
*     Similarly, upon casting the low word to 32-bit precision, the bit sequence is
*
*     ```binarystring
*     00000000000000001111111111111111
*     ```
*
*     From the rules of binary addition, we recognize that adding the two 32-bit values for the high and low words will return our original value \\( 2^{32}-1 \\).
*
* -   Accordingly, the multiplication of two 32-bit integers can be expressed
*
*     ```tex
*     \begin{align*}
*     a \cdot b &= ( a_h \cdot 2^{16} + a_l) \cdot ( b_h \cdot 2^{16} + b_l) \\
*           &= a_l \cdot b_l + a_h \cdot b_l \cdot 2^{16} + a_l \cdot b_h \cdot 2^{16} + (a_h \cdot b_h) \cdot 2^{32} \\
*           &= a_l \cdot b_l + (a_h \cdot b_l + a_l \cdot b_h) \cdot 2^{16} + (a_h \cdot b_h) \cdot 2^{32}
*     \end{align*}
*     ```
*
* -   We note that multiplying (dividing) an integer by \\( 2^n \\) is equivalent to performing a left (right) shift of \\( n \\) bits.
*
* -   Further, as we want to return an integer of the same precision, for a 32-bit integer, the return value will be modulo \\( 2^{32} \\). Stated another way, we only care about the low word of a 64-bit result.
*
* -   Accordingly, the last term, being evenly divisible by \\( 2^{32} \\), drops from the equation leaving the remaining two terms as the remainder.
*
*     ```tex
*     a \cdot b = a_l \cdot b_l + (a_h \cdot b_l + a_l \cdot b_h) << 16
*     ```
*
* -   Lastly, the second term in the above equation contributes to the middle bits and may cause the product to "overflow". However, we can disregard (`>>>0`) overflow bits due modulo arithmetic, as discussed earlier with regard to the term involving the partial product of high words.
*
*
* @param {uinteger32} a - integer
* @param {uinteger32} b - integer
* @returns {uinteger32} product
*
* @example
* var v = uimul( 10>>>0, 4>>>0 );
* // returns 40
*/

/**
* Performs root finding via second order Newton-Raphson iteration.
*
* @private
* @param {Array} fun - two-element array of the function and its first derivative
* @param {number} guess - initial starting value.
* @param {number} min - minimum possible value for the result,used as initial lower bracket.
* @param {number} max - maximum possible value for the result, used as initial upper bracket.
* @param {PositiveInteger} digits - desired number of binary digits
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} function value
*/

/**
* Performs root finding via third order Halley iteration.
*
* @private
* @param {Array} fun - array of function and its first two derivatives
* @param {number} guess - initial starting value
* @param {number} minimum - minimum possible value for the result, used as initial lower bracket
* @param {number} maximum - maximum possible value for the result, used as initial upper bracket
* @param {PositiveInteger} digits - desired number of binary digits
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} function value
*/

/**
* Performs the computation for `kernelRempio2()`.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - output object for storing double precision numbers
* @param {integer} jz - number of terms of `ipio2[]` used
* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/π`
* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)
* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation
* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation
* @param {integer} jx - `nx - 1`
* @param {Array<number>} f - `IPIO2[]` in floating point
* @returns {number} last three binary digits of `N`
*/

/**
* Playground component to experiment with ISLE components.
*
* @property {number} value - code value (for controlled component)
* @property {number} defaultValue - value indicating the default code
* @property {Object} scope - scope object with variables / components which should be made available to the executed code; most often this is the name of the component you wish to display
* @property {Function} onChange - callback invoked with new code once code in editor changes
* @property {Object} style - CSS inline styles
*/

/**
* Plotly visualization.
*
* @property {Array} data - data array
* @property {boolean} editable - controls whether labels of the created plot are editable
* @property {boolean} draggable - controls whether the plot should be draggable
* @property {string} id - component identifier
* @property {Object} layout - Plotly layout object
* @property {boolean} legendButtons - controls whether to display buttons for changing the legend
* @property {boolean} toggleFullscreen - controls whether to allow displaying the plot in fullscreen mode
* @property {boolean} removeButtons - controls whether to remove all buttons (aside from fullscreen button if enabled)
* @property {Object} meta - plot meta-information
* @property {number} revision - when provided, causes the plot to update when the revision value is incremented
* @property {Object} style - CSS inline styles
* @property {Function} onAfterPlot - callback function invoked each time a chart is plotted
* @property {Function} onClick - callback function invoked when any element is clicked
* @property {Function} onRelayout - callback function invoked when relayout is triggered
* @property {Function} onLegendClick - callback function invoked when legend item is clicked
* @property {Function} onLegendDoubleClick - callback function invoked when legend item is double-clicked
* @property {Function} onSelected - callback function invoked when elements are selected
* @property {Function} onShare - callback function invoked when clicking on the "Share" button
*/

/**
* Predict class membership for new observation(s).
*
* @param {(Matrix|Array)} x - new observation(s)
* @returns {Array} array of predicted class memberships
*/

/**
* Predict class membership for one new observation.
*
* @param {Array} x - new observation
* @returns {(number|string)} predicted class membership
*/

/**
* Preload resources to avoid stuttering loading times.
*
* @property {(Array|string)} image - the image or the array of images that should be preloaded
*/

/**
* Prepends singleton dimensions in order to satisfy a minimum number of dimensions.
*
* @private
* @param {NonNegativeInteger} ndims - number of dimensions
* @param {Array} shape - array dimensions
* @param {NonNegativeInteger} ndmin - minimum number of dimensions
* @returns {Array} output shape array
*/

/**
* Pretty-print output of test.
*
* @param {Object} [opts] - options object
* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point
* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {string} formatted output
*/

/**
* Pretty-print output of test.
*
* @param {Object} [opts] - options object
* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point
* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision
* @throws {TypeError} options has to be simple object
* @throws {TypeError} must provide valid options
* @returns {string} formatted output
*/

/**
* QR Code.
*
* @property {string} text - text to encode in QR code
* @property {number} scale - number of pixels per modules (black dots)
* @property {boolean} center - boolean controlling whether to center the QR code
*/

/**
* Recursively (and eagerly) attempts to resolve nested array dimensions.
*
* @private
* @param {Array} shape - output array
* @param {Array} arr - array
* @returns {Array} shape array
*/

/**
* Recursively flattens an array.
*
* @private
* @param {Array} out - output array
* @param {Array} arr - input array
* @param {NonNegativeInteger} depth - recursion depth
* @returns {Array} output array
*/

/**
* Recursively performs a deep copy of an input object.
*
* @private
* @param {*} val - value to copy
* @param {(Array|Object)} copy - copy
* @param {Array} cache - an array of visited objects
* @param {Array} refs - an array of object references
* @param {NonNegativeInteger} level - copy depth
* @returns {*} deep copy
*/

/**
* Recursively verifies that all nested arrays have consistent dimensions.
*
* @private
* @param {PositiveInteger} ndims - number of dimensions
* @param {Array} shape - shape array
* @param {NonNegativeInteger} d - dimension
* @param {Array} arr - array element to verify
* @param {boolean} flg - boolean indicating whether to continue recursing
* @returns {NonNegativeInteger} number of consistent dimensions
*/

/**
* Regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
*
* @module @stdlib/regexp/function-name
* @type {RegExp}
*
* @example
* var RE_FUNCTION_NAME = require( '@stdlib/regexp/function-name' );
*
* function fname( fcn ) {
*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];
* }
*
* var fn = fname( Math.sqrt );
* // returns 'sqrt'
*
* fn = fname( Int8Array );
* // returns 'Int8Array'
*
* fn = fname( Object.prototype.toString );
* // returns 'toString'
*
* fn = fname( function(){} );
* // returns ''
*/

/**
* Regular expression to match a whitespace character.
*
* ## Notes
*
* -   Matches the 25 characters defined as whitespace ("WSpace=Y","WS") characters in the Unicode 9.0 character database.
* -   Matches one related whitespace character without the Unicode character property "WSpace=Y" (zero width non-breaking space which was deprecated as of Unicode 3.2).
*
* @module @stdlib/regexp/whitespace
* @type {RegExp}
*
* @example
* var RE_WHITESPACE = require( '@stdlib/regexp/whitespace' );
*
* var bool = RE_WHITESPACE.test( ' ' );
* // returns true
*
* bool = RE_WHITESPACE.test( '\t' );
* // returns true
*
* bool = RE_WHITESPACE.test( 'a' );
* // returns false
*/

/**
* Regular expression to parse a regular expression string.
*
* @module @stdlib/regexp/regexp
* @type {RegExp}
*
* @example
* var RE_REGEXP = require( '@stdlib/regexp/regexp' );
*
* var bool = RE_REGEXP.test( '/^beep$/' );
* // returns true
*
* bool = RE_REGEXP.test( '' );
* // returns false
*
* @example
* var RE_REGEXP = require( '@stdlib/regexp/regexp' );
*
* var parts = RE_REGEXP.exec( '/^.*$/ig' );
* // returns [ '/^.*$/ig', '^.*$', 'ig', 'index': 0, 'input': '/^.*$/ig' ]
*/

/**
* Remove punctuation characters from a string.
*
* @module @stdlib/string/remove-punctuation
*
* @example
* var removePunctuation = require( '@stdlib/string/remove-punctuation' );
*
* var out = removePunctuation( 'Sun Tzu said: "A leader leads by example not by force."' );
* // returns 'Sun Tzu said A leader leads by example not by force'
*
* out = removePunctuation( 'Double, double, toil and trouble; Fire burn, and cauldron bubble!' ) );
* // returns 'Double double toil and trouble Fire burn and cauldron bubble'
*/

/**
* Remove the last character of a string.
*
* @module @stdlib/string/remove-last
*
* @example
* var removeLast = require( '@stdlib/string/remove-last' );
*
* var out = removeLast( 'last man standing' );
* // returns 'last man standin'
*
* out = removeLast( 'Hidden Treasures' );
* // returns 'Hidden Treasure';
*/

/**
* Removes a value from the stack.
*
* @name pop
* @memberof Stack.prototype
* @type {Function}
* @returns {(*|void)} removed value
*
* @example
* var s = new Stack();
*
* // Add values to the stack:
* s.push( 'foo' ).push( 'bar' );
*
* // Remove the top value:
* var v = s.pop();
* // returns 'bar'
*
* // Add a new value to the stack:
* s.push( 'beep' );
*
* // Remove the top value:
* v = s.pop();
* // returns 'beep'
*/

/**
* Removes punctuation characters from a string.
*
* @param {string} str - input string
* @throws {TypeError} must provide a string primitive
* @returns {string} output string
*
* @example
* var str = 'Sun Tzu said: "A leader leads by example not by force."';
* var out = removePunctuation( str );
* // returns 'Sun Tzu said A leader leads by example not by force'
*
* @example
* var str = 'Double, double, toil and trouble; Fire burn, and cauldron bubble!';
* var out = removePunctuation( str );
* // returns 'Double double toil and trouble Fire burn and cauldron bubble'
*
* @example
* var str = 'This module removes these characters: `{}[]:,!/<>().;~|?\'"';
* var out = removePunctuation( str );
* // returns 'This module removes these characters '
*/

/**
* Removes the last character of a string.
*
* @param {string} str - input string
* @throws {TypeError} must provide a string primitive
* @returns {string} updated string
*
* @example
* var out = removeLast( 'last man standing' );
* // returns 'last man standin'
*
* @example
* var out = removeLast( 'presidential election' );
* // returns 'presidential electio'
*
* @example
* var out = removeLast( 'javaScript' );
* // returns 'javaScrip'
*
* @example
* var out = removeLast( 'Hidden Treasures' );
* // returns 'Hidden Treasure'
*/

/**
* Repeat a string a specified number of times and return the concatenated result.
*
* @module @stdlib/string/repeat
*
* @example
* var replace = require( '@stdlib/string/repeat' );
*
* var str = repeat( 'a', 5 );
* // returns 'aaaaa'
*
* str = repeat( '', 100 );
* // returns ''
*
* str = repeat( 'beep', 0 );
* // returns ''
*/

/**
* Repeats a string a specified number of times and returns the concatenated result.
*
* ## Methods
*
* The algorithmic trick used in the implementation is to treat string concatenation the same as binary addition (i.e., any natural number (nonnegative integer) can be expressed as a sum of powers of two).
*
* For example,
*
* ```text
* n = 10 => 1010 => 2^3 + 2^0 + 2^1 + 2^0
* ```
*
* We can produce a 10-repeat string by "adding" the results of a 8-repeat string and a 2-repeat string.
*
* The implementation is then as follows:
*
* 1.  Let `s` be the string to be repeated and `o` be an output string.
*
* 2.  Initialize an output string `o`.
*
* 3.  Check the least significant bit to determine if the current `s` string should be "added" to the output "total".
*
*     -   if the bit is a one, add
*     -   otherwise, move on
*
* 4.  Double the string `s` by adding `s` to `s`.
*
* 5.  Right-shift the bits of `n`.
*
* 6.  Check if we have shifted off all bits.
*
*     -   if yes, done.
*     -   otherwise, move on
*
* 7.  Repeat 3-6.
*
* The result is that, as the string is repeated, we continually check to see if the doubled string is one which we want to add to our "total".
*
* The algorithm runs in `O(log_2(n))` compared to `O(n)`.
*
*
* @param {string} str - string to repeat
* @param {NonNegativeInteger} n - number of times to repeat the string
* @throws {TypeError} first argument must be a string primitive
* @throws {TypeError} second argument must be a nonnegative integer
* @throws {RangeError} output string length must not exceed maximum allowed string length
* @returns {string} repeated string
*
* @example
* var str = repeat( 'a', 5 );
* // returns 'aaaaa'
*
* @example
* var str = repeat( '', 100 );
* // returns ''
*
* @example
* var str = repeat( 'beep', 0 );
* // returns ''
*/

/**
* Replace search occurrences with a replacement string.
*
* @module @stdlib/string/replace
*
* @example
* var replace = require( '@stdlib/string/replace' );
*
* var str = 'beep';
* var out = replace( str, 'e', 'o' );
* // returns 'boop'
*
* str = 'Hello World';
* out = replace( str, /world/i, 'Mr. President' );
* // returns 'Hello Mr. President'
*/

/**
* Replace search occurrences with a replacement string.
*
* @param {string} str - input string
* @param {(string|RegExp)} search - search expression
* @param {(string|Function)} newval - replacement value or function
* @throws {TypeError} first argument must be a string primitive
* @throws {TypeError} second argument argument must be a string primitive or regular expression
* @throws {TypeError} third argument must be a string primitive or function
* @returns {string} new string containing replacement(s)
*
* @example
* var str = 'beep';
* var out = replace( str, 'e', 'o' );
* // returns 'boop'
*
* @example
* var str = 'Hello World';
* var out = replace( str, /world/i, 'Mr. President' );
* // returns 'Hello Mr. President'
*
* @example
* var capitalize = require( '@stdlib/string/capitalize' );
*
* var str = 'Oranges and lemons say the bells of St. Clement\'s';
*
* function replacer( match, p1 ) {
*     return capitalize( p1 );
* }
*
* var out = replace( str, /([^\s]*)/gi, replacer);
* // returns 'Oranges And Lemons Say The Bells Of St. Clement\'s'
*/

/**
* Represents a PriorityQueue. Elements queued will always be sorted in increasing order.
*
* @param {Array} values - input array of values
* @constructor
*/

/**
* Reset the queue to zero elements
*/

/**
* Restrict a value to a specified range.
*
* @module @stdlib/math/base/special/clamp
*
* @example
* var clamp = require( '@stdlib/math/base/special/clamp' );
*
* var v = clamp( 3.14, 0.0, 5.0 );
* // returns 3.14
*
* v = clamp( -3.14, 0.0, 5.0 );
* // returns 0.0
*
* v = clamp( 10.0, 0.0, 5.0 );
* // returns 5.0
*
* v = clamp( -0.0, 0.0, 5.0 );
* // returns 0.0
*
* v = clamp( 0.0, -0.0, 5.0 );
* // returns 0.0
*
* v = clamp( NaN, 0.0, 5.0 );
* // returns NaN
*
* v = clamp( 0.0, NaN, 5.0 );
* // returns NaN
*
* v = clamp( 3.14, 0.0, NaN );
* // returns NaN
*/

/**
* Restrict an index to the interval `[0,max]`.
*
* @module @stdlib/ndarray/base/clamp-index
*
* @example
* var clampIndex = require( '@stdlib/ndarray/base/clamp-index' );
*
* var idx = clampIndex( -1, 10 );
* // returns 0
*
* idx = clampIndex( 15, 10 );
* // returns 10
*
* idx = clampIndex( 5, 10 );
* // returns 5
*/

/**
* Restricts a value to a specified range.
*
* @param {number} v - input value
* @param {number} min - minimum value
* @param {number} max - maximum value
* @returns {number} value restricted to a specified range
*
* @example
* var v = clamp( 3.14, 0.0, 5.0 );
* // returns 3.14
*
* v = clamp( -3.14, 0.0, 5.0 );
* // returns 0.0
*
* v = clamp( 10.0, 0.0, 5.0 );
* // returns 5.0
*
* v = clamp( -0.0, 0.0, 5.0 );
* // returns 0.0
*
* v = clamp( 0.0, -0.0, 5.0 );
* // returns 0.0
*
* v = clamp( NaN, 0.0, 5.0 );
* // returns NaN
*
* v = clamp( 0.0, NaN, 5.0 );
* // returns NaN
*
* v = clamp( 3.14, 0.0, NaN );
* // returns NaN
*/

/**
* Restricts an index to the interval `[0,max]`.
*
* @param {integer} idx - index
* @param {NonNegativeInteger} max - maximum index
* @returns {NonNegativeInteger} index
*
* @example
* var idx = clampIndex( -1, 10 );
* // returns 0
*
* idx = clampIndex( 15, 10 );
* // returns 10
*
* idx = clampIndex( 5, 10 );
* // returns 5
*/

/**
* Return `log(x) - (x-1)` for `x` in `~[sqrt(2)/2, sqrt(2)]`.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/

/**
* Return a JSON representation of a typed array.
*
* @module @stdlib/array/to-json
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var toJSON = require( '@stdlib/array/to-json' );
*
* var arr = new Float64Array( [ 5.0, 3.0 ] );
* var json = toJSON( arr );
* // returns { 'type': 'Float64Array', 'data': [ 5.0, 3.0 ] }
*/

/**
* Return a boolean indicating if a buffer length is compatible with provided ndarray meta data.
*
* @module @stdlib/ndarray/base/assert/is-stride-offset-buffer-compatible
*
* @example
* var isBufferLengthCompatible = require( '@stdlib/ndarray/base/assert/is-buffer-length-compatible' );
*
* var shape = [ 2, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var bool = isBufferLengthCompatible( 4, shape, strides, offset );
* // returns true
*
* @example
* var isBufferLengthCompatible = require( '@stdlib/ndarray/base/assert/is-buffer-length-compatible' );
*
* var shape = [ 2, 2 ];
* var strides = [ 2, 1 ];
* var offset = 2;
*
* var bool = isBufferLengthCompatible( 4, shape, strides, offset );
* // returns false
*/

/**
* Return a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

/**
* Return a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @module @stdlib/math/base/special/copysign
*
* @example
* var copysign = require( '@stdlib/math/base/special/copysign' );
*
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* z = copysign( -0.0, 1.0 );
* // returns 0.0
*/

/**
* Return a function which tests if every element in an array passes a test condition.
*
* @module @stdlib/assert/tools/array-function
*
* @example
* var isOdd = require( '@stdlib/assert/is-odd' );
* var arrayfcn = require( '@stdlib/assert/tools/array-function' );
*
* var arr1 = [ 1, 3, 5, 7 ];
* var arr2 = [ 3, 5, 8 ];
*
* var validate = arrayfcn( isOdd );
*
* var bool = validate( arr1 );
* // returns true
*
* bool = validate( arr2 );
* // returns false
*/

/**
* Return a function which tests if every element in an array-like object passes a test condition.
*
* @module @stdlib/assert/tools/array-like-function
*
* @example
* var isOdd = require( '@stdlib/assert/is-odd' );
* var arraylikefcn = require( '@stdlib/assert/tools/array-like-function' );
*
* var arr1 = [ 1, 3, 5, 7 ];
* var arr2 = [ 3, 5, 8 ];
*
* var validate = arraylikefcn( isOdd );
*
* var bool = validate( arr1 );
* // returns true
*
* bool = validate( arr2 );
* // returns false
*/

/**
* Return a list of ndarray casting modes.
*
* @module @stdlib/ndarray/casting-modes
*
* @example
* var modes = require( '@stdlib/ndarray/casting-modes' );
*
* var list = modes();
* // returns [ 'none', 'equiv', 'safe', 'same-kind', 'unsafe' ]
*/

/**
* Return a list of ndarray data types to which a provided ndarray data type can be safely cast or cast within the same "kind".
*
* @module @stdlib/ndarray/same-kind-casts
*
* @example
* var sameKindCasts = require( '@stdlib/ndarray/same-kind-casts' );
*
* var list = sameKindCasts( 'float32' );
* // returns [...]
*/

/**
* Return a list of ndarray data types to which a provided ndarray data type can be safely cast.
*
* @module @stdlib/ndarray/safe-casts
*
* @example
* var safeCasts = require( '@stdlib/ndarray/safe-casts' );
*
* var list = safeCasts( 'float32' );
* // returns [...]
*/

/**
* Return a list of ndarray data types.
*
* @module @stdlib/ndarray/dtypes
*
* @example
* var dtypes = require( '@stdlib/ndarray/dtypes' );
*
* var list = dtypes();
* // returns [...]
*/

/**
* Return a list of ndarray index modes.
*
* @module @stdlib/ndarray/index-modes
*
* @example
* var modes = require( '@stdlib/ndarray/index-modes' );
*
* var list = modes();
* // returns [ 'throw', 'clamp', 'wrap' ]
*/

/**
* Return a list of ndarray orders.
*
* @module @stdlib/ndarray/orders
*
* @example
* var orders = require( '@stdlib/ndarray/orders' );
*
* var list = orders();
* // returns [ 'row-major', 'column-major' ]
*/

/**
* Return a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @module @stdlib/number/float64/base/normalize
*
* @example
* var normalize = require( '@stdlib/number/float64/base/normalize' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var normalize = require( '@stdlib/number/float64/base/normalize' );
*
* var out = new Float64Array( 2 );
*
* var v = normalize( out, 3.14e-319 );
* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]
*
* var bool = ( v === out );
* // returns true
*/

/**
* Return a partial object copy excluding properties for which a predicate (function) returns a truthy value.
*
* @module @stdlib/utils/omit-by
*
* @example
* var omitBy = require( '@stdlib/utils/omit-by' );
*
* function predicate( key, value ) {
*     return ( value > 1 );
* }
*
* var obj1 = {
*     'a': 1,
*     'b': 2
* };
*
* var obj2 = omitBy( obj1, predicate );
* // returns { 'a': 1 }
*/

/**
* Return a partial object copy excluding specified keys.
*
* @module @stdlib/utils/omit
*
* @example
* var omit = require( '@stdlib/utils/omit' );
*
* var obj1 = {
*     'a': 1,
*     'b': 2
* };
*
* var obj2 = omit( obj1, 'b' );
* // returns { 'a': 1 }
*/

/**
* Return a property descriptor for an object's own property.
*
* @module @stdlib/utils/property-descriptor
*
* @example
* var getOwnPropertyDescriptor = require( '@stdlib/utils/property-descriptor' );
*
* var obj = {
*   'foo': 'bar',
*   'beep': 'boop'
* };
*
* var keys = getOwnPropertyDescriptor( obj, 'foo' );
* // returns {'configurable':true,'enumerable':true,'writable':true,'value':'bar'}
*/

/**
* Return a random permutation of elements from an array-like object.
*
* @module @stdlib/random/shuffle
*
* @example
* var shuffle = require( '@stdlib/random/shuffle' );
*
* var data = [ 1, 2, 3 ];
* var out = shuffle( data );
* // e.g., returns [ 3, 1, 2 ]
*
* out = shuffle( data, {
*     'copy': 'none'
* });
*
* var bool = ( data === out );
* // returns true
*/

/**
* Return a string value indicating a specification defined classification of an object.
*
* @module @stdlib/utils/native-class
*
* @example
* var nativeClass = require( '@stdlib/utils/native-class' );
*
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* str = nativeClass( 5 );
* // returns '[object Number]'
*
* function Beep() {
*     return this;
* }
* str = nativeClass( new Beep() );
* // returns '[object Object]'
*/

/**
* Return an array of an object's own enumerable and non-enumerable property names.
*
* @module @stdlib/utils/property-names
*
* @example
* var getOwnPropertyNames = require( '@stdlib/utils/property-names' );
*
* var keys = getOwnPropertyNames({
*   'foo': 'bar',
*   'beep': 'boop'
* });
* // e.g., returns [ 'foo', 'beep' ]
*/

/**
* Return an array of an object's own enumerable property `[key, value]` pairs.
*
* @module @stdlib/utils/entries
*
* @example
* var objectEntries = require( '@stdlib/utils/entries' );
*
* var obj = {
*     'beep': 'boop',
*     'foo': 'bar'
* };
*
* var entries = objectEntries( obj );
* // e.g., returns [ ['beep', 'boop'], ['foo', 'bar'] ]
*/

/**
* Return an array of an object's own enumerable property names.
*
* @module @stdlib/utils/keys
*
* @example
* var keys = require( '@stdlib/utils/keys' );
*
* var obj = {
*     'beep': 'boop',
*     'foo': 3.14
* };
*
* var k = keys( obj );
* // e.g., returns [ 'beep', 'foo' ]
*/

/**
* Return an array of an object's own enumerable property values.
*
* @module @stdlib/utils/values
*
* @example
* var objectValues = require( '@stdlib/utils/values' );
*
* var obj = {
*     'beep': 'boop',
*     'foo': 'bar'
* };
*
* var vals = objectValues( obj );
* // e.g., returns [ 'boop', 'bar' ]
*/

/**
* Return an index given an index mode.
*
* @module @stdlib/ndarray/base/ind
*
* @example
* var ind = require( '@stdlib/ndarray/base/ind' );
*
* var idx = ind( -1, 10, 'wrap' );
* // returns 10
*
* idx = ind( 14, 10, 'wrap' );
* // returns 3
*
* idx = ind( 6, 10, 'wrap' );
* // returns 6
*
* @example
* var ind = require( '@stdlib/ndarray/base/ind' );
*
* var idx = ind( -1, 10, 'clamp' );
* // returns 0
*
* idx = ind( 14, 10, 'clamp' );
* // returns 10
*
* idx = ind( 6, 10, 'clamp' );
* // returns 6
*
* @example
* var ind = require( '@stdlib/ndarray/base/ind' );
*
* var idx = ind( 1, 10, 'throw' );
* // returns 1
*
* idx = ind( 14, 10, 'throw' );
* // throws <RangeError>
*
* idx = ind( -1, 10, 'throw' );
* // throws <RangeError>
*/

/**
* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/exponent
*
* @example
* var exponent = require( '@stdlib/number/float64/base/exponent' );
*
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* exp = exponent( -3.14 );
* // returns 1
*
* exp = exponent( 0.0 );
* // returns -1023
*
* exp = exponent( NaN );
* // returns 1024
*/

/**
* Return an unsigned 32-bit integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-low-word
*
* @example
* var getLowWord = require( '@stdlib/number/float64/base/get-low-word' );
*
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/

/**
* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-high-word
*
* @example
* var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
*
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

/**
* Return the data type of an ndarray data buffer.
*
* @module @stdlib/ndarray/base/buffer-dtype
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var dtype = require( '@stdlib/ndarray/base/buffer-dtype' );
*
* var buf = new Float64Array( 10 );
*
* var dt = dtype( buf );
* // returns 'float64'
*
* dt = dtype( {} );
* // returns 'generic'
*
* dt = dtype( 'beep' );
* // returns null
*/

/**
* Return the first index at which a given element can be found.
*
* @module @stdlib/utils/index-of
*
* @example
* var indexOf = require( '@stdlib/utils/index-of' );
*
* var arr = [ 4, 3, 2, 1 ];
* var idx = indexOf( arr, 3 );
* // returns 1
*
* arr = [ 4, 3, 2, 1 ];
* idx = indexOf( arr, 5 );
* // returns -1
*
* // Using a `fromIndex`:
* arr = [ 1, 2, 3, 4, 5, 2, 6 ];
* idx = indexOf( arr, 2, 3 );
* // returns 5
*
* // `fromIndex` which exceeds `array` length:
* arr = [ 1, 2, 3, 4, 2, 5 ];
* idx = indexOf( arr, 2, 10 );
* // returns -1
*
* // Negative `fromIndex`:
* arr = [ 1, 2, 3, 4, 5, 2, 6, 2 ];
* idx = indexOf( arr, 2, -4 );
* // returns 5
*
* idx = indexOf( arr, 2, -1 );
* // returns 7
*
* // Negative `fromIndex` exceeding input `array` length:
* arr = [ 1, 2, 3, 4, 5, 2, 6 ];
* idx = indexOf( arr, 2, -10 );
* // returns 1
*
* // Array-like objects:
* var str = 'bebop';
* idx = indexOf( str, 'o' );
* // returns 3
*/

/**
* Return the global object.
*
* @module @stdlib/utils/global
*
* @example
* var getGlobal = require( '@stdlib/utils/global' );
*
* var g = getGlobal();
* // returns {...}
*/

/**
* Return the maximum absolute value.
*
* @module @stdlib/math/base/special/maxabs
*
* @example
* var maxabs = require( '@stdlib/math/base/special/maxabs' );
*
* var v = maxabs( 3.14, -4.2 );
* // returns 4.2
*
* v = maxabs( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* v = maxabs( 3.14, NaN );
* // returns NaN
*
* v = maxabs( +0.0, -0.0 );
* // returns +0.0
*/

/**
* Return the maximum value.
*
* @module @stdlib/math/base/special/max
*
* @example
* var max = require( '@stdlib/math/base/special/max' );
*
* var v = max( 3.14, 4.2 );
* // returns 4.2
*
* v = max( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* v = max( 3.14, NaN );
* // returns NaN
*
* v = max( +0.0, -0.0 );
* // returns +0.0
*/

/**
* Return the minimum absolute value.
*
* @module @stdlib/math/base/special/minabs
*
* @example
* var minabs = require( '@stdlib/math/base/special/minabs' );
*
* var v = minabs( -3.14, 4.2 );
* // returns 3.14
*
* v = min( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* v = min( 3.14, NaN );
* // returns NaN
*
* v = min( +0.0, -0.0 );
* // returns +0.0
*/

/**
* Return the minimum value.
*
* @module @stdlib/math/base/special/min
*
* @example
* var min = require( '@stdlib/math/base/special/min' );
*
* var v = min( 3.14, 4.2 );
* // returns 3.14
*
* v = min( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* v = min( 3.14, NaN );
* // returns NaN
*
* v = min( +0.0, -0.0 );
* // returns -0.0
*/

/**
* Return the name of a function.
*
* @module @stdlib/utils/function-name
*
* @example
* var functionName = require( '@stdlib/utils/function-name' );
*
* var v = functionName( String );
* // returns 'String'
*
* v = functionName( function foo(){} );
* // returns 'foo'
*
* v = functionName( function(){} );
* // returns '' || 'anonymous'
*/

/**
* Return the number of bytes per element provided an underlying array data type.
*
* @module @stdlib/ndarray/base/bytes-per-element
*
* @example
* var bytesPerElement = require( '@stdlib/ndarray/base/bytes-per-element' );
*
* var nbytes = bytesPerElement( 'float64' );
* // returns 8
*
* nbytes = bytesPerElement( 'generic' );
* // returns null
*/

/**
* Return the number of elements currently in the queue
*/

/**
* Return the number of elements in an array.
*
* @module @stdlib/ndarray/base/numel
*
* @example
* var numel = require( '@stdlib/ndarray/base/numel' );
*
* var n = numel( [ 3, 3, 3 ] );
* // returns 27
*/

/**
* Return the prototype of a provided object.
*
* @module @stdlib/utils/get-prototype-of
*
* @example
* var getPrototype = require( '@stdlib/utils/get-prototype-of' );
*
* var proto = getPrototype( {} );
* // returns {}
*/

/**
* Returns `x`.
*
* @private
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} first number
*
* @example
* var z = f( 5.0, 3.14 );
* // returns 5.0
*/

/**
* Returns `y`.
*
* @private
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} second number
*
* @example
* var z = f( 5.0, 3.14 );
* // returns 3.14
*/

/**
* Returns a 32-bit Mersenne Twister pseudorandom number generator.
*
* ## Notes
*
* -   In contrast to the original C implementation, array seeds of length `1` are considered integer seeds. This ensures that the seed `[ 1234 ]` generates the same output as the seed `1234`. In the original C implementation, the two seeds would yield different output, which is **not** obvious from a user perspective.
*
* @param {Options} [options] - options
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} options argument must be an object
* @throws {TypeError} a seed must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integers less than or equal to the maximum unsigned 32-bit integer
* @throws {RangeError} a numeric seed must be a positive integer less than or equal to the maximum unsigned 32-bit integer
* @throws {TypeError} state must be a `Uint32Array`
* @throws {Error} must provide a valid state
* @throws {TypeError} `copy` option must be a boolean
* @returns {PRNG} Mersenne Twister PRNG
*
* @example
* var mt19937 = factory();
*
* var v = mt19937();
* // returns <number>
*
* @example
* // Return a seeded Mersenne Twister PRNG:
* var mt19937 = factory({
*     'seed': 1234
* });
*
* var v = mt19937();
* // returns 822569775
*/

/**
* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} lower order word
*
* @example
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/

/**
* Returns a JSON representation of a typed array.
*
* ## Notes
*
* -   We build a JSON object representing a typed array similar to how Node.js `Buffer` objects are represented. See [Buffer][1].
*
* [1]: https://nodejs.org/api/buffer.html#buffer_buf_tojson
*
* @param {TypedArray} arr - typed array to serialize
* @throws {TypeError} first argument must be a typed array
* @returns {Object} JSON representation
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var arr = new Float64Array( [ 5.0, 3.0 ] );
* var json = toJSON( arr );
* // returns { 'type': 'Float64Array', 'data': [ 5.0, 3.0 ] }
*/

/**
* Returns a boolean indicating if a buffer length is compatible with provided ndarray meta data.
*
* @param {NonNegativeInteger} len - buffer length
* @param {NonNegativeIntegerArray} shape - array shape
* @param {IntegerArray} strides - stride array
* @param {NonNegativeInteger} offset - index offset
* @returns {boolean} boolean indicating if a buffer length is compatible
*
* @example
* var shape = [ 2, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var bool = isBufferLengthCompatible( 4, shape, strides, offset );
* // returns true
*
* @example
* var shape = [ 2, 2 ];
* var strides = [ 2, 1 ];
* var offset = 2;
*
* var bool = isBufferLengthCompatible( 4, shape, strides, offset );
* // returns false
*/

/**
* Returns a boolean indicating if a provided ndarray data type can be cast to another ndarray data type according to a specified casting mode.
*
* @param {string} from - ndarray data type
* @param {string} to - ndarray data type
* @param {string} casting - ndarray casting mode
* @returns {boolean} boolean indicating if a data type can be cast to another data type
*
* @example
* var bool = isAllowedCast( 'float32', 'float64', 'safe' );
* // returns true
*
* bool = isAllowedCast( 'float64', 'int32', 'safe' );
* // returns false
*/

/**
* Returns a boolean indicating if a provided ndarray data type can be safely cast to another ndarray data type.
*
* @param {string} from - ndarray data type
* @param {string} to - ndarray data type
* @returns {boolean} boolean indicating if a data type can be safely cast to another data type
*
* @example
* var bool = isSafeCast( 'float32', 'float64' );
* // returns true
*
* bool = isSafeCast( 'float64', 'int32' );
* // returns false
*/

/**
* Returns a boolean indicating if a provided ndarray data type can be safely cast to, or is of the same "kind" as, another ndarray data type.
*
* @param {string} from - ndarray data type
* @param {string} to - ndarray data type
* @returns {boolean} boolean indicating if a data type can be cast to another data type
*
* @example
* var bool = isSameKindCast( 'float32', 'float64' );
* // returns true
*
* bool = isSameKindCast( 'uint16', 'int16' );
* // returns false
*/

/**
* Returns a cache key.
*
* @private
* @param {string} dtype - data type
* @param {Options} opts - function options
* @param {boolean} opts.codegen - boolean indicating whether to use code generation
* @param {string} opts.mode - specifies how to handle indices which exceed array dimensions
* @param {StringArray} opts.submode - specifies how to handle subscripts which exceed array dimensions on a per dimension basis
* @returns {string} cache key
*
* @example
* var opts = {
*     'codegen': true,
*     'mode': 'throw',
*     'submode': [ 'throw' ]
* };
* var key = getKey( 'float64', opts );
* // returns 'float64;codegen=true,mode="throw",submode=["throw"]'
*/

/**
* Returns a cache key.
*
* @private
* @param {string} dtype - data type
* @param {Options} opts - function options
* @param {boolean} opts.codegen - boolean indicating whether to use code generation
* @returns {string} cache key
*
* @example
* var opts = {
*     'codegen': true
* };
* var key = getKey( 'float64', opts );
* // returns 'float64;codegen=true'
*/

/**
* Returns a comparison result. If `-1`, `a` comes before `b`. If `1`, `b` comes before `a`. If `0`, the order stays the same.
*
* @private
* @param {number} a - first number
* @param {number} b - second number
* @returns {boolean} comparison result
*/

/**
* Returns a constructor cache.
*
* ## Notes
*
* -   Should return something similar to the following:
*
*     ```text
*     {
*         "float64;codegen=true": [],
*         "float64;codegen=false": [],
*         "float32;codegen=true": [],
*         "float32;codegen=false": [],
*         ...
*     }
*     ```
*
* @private
* @returns {Object} constructor cache
*/

/**
* Returns a constructor cache.
*
* @private
* @returns {Object} constructor cache
*/

/**
* Returns a correction for Stirling's approximation.
*
* @private
* @param {NonNegativeInteger} k - input argument
* @returns {number} correction term
*
* @example
* var c = correction( 0 );
* // returns 0.08106146679532726
*/

/**
* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @param {number} x - number from which to derive a magnitude
* @param {number} y - number from which to derive a sign
* @returns {number} a double-precision floating-point number
*
* @example
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* @example
* var z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* @example
* var z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* @example
* var z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* @example
* var z = copysign( -0.0, 1.0 );
* // returns 0.0
*/

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Normal distribution.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {Function} function to evaluate the cumulative distribution function
*
* @example
* var cdf = factory( 10.0, 2.0 );
* var y = cdf( 10.0 );
* // returns 0.5
*
* y = cdf( 12.0 );
* // returns ~0.841
*/

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Student's t distribution with degrees of freedom `v`.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5 );
* var y = cdf( 3.0 );
* // returns ~0.816
*
* y = cdf( 1.0 );
* // returns ~0.699
*/

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a binomial distribution with number of trials `n` and success probability `p`.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Function} CDF
*
* @example
* var cdf = factory( 10, 0.5 );
* var y = cdf( 3.0 );
* // returns ~0.172
*
* y = cdf( 1.0 );
* // returns ~0.011
*/

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a chi-squared distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0 );
*
* var y = cdf( 6.0 );
* // returns ~0.888
*
* y = cdf( 1.5 );
* // returns ~0.318
*/

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.
*
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5, 0.1 );
* var y = cdf( 12.0 );
* // returns ~0.879
*
* y = cdf( 8.0 );
* // returns ~0.794
*/

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 1.5 );
*
* var y = cdf( 1.0 );
* // returns ~0.023
*
* y = cdf( 4.0 );
* // returns ~0.141
*/

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.0, 10.0 );
* var y = cdf( 0.5 );
* // returns 0.05
*
* y = cdf( 8.0 );
* // returns 0.8
*/

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for an F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2`.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {Function} CDF
*
* @example
* var cdf = factory( 10.0, 2.0 );
*
* var y = cdf( 10.0 );
* // returns ~0.906
*
* y = cdf( 8.0 );
* // returns ~0.884
*/

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for an exponential distribution with rate parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5 );
* var y = cdf( 3.0 );
* // returns ~0.777
*
* y = cdf( 1.0 );
* // returns ~0.393
*/

/**
* Returns a function for evaluating the cumulative distribution function (CDF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - constant value of distribution
* @returns {Function} function to evaluate the cumulative distribution function
*
* @example
* var cdf = factory( 5.0 );
*
* var y = cdf( 3.0 );
* // returns 0.0
*
* y = cdf( 6.0 );
* // returns 1.0
*
* y = cdf( NaN );
* // returns NaN
*/

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 4.0, 2.0 );
* var y = logpdf( 10.0 );
* // returns ~-4.275
*
* y = logpdf( 2.0 );
* // returns ~-3.672
*/

/**
* Returns a function for evaluating the probability density function (PDF) for a Student's t distribution with `v` degrees of freedom.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {Function} PDF
*
* @example
* var pdf = factory( 1.0 );
* var y = pdf( 3.0 );
* // returns ~0.032
*
* y = pdf( 1.0 );
* // returns ~0.159
*/

/**
* Returns a function for evaluating the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 4.0, 2.0 );
* var y = pdf( 10.0 );
* // returns ~0.014
*
* y = pdf( 2.0 );
* // returns ~0.025
*/

/**
* Returns a function for evaluating the probability density function (PDF) for a normal distribution.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {Function} function to evaluate the probability density function
*
* @example
* var pdf = factory( 10.0, 2.0 );
* var y = pdf( 10.0 );
* // returns ~0.199
*
* y = pdf( 5.0 );
* // returns ~0.009
*/

/**
* Returns a function for evaluating the probability density function (PDF) for a uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.0, 10.0 );
* var y = pdf( 2.0 );
* // returns 0.1
*
* y = pdf( 12.0 );
* // returns 0.0
*/

/**
* Returns a function for evaluating the probability density function (PDF) for an exponential distribution with parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} probability density function (PDF)
*
* @example
* var pdf = factory( 0.5 );
* var y = pdf( 3.0 );
* // returns ~0.112
*
* y = pdf( 1.0 );
* // returns ~0.303
*/

/**
* Returns a function for evaluating the probability density function (PDF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} function to evaluate the probability density function
*
* @example
* var pdf = factory( 5.0 );
*
* var y = pdf( 0.0 );
* // returns 0.0
*
* y = pdf( 5.0 );
* // returns Infinity
*/

/**
* Returns a function for evaluating the probability mass function (PMF) for a Bernoulli distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} PMF
*
* @example
* var pmf = factory( 0.8 );
* var y = pmf( 0.0 );
* // returns 0.2
*
* y = pmf( 1.0 );
* // returns 0.8
*/

/**
* Returns a function for evaluating the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p`.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Function} PMF
*
* @example
* var pmf = factory( 10, 0.5 );
* var y = pmf( 3.0 );
* // returns ~0.117
*
* y = pmf( 5.0 );
* // returns ~0.246
*/

/**
* Returns a function for evaluating the probability mass function (PMF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} function to evaluate the probability mass function
*
* @example
* var pmf = factory( 5.0 );
*
* var y = pmf( 0.0 );
* // returns 0.0
*
* y = pmf( 5.0 );
* // returns 1.0
*/

/**
* Returns a function for evaluating the quantile function for a Student's t distribution with degrees of freedom `v`.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.5 );
* var y = quantile( 0.5 );
* // returns 0.0
*
* y = quantile( 0.8 );
* // returns ~2.513
*
* y = quantile( 1.0 );
* // returns Infinity
*/

/**
* Returns a function for evaluating the quantile function for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 4.0, 2.0 );
* var y = quantile( 0.5 );
* // returns ~54.598
*
* y = quantile( 0.8 );
* // returns ~293.901
*/

/**
* Returns a function for evaluating the quantile function of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} function to evaluate the quantile function
*
* @example
* var quantile = factory( 5.0 );
*
* var y = quantile( 0.3 );
* // returns 5.0
*
* y = quantile( 0.1 );
* // returns 5.0
*
* y = quantile( 1.1 );
* // returns NaN
*/

/**
* Returns a function for evaluating the quantile function of a normal distribution.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.5 );
* // returns 10.0
*
* y = quantile( 0.8 );
* // returns ~11.683
*/

/**
* Returns a function for evaluating the quantile function of an exponential distribution with rate parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.4 );
* var y = quantile( 0.4 );
* // returns ~1.277
*
* y = quantile( 1.0 );
* // returns Infinity
*/

/**
* Returns a function for flattening arrays having specified dimensions.
*
* @param {PositiveIntegerArray} dims - dimensions
* @param {Options} [options] - function options
* @param {boolean} [options.copy=false] - boolean indicating whether to deep copy array elements
* @throws {TypeError} first argument must be an array of positive integers
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Function} flatten function
*
* @example
* var flatten = factory( [2,2], {
*     'copy': false
* });
*
* var out = flatten( [[1,2],[3,4]] );
* // returns [ 1, 2, 3, 4 ]
*
* out = flatten( [[5,6],[7,8]] );
* // returns [ 5, 6, 7, 8 ]
*/

/**
* Returns a function of smaller arity by partially applying arguments.
*
* @param {Function} fcn - function to partially apply
* @param {...*} [args] - arguments to partially apply
* @throws {TypeError} first argument must be a function
* @returns {Function} partially applied function
*
* @example
* function add( x, y ) {
*     return x + y;
* }
*
* var add2 = papply( add, 2 );
*
* var sum = add2( 3 );
* // returns 5
*/

/**
* Returns a function to calculate the specified statistic.
*
* @param {string} statName - name of statistic
* @returns {Function} function to calculate statistic
*/

/**
* Returns a function to create a random permutation of elements from an array-like object.
*
* @param {Options} [config] - function options
* @param {PositiveInteger} [config.seed] - integer-valued seed
* @param {string} [config.copy="shallow"] - default copy option (`deep`, `shallow` or `none`)
* @throws {TypeError} options argument must be an object
* @returns {Function} shuffle function
*
* @example
* var shuffle = factory({
*     'seed': 249
* });
* var data = [ 3, 8, 4, 8 ];
* var out = shuffle( data );
* // e.g., returns [ 4, 3, 8, 8 ]
*/

/**
* Returns a function to flatten an array and deep copy.
*
* @private
* @param {Function} flatten - flatten function
* @returns {Function} wrapped flatten function
*/

/**
* Returns a function to flatten an array containing elements all having the same dimensions.
*
* @private
* @param {PositiveIntegerArray} dims - dimensions
* @returns {Function} flatten function
*/

/**
* Returns a function to flatten an array.
*
* @private
* @param {Function} flatten - flatten function
* @returns {Function} wrapped flatten function
*/

/**
* Returns a function to pretty print test results.
*
* @private
* @param {Object} results - test results
* @returns {Function} pretty print function
*/

/**
* Returns a function to sample elements from an array-like object.
*
* @param {ArrayLike} [pool] - array-like object from which to sample
* @param {Options} [options] - function options
* @param {PositiveInteger} [options.seed] - integer-valued seed
* @param {NonNegativeInteger} [options.size] - sample size
* @param {boolean} [options.replace=true] - boolean indicating whether to sample with replacement
* @param {boolean} [options.mutate=false] - boolean indicating whether to mutate the `pool` when sampling without replacement
* @throws {TypeError} `pool` must be an array-like object
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Function} function to sample elements from an array-like object
*
* @example
* var sample = factory({
*     'seed': 232
* });
* var out = sample( 'abcdefg' );
* // e.g., returns [ 'g', 'd', 'g', 'f', 'c', 'e', 'f' ]
*
* @example
* var sample = factory( [ 1, 2, 3, 4, 5, 6 ], {
*     'seed': 232,
*     'size': 2
* });
* var out = sample();
* // e.g., returns [ 6, 4 ]
*
* out = sample();
* // e.g., returns [ 6, 5 ]
*
* @example
* var sample = factory( [ 1, 2, 3, 4, 5, 6 ], {
*     'seed': 474,
*     'size': 3,
*     'mutate': true,
*     'replace': false
* });
* var out = sample();
* // e.g., returns [ 4, 3, 6 ]
*
* out = sample();
* // e.g., returns [ 1, 5, 2 ]
*
* out = sample();
* // returns null
*
* @example
* var sample = factory( [ 0, 1 ], {
*     'size': 2
* });
*
* var out = sample();
* // e.g., returns [ 1, 1 ]
*
* out = sample({
*     'size': 10
* });
* // e.g., returns [ 0, 1, 1, 1, 0, 1, 0, 0, 1, 1 ]
*
* @example
* var sample = factory( [ 0, 1 ], {
*     'size': 2
* });
*
* var out = sample();
* // e.g., returns [ 1, 1 ]
*
* out = sample({
*     'replace': false
* });
* // e.g., returns [ 0, 1 ] or [ 1, 0 ]
*
* out = sample();
* // e.g., returns [ 1, 1 ]
*
* @example
* var sample = factory( [ 0, 1 ], {
*     'size': 2,
*     'mutate': true
* });
*
* var out = sample();
* // e.g., returns [ 1, 1 ]
*
* out = sample({
*     'replace': false
* });
* // e.g., returns [ 0, 1 ] or [ 1, 0 ]
*
* out = sample();
* // returns null
*/

/**
* Returns a function which checks whether an element is equal to input.
*
* @param {string} input - the element the generated function should compare to
* @return {Function} a function which when invoked checks whether its first argument is equal to input
*/

/**
* Returns a function which tests if every element in an array passes a test condition.
*
* @param {Function} predicate - function to apply
* @throws {TypeError} must provide a function
* @returns {Function} an array function
*
* @example
* var isOdd = require( '@stdlib/assert/is-odd' );
*
* var arr1 = [ 1, 3, 5, 7 ];
* var arr2 = [ 3, 5, 8 ];
*
* var validate = arrayfcn( isOdd );
*
* var bool = validate( arr1 );
* // returns true
*
* bool = validate( arr2 );
* // returns false
*/

/**
* Returns a function which tests if every element in an array-like object passes a test condition.
*
* @param {Function} predicate - function to apply
* @throws {TypeError} must provide a function
* @returns {Function} an array-like object function
*
* @example
* var isOdd = require( '@stdlib/assert/is-odd' );
*
* var arr1 = [ 1, 3, 5, 7 ];
* var arr2 = [ 3, 5, 8 ];
*
* var validate = arraylikefcn( isOdd );
*
* var bool = validate( arr1 );
* // returns true
*
* bool = validate( arr2 );
* // returns false
*/

/**
* Returns a getter function for arrays having a specified number of dimensions.
*
* @private
* @param {PositiveInteger} ndims - array dimensions
* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions
* @returns {Function} getter
*
* @example
* var f = get( 3 );
* // returns <Function>
*/

/**
* Returns a getter function for arrays having a specified number of dimensions.
*
* @private
* @param {PositiveInteger} ndims - array dimensions
* @returns {Function} getter
*
* @example
* var f = get( 3 );
* // returns <Function>
*/

/**
* Returns a hash of functions for copying typed arrays.
*
* @private
* @returns {Object} function hash
*/

/**
* Returns a kernel density smoothing function.
*
* @param {Array} xs - input data
* @param {Function} kernel - kernel function
* @param {number} bandwidth - kernel bandwidth
* @returns {Function} kernel smoother
*/

/**
* Returns a linear congruential pseudorandom number generator (LCG) based on Park and Miller.
*
* @param {Options} [options] - options
* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} options argument must be an object
* @throws {TypeError} a seed must be either a positive integer less than the maximum signed 32-bit integer or an array-like object containing integers less than the maximum signed 32-bit integer
* @throws {RangeError} a numeric seed must be a positive integer less than the maximum signed 32-bit integer
* @throws {TypeError} state must be an `Int32Array`
* @throws {Error} must provide a valid state
* @throws {TypeError} `copy` option must be a boolean
* @returns {PRNG} LCG PRNG
*
* @example
* var minstd = factory();
*
* var v = minstd();
* // returns <number>
*
* @example
* // Return a seeded LCG:
* var minstd = factory({
*     'seed': 1234
* });
*
* var v = minstd();
* // returns 20739838
*/

/**
* Returns a linear congruential pseudorandom number generator (LCG) whose output is shuffled.
*
* @param {Options} [options] - options
* @param {PRNGSeedMINSTD} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMINSTD} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} options argument must be an object
* @throws {TypeError} a seed must be either a positive integer less than the maximum signed 32-bit integer or an array-like object containing integers less than the maximum signed 32-bit integer
* @throws {RangeError} a numeric seed must be a positive integer less than the maximum signed 32-bit integer
* @throws {TypeError} state must be an `Int32Array`
* @throws {Error} must provide a valid state
* @throws {TypeError} `copy` option must be a boolean
* @returns {PRNG} shuffled LCG PRNG
*
* @example
* var minstd = factory();
*
* var v = minstd();
* // returns <number>
*
* @example
* // Return a seeded LCG:
* var minstd = factory({
*     'seed': 1234
* });
*
* var v = minstd();
* // returns 1421600654
*/

/**
* Returns a list of English stop words.
*
* @returns {StringArray} stop words
*
* @example
* var list = stopwords();
* // returns [ 'a', 'about', 'above', 'across', 'actually', ... ]
*/

/**
* Returns a list of Finnish stop words.
*
* @returns {StringArray} stop words
*
* @example
* var list = stopwords();
* // returns [ 'aiemmin', 'aika', 'aikaa', 'aikaan', 'aikaisemmin', ... ]
*/

/**
* Returns a list of French stop words.
*
* @returns {StringArray} stop words
*
* @example
* var list = stopwords();
* // returns [ 'a', 'à', 'â', 'abord', 'afin', 'ah', ... ]
*/

/**
* Returns a list of German stop words.
*
* @returns {StringArray} stop words
*
* @example
* var list = stopwords();
* // returns [ 'a', 'ab', 'aber', 'ach', ... ]
*/

/**
* Returns a list of Italian stop words.
*
* @returns {StringArray} stop words
*
* @example
* var list = stopwords();
* // returns [ 'a', 'abbastanza', 'accidenti', 'ad', 'adesso', ... ]
*/

/**
* Returns a list of Portuguese stop words.
*
* @returns {StringArray} stop words
*
* @example
* var list = stopwords();
* // returns [ 'a', 'à', 'adeus', 'agora', 'aí', 'ainda', ... ]
*/

/**
* Returns a list of Spanish stop words.
*
* @returns {StringArray} stop words
*
* @example
* var list = stopwords();
* // returns [ 'a', 'acuerdo', 'adelante', 'ademas', 'además', ... ]
*/

/**
* Returns a list of Swedish stop words.
*
* @returns {StringArray} stop words
*
* @example
* var list = stopwords();
* // returns [ 'aderton', 'adertonde', 'adjö', 'aldrig', 'alla', 'allas', ... ]
*/

/**
* Returns a list of ndarray casting modes.
*
* @returns {StringArray} list of ndarray casting modes
*
* @example
* var list = modes();
* // returns [ 'none', 'equiv', 'safe', 'same-kind', 'unsafe' ]
*/

/**
* Returns a list of ndarray data types to which a provided ndarray data type can be safely cast or cast within the same "kind".
*
* @param {string} [dtype] - ndarray data type
* @returns {(Object|StringArray|null)} list of ndarray data types or null
*
* @example
* var list = sameKindCasts( 'float32' );
* // returns [...]
*/

/**
* Returns a list of ndarray data types to which a provided ndarray data type can be safely cast.
*
* @param {string} [dtype] - ndarray data type
* @returns {(Object|StringArray|null)} list of ndarray data types or null
*
* @example
* var list = safeCasts( 'float32' );
* // returns [...]
*/

/**
* Returns a list of ndarray data types.
*
* @returns {StringArray} list of ndarray data types
*
* @example
* var list = dtypes();
* // returns [...]
*/

/**
* Returns a list of ndarray index modes.
*
* @returns {StringArray} list of ndarray index modes
*
* @example
* var list = modes();
* // returns [ 'throw', 'clamp', 'wrap' ]
*/

/**
* Returns a list of ndarray orders.
*
* @returns {StringArray} list of ndarray orders
*
* @example
* var list = orders();
* // returns [ 'row-major', 'column-major' ]
*/

/**
* Returns a memoized ndarray constructor.
*
* @param {string} dtype - data type
* @param {PositiveInteger} ndims - number of dimensions
* @param {Options} [options] - function options
* @param {boolean} [options.codegen=true] - boolean indicating whether to use code generation
* @param {string} [options.mode="throw"] - specifies how to handle indices which exceed array dimensions
* @param {StringArray} [options.submode=["throw"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis
* @throws {TypeError} first argument must be a supported ndarray data type
* @throws {TypeError} second argument must be a number having a positive integer value
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Function} memoized ndarray constructor
*
* @example
* var f1 = ctor( 'float64', 3 );
* // returns <Function>
*
* var f2 = ctor( 'float64', 3 );
* // returns <Function>
*
* var bool = ( f1 === f2 );
* // returns true
*
* var buffer = [ 1, 2, 3, 4, 5, 6 ];
* var shape = [ 3, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var out = f1( buffer, shape, strides, offset, 'row-major' );
*/

/**
* Returns a memoized ndarray constructor.
*
* @param {string} dtype - data type
* @param {PositiveInteger} ndims - number of dimensions
* @param {Options} [options] - function options
* @param {boolean} [options.codegen=true] - boolean indicating whether to use code generation
* @returns {Function} memoized ndarray constructor
*
* @example
* var f1 = ctor( 'float64', 3 );
* // returns <Function>
*
* var f2 = ctor( 'float64', 3 );
* // returns <Function>
*
* var bool = ( f1 === f2 );
* // returns true
*
* var buffer = [ 1, 2, 3, 4, 5, 6 ];
* var shape = [ 3, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var out = f1( buffer, shape, strides, offset, 'row-major' );
*/

/**
* Returns a method for getting an array element located at a specified linear index.
*
* @private
* @param {Function} base - parent (super) method
* @param {string} mode - specifies how to handle indices which exceed array dimensions
* @returns {Function} method for getting an array element
*/

/**
* Returns a method for returning an array element.
*
* @private
* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions
* @returns {Function} method for returning an array element
*/

/**
* Returns a method for setting an array element located at a specified linear index.
*
* @private
* @param {Function} base - parent (super) method
* @param {string} mode - specifies how to handle indices which exceed array dimensions
* @returns {Function} method for setting an array element
*/

/**
* Returns a method for setting an array element.
*
* @private
* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions
* @returns {Function} method for setting an array element
*/

/**
* Returns a method to return an array element.
*
* @private
* @param {PositiveInteger} ndims - number of dimensions
* @param {boolean} codegen - boolean indicating whether to use code generation
* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions
* @returns {Function} method to return an array element
*/

/**
* Returns a method to set an array element.
*
* @private
* @param {PositiveInteger} ndims - number of dimensions
* @param {boolean} codegen - boolean indicating whether to use code generation
* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions
* @returns {Function} method to set an array element
*/

/**
* Returns a multidimensional array.
*
* @param {(ArrayLikeObject|TypedArrayLike|Buffer|ndarrayLike)} [buffer] - data source
* @param {Options} [options] - function options
* @param {(ArrayLikeObject|TypedArrayLike|Buffer|ndarrayLike)} [options.buffer] - data source
* @param {string} [options.dtype="float64"] - underlying storage data type (if the input data is not of the same type, this option specifies the data type to which to cast the input data)
* @param {string} [options.order="row-major"] - specifies the memory layout of the array as either row-major (C-style) or column-major (Fortran-style)
* @param {NonNegativeIntegerArray} [options.shape] - array shape
* @param {boolean} [options.codegen=true] - boolean indicating whether to use code generation
* @param {string} [options.mode="throw"] - specifies how to handle indices which exceed array dimensions
* @param {StringArray} [options.submode=["throw"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis
* @param {boolean} [options.copy=false] - boolean indicating whether to copy source data to a new data buffer
* @param {boolean} [options.flatten=true] - boolean indicating whether to automatically flatten generic array data sources
* @param {NonNegativeInteger} [options.ndmin=0] - minimum number of dimensions
* @param {string} [options.casting="safe"] - casting rule used to determine what constitutes an acceptable cast
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide either an array shape, data source, or both
* @throws {Error} invalid cast
* @throws {RangeError} data source must be compatible with specified meta data
* @returns {ndarray} ndarray instance
*
* @example
* var arr = array( [ [ 1, 2 ], [ 3, 4 ] ] );
* // returns <ndarray>
*
* var v = arr.get( 0, 0 );
* // returns 1
*
* @example
* var opts = {
*     'dtype': 'generic',
*     'flatten': false
* };
*
* var arr = array( [ [ 1, 2 ], [ 3, 4 ] ], opts );
* // returns <ndarray>
*
* var v = arr.get( 0 );
* // returns [ 1, 2 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var opts = {
*     'shape': [ 2, 2 ]
* };
*
* var arr = array( new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] ), opts );
* // returns <ndarray>
*
* var v = arr.get( 0, 0 );
* // returns 1.0
*/

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( new Array( 2 ), 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = new Float64Array( 2 );
*
* var v = normalize( out, 3.14e-319 );
* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var out = normalize( new Array( 2 ), 0.0 );
* // returns [ 0.0, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), Infinity );
* // returns [ Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), -Infinity );
* // returns [ -Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), NaN );
* // returns [ NaN, 0 ]
*/

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( new Array( 2 ), 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var out = normalize( new Array( 2 ), 0.0 );
* // returns [ 0.0, 0 ];
*
* @example
* var out = normalize( new Array( 2 ), Infinity );
* // returns [ Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), -Infinity );
* // returns [ -Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), NaN );
* // returns [ NaN, 0 ]
*/

/**
* Returns a normally distributed pseudorandom number with mean `mu` and standard deviation `sigma`.
*
* @name normal
* @type {PRNG}
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} pseudorandom number
*
* @example
* var v = normal( 0.0, 1.0 );
* // returns <number>
*
* @example
* var v = normal( 0.0, -1.0 );
* // returns NaN
*/

/**
* Returns a partial object copy excluding properties for which a predicate returns a truthy value.
*
* @param {Object} obj - source object
* @param {Function} predicate - predicate function
* @throws {TypeError} first argument must be an object
* @throws {TypeError} second argument must be a function
* @returns {Object} new object
*
* @example
* function predicate( key, value ) {
*     return ( value > 1 );
* }
*
* var obj1 = {
*     'a': 1,
*     'b': 2
* };
*
* var obj2 = omitBy( obj1, predicate );
* // returns { 'a': 1 }
*/

/**
* Returns a partial object copy excluding specified keys.
*
* @param {Object} obj - source object
* @param {(string|StringArray)} keys - keys to exclude
* @throws {TypeError} first argument must be an object
* @throws {TypeError} second argument must be either a string or an array of strings
* @returns {Object} new object
*
* @example
* var obj1 = {
*     'a': 1,
*     'b': 2
* };
*
* var obj2 = omit( obj1, 'b' );
* // returns { 'a': 1 }
*/

/**
* Returns a permutation which rearranges input array.
*
* @private
* @param {ArrayLike} x - input array-like object
* @returns {Array} permutation array
*/

/**
* Returns a popover displaying the unlocked hints.
*
* @private
* @param {integer} id - current hint index
* @param {Array} hints - array of hints
* @returns {Node} popover with hints
*/

/**
* Returns a property descriptor for an object's own property.
*
* ## Notes
*
* -   In contrast to the built-in `Object.getOwnPropertyDescriptor()`, this function returns `null` if provided `undefined` or `null`, rather than throwing an error.
* -   In contrast to the built-in `Object.getOwnPropertyDescriptor()`, this function returns `null` if an object does not have a provided property, rather than `undefined`.
*
* @private
* @param {*} value - input object
* @param {(string|symbol)} property - property
* @returns {(Object|null)} property descriptor or null
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 3.14
* };
*
* var desc = getOwnPropertyDescriptor( obj, 'foo' );
* // returns {'configurable':true,'enumerable':true,'writable':true,'value':3.14}
*/

/**
* Returns a property descriptor for an object's own property.
*
* ## Notes
*
* -   In contrast to the built-in `Object.getOwnPropertyDescriptor()`, this function returns `null` if provided `undefined` or `null`, rather than throwing an error.
* -   In contrast to the built-in `Object.getOwnPropertyDescriptor()`, this function returns `null` if an object does not have a provided property, rather than `undefined`.
* -   In environments lacking `Object.getOwnPropertyDescriptor()` support, property descriptors do not exist. In non-supporting environment, if an object has a provided property, this function returns a descriptor object equivalent to that returned in a supporting environment; otherwise, the function returns `null`.
*
* @private
* @param {*} value - input object
* @param {(string|symbol)} property - property
* @returns {(Object|null)} property descriptor or null
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 3.14
* };
*
* var desc = getOwnPropertyDescriptor( obj, 'foo' );
* // returns {'configurable':true,'enumerable':true,'writable':true,'value':3.14}
*/

/**
* Returns a pseudorandom integer on the interval \\([1, 2^{31}-1)\\).
*
* @private
* @returns {PositiveInteger} pseudorandom integer
*
* @example
* var v = randint32();
* // returns <number>
*/

/**
* Returns a pseudorandom integer on the interval \\([1, 2^{32}-1)\\).
*
* @private
* @returns {PositiveInteger} pseudorandom integer
*
* @example
* var v = randuint32();
* // returns <number>
*/

/**
* Returns a pseudorandom number drawn from a binomial distribution.
*
* @private
* @param {PRNG} rand - PRNG for uniformly distributed numbers
* @param {PositiveInteger} n - number of trials
* @param {Probability} p - probability of success
* @returns {NonNegativeInteger} pseudorandom number
*/

/**
* Returns a pseudorandom number drawn from a discrete uniform distribution with minimum support `a` and maximum support `b`.
*
* ## Method
*
* -   Let \\( R \\) be a pseudorandom generator (PRNG) which yields integers on the interval \\( \[ A, B ] \\).
*
* -   If \\( a = b \\), then \\( rv = a \\).
*
* -   Let \\( r1 = b - a \\) and \\( r2 = B - A \\). If \\( r2 = r1 \\) (likely a rare occurrence), then
*
*     ```tex
*     rv = ( R() - B ) + a
*     ```
*
*     where, for real integer types, operation order is important in order to avoid overflow.
*
* -   If \\( r2 < r1 \\), use rejection sampling to map random variates from \\( R \\) to a larger domain (e.g., \\( {0,1,2,3} \rightarrow {0,1,2,3,4} \\)). For real integer types (and floating-point integer values), we must take extra care to avoid overflow. During sampling, the following conditions will hold:
*
*     -   First, consider the post-condition: \\( \textrm{result} \leq r2 \\), thus avoiding overflow.
*
*     -   Begin with definition of \\( \textrm{limit} \\)
*
*         ```tex
*         \textrm{limit} = \lfloor{\frac{r2+1}{r1+1}\rfloor
*         ```
*
*         thus,
*
*         ```tex
*         \textrm{limit}\ \cdot (r1+1) \leq r2+1
*         ```
*
*     -   Let \\( m \\) be a random factor where the loop condition is defined as
*
*         ```tex
*         m \leq \textrm{limit}
*         ```
*
*     -   Let \\( \textrm{result} \\) be the generator output, which is expressed base \\( r2+1 \\) and obeys the loop invariant \\( \textrm{result} < m \\).
*
*     -   Let \\( rv \\) be a realization of the PRNG. Then,
*
*         ```tex
*         rv-A \leq r1
*         ```
*
*         and, by the loop condition, \\( m \leq \textrm{limit} \\).
*
*     -   Therefore,
*
*         ```tex
*         m \cdot (rv - A + 1) \leq r2+1
*         ```
*
*     -   Rearranging terms,
*
*         ```tex
*         m + m \cdot (rv - A) \leq r2+1
*         ```
*
*     -   Since \\( \textrm{result} < m \\),
*
*         ```tex
*         \textrm{result} + m \cdot (rv - A) < r2+1
*         ```
*
*     -   Next, consider the post-condition: \\( \textrm{result} < m \cdot (r2+1) \\).
*
*     -   Since \\( \textrm{result} < m \\) and \\( rv - A \leq r1 \\),
*
*         ```tex
*         \textrm{result} + m \cdot (rv - A) < m + m \cdot (rv - A)
*         ```
*
*     -   Therefore,
*
*         ```tex
*         \textrm{result} + m \cdot (rv - A) < m + m \cdot r1
*         ```
*
*     -   Therefore,
*
*         ```tex
*         \textrm{result} + m \cdot (rv - A) < m \cdot (r1+1)
*         ```
*
*     -   Next, consider the post-condition: \\( m \leq r2 \\).
*
*     -   According to the definition of \\( \textrm{limit} \\) and the loop condition \\( m \leq \textrm{limit} \\),
*
*         ```tex
*         m \cdot (r1+1) \leq r2+1
*         ```
*
*     -   If \\( r2 \\) is **not** an integer power of the generator range \\( r1 \\), i.e.,
*
*         ```tex
*         m \cdot (r1+1) \neq r2+1
*         ```
*
*         then
*
*         ```tex
*         m \cdot (r1+1) < r2+1
*         ```
*
*     -   Thus, \\( \textrm{result} < m \\).
*
*     -   Next, consider the post-condition: \\( r2/m < r1+1 \\).
*
*     -   To show this is true, let us try to prove its opposite. Given the loop condition \\( m > \textrm{limit} \\), assume
*
*         ```tex
*         r2/m > r1+1
*         ```
*
*     -   Accordingly,
*
*         ```tex
*         r2 \geq m \cdot (r1+1)
*         ```
*
*     -   Hence,
*
*         ```tex
*         r2+1 > m \cdot (r1+1)
*         ```
*
*     -   Using the loop condition,
*
*         ```tex
*         r2+1 > (\textrm{limit}+1) \cdot (r1+1)
*         ```
*
*     -   Rearranging terms,
*
*         ```tex
*         \frac{r2+1}{r1+1} > \textrm{limit} + 1
*         ```
*
*     -   Hence,
*
*         ```tex
*         \textrm{limit} < \lfloor{\frac{r2+1}{r1+1}} \rfloor
*         ```
*
*     -   But the definition of \\( \textrm{limit} \\) is
*
*         ```tex
*         \textrm{limit} = \lfloor{\frac{r2+1}{r1+1}}
*         ```
*
*     -   Thus, our assumption cannot be true, providing the post-condition by reductio ad absurdum.
*
*     -   Next, consider the post-condition
*
*         ```tex
*         r2 \leq \frac{r2}{m} \cdot m + (m - 1)
*         ```
*
*     -   Recall the identity
*
*         ```tex
*         r2 = \frac{r2}{m} \cdot m + r2 \mod m
*         ```
*
*     -   By the definition of the modulus
*
*         ```tex
*         r2 \mod m < m
*         ```
*
*     -   Therefore,
*
*         ```tex
*         r2 < \frac{r2}{m} \cdot m + m
*         ```
*
*     -   Hence,
*
*         ```tex
*         r2 \leq \frac{r2}{m} \cdot m + (m - 1)
*         ```
*
*     At this point, the maximum value \\( \textrm{result} \\) is \\( m-1 \\). Hence, we can generate numbers that can be at least as large as \\( r2 \\), but we must be careful to avoid overflow during addition and in the sampling rejection. Anything which overflows is larger than \\( r2 \\) and can thus be rejected.
*
* -   If \\( r1 > r2 \\), use rejection sampling to map random variates from \\( R \\) to a smaller domain (e.g., \\( {0,1,2,3,4} \rightarrow {0,1,2,3} \\)) by defining "buckets" in which multiple random variates in \\( R \\) map to a single random variate in the smaller domain. We are safe in adding 1 to \\( r2 \\); however, we need to be careful to not cause overflow when adding 1 to \\( r1 \\).
*
* @name discreteUniform
* @type {PRNG}
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {integer} pseudorandom number
*
* @example
* var v = discreteUniform( 1, 10 );
* // returns <number>
*/

/**
* Returns a pseudorandom number drawn from a discrete uniform distribution with minimum support `a` and maximum support `b`.
*
* @private
* @param {PRNG} rand - pseudorandom number generator which outputs integer values
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {integer} pseudorandom number
*/

/**
* Returns a pseudorandom number drawn from an exponential distribution with parameter `lambda`.
*
* @name exponential
* @type {PRNG}
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} pseudorandom number
*
* @example
* var v = exponential( 4.8 );
* // returns <number>
*
* @example
* var v = exponential( 0.0 );
* // returns NaN
*
* @example
* var v = exponential( NaN );
* // returns NaN
*/

/**
* Returns a pseudorandom number drawn from an exponential distribution.
*
* @private
* @param {PRNG} rand - PRNG for uniformly distributed numbers
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} pseudorandom number
*/

/**
* Returns a pseudorandom number from a normal distribution with parameters `mu` and `sigma`.
*
* @private
* @param {PRNG} rand - pseudorandom number generator
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} pseudorandom number
*/

/**
* Returns a pseudorandom number generator for generating binomially distributed random numbers.
*
* @param {PositiveInteger} [n] - number of trials
* @param {Probability} [p] - success probability
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `n` must be a positive integer
* @throws {TypeError} `p` must be a probability
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var binomial = factory( 17, 0.5 );
* var v = binomial();
* // returns <number>
*
* @example
* var binomial = factory( 8, 0.8, {
*     'seed': 297
* });
* var v = binomial();
* // returns <number>
*
* @example
* var binomial = factory();
* var v = binomial( 20, 0.5 );
* // returns <number>
*/

/**
* Returns a pseudorandom number generator for generating exponentially distributed random numbers.
*
* @param {PositiveNumber} [lambda] - rate parameter
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `lambda` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var exponential = factory( 0.5 );
* var v = exponential();
* // returns <number>
*
* @example
* var exponential = factory( 0.8, {
*     'seed': 297
* });
* var v = exponential();
* // returns ~3.735
*
* @example
* var exponential = factory();
* var v = exponential( 0.5 );
* // returns <number>
*/

/**
* Returns a pseudorandom number generator for generating normally distributed random numbers.
*
* @param {number} [mu] - mean
* @param {PositiveNumber} [sigma] - standard deviation
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `mu` must be a number
* @throws {TypeError} `sigma` must be a positive number
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var normal = factory( 0.0, 1.0 );
* var v = normal();
* // returns <number>
*
* @example
* var normal = factory( -3.0, 0.5, {
*     'seed': 297
* });
* var v = normal();
* // returns <number>
*/

/**
* Returns a pseudorandom number generator for generating random numbers draw from a discrete uniform distribution.
*
* @param {integer} [a] - minimum support
* @param {integer} [b] - maximum support
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom integers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `a` must be an integer
* @throws {TypeError} `b` must be an integer
* @throws {RangeError} `a` must be less than `b`
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {TypeError} provided PRNG must have a valid `MIN` property
* @throws {TypeError} provided PRNG must have a valid `MAX` property
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var discreteUniform = factory( 1, 10 );
* var v = discreteUniform();
* // returns <number>
*
* @example
* var discreteUniform = factory( -30, -1, {
*     'seed': 297
* });
* var v = discreteUniform();
* // returns <number>
*/

/**
* Returns a pseudorandom number generator for generating uniformly distributed random numbers on the interval \\( [0,1) \\).
*
* @param {Options} [options] - function options
* @param {string} [options.name='mt19937'] - name of pseudorandom number generator
* @param {*} [options.seed] - pseudorandom number generator seed
* @param {*} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} must provide an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide the name of a supported pseudorandom number generator
* @returns {PRNG} pseudorandom number generator
*
* @example
* var uniform = factory();
* var v = uniform();
* // returns <number>
*
* @example
* var uniform = factory({
*     'name': 'minstd'
* });
* var v = uniform();
* // returns <number>
*
* @example
* var uniform = factory({
*     'seed': 12345
* });
* var v = uniform();
* // returns <number>
*
* @example
* var uniform = factory({
*     'name': 'minstd',
*     'seed': 12345
* });
* var v = uniform();
* // returns <number>
*/

/**
* Returns a pseudorandom number generator for generating uniformly distributed random numbers.
*
* @param {number} [a] - minimum support (inclusive)
* @param {number} [b] - maximum support (exclusive)
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} `a` must be a number
* @throws {TypeError} `b` must be a number
* @throws {RangeError} `a` must be less than `b`
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var uniform = factory( 0.0, 1.0 );
*
* var v = uniform();
* // returns <number>
*
* @example
* var uniform = factory( -3.0, -1.0, {
*     'seed': 297
* });
* var v = uniform();
* // returns <number>
*/

/**
* Returns a pseudorandom number generator which implements the improved Ziggurat algorithm for generating normally distributed pseudorandom numbers.
*
* @private
* @param {PRNG} randu - PRNG for generating uniformly distributed numbers
* @param {PRNG} randi - PRNG for generating uniformly distributed integers
* @returns {number} pseudorandom number
*/

/**
* Returns a pseudorandom number generator which implements the improved Ziggurat method to generate normally distributed pseudorandom numbers.
*
* @param {Options} [options] - function options
* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} must provide an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide a valid state
* @returns {PRNG} pseudorandom number generator
*
* @example
* var randn = factory();
*
* var r = randn();
* // returns <number>
*
* @example
* // Return a seeded PRNG:
* var randn = factory({
*     'seed': 12345
* });
*
* var r = randn();
* // returns <number>
*/

/**
* Returns a random permutation of elements in `arr`.
*
* @name shuffle
* @type {Function}
* @param {ArrayLike} arr - array-like object to shuffle
* @param {Options} [options] - function options
* @param {string} [options.copy="shallow"] - string indicating whether to return a copy (`deep`,`shallow` or `none`)
* @throws {TypeError} `options` must be an object
* @throws {TypeError} must provide valid options
* @returns {ArrayLike} the shuffled array-like object
*
* @example
* var data = [ 1, 2, 3 ];
* var out = shuffle( data );
* // e.g., returns [ 3, 1, 2 ]
*
* @example
* var data = [ 1, 2, 3 ];
* var out = shuffle( data, {
*     'copy': 'none'
* });
* var bool = ( data === out );
* // returns true
*/

/**
* Returns a root finding function.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {Probability} target - probability value
* @param {boolean} invert - boolean indicating whether to find the roots of the upper or lower incomplete beta function
* @returns {Function} root finding function
*/

/**
* Returns a setter function for arrays having a specified number of dimensions.
*
* @private
* @param {PositiveInteger} ndims - array dimensions
* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions
* @returns {Function} setter
*
* @example
* var f = set( 3 );
* // returns <Function>
*/

/**
* Returns a setter function for arrays having a specified number of dimensions.
*
* @private
* @param {PositiveInteger} ndims - array dimensions
* @returns {Function} setter
*
* @example
* var f = set( 3 );
* // returns <Function>
*/

/**
* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/

/**
* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/

/**
* Returns a uniformly distributed pseudorandom number with minimum support `a` and maximum support `b`.
*
* @name uniform
* @type {PRNG}
* @param {number} a - minimum support (inclusive)
* @param {number} b - maximum support (exclusive)
* @returns {number} pseudorandom number
*
* @example
* var v = uniform( 0.0, 1.0 );
* // returns <number>
*/

/**
* Returns a uniformly distributed pseudorandom number with minimum support `a` and maximum support `b`.
*
* @private
* @param {PRNG} rand - pseudorandom number generator
* @param {number} a - minimum support (inclusive)
* @param {number} b - maximum support (exclusive)
* @returns {number} pseudorandom number
*/

/**
* Returns a uniformly distributed random number on the interval \\( [0,1) \\).
*
* @name randu
* @type {PRNG}
* @returns {number} pseudorandom number
*
* @example
* var v = randu();
* // returns <number>
*/

/**
* Returns a zero-filled contiguous linear ndarray data buffer.
*
* @param {string} dtype - data type
* @param {NonNegativeInteger} size - buffer size
* @returns {(Array|TypedArray|Buffer)|null} data buffer
*
* @example
* var buf = buffer( 'float64', 3 );
* // returns <Float64Array>[ 0.0, 0.0, 0.0 ]
*/

/**
* Returns all permutations of the elements of an array.
*
* @param {Array} arr - input array
* @returns {Array} permutation array
*/

/**
* Returns an accumulator function which incrementally computes a corrected sample standard deviation.
*
* ## Method
*
* -   This implementation uses [Welford's method][algorithms-variance] for efficient computation, which can be derived as follows. Let
*
*     ```tex
*     \begin{align*}
*     S_n &= n \sigma_n^2 \\
*         &= \sum_{i=1}^{n} (x_i - \mu_n)^2 \\
*         &= \biggl(\sum_{i=1}^{n} x_i^2 \biggr) - n\mu_n^2
*     \end{align*}
*     ```
*
*     Accordingly,
*
*     ```tex
*     \begin{align*}
*     S_n - S_{n-1} &= \sum_{i=1}^{n} x_i^2 - n\mu_n^2 - \sum_{i=1}^{n-1} x_i^2 + (n-1)\mu_{n-1}^2 \\
*                   &= x_n^2 - n\mu_n^2 + (n-1)\mu_{n-1}^2 \\
*                   &= x_n^2 - \mu_{n-1}^2 + n(\mu_{n-1}^2 - \mu_n^2) \\
*                   &= x_n^2 - \mu_{n-1}^2 + n(\mu_{n-1} - \mu_n)(\mu_{n-1} + \mu_n) \\
*                   &= x_n^2 - \mu_{n-1}^2 + (\mu_{n-1} - x_n)(\mu_{n-1} + \mu_n) \\
*                   &= x_n^2 - \mu_{n-1}^2 + \mu_{n-1}^2 - x_n\mu_n - x_n\mu_{n-1} + \mu_n\mu_{n-1} \\
*                   &= x_n^2 - x_n\mu_n - x_n\mu_{n-1} + \mu_n\mu_{n-1} \\
*                   &= (x_n - \mu_{n-1})(x_n - \mu_n) \\
*                   &= S_{n-1} + (x_n - \mu_{n-1})(x_n - \mu_n)
*     \end{align*}
*     ```
*
*     where we use the identity
*
*     ```tex
*     x_n - \mu_{n-1} = n (\mu_n - \mu_{n-1})
*     ```
*
* [algorithms-variance]: https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance
*
* @param {number} [mean] - mean value
* @throws {TypeError} must provide a number primitive
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrstdev();
*
* var s = accumulator();
* // returns null
*
* s = accumulator( 2.0 );
* // returns 0.0
*
* s = accumulator( -5.0 );
* // returns ~4.95
*
* s = accumulator();
* // returns ~4.95
*
* @example
* var accumulator = incrstdev( 3.0 );
*/

/**
* Returns an accumulator function which incrementally computes a sum of squared absolute values.
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrsumabs2();
*
* var sum = accumulator();
* // returns null
*
* sum = accumulator( 2.0 );
* // returns 4.0
*
* sum = accumulator( -5.0 );
* // returns 29.0
*
* sum = accumulator();
* // returns 29.0
*/

/**
* Returns an accumulator function which incrementally computes an arithmetic mean.
*
* ## Method
*
* -   This implementation uses [Welford's method][algorithms-variance] for efficient computation, which can be derived as follows
*
*     ```tex
*     \begin{align*}
*     \mu_n &= \frac{1}{n} \sum_{i=0}^{n-1} x_i \\
*           &= \frac{1}{n} \biggl(x_{n-1} + \sum_{i=0}^{n-2} x_i \biggr) \\
*           &= \frac{1}{n} (x_{n-1} + (n-1)\mu_{n-1}) \\
*           &= \mu_{n-1} + \frac{1}{n} (x_{n-1} - \mu_{n-1})
*     \end{align*}
*     ```
*
* [algorithms-variance]: https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmean();
*
* var mu = accumulator();
* // returns null
*
* mu = accumulator( 2.0 );
* // returns 2.0
*
* mu = accumulator( -5.0 );
* // returns -1.5
*
* mu = accumulator();
* // returns -1.5
*/

/**
* Returns an array containing coordinates such that each rectangle has the same area.
*
* @private
* @param {PositiveInteger} N - number of rectangles
* @param {number} rTail - start of right tail
* @returns {NumberArray} coordinate array
*
* @example
* var X = coordsArray( 128, 3.44 );
* // returns <Array>
*/

/**
* Returns an array containing the ratio of each pair of consecutive elements in order: `X[ i+1 ] / X[ i ]`.
*
* @private
* @param {NumberArray} X - input array
* @returns {NumberArray} ratio array
*
* @example
* var R = ratioArray( [ 1.0, 2.0, 5.0 ] );
* // returns [ 2.0, 2.5 ]
*/

/**
* Returns an array element located a specified linear view index.
*
* @private
* @param {integer} idx - linear view index
* @returns {*} array element
*/

/**
* Returns an array element.
*
* @private
* @param {...integer} idx - indices
* @returns {*} array element
*/

/**
* Returns an array of an object's own enumerable and non-enumerable property names.
*
* ## Notes
*
* -   In contrast to the built-in `Object.getOwnPropertyNames()`, this function returns an empty array if provided `undefined` or `null`, rather than throwing an error.
*
* @private
* @param {*} value - input object
* @returns {Array} a list of own property names
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 3.14
* };
*
* var keys = getOwnPropertyNames( obj );
* // e.g., returns [ 'beep', 'foo' ]
*/

/**
* Returns an array of an object's own enumerable and non-enumerable property names.
*
* ## Notes
*
* -   In contrast to the built-in `Object.getOwnPropertyNames()`, this function returns an empty array if provided `undefined` or `null`, rather than throwing an error.
* -   In environments lacking support for `Object.getOwnPropertyNames()`, property descriptors are unavailable, and thus all properties can be safely assumed to be enumerable. Hence, we can defer to calling `Object.keys`, which retrieves all own enumerable property names.
*
* @private
* @param {*} value - input object
* @returns {Array} a list of own property names
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 3.14
* };
*
* var keys = getOwnPropertyNames( obj );
* // e.g., returns [ 'beep', 'foo' ]
*/

/**
* Returns an array of an object's own enumerable property `[key, value]` pairs.
*
* @param {ObjectLike} obj - input object
* @throws {TypeError} must provide an object-like value
* @returns {Array} array containing key-value pairs
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 'bar'
* };
*
* var entries = objectEntries( obj );
* // e.g., returns [ ['beep', 'boop'], ['foo', 'bar'] ]
*/

/**
* Returns an array of an object's own enumerable property names.
*
* ## Notes
*
* -   In contrast to the built-in `Object.keys()`, this function returns an empty array if provided `undefined` or `null`, rather than throwing an error.
*
* @private
* @param {*} value - input object
* @returns {Array} a list of own enumerable property names
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 3.14
* };
*
* var k = keys( obj );
* // e.g., returns [ 'beep', 'foo' ]
*/

/**
* Returns an array of an object's own enumerable property names.
*
* @private
* @param {*} value - input object
* @returns {Array} a list of own enumerable property names
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 3.14
* };
*
* var k = keys( obj );
* // e.g., returns [ 'beep', 'foo' ]
*/

/**
* Returns an array of an object's own enumerable property values.
*
* @param {ObjectLike} obj - input object
* @throws {TypeError} must provide an object-like value
* @returns {Array} value array
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 'bar'
* };
*
* var vals = objectValues( obj );
* // e.g., returns [ 'boop', 'bar' ]
*/

/**
* Returns an array of stack values.
*
* ## Notes
*
* -   Why reverse insertion order? Pros and cons to either order, but reverse insertion order mirrors iterator order. For example, we can use the ES6/ES2015+ spread operator along with the iterator to return stack values.
*
*     ```text
*     arr = [...s.iterator()]
*     ```
*
*     One might (as is the opinion here) consider parity of array serialization and iterator order to be a reasonable design goal.
*
* @name toArray
* @memberof Stack.prototype
* @type {Function}
* @returns {Array} stack values
*
* @example
* var s = new Stack();
*
* // Add values to the stack:
* s.push( 'foo' ).push( 'bar' );
*
* // Get an array of stack values:
* var vals = s.toArray();
* // returns [ 'bar', 'foo' ]
*/

/**
* Returns an image of a French alpine landscape.
*
* @returns {Buffer} image
*
* @example
* var img = image();
* // returns <Buffer>
*/

/**
* Returns an image of an airplane, viewed from above looking down.
*
* @returns {Buffer} image
*
* @example
* var img = image();
* // returns <Buffer>
*/

/**
* Returns an image of boats in a river in Nagasaki.
*
* @returns {Buffer} image
*
* @example
* var img = image();
* // returns <Buffer>
*/

/**
* Returns an index given an index mode.
*
* @param {integer} idx - index
* @param {NonNegativeInteger} max - maximum index
* @param {string} mode - specifies how to handle an index outside the interval `[0,max]`
* @throws {RangeError} index out-of-bounds
* @returns {integer} index
*
* @example
* var idx = ind( 2, 9, 'clamp' );
* // returns 2
*
* idx = ind( 10, 9, 'clamp' );
* // returns 9
*
* idx = ind( -1, 9, 'clamp' );
* // returns 0
*
* @example
* var idx = ind( 2, 9, 'wrap' );
* // returns 2
*
* idx = ind( 10, 9, 'wrap' );
* // returns 0
*
* idx = ind( -1, 9, 'wrap' );
* // returns 9
*
* @example
* var idx = ind( 2, 9, 'throw' );
* // returns 2
*
* idx = ind( 10, 9, 'throw' );
* // throws <RangeError>
*
* idx = ind( -1, 9, 'throw' );
* // throws <RangeError>
*/

/**
* Returns an initial PRNG state.
*
* @private
* @param {Uint32Array} state - state array
* @param {PositiveInteger} N - state size
* @param {uinteger32} s - seed
* @returns {Uint32Array} state array
*/

/**
* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @param {number} x - input value
* @returns {integer32} unbiased exponent
*
* @example
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* @example
* var exp = exponent( -3.14 );
* // returns 1
*
* @example
* var exp = exponent( 0.0 );
* // returns -1023
*
* @example
* var exp = exponent( NaN );
* // returns 1024
*/

/**
* Returns an iterator for iterating over a stack.
*
* ## Notes
*
* -   In order to prevent confusion arising from stack mutation during iteration, a returned iterator **always** iterates over a stack "snapshot", which is defined as the list of stack elements at the time of this method's invocation.
*
* @name iterator
* @memberof Stack.prototype
* @type {Function}
* @returns {Iterator} iterator
*
* @example
* var s = new Stack();
*
* // Add values to the stack:
* s.push( 'foo' ).push( 'bar' );
*
* // Create an iterator:
* var it = s.iterator();
*
* // Iterate over the stack...
* var v = it.next().value;
* // returns 'bar'
*
* v = it.next().value;
* // returns 'foo'
*
* var bool = it.next().done;
* // returns true
*/

/**
* Returns an ndarray constructor.
*
* @param {string} dtype - data type
* @param {PositiveInteger} ndims - number of dimensions
* @param {Options} [options] - function options
* @param {boolean} [options.codegen=true] - boolean indicating whether to use code generation
* @param {string} [options.mode="throw"] - specifies how to handle indices which exceed array dimensions
* @param {StringArray} [options.submode=["throw"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis
* @throws {TypeError} first argument must be a supported ndarray data type
* @throws {TypeError} second argument must be a number having a positive integer value
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {RangeError} too many dimensions
* @returns {Function} ndarray constructor
*
* @example
* var ndarray = ctor( 'generic', 2 );
* // returns <Function>
*
* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];
* var shape = [ 3, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var out = ndarray( buffer, shape, strides, offset, 'row-major' );
*/

/**
* Returns an ndarray constructor.
*
* @param {string} dtype - data type
* @param {PositiveInteger} ndims - number of dimensions
* @param {Options} [options] - function options
* @param {boolean} [options.codegen=true] - boolean indicating whether to use code generation
* @returns {Function} ndarray constructor
*
* @example
* var ndarray = ctor( 'float64', 3 );
* // returns <Function>
*
* var buffer = [ 1, 2, 3, 4, 5, 6 ];
* var shape = [ 3, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var out = ndarray( buffer, shape, strides, offset, 'row-major' );
*/

/**
* Returns an ndarray data buffer constructor.
*
* @param {string} dtype - data type
* @returns {(Function|null)} data buffer constructor or null
*
* @example
* var ctor = ctors( 'float64' );
* // returns <Function>
*
* @example
* var ctor = ctors( 'float' );
* // returns null
*/

/**
* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} higher order word
*
* @example
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

/**
* Returns array iteration order.
*
* ## Notes
*
* -   Return value key:
*
*     -   `0`: unordered (i.e., strides of mixed sign; e.g., `[ 9, -3, 1 ]`)
*     -   `1`: ordered left-to-right (i.e., all nonnegative strides)
*     -   `-1`: ordered right-to-left (i.e., all negative strides)
*
* @param {IntegerArray} strides - stride array
* @returns {integer} iteration order
*
* @example
* var o = iterationOrder( [ 2, 1 ] );
* // returns 1
*
* o = iterationOrder( [ -2, 1 ] );
* // returns 0
*
* o = iterationOrder( [ -2, -1 ] );
* // returns -1
*/

/**
* Returns n spaces.
*
* @private
* @param {integer} n - number of spaces
* @returns {string} n spaces
*/

/**
* Returns the arithmetic mean of `x` and `y`.
*
* @private
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} arithmetic mean
*
* @example
* var z = mean( 3.5, 7.5 );
* // returns 5.5
*/

/**
* Returns the arithmetic mean of `|x|` and `|y|`.
*
* @private
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} arithmetic mean
*
* @example
* var z = meanabs( -3.5, -7.5 );
* // returns 5.5
*/

/**
* Returns the arithmetic range of an array.
*
* @param {Array} arr - input array
* @returns {Array} arithmetic range
*/

/**
* Returns the arithmetic range of an array.
*
* @private
* @param {Array} arr - input array
* @returns {Array} arithmetic range
*/

/**
* Returns the bottom stack value (i.e., the value which is currently "last-out").
*
* @name last
* @memberof Stack.prototype
* @type {Function}
* @returns {(*|void)} bottom stack value
*
* @example
* var s = new Stack();
*
* // Add values to the stack:
* s.push( 'foo' ).push( 'bar' );
*
* // Peek at the bottom value:
* var v = s.last();
* // returns 'foo'
*/

/**
* Returns the data type of an ndarray data buffer.
*
* @param {*} value - input value
* @returns {(string|null)} data type
*
* @example
* var dt = dtype( [ 1, 2, 3 ] );
* // returns 'generic'
*
* var dt = dtype( 'beep' );
* // returns null
*/

/**
* Returns the differential entropy for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} entropy
*
* @example
* var y = entropy( 0.0, 1.0 );
* // returns ~1.419
*
* @example
* var y = entropy( 5.0, 2.0 );
* // returns ~7.112
*
* @example
* var y = entropy( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = entropy( 0.0, NaN );
* // returns NaN
*
* @example
* var y = entropy( 0.0, 0.0 );
* // returns NaN
*/

/**
* Returns the excess kurtosis for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} excess kurtosis
*
* @example
* var y = kurtosis( 0.0, 1.0 );
* // returns ~110.936
*
* @example
* var y = kurtosis( 5.0, 2.0 );
* // returns ~9220556.977
*
* @example
* var y = kurtosis( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = kurtosis( 0.0, NaN );
* // returns NaN
*
* @example
* var y = kurtosis( 0.0, 0.0 );
* // returns NaN
*/

/**
* Returns the expected value for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} expected value
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns ~1.649
*
* @example
* var y = mean( 5.0, 2.0 );
* // returns ~1096.633
*
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/

/**
* Returns the filled output panel.
*/

/**
* Returns the first index at which a given element can be found.
*
* @param {ArrayLike} arr - array-like object
* @param {*} searchElement - element to find
* @param {integer} [fromIndex] - starting index (if negative, the start index is determined relative to last element)
* @throws {TypeError} must provide an array-like object
* @throws {TypeError} `fromIndex` must be an integer
* @returns {integer} index or -1
*
* @example
* var arr = [ 4, 3, 2, 1 ];
* var idx = indexOf( arr, 3 );
* // returns 1
*
* @example
* var arr = [ 4, 3, 2, 1 ];
* var idx = indexOf( arr, 5 );
* // returns -1
*
* @example
* // Using a `fromIndex`:
* var arr = [ 1, 2, 3, 4, 5, 2, 6 ];
* var idx = indexOf( arr, 2, 3 );
* // returns 5
*
* @example
* // `fromIndex` which exceeds `array` length:
* var arr = [ 1, 2, 3, 4, 2, 5 ];
* var idx = indexOf( arr, 2, 10 );
* // returns -1
*
* @example
* // Negative `fromIndex`:
* var arr = [ 1, 2, 3, 4, 5, 2, 6, 2 ];
* var idx = indexOf( arr, 2, -4 );
* // returns 5
*
* idx = indexOf( arr, 2, -1 );
* // returns 7
*
* @example
* // Negative `fromIndex` exceeding input `array` length:
* var arr = [ 1, 2, 3, 4, 5, 2, 6 ];
* var idx = indexOf( arr, 2, -10 );
* // returns 1
*
* @example
* // Array-like objects:
* var str = 'bebop';
* var idx = indexOf( str, 'o' );
* // returns 3
*/

/**
* Returns the global object using code generation.
*
* @private
* @returns {Object} global object
*/

/**
* Returns the global object.
*
* ## Notes
*
* -   Using code generation is the **most** reliable way to resolve the global object; however, doing so is likely to violate content security policies (CSPs) in, e.g., Chrome Apps and elsewhere.
*
* @param {boolean} [codegen=false] - boolean indicating whether to use code generation to resolve the global object
* @throws {TypeError} must provide a boolean
* @throws {Error} unable to resolve global object
* @returns {Object} global object
*
* @example
* var g = getGlobal();
* // returns {...}
*/

/**
* Returns the index offset which specifies the location of the first indexed value in a multidimensional array based on a stride array.
*
* @param {NonNegativeIntegerArray} shape - array shape
* @param {IntegerArray} strides - stride array
* @returns {NonNegativeInteger} offset - offset
*
* @example
* var shape = [ 2, 3, 10 ];
* var strides = [ 30, -10, 1 ];
*
* var offset = strides2offset( shape, strides );
* // returns 20
*/

/**
* Returns the inverse of the incomplete beta function via the Student t distribution.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {Probability} p - probability value
* @param {Object} py - placeholder object holding one minus the returned value
* @returns {number} function value
*/

/**
* Returns the last three binary digits of `N` with `y = x - Nπ/2` so that `|y| < π/2`.
*
* ## Method
*
* -   The method is to compute the integer (`mod 8`) and fraction parts of `2x/π` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals `0 mod 8` ). Thus, the number of operations is independent of the exponent of the input.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)
* @param {PositiveInteger} nx - dimension of `x[]`
* @returns {number} last three binary digits of `N`
*/

/**
* Returns the majority vote prediction for the chosen item.
*/

/**
* Returns the maximum absolute value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} maximum absolute value
*
* @example
* var v = maxabs( 3.14, -4.2 );
* // returns 4.2
*
* @example
* var v = maxabs( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* @example
* var v = maxabs( 3.14, NaN );
* // returns NaN
*
* @example
* var v = maxabs( +0.0, -0.0 );
* // returns +0.0
*/

/**
* Returns the maximum element currently in the queue and remove it.
*/

/**
* Returns the maximum element currently in the queue.
*/

/**
* Returns the maximum value of `x` and `y`.
*
* @private
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} maximum value
*
* @example
* var z = max( 3.14, -1.0 );
* // returns 3.14
*/

/**
* Returns the maximum value of `|x|` and `|y|`.
*
* @private
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} maximum absolute value
*
* @example
* var z = maxabs( 5.0, -11.11 );
* // returns 11.11
*/

/**
* Returns the maximum value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} maximum value
*
* @example
* var v = max( 3.14, 4.2 );
* // returns 4.2
*
* @example
* var v = max( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* @example
* var v = max( 3.14, NaN );
* // returns NaN
*
* @example
* var v = max( +0.0, -0.0 );
* // returns +0.0
*/

/**
* Returns the maximum value.
*
* @private
* @param {ndarrayLike} arr - input array
* @param {number} j - column index for which to get the maximum
* @param {number} len - number of rows in arr
* @returns {number} maximum value
*/

/**
* Returns the median for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns 1.0
*
* @example
* var y = median( 5.0, 2.0 );
* // returns ~148.413
*
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = median( 0.0, NaN );
* // returns NaN
*
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/

/**
* Returns the minimum absolute value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} minimum absolute value
*
* @example
* var v = minabs( -3.14, 4.2 );
* // returns 3.14
*
* @example
* var v = minabs( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* @example
* var v = minabs( 3.14, NaN );
* // returns NaN
*
* @example
* var v = minabs( +0.0, -0.0 );
* // returns +0.0
*/

/**
* Returns the minimum value of `x` and `y`.
*
* @private
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} minimum value
*
* @example
* var z = min( 10.0, 3.14 );
* // returns 3.14
*/

/**
* Returns the minimum value of `|x|` and `|y|`.
*
* @private
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} minimum absolute value value
*
* @example
* var z = minabs( -3.14, -11.0 );
* // returns 3.14
*/

/**
* Returns the minimum value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} minimum value
*
* @example
* var v = min( 3.14, 4.2 );
* // returns 3.14
*
* @example
* var v = min( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* @example
* var v = min( 3.14, NaN );
* // returns NaN
*
* @example
* var v = min( +0.0, -0.0 );
* // returns -0.0
*/

/**
* Returns the minimum value.
*
* @private
* @param {ndarrayLike} arr - input array
* @param {number} j - column index for which to get the range
* @param {number} len - number of rows in arr
* @returns {number} minimum value
*/

/**
* Returns the mode for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns ~0.368
*
* @example
* var y = mode( 5.0, 2.0 );
* // returns ~2.718
*
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/

/**
* Returns the name of a function.
*
* @param {Function} fcn - input function
* @throws {TypeError} must provide a function
* @returns {string} function name
*
* @example
* var v = functionName( Math.sqrt );
* // returns 'sqrt'
*
* @example
* var v = functionName( function foo(){} );
* // returns 'foo'
*
* @example
* var v = functionName( function(){} );
* // returns '' || 'anonymous'
*
* @example
* var v = functionName( String );
* // returns 'String'
*/

/**
* Returns the number of bytes per element provided an underlying array data type.
*
* @param {string} dtype - data type
* @returns {(NonNegativeInteger|null)} number of bytes per element
*
* @example
* var nbytes = bytesPerElement( 'float64' );
* // returns 8
*
* nbytes = bytesPerElement( 'generic' );
* // returns null
*/

/**
* Returns the number of elements in an array.
*
* @param {(NonNegativeIntegerArray|EmptyArray)} shape - array shape
* @returns {NonNegativeInteger} number of elements
*
* @example
* var n = numel( [ 3, 3, 3 ] );
* // returns 27
*/

/**
* Returns the positive number satisfying \\( \eta^2/2=\lambda-1-\ln(\lambda) \\) with \\( \operatorname{sign}(\lambda-1)=\operatorname{sign}(\eta) \\).
*
* @private
* @param {number} eta - eta value
* @returns {number} value satisfying equation
*/

/**
* Returns the predicted value for the i-th observation using the decision tree.
*/

/**
* Returns the prototype of a provided object.
*
* @param {*} value - input value
* @returns {(Object|null)} prototype
*
* @example
* var proto = getPrototypeOf( {} );
* // returns {}
*/

/**
* Returns the prototype of a provided object.
*
* @private
* @param {Object} obj - input object
* @returns {(Object|null)} prototype
*/

/**
* Returns the skewness for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} skewness
*
* @example
* var y = skewness( 0.0, 1.0 );
* // returns ~6.185
*
* @example
* var y = skewness( 5.0, 2.0 );
* // returns ~414.359
*
* @example
* var y = skewness( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = skewness( 0.0, NaN );
* // returns NaN
*
* @example
* var y = skewness( 0.0, 0.0 );
* // returns NaN
*/

/**
* Returns the specified kernel function.
*
* @private
* @param {string} name - kernel name
* @returns {(Function|Error)} kernel function or corresponding error
*/

/**
* Returns the standard deviation for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns ~2.161
*
* @example
* var y = stdev( 5.0, 2.0 );
* // returns ~8028.534
*
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
*
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/

/**
* Returns the top value (i.e., the value which is "first-out").
*
* @name first
* @memberof Stack.prototype
* @type {Function}
* @returns {(*|void)} top value
*
* @example
* var s = new Stack();
*
* // Add values to the stack:
* s.push( 'foo' ).push( 'bar' );
*
* // Peek at the top value:
* var v = s.first();
* // returns 'bar'
*/

/**
* Returns the typed array type.
*
* @private
* @param {TypedArray} arr - typed array
* @returns {(string|void)} typed array type
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var arr = new Float64Array( 5 );
* var str = typeName( arr );
* // returns 'Float64Array'
*/

/**
* Returns the unique elements in an array.
*
* @private
* @param {Array} arr - input array
* @returns {Array} array of unique elements
*/

/**
* Returns the value of the `__proto__` property.
*
* @private
* @param {Object} obj - input object
* @returns {*} value of `__proto__` property
*/

/**
* Returns the variance for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns ~4.671
*
* @example
* var y = variance( 5.0, 2.0 );
* // returns ~64457364.853
*
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
*
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/

/**
* Round a numeric value to the nearest integer.
*
* @module @stdlib/math/base/special/round
*
* @example
* var round = require( '@stdlib/math/base/special/round' );
*
* var v = round( -4.2 );
* // returns -4.0
*
* v = round( -4.5 );
* // returns -4.0
*
* v = round( -4.6 );
* // returns -5.0
*
* v = round( 9.99999 );
* // returns 10.0
*
* v = round( 9.5 );
* // returns 10.0
*
* v = round( 9.2 );
* // returns 9.0
*
* v = round( 0.0 );
* // returns 0.0
*
* v = round( -0.0 );
* // returns -0.0
*
* v = round( Infinity );
* // returns Infinity
*
* v = round( -Infinity );
* // returns -Infinity
*
* v = round( NaN );
* // returns NaN
*/

/**
* Round a numeric value to the nearest multiple of `10^n`.
*
* @module @stdlib/math/base/special/roundn
*
* @example
* var roundn = require( '@stdlib/math/base/special/roundn' );
*
* // Round a value to 2 decimal places:
* var v = roundn( 3.141592653589793, -2 );
* // returns 3.14
*
* // If n = 0, `roundn` behaves like `round`:
* v = roundn( 3.141592653589793, 0 );
* // returns 3.0
*
* // Round a value to the nearest thousand:
* v = roundn( 12368.0, 3 );
* // returns 12000.0
*/

/**
* Round a numeric value toward negative infinity.
*
* @module @stdlib/math/base/special/floor
*
* @example
* var floor = require( '@stdlib/math/base/special/floor' );
*
* var v = floor( -4.2 );
* // returns -5.0
*
* v = floor( 9.99999 );
* // returns 9.0
*
* v = floor( 0.0 );
* // returns 0.0
*
* v = floor( NaN );
* // returns NaN
*/

/**
* Round a numeric value toward positive infinity.
*
* @module @stdlib/math/base/special/ceil
*
* @example
* var ceil = require( '@stdlib/math/base/special/ceil' );
*
* var v = ceil( -4.2 );
* // returns -4.0
*
* v = ceil( 9.99999 );
* // returns 10.0
*
* v = ceil( 0.0 );
* // returns 0.0
*
* v = ceil( NaN );
* // returns NaN
*/

/**
* Round a numeric value toward zero.
*
* @module @stdlib/math/base/special/trunc
*
* @example
* var trunc = require( '@stdlib/math/base/special/trunc' );
*
* var v = trunc( -4.2 );
* // returns -4.0
*
* v = trunc( 9.99999 );
* // returns 9.0
*
* v = trunc( 0.0 );
* // returns 0.0
*
* v = trunc( -0.0 );
* // returns -0.0
*
* v = trunc( NaN );
* // returns NaN
*
* v = trunc( Infinity );
* // returns Infinity
*
* v = trunc( -Infinity );
* // returns -Infinity
*/

/**
* Rounds a numeric value to the nearest integer.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = round( -4.2 );
* // returns -4.0
*
* @example
* var v = round( -4.5 );
* // returns -4.0
*
* @example
* var v = round( -4.6 );
* // returns -5.0
*
* @example
* var v = round( 9.99999 );
* // returns 10.0
*
* @example
* var v = round( 9.5 );
* // returns 10.0
*
* @example
* var v = round( 9.2 );
* // returns 9.0
*
* @example
* var v = round( 0.0 );
* // returns 0.0
*
* @example
* var v = round( -0.0 );
* // returns -0.0
*
* @example
* var v = round( Infinity );
* // returns Infinity
*
* @example
* var v = round( -Infinity );
* // returns -Infinity
*
* @example
* var v = round( NaN );
* // returns NaN
*/

/**
* Rounds a numeric value to the nearest multiple of \\(10^n\\).
*
* ## Method
*
* 1.  If \\(|x| <= 2^{53}\\) and \\(|n| <= 308\\), we can use the formula
*
*     ```tex
*     \operatorname{roundn}(x,n) = \frac{\operatorname{round}(x \cdot 10^{-n})}{10^{-n}}
*     ```
*
*     which shifts the decimal to the nearest multiple of \\(10^n\\), performs a standard \\(\mathrm{round}\\) operation, and then shifts the decimal to its original position.
*
*     <!-- <note> -->
*
*     If \\(x \cdot 10^{-n}\\) overflows, \\(x\\) lacks a sufficient number of decimal digits to have any effect when rounding. Accordingly, the rounded value is \\(x\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     Note that rescaling \\(x\\) can result in unexpected behavior. For instance, the result of \\(\operatorname{roundn}(0.2+0.1,-16)\\) is \\(0.3000000000000001\\) and not \\(0.3\\). While possibly unexpected, this is not a bug. The behavior stems from the fact that most decimal fractions cannot be exactly represented as floating-point numbers. And further, rescaling can lead to slightly different fractional values, which, in turn, affects the result of \\(\mathrm{round}\\).
*
*     <!-- </note> -->
*
* 2.  If \\(n > 308\\), we recognize that the maximum absolute double-precision floating-point number is \\(\approx 1.8\mbox{e}308\\) and, thus, the result of rounding any possible finite number \\(x\\) to the nearest \\(10^n\\) is \\(0.0\\). To ensure consistent behavior with \\(\operatorname{round}(x)\\), the sign of \\(x\\) is preserved.
*
* 3.  If \\(n < -324\\), \\(n\\) exceeds the maximum number of possible decimal places (such as with subnormal numbers), and, thus, the rounded value is \\(x\\).
*
* 4.  If \\(x > 2^{53}\\), \\(x\\) is **always** an integer (i.e., \\(x\\) has no decimal digits). If \\(n <= 0\\), the rounded value is \\(x\\).
*
* 5.  If \\(n < -308\\), we let \\(m = n + 308\\) and modify the above formula to avoid overflow.
*
*     ```tex
*     \operatorname{roundn}(x,n) = \frac{\biggl(\frac{\operatorname{round}( (x \cdot 10^{308}) 10^{-m})}{10^{308}}\biggr)}{10^{-m}}
*     ```
*
*     If overflow occurs, the rounded value is \\(x\\).
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{roundn}(\mathrm{NaN}, n) &= \mathrm{NaN} \\
* \operatorname{roundn}(x, \mathrm{NaN}) &= \mathrm{NaN} \\
* \operatorname{roundn}(x, \pm\infty) &= \mathrm{NaN} \\
* \operatorname{roundn}(\pm\infty, n) &= \pm\infty \\
* \operatorname{roundn}(\pm 0, n) &= \pm 0
* \end{align*}
* ```
*
* ## Notes
*
* 1.  Alternative algorithms:
*
*     -   Round by [casting][1] \\(x\\) to an exponential string.
*     -   Native Python implementation [1][2] and [2][3].
*
* [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
* [2]: https://hg.python.org/releasing/2.7.9/file/tip/Objects/floatobject.c#l1082
* [3]: https://hg.python.org/releasing/2.7.9/file/tip/Objects/floatobject.c#l1226
*
*
* @param {number} x - input value
* @param {integer} n - integer power of `10`
* @returns {number} rounded value
*
* @example
* // Round a value to 2 decimal places:
* var v = roundn( 3.141592653589793, -2 );
* // returns 3.14
*
* @example
* // If n = 0, `roundn` behaves like `round`:
* var v = roundn( 3.141592653589793, 0 );
* // returns 3.0
*
* @example
* // Round a value to the nearest thousand:
* var v = roundn( 12368.0, 3 );
* // returns 12000.0
*/

/**
* Rounds a numeric value toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor( -4.2 );
* // returns -5.0
*
* @example
* var v = floor( 9.99999 );
* // returns 9.0
*
* @example
* var v = floor( 0.0 );
* // returns 0.0
*
* @example
* var v = floor( NaN );
* // returns NaN
*/

/**
* Rounds a numeric value toward positive infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = ceil( -4.2 );
* // returns -4.0
*
* @example
* var v = ceil( 9.99999 );
* // returns 10.0
*
* @example
* var v = ceil( 0.0 );
* // returns 0.0
*
* @example
* var v = ceil( NaN );
* // returns NaN
*/

/**
* Rounds a numeric value toward zero.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = trunc( -4.2 );
* // returns -4.0
*
* @example
* var v = trunc( 9.99999 );
* // returns 9.0
*
* @example
* var v = trunc( 0.0 );
* // returns 0.0
*
* @example
* var v = trunc( -0.0 );
* // returns -0.0
*
* @example
* var v = trunc( NaN );
* // returns NaN
*
* @example
* var v = trunc( Infinity );
* // returns Infinity
*
* @example
* var v = trunc( -Infinity );
* // returns -Infinity
*/

/**
* Sample elements from an array-like object.
*
* @module @stdlib/random/sample
*
* @example
* var sample = require( '@stdlib/random/sample' );
*
* var out = sample( 'abc' );
* // e.g., returns [ 'a', 'a', 'b' ]
*
* out = sample( [ 3, 6, 9 ] );
* // e.g., returns [ 3, 9, 6 ]
*
* var bool = ( out.length === 3 );
* // returns true
*
* @example
* var sample = require( '@stdlib/random/sample' );
*
* var mysample = sample.factory({
*     'seed': 323
* });
* var out = mysample( [ 3, 6, 9 ], {
*     'size': 10
* });
* // e.g., returns [ 3, 9, 3, 3, 3, 6, 3, 3, 3, 6 ]
*/

/**
* Samples elements from an array-like object.
*
* @name sample
* @type {Function}
* @param {ArrayLike} x - array-like object from which to sample
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.size] - sample size
* @param {ProbabilityArray} [options.probs] - element probabilities
* @param {boolean} [options.replace=true] - boolean indicating whether to sample with replacement
* @throws {TypeError} first argument must be array-like
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {RangeError} `size` option must be less than or equal to the length of `x` when the `replace` option is `false`
* @returns {Array} sample
*
* @example
* var out = sample( [ 3, null, NaN, 'abc', function(){} ] );
* // e.g., returns [ 3, 'abc', null, 3, null ]
*/

/**
* Samples from a discrete uniform distribution (equal probabilities and with replacement).
*
* @private
* @param {ArrayLike} x - array-like object from which to sample
* @param {NonNegativeInteger} size - sample size
* @param {Function} rand - PRNG for generating uniformly distributed numbers
* @returns {Array} sample
*/

/**
* Samples uniformly without replacement using the Fisher-Yates shuffle.
*
* ## References
*
* -   Knuth, Donald E. 1997. _The Art of Computer Programming, Volume 2 (3rd Ed.): Seminumerical Algorithms_. Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc.
*
* @private
* @param {ArrayLike} x - array-like object from which to sample
* @param {NonNegativeInteger} size - sample size
* @param {Function} rand - PRNG for generating uniformly distributed numbers
* @returns {Array} sample
*/

/**
* Samples with replacement and non-uniform probabilities using Vose's [alias method][alias-method].
*
* ## References
*
* -   Vose, Michael D. 1991. "A linear algorithm for generating random numbers with a given distribution." _IEEE Transactions on Software Engineering_ 17 (9): 972–75. doi:[10.1109/32.92917][@vose:1991].
*
* [alias-method]: http://keithschwarz.com/darts-dice-coins/
* [@vose:1991]: https://doi.org/10.1109/32.92917
*
*
* @private
* @param {ArrayLike} x - array-like object from which to sample
* @param {NonNegativeInteger} size - sample size
* @param {Function} rand - PRNG for generating uniformly distributed numbers
* @param {ProbabilityArray} probabilities - element probabilities
* @returns {Array} sample
*/

/**
* Samples without replacement from a discrete set using custom probabilities.
*
* ## Notes
*
* -   After each draw, the probabilities of the remaining observations are renormalized so that they sum to one.
*
*
* @private
* @param {ArrayLike} x - array-like object from which to sample
* @param {NonNegativeInteger} size - sample size
* @param {Function} rand - PRNG for generating uniformly distributed numbers
* @param {ProbabilityArray} probabilities - element probabilities
* @returns {Array} sample
*/

/**
* Scrolls a vertical scrollbar to the specified position.
*
* @param {Node} element - DOM node with the scrollbar to change
* @param {number} to - vertical position of the scroll bar after animation
* @param {integer} duration - number of milliseconds until animation shall be complete
* @returns {void}
*/

/**
* Serializes a stack as JSON.
*
* ## Notes
*
* -   `JSON.stringify()` implicitly calls this method when stringifying a `Stack` instance.
*
* @name toJSON
* @memberof Stack.prototype
* @type {Function}
* @returns {Object} serialized stack
*
* @example
* var s = new Stack();
*
* // Add values to the stack:
* s.push( 'foo' ).push( 'bar' );
*
* // Serialize to JSON:
* var o = s.toJSON();
* // returns { 'type': 'stack', 'data': [ 'bar', 'foo' ] }
*/

/**
* Serializes an ndarray as a JSON object.
*
* ## Notes
*
* -   The method does **not** serialize data outside of the buffer region defined by the array configuration.
*
* @private
* @returns {Object} JSON representation
*/

/**
* Serializes an ndarray as a string.
*
* ## Notes
*
* -   The method does **not** serialize data outside of the buffer region defined by the array configuration.
*
* @private
* @returns {string} string representation
*/

/**
* Series approximation to the incomplete beta.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {number} result - initial result value
* @returns {Function} series function
*/

/**
* Series representation for upper fraction when `z` is small.
*
* @private
* @param {number} a - function parameter
* @param {number} x - function parameter
* @returns {Function} series function
*/

/**
* Set the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/set-low-word
*
* @example
* var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
*
* var low = 5 >>> 0; // => 00000000000000000000000000000101
*
* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010
*
* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101
* // returns 3.139998651394392e+201
*
* @example
* var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
* var PINF = require( '@stdlib/constants/math/float64-pinf' );
* var NINF = require( '@stdlib/constants/math/float64-ninf' );
*
* var low = 12345678;
*
* var y = setLowWord( PINF, low );
* // returns NaN
*
* y = setLowWord( NINF, low );
* // returns NaN
*
* y = setLowWord( NaN, low );
* // returns NaN
*/

/**
* Set the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/set-high-word
*
* @example
* var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
*
* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101
*
* var y = setHighWord( 3.14e201, high ); // => 0 00000000000 0000000000000000010110010011110010110101100010000010
* // returns 1.18350528745e-313
*
* @example
* var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
* var PINF = require( '@stdlib/constants/math/float64-pinf' ); //  => 0 11111111111 00000000000000000000 00000000000000000000000000000000
*
* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000
*
* // Set the higher order bits of `+infinity` to return `1`:
* var y = setHighWord( PINF, high ); => 0 01111111111 0000000000000000000000000000000000000000000000000000
* // returns 1.0
*/

/**
* Sets an array element located a specified linear view index.
*
* @private
* @param {integer} idx - linear view index
* @param {*} v - value to set
* @returns {ndarray} ndarray instance
*/

/**
* Sets an array element.
*
* @private
* @param {...integer} idx - indices
* @param {*} v - value to set
* @returns {ndarray} ndarray instance
*/

/**
* Sets the less significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - double
* @param {uinteger32} low - unsigned 32-bit integer to replace the lower order word of `x`
* @returns {number} double having the same higher order word as `x`
*
* @example
* var low = 5 >>> 0; // => 00000000000000000000000000000101
*
* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010
*
* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101
* // returns 3.139998651394392e+201
*
* @example
* var PINF = require( '@stdlib/constants/math/float64-pinf' );
* var NINF = require( '@stdlib/constants/math/float64-ninf' );
*
* var low = 12345678;
*
* var y = setLowWord( PINF, low );
* // returns NaN
*
* y = setLowWord( NINF, low );
* // returns NaN
*
* y = setLowWord( NaN, low );
* // returns NaN
*/

/**
* Sets the more significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - double
* @param {uinteger32} high - unsigned 32-bit integer to replace the higher order word of `x`
* @returns {number} double having the same lower order word as `x`
*
* @example
* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101
*
* var y = setHighWord( 3.14e201, high ); //  => 0 00000000000 0000000000000000010110010011110010110101100010000010
* // returns 1.18350528745e-313
*
* @example
* var PINF = require( '@stdlib/constants/math/float64-pinf' ); // => 0 11111111111 00000000000000000000 00000000000000000000000000000000
*
* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000
*
* // Set the higher order bits of `+infinity` to return `1`:
* var y = setHighWord( PINF, high ); // => 0 01111111111 0000000000000000000000000000000000000000000000000000
* // returns 1.0
*/

/**
* Shows different components depending on user actions.
*
* @property {string} actionID - ID of component to watch
* @property {(Object|Function)} show - hash table of components to display given the different responses or function that returns a component to display (sole argument of function is the latest result)
*/

/**
* Smallest positive double-precision floating-point normal number.
*
* @module @stdlib/constants/math/float64-smallest-normal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/math/float64-smallest-normal' );
* // returns 2.2250738585072014e-308
*/

/**
* Smallest positive double-precision floating-point subnormal number.
*
* @module @stdlib/constants/math/float64-smallest-subnormal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_SUBNORMAL = require( '@stdlib/constants/math/float64-smallest-subnormal' );
* // returns 4.940656458412465e-324
*/

/**
* Smallest positive single-precision floating-point normal number.
*
* @module @stdlib/constants/math/float32-smallest-normal
* @type {number}
*
* @example
* var FLOAT32_SMALLEST_NORMAL = require( '@stdlib/constants/math/float32-smallest-normal' );
* // returns 1.1754943508222875e-38
*/

/**
* Soft-thresholding operator.
*
* @param {number} x - input value
* @param {number} t - threshold value
* @returns {number} return value
*/

/**
* Spinner to visualize load times.
*
* @property {string} display - CSS display property
* @property {number} height - height (in px)
* @property {number} width - width (in px)
* @property {number} lines - number of lines
* @property {Object} style - CSS inline styles
*/

/**
* Split a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/to-words
*
* @example
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/

/**
* Split values into two groups according to a predicate function.
*
* @module @stdlib/utils/bifurcate-by
*
* @example
* var bifurcateBy = require( '@stdlib/utils/bifurcate-by' );
*
* function predicate( v ) {
*     return v[ 0 ] === 'b';
* }
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
*
* var out = bifurcateBy( arr, predicate );
* // returns [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]
*
* @example
* var bifurcateBy = require( '@stdlib/utils/bifurcate-by' );
*
* function predicate( v ) {
*     return v[ 0 ] === 'b';
* }
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
*
* var opts = {
*     'returns': 'indices'
* };
* var out = bifurcateBy( arr, opts, predicate );
* // returns [ [ 0, 1, 3 ], [ 2 ] ]
*
* @example
* var bifurcateBy = require( '@stdlib/utils/bifurcate-by' );
*
* function predicate( v ) {
*     return v[ 0 ] === 'b';
* }
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
*
* var opts = {
*     'returns': '*'
* };
* var out = bifurcateBy( arr, opts, predicate );
* // returns [ [ [ 0, 'beep' ], [ 1, 'boop' ], [ 3, 'bar' ] ], [ [ 2, 'foo' ] ] ]
*/

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/

/**
* Splits an input array by group and calls a function with the sub-array of each group.
*
* @private
* @param {Array} arr - input array
* @param {string} factor - group values
* @param {Function} fun - function to invoke with the array of values for each group
* @returns {Object} table with keys corresponding to the unique group labels and values corresponding to the function values for each sub-array
*/

/**
* Splits two input arrays by group and calls a supplied function with the two sub-arrays for each group.
*
* @private
* @param {Array} arr1 - first input array
* @param {Array} arr2 - second input array
* @param {string} factor - group values
* @param {Function} fun - function to invoke for each group
* @returns {Object} table with keys corresponding to the unique group labels and values corresponding to the function values
*/

/**
* Splits values into two groups according to a predicate function and outputs results as element indices.
*
* @private
* @param {Collection} collection - input collection
* @param {Options} opts - function options
* @param {*} [opts.thisArg] - execution context
* @param {Function} predicate - predicate function specifying which group an element in the input collection belongs to
* @returns {(Array<Array>|Array)} results
*
* @example
* function predicate( v ) {
*     return v[ 0 ] === 'b';
* }
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
*
* var out = bifurcateBy( arr, {}, predicate );
* // returns [ [ 0, 1, 3 ], [ 2 ] ]
*/

/**
* Splits values into two groups according to a predicate function and outputs results as element values.
*
* ## Notes
*
* -   We need to cache the collection value to prevent the edge case where, during the invocation of the predicate function, the element at index `i` is swapped for some other value. For some, that might be a feature; here, we take the stance that one should be less clever.
*
*
* @private
* @param {Collection} collection - input collection
* @param {Options} opts - function options
* @param {*} [opts.thisArg] - execution context
* @param {Function} predicate - predicate function indicating which group an element in the input collection belongs to
* @returns {(Array<Array>|Array)} results
*
* @example
* function predicate( v ) {
*     return v[ 0 ] === 'b';
* }
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
*
* var out = bifurcateBy( arr, {}, predicate );
* // returns [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]
*/

/**
* Splits values into two groups according to a predicate function and outputs results as index-element values.
*
* ## Notes
*
* -   We need to cache the collection value to prevent the edge case where, during the invocation of the predicate function, the element at index `i` is swapped for some other value. For some, that might be a feature; here, we take the stance that one should be less clever.
*
*
* @private
* @param {Collection} collection - input collection
* @param {Options} opts - function options
* @param {*} [opts.thisArg] - execution context
* @param {Function} predicate - predicate function indicating which group an element in the input collection belongs to
* @returns {(Array<Array>|Array)} results
*
* @example
* function predicate( v ) {
*     return v[ 0 ] === 'b';
* }
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
*
* var out = bifurcateBy( arr, {}, predicate );
* // returns [ [ [ 0, 'beep' ], [ 1, 'boop' ], [ 3, 'bar' ] ], [ [ 2, 'foo' ] ] ]
*/

/**
* Splits values into two groups according to a predicate function.
*
* @param {Collection} collection - input collection
* @param {Options} [options] - function options
* @param {*} [options.thisArg] - execution context
* @param {string} [options.returns="values"] - if `values`, values are returned; if `indices`, indices are returned; if `*`, both indices and values are returned
* @param {Function} predicate - predicate function indicating which group an element in the input collection belongs to
* @throws {TypeError} first argument must be a collection
* @throws {TypeError} options argument must be an object
* @throws {TypeError} last argument must be a function
* @throws {TypeError} must provide valid options
* @returns {(Array<Array>|Array)} group results
*
* @example
* function predicate( v ) {
*     return v[ 0 ] === 'b';
* }
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
*
* var out = bifurcateBy( arr, predicate );
* // returns [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]
*
* @example
* function predicate( v ) {
*     return v[ 0 ] === 'b';
* }
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
*
* var opts = {
*     'returns': 'indices'
* };
* var out = bifurcateBy( arr, opts, predicate );
* // returns [ [ 0, 1, 3 ], [ 2 ] ]
*
* @example
* function predicate( v ) {
*     return v[ 0 ] === 'b';
* }
* var arr = [ 'beep', 'boop', 'foo', 'bar' ];
*
* var opts = {
*     'returns': '*'
* };
* var out = bifurcateBy( arr, opts, predicate );
* // returns [ [ [ 0, 'beep' ], [ 1, 'boop' ], [ 3, 'bar' ] ], [ [ 2, 'foo' ] ] ]
*/

/**
* Splitting observations using specific predicate and pivot.
*/

/**
* Square root of `2`.
*
* @module @stdlib/constants/math/float64-sqrt-two
* @type {number}
*
* @example
* var SQRT2 = require( '@stdlib/constants/math/float64-sqrt-two' );
* // returns 1.4142135623730951
*/

/**
* Square root of `2`.
*
* ```tex
* \sqrt{2}
* ```
*
* @constant
* @type {number}
* @default 1.4142135623730951
*/

/**
* Square root of double-precision floating-point epsilon.
*
* @module @stdlib/constants/math/float64-sqrt-eps
* @type {number}
*
* @example
* var FLOAT64_SQRT_EPSILON = require( '@stdlib/constants/math/float64-sqrt-eps' );
* // returns 0.14901161193847656e-7
*/

/**
* Square root of double-precision floating-point epsilon.
*
* ```tex
* \sqrt{\frac{1}{2^{52}}}
* ```
*
* @constant
* @type {number}
* @default 0.14901161193847656e-7
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/

/**
* Square root of the mathematical constant `π` times `2`.
*
* @constant
* @type {number}
* @default 2.5066282746310007
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/

/**
* Square root of the mathematical constant `π` times `2`.
*
* @module @stdlib/constants/math/float64-sqrt-two-pi
* @type {number}
*
* @example
* var SQRT_TWO_PI = require( '@stdlib/constants/math/float64-sqrt-two-pi' );
* // returns 2.5066282746310007
*/

/**
* Stack constructor.
*
* @constructor
* @returns {Stack} stack instance
*
* @example
* var s = new Stack();
*
* // Add values to the stack:
* s.push( 'foo' ).push( 'bar' );
*
* // Remove the top value:
* var v = s.pop();
* // returns 'bar'
*
* // Add a new value to the stack:
* s.push( 'beep' );
*
* // Remove the top value:
* v = s.pop();
* // returns 'beep'
*/

/**
* Stack length.
*
* @name length
* @memberof Stack.prototype
* @type {NonNegativeInteger}
*
* @example
* var s = new Stack();
*
* // Examine the initial stack length:
* var len = s.length;
* // returns 0
*
* // Add values to the stack:
* s.push( 'foo' ).push( 'bar' );
*
* // Retrieve the current stack length:
* len = s.length;
* // returns 2
*/

/**
* Stack.
*
* @module @stdlib/utils/stack
*
* @example
* var stack = require( '@stdlib/utils/stack' );
*
* var s = stack();
*
* // Add values to the stack:
* s.push( 'foo' ).push( 'bar' );
*
* // Remove the top value:
* var v = s.pop();
* // returns 'bar'
*
* // Add a new value to the stack:
* s.push( 'beep' );
*
* // Remove the top value:
* v = s.pop();
* // returns 'beep'
*/

/**
* Standardizes elements in input array.
*
* @param {Array} x - input array
* @param {boolean} demean - controls whether the mean should be subtracted from the values
* @param {boolean} scale - controls whether values should be divided by the standard deviation
* @returns {Array} output array with added `mu` and `sigma` properties
*/

/**
* Student's t distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/t/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/t/cdf' );
*
* var y = cdf( 2.0, 0.1 );
* // returns ~0.611
*
* y = cdf( 1.0, 2.0 );
* // returns ~0.789
*
* y = cdf( -1.0, 4.0 );
* // returns ~0.187
*
* var mycdf = cdf.factory( 0.5 );
* y = mycdf( 3.0 );
* // returns ~0.816
*
* y = mycdf( 1.0 );
* // returns ~0.699
*/

/**
* Student's t distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/t/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/t/pdf' );
*
* var y = pdf( 3.0, 1.0 );
* // returns ~0.032
*
* var myPDF = pdf.factory( 3.0 );
* y = myPDF( 1.0 );
* // returns ~0.207
*/

/**
* Sum the elements of the series given by the supplied function.
*
* @module @stdlib/math/base/tools/sum-series
*
* @example
* var sumSeries = require( '@stdlib/math/base/tools/sum-series' );
*
* var gen = geometricSeriesClosure( 0.9 )
* var out = sumSeries( gen );
* // returns 10
*
* function geometricSeriesClosure( x ) {
*     var exponent = -1;
*     return function() {
*         exponent += 1;
*         return Math.pow( x, exponent );
*     };
* }
*/

/**
* Sum the elements of the series given by the supplied function.
*
* @param {Function} generator - series function
* @param {Object} [options] - function options
* @param {PositiveInteger} [options.maxTerms=1000000] - maximum number of terms to be added
* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {number} [options.initialValue=0] - initial value of the resulting sum
* @returns {number} sum of all series terms
*
* @example
* var gen = geometricSeriesClosure( 0.9 )
* var out = sumSeries( gen );
* // returns 10.0
*
* function geometricSeriesClosure( x ) {
*     var exponent = -1;
*     return function() {
*         exponent += 1;
*         return Math.pow( x, exponent );
*     };
* }
*/

/**
* Sum the elements of the series given by the supplied function.
*
* @param {Function} generator - series function
* @param {Object} [options] - function options
* @param {PositiveInteger} [options.maxTerms=1000000] - maximum number of terms to be added
* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {number} [options.initialValue=0] - initial value of the resulting sum
* @returns {number} sum of all series terms
*
* @example
* var gen = geometricSeriesGenerator( 0.9 );
* var out = sumSeries( gen );
* // returns 10.0
*
* function* geometricSeriesGenerator( x ) {
*     var exponent = 0;
*     while ( true ) {
*         yield Math.pow( x, exponent );
*         exponent += 1;
*     }
* }
*/

/**
* Sums elements of an array.
*
* @private
* @param {Array} arr - input array
* @returns {number} array sum
*/

/**
* Sums elements of the series expansion of the lower incomplete gamma function.
*
* ## Method
*
* -   Multiply result by `((z^a) * (e^-z) / a)` to get the full lower incomplete integral.
* -   Divide by `tgamma(a)` to get the normalized value.
*
* @private
* @param {number} a - function parameter
* @param {number} z - function parameter
* @param {number} initialValue - initial value of the resulting sum
* @returns {number} sum of terms of lower gamma series
*/

/**
* Test for `Object.defineProperty` support.
*
* @module @stdlib/assert/has-define-property-support
*
* @example
* var hasDefinePropertySupport = require( '@stdlib/assert/has-define-property-support' );
*
* var bool = hasDefinePropertySupport();
* // returns <boolean>
*/

/**
* Test for deep equality between two values.
*
* @module @stdlib/assert/deep-equal
*
* @example
* var deepEqual = require( '@stdlib/assert/deep-equal' );
*
* var bool = deepEqual( [ 1, 2, 3 ], [ 1, 2, 3 ] );
* // returns true
*
* bool = deepEqual( [ 1, 2, 3 ], [ 1, 2, '3' ] );
* // returns false
*
* bool = deepEqual( { 'a': 2 }, { 'a': [ 2 ] } );
* // returns false
*/

/**
* Test for native `Buffer` support.
*
* @module @stdlib/assert/has-node-buffer-support
*
* @example
* var hasNodeBufferSupport = require( '@stdlib/assert/has-node-buffer-support' );
*
* var bool = hasNodeBufferSupport();
* // returns <boolean>
*/

/**
* Test for native `Float32Array` support.
*
* @module @stdlib/assert/has-float32array-support
*
* @example
* var hasFloat32ArraySupport = require( '@stdlib/assert/has-float32array-support' );
*
* var bool = hasFloat32ArraySupport();
* // returns <boolean>
*/

/**
* Test for native `Float64Array` support.
*
* @module @stdlib/assert/has-float64array-support
*
* @example
* var hasFloat64ArraySupport = require( '@stdlib/assert/has-float64array-support' );
*
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/

/**
* Test for native `Int16Array` support.
*
* @module @stdlib/assert/has-int16array-support
*
* @example
* var hasInt16ArraySupport = require( '@stdlib/assert/has-int16array-support' );
*
* var bool = hasInt16ArraySupport();
* // returns <boolean>
*/

/**
* Test for native `Int32Array` support.
*
* @module @stdlib/assert/has-int32array-support
*
* @example
* var hasInt32ArraySupport = require( '@stdlib/assert/has-int32array-support' );
*
* var bool = hasInt32ArraySupport();
* // returns <boolean>
*/

/**
* Test for native `Int8Array` support.
*
* @module @stdlib/assert/has-int8array-support
*
* @example
* var hasInt8ArraySupport = require( '@stdlib/assert/has-int8array-support' );
*
* var bool = hasInt8ArraySupport();
* // returns <boolean>
*/

/**
* Test for native `Symbol.iterator` support.
*
* @module @stdlib/assert/has-iterator-symbol-support
*
* @example
* var hasIteratorSymbolSupport = require( '@stdlib/assert/has-iterator-symbol-support' );
*
* var bool = hasIteratorSymbolSupport();
* // returns <boolean>
*/

/**
* Test for native `Symbol` support.
*
* @module @stdlib/assert/has-symbol-support
*
* @example
* var hasSymbolSupport = require( '@stdlib/assert/has-symbol-support' );
*
* var bool = hasSymbolSupport();
* // returns <boolean>
*/

/**
* Test for native `Uint16Array` support.
*
* @module @stdlib/assert/has-uint16array-support
*
* @example
* var hasUint16ArraySupport = require( '@stdlib/assert/has-uint16array-support' );
*
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/

/**
* Test for native `Uint32Array` support.
*
* @module @stdlib/assert/has-uint32array-support
*
* @example
* var hasUint32ArraySupport = require( '@stdlib/assert/has-uint32array-support' );
*
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/

/**
* Test for native `Uint8Array` support.
*
* @module @stdlib/assert/has-uint8array-support
*
* @example
* var hasUint8ArraySupport = require( '@stdlib/assert/has-uint8array-support' );
*
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/

/**
* Test for native `Uint8ClampedArray` support.
*
* @module @stdlib/assert/has-uint8clampedarray-support
*
* @example
* var hasUint8ClampedArraySupport = require( '@stdlib/assert/has-uint8clampedarray-support' );
*
* var bool = hasUint8ClampedArraySupport();
* // returns <boolean>
*/

/**
* Test for native `function*()` support.
*
* @module @stdlib/assert/has-generator-support
*
* @example
* var hasGeneratorSupport = require( '@stdlib/assert/has-generator-support' );
*
* var bool = hasGeneratorSupport();
* // returns <boolean>
*/

/**
* Test for native `toStringTag` support.
*
* @module @stdlib/assert/has-tostringtag-support
*
* @example
* var hasToStringTagSupport = require( '@stdlib/assert/has-tostringtag-support' );
*
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/

/**
* Test for native function `name` support.
*
* @module @stdlib/assert/has-function-name-support
*
* @example
* var hasFunctionNameSupport = require( '@stdlib/assert/has-function-name-support' );
*
* var bool = hasFunctionNameSupport();
* // returns <boolean>
*/

/**
* Test if a finite double-precision floating-point number is a nonnegative integer.
*
* @module @stdlib/math/base/assert/is-nonnegative-integer
*
* @example
* var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
*
* var bool = isNonNegativeInteger( 1.0 );
* // returns true
*
* bool = isNonNegativeInteger( 0.0 );
* // returns true
*
* bool = isNonNegativeInteger( -10.0 );
* // returns false
*/

/**
* Test if a finite double-precision floating-point number is a positive integer.
*
* @module @stdlib/math/base/assert/is-positive-integer
*
* @example
* var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
*
* var bool = isPositiveInteger( 1.0 );
* // returns true
*
* bool = isPositiveInteger( 0.0 );
* // returns false
*
* bool = isPositiveInteger( -10.0 );
* // returns false
*/

/**
* Test if a finite double-precision floating-point number is an integer.
*
* @module @stdlib/math/base/assert/is-integer
*
* @example
* var isInteger = require( '@stdlib/math/base/assert/is-integer' );
*
* var bool = isInteger( 1.0 );
* // returns true
*
* bool = isInteger( 3.14 );
* // returns false
*/

/**
* Test if a finite numeric value is an even number.
*
* @module @stdlib/math/base/assert/is-even
*
* @example
* var isEven = require( '@stdlib/math/base/assert/is-even' );
*
* var bool = isEven( 5.0 );
* // returns false
*
* bool = isEven( -2.0 );
* // returns true
*
* bool = isEven( 0.0 );
* // returns true
*
* bool = isEven( NaN );
* // returns false
*/

/**
* Test if a finite numeric value is an odd number.
*
* @module @stdlib/math/base/assert/is-odd
*
* @example
* var isOdd = require( '@stdlib/math/base/assert/is-odd' );
*
* var bool = isOdd( 5.0 );
* // returns true
*
* bool = isOdd( -2.0 );
* // returns false
*
* bool = isOdd( 0.0 );
* // returns false
*
* bool = isOdd( NaN );
* // returns false
*/

/**
* Test if a numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

/**
* Test if a numeric value is a probability.
*
* @module @stdlib/math/base/assert/is-probability
*
* @example
* var isProbability = require( '@stdlib/math/base/assert/is-probability' );
*
* var bool = isProbability( 0.5 );
* // returns true
*
* bool = isProbability( 3.14 );
* // returns false
*
* bool = isProbability( NaN );
* // returns false
*/

/**
* Test if a numeric value is infinite.
*
* @module @stdlib/math/base/assert/is-infinite
*
* @example
* var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
*
* var bool = isInfinite( Infinity );
* // returns true
*
* bool = isInfinite( -Infinity );
* // returns true
*
* bool = isInfinite( 5.0 );
* // returns false
*
* bool = isInfinite( NaN );
* // returns false
*/

/**
* Test if a numeric value is negative zero.
*
* @module @stdlib/math/base/assert/is-negative-zero
*
* @example
* var isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );
*
* var bool = isNegativeZero( -0.0 );
* // returns true
*
* bool = isNegativeZero( 0.0 );
* // returns false
*/

/**
* Test if a numeric value is positive zero.
*
* @module @stdlib/math/base/assert/is-positive-zero
*
* @example
* var isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );
*
* var bool = isPositiveZero( 0.0 );
* // returns true
*
* bool = isPositiveZero( -0.0 );
* // returns false
*/

/**
* Test if a string ends with the characters of another string.
*
* @module @stdlib/string/ends-with
*
* @example
* var endsWith = require( '@stdlib/string/ends-with' );
*
* var str = 'Fair is foul, and foul is fair, hover through fog and filthy air';
*
* var bool = endsWith( str, 'air' );
* // returns true
*
* bool = endsWith( str, 'fair' );
* // returns false
*
* bool = endsWith( str, 'fair', 30 );
* // returns true
*
* bool = endsWith( str, 'fair', -34 );
* // returns true
*/

/**
* Test if a string ends with the characters of another string.
*
* @param {string} str - input string
* @param {string} search - search string
* @param {integer} [len=str.length] - substring length
* @throws {TypeError} first argument must be a string primitive
* @throws {TypeError} second argument must be a string primitive
* @throws {TypeError} third argument must be an integer
* @returns {boolean} boolean indicating if the input string ends with the search string
*
* @example
* var bool = endsWith( 'Remember the story I used to tell you when you were a boy?', 'boy?' );
* // returns true
*
* @example
* var bool = endsWith( 'Remember the story I used to tell you when you were a boy?', 'Boy?' );
* // returns false
*
* @example
* var bool = endsWith( 'To be, or not to be, that is the question.', 'to be' );
* // returns false
*
* @example
* var bool = endsWith( 'To be, or not to be, that is the question.', 'to be', 19 );
* // returns true
*
* @example
* var bool = endsWith( 'To be, or not to be, that is the question.', 'to be', -23 );
* // returns true
*/

/**
* Test if a string starts with the characters of another string.
*
* @module @stdlib/string/starts-with
*
* @example
* var startsWith = require( '@stdlib/string/starts-with' );
*
* var str = 'Fair is foul, and foul is fair, hover through fog and filthy air';
* var bool = startsWith( str, 'Fair' );
* // returns true
*
* bool = startsWith( str, 'fair' );
* // returns false
*
* bool = startsWith( str, 'foul', 8 );
* // returns true
*
* bool = startsWith( str, 'filthy', -10 );
* // returns true
*/

/**
* Test if a value is `NaN`.
*
* @module @stdlib/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( new Number( NaN ) );
* // returns true
*
* bool = isnan( 3.14 );
* // returns false
*
* bool = isnan( null );
* // returns false
*
* @example
* var isnan = require( '@stdlib/assert/is-nan' ).isPrimitive;
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 3.14 );
* // returns false
*
* bool = isnan( new Number( NaN ) );
* // returns false
*
* @example
* var isnan = require( '@stdlib/assert/is-nan' ).isObject;
*
* var bool = isnan( NaN );
* // returns false
*
* bool = isnan( new Number( NaN ) );
* // returns true
*/

/**
* Test if a value is `null`.
*
* @module @stdlib/assert/is-null
*
* @example
* var isNull = require( '@stdlib/assert/is-null' );
*
* var value = null;
*
* var bool = isNull( value );
* // returns true
*/

/**
* Test if a value is `undefined` or `null`.
*
* @module @stdlib/assert/is-undefined-or-null
*
* @example
* var isUndefinedOrNull = require( '@stdlib/assert/is-undefined-or-null' );
*
* var bool = isUndefinedOrNull( void 0 );
* // returns true
*
* bool = isUndefinedOrNull( null );
* // returns true
*
* bool = isUndefinedOrNull( false );
* // returns false
*/

/**
* Test if a value is `undefined`.
*
* @module @stdlib/assert/is-undefined
*
* @example
* var isUndefined = require( '@stdlib/assert/is-undefined' );
*
* var bool = isUndefined( void 0 );
* // returns true
*
* bool = isUndefined( null );
* // returns false
*/

/**
* Test if a value is a 2-dimensional ndarray-like object.
*
* @module @stdlib/assert/is-matrix-like
*
* @example
* var ctor = require( '@stdlib/ndarray/ctor' );
* var isMatrixLike = require( '@stdlib/assert/is-matrix-like' );
*
* var ndarray = ctor( 'generic', 2 );
*
* var arr = ndarray( [ 0, 0, 0, 0 ], [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );
*
* var bool = isMatrixLike( arr );
* // returns true
*
* bool = isMatrixLike( [] );
* // returns false
*/

/**
* Test if a value is a Buffer instance.
*
* @module @stdlib/assert/is-buffer
*
* @example
* var isBuffer = require( '@stdlib/assert/is-buffer' );
*
* var v = isBuffer( new Buffer( 'beep' ) );
* // returns true
*
* v = isBuffer( {} );
* // returns false
*/

/**
* Test if a value is a Float32Array.
*
* @module @stdlib/assert/is-float32array
*
* @example
* var isFloat32Array = require( '@stdlib/assert/is-float32array' );
*
* var bool = isFloat32Array( new Float32Array( 10 ) );
* // returns true
*
* bool = isFloat32Array( [] );
* // returns false
*/

/**
* Test if a value is a Float64Array.
*
* @module @stdlib/assert/is-float64array
*
* @example
* var isFloat64Array = require( '@stdlib/assert/is-float64array' );
*
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* bool = isFloat64Array( [] );
* // returns false
*/

/**
* Test if a value is a Uint16Array.
*
* @module @stdlib/assert/is-uint16array
*
* @example
* var isUint16Array = require( '@stdlib/assert/is-uint16array' );
*
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* bool = isUint16Array( [] );
* // returns false
*/

/**
* Test if a value is a Uint32Array.
*
* @module @stdlib/assert/is-uint32array
*
* @example
* var isUint32Array = require( '@stdlib/assert/is-uint32array' );
*
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* bool = isUint32Array( [] );
* // returns false
*/

/**
* Test if a value is a Uint8Array.
*
* @module @stdlib/assert/is-uint8array
*
* @example
* var isUint8Array = require( '@stdlib/assert/is-uint8array' );
*
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* bool = isUint8Array( [] );
* // returns false
*/

/**
* Test if a value is a Uint8ClampedArray.
*
* @module @stdlib/assert/is-uint8clampedarray
*
* @example
* var isUint8ClampedArray = require( '@stdlib/assert/is-uint8clampedarray' );
*
* var bool = isUint8ClampedArray( new Uint8ClampedArray( 10 ) );
* // returns true
*
* bool = isUint8ClampedArray( [] );
* // returns false
*/

/**
* Test if a value is a `Date` object.
*
* @module @stdlib/assert/is-date-object
*
* @example
* var isDateObject = require( '@stdlib/assert/is-date-object' );
*
* var bool = isDateObject( new Date() );
* // returns true
*
* bool = isDateObject( '2017-01-01' );
* // returns false
*/

/**
* Test if a value is a boolean.
*
* @module @stdlib/assert/is-boolean
*
* @example
* var isBoolean = require( '@stdlib/assert/is-boolean' );
*
* var bool = isBoolean( false );
* // returns true
*
* bool = isBoolean( new Boolean( false ) );
* // returns true
*
* @example
* // Use interface to check for boolean primitives...
* var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
*
* var bool = isBoolean( false );
* // returns true
*
* bool = isBoolean( new Boolean( true ) );
* // returns false
*
* @example
* // Use interface to check for boolean objects...
* var isBoolean = require( '@stdlib/assert/is-boolean' ).isObject;
*
* var bool = isBoolean( true );
* // returns false
*
* bool = isBoolean( new Boolean( false ) );
* // returns true
*/

/**
* Test if a value is a collection.
*
* @module @stdlib/assert/is-collection
*
* @example
* var isCollection = require( '@stdlib/assert/is-collection' );
*
* var bool = isCollection( [] );
* // returns true
*
* bool = isCollection( {} );
* // returns false
*/

/**
* Test if a value is a function.
*
* @module @stdlib/assert/is-function
*
* @example
* var isFunction = require( '@stdlib/assert/is-function' );
*
* function beep() {
*     return 'beep';
* }
*
* var bool = isFunction( beep );
* // returns true
*/

/**
* Test if a value is a nonnegative integer.
*
* @module @stdlib/assert/is-nonnegative-integer
*
* @example
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' );
*
* var bool = isNonNegativeInteger( 5.0 );
* // returns true
*
* bool = isNonNegativeInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isNonNegativeInteger( -5.0 );
* // returns false
*
* bool = isNonNegativeInteger( 3.14 );
* // returns false
*
* bool = isNonNegativeInteger( null );
* // returns false
*
* @example
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
*
* var bool = isNonNegativeInteger( 3.0 );
* // returns true
*
* bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns false
*
* @example
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isObject;
*
* var bool = isNonNegativeInteger( 3.0 );
* // returns false
*
* bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns true
*/

/**
* Test if a value is a nonnegative number.
*
* @module @stdlib/assert/is-nonnegative-number
*
* @example
* var isNonNegativeNumber = require( '@stdlib/assert/is-nonnegative-number' );
*
* var bool = isNonNegativeNumber( 5.0 );
* // returns true
*
* bool = isNonNegativeNumber( new Number( 5.0 ) );
* // returns true
*
* bool = isNonNegativeNumber( 3.14 );
* // returns true
*
* bool = isNonNegativeNumber( -5.0 );
* // returns false
*
* bool = isNonNegativeNumber( null );
* // returns false
*
* @example
* var isNonNegativeNumber = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;
*
* var bool = isNonNegativeNumber( 3.0 );
* // returns true
*
* bool = isNonNegativeNumber( new Number( 3.0 ) );
* // returns false
*
* @example
* var isNonNegativeNumber = require( '@stdlib/assert/is-nonnegative-number' ).isObject;
*
* var bool = isNonNegativeNumber( 3.0 );
* // returns false
*
* bool = isNonNegativeNumber( new Number( 3.0 ) );
* // returns true
*/

/**
* Test if a value is a number.
*
* @module @stdlib/assert/is-number
*
* @example
* var isNumber = require( '@stdlib/assert/is-number' );
*
* var bool = isNumber( 3.14 );
* // returns true
*
* bool = isNumber( new Number( 3.14 ) );
* // returns true
*
* bool = isNumber( NaN );
* // returns true
*
* bool = isNumber( null );
* // returns false
*
* @example
* var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
*
* var bool = isNumber( 3.14 );
* // returns true
*
* bool = isNumber( NaN );
* // returns true
*
* bool = isNumber( new Number( 3.14 ) );
* // returns false
*
* @example
* var isNumber = require( '@stdlib/assert/is-number' ).isObject;
*
* var bool = isNumber( 3.14 );
* // returns false
*
* bool = isNumber( new Number( 3.14 ) );
* // returns true
*/

/**
* Test if a value is a numeric array.
*
* @module @stdlib/assert/is-numeric-array
*
* @example
* var isNumericArray = require( '@stdlib/assert/is-numeric-array' );
*
* var bool = isNumericArray( new Int8Array( 10 ) );
* // returns true
*
* bool = isNumericArray( [ 1, 2, 3 ] );
* // returns true
*
* bool = isNumericArray( [ '1', '2', '3' ] );
* // returns false
*/

/**
* Test if a value is a parseable JSON string.
*
* @module @stdlib/assert/is-json
*
* @example
* var isJSON = require( '@stdlib/assert/is-json' );
*
* var v = isJSON( '{"a":5}' );
* // returns true
*
* v = isJSON( '{a":5}' );
* // returns false
*/

/**
* Test if a value is a plain object.
*
* @module @stdlib/assert/is-plain-object
*
* @example
* var isPlainObject = require( '@stdlib/assert/is-plain-object' );
*
* var bool = isPlainObject( {} );
* // returns true
*
* bool = isPlainObject( null );
* // returns false
*/

/**
* Test if a value is a positive integer.
*
* @module @stdlib/assert/is-positive-integer
*
* @example
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );
*
* var bool = isPositiveInteger( 5.0 );
* // returns true
*
* bool = isPositiveInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isPositiveInteger( -5.0 );
* // returns false
*
* bool = isPositiveInteger( 3.14 );
* // returns false
*
* bool = isPositiveInteger( null );
* // returns false
*
* @example
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
*
* var bool = isPositiveInteger( 3.0 );
* // returns true
*
* bool = isPositiveInteger( new Number( 3.0 ) );
* // returns false
*
* @example
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isObject;
*
* var bool = isPositiveInteger( 3.0 );
* // returns false
*
* bool = isPositiveInteger( new Number( 3.0 ) );
* // returns true
*/

/**
* Test if a value is a positive number.
*
* @module @stdlib/assert/is-positive-number
*
* @example
* var isPositiveNumber = require( '@stdlib/assert/is-positive-number' );
*
* var bool = isPositiveNumber( 5.0 );
* // returns true
*
* bool = isPositiveNumber( new Number( 5.0 ) );
* // returns true
*
* bool = isPositiveNumber( 3.14 );
* // returns true
*
* bool = isPositiveNumber( -5.0 );
* // returns false
*
* bool = isPositiveNumber( null );
* // returns false
*
* @example
* var isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
*
* var bool = isPositiveNumber( 3.0 );
* // returns true
*
* bool = isPositiveNumber( new Number( 3.0 ) );
* // returns false
*
* @example
* var isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isObject;
*
* var bool = isPositiveNumber( 3.0 );
* // returns false
*
* bool = isPositiveNumber( new Number( 3.0 ) );
* // returns true
*/

/**
* Test if a value is a probability.
*
* @module @stdlib/assert/is-probability
*
* @example
* var isProbability = require( '@stdlib/assert/is-probability' );
*
* var bool = isProbability( 0.5 );
* // returns true
*
* bool = isProbability( new Number( 0.5 ) );
* // returns true
*
* bool = isProbability( 3.14 );
* // returns false
*
* bool = isProbability( -5.0 );
* // returns false
*
* bool = isProbability( null );
* // returns false
*
* @example
* var isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;
*
* var bool = isProbability( 0.3 );
* // returns true
*
* bool = isProbability( new Number( 0.3 ) );
* // returns false
*
* @example
* var isProbability = require( '@stdlib/assert/is-probability' ).isObject;
*
* var bool = isProbability( 0.77 );
* // returns false
*
* bool = isProbability( new Number( 0.77 ) );
* // returns true
*/

/**
* Test if a value is a regular expression.
*
* @module @stdlib/assert/is-regexp
*
* @example
* var isRegExp = require( '@stdlib/assert/is-regexp' );
*
* var bool = isRegExp( /\.+/ );
* // returns true
*
* bool = isRegExp( {} );
* // returns false
*/

/**
* Test if a value is a string.
*
* @module @stdlib/assert/is-string
*
* @example
* var isString = require( '@stdlib/assert/is-string' );
*
* var bool = isString( 'beep' );
* // returns true
*
* bool = isString( new String( 'beep' ) );
* // returns true
*
* bool = isString( 5 );
* // returns false
*
* @example
* var isString = require( '@stdlib/assert/is-string' ).isObject;
*
* var bool = isString( new String( 'beep' ) );
* // returns true
*
* bool = isString( 'beep' );
* // returns false
*
* @example
* var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
*
* var bool = isString( 'beep' );
* // returns true
*
* bool = isString( new String( 'beep' ) );
* // returns false
*/

/**
* Test if a value is a typed array.
*
* @module @stdlib/assert/is-typed-array
*
* @example
* var Int8Array = require( '@stdlib/array/int8' );
* var isTypedArray = require( '@stdlib/assert/is-typed-array' );
*
* var bool = isTypedArray( new Int8Array( 10 ) );
* // returns true
*/

/**
* Test if a value is an Int16Array.
*
* @module @stdlib/assert/is-int16array
*
* @example
* var isInt16Array = require( '@stdlib/assert/is-int16array' );
*
* var bool = isInt16Array( new Int16Array( 10 ) );
* // returns true
*
* bool = isInt16Array( [] );
* // returns false
*/

/**
* Test if a value is an Int32Array.
*
* @module @stdlib/assert/is-int32array
*
* @example
* var isInt32Array = require( '@stdlib/assert/is-int32array' );
*
* var bool = isInt32Array( new Int32Array( 10 ) );
* // returns true
*
* bool = isInt32Array( [] );
* // returns false
*/

/**
* Test if a value is an Int8Array.
*
* @module @stdlib/assert/is-int8array
*
* @example
* var isInt8Array = require( '@stdlib/assert/is-int8array' );
*
* var bool = isInt8Array( new Int8Array( 10 ) );
* // returns true
*
* bool = isInt8Array( [] );
* // returns false
*/

/**
* Test if a value is an `Error` object.
*
* @module @stdlib/assert/is-error
*
* @example
* var isError = require( '@stdlib/assert/is-error' );
*
* var bool = isError( new Error( 'beep' ) );
* // returns true
*
* bool = isError( {} );
* // returns false
*/

/**
* Test if a value is an `arguments` object.
*
* @module @stdlib/assert/is-arguments
*
* @example
* var isArguments = require( '@stdlib/assert/is-arguments' );
*
* function foo() {
*     return arguments;
* }
*
* var bool = isArguments( foo() );
* // returns true
*
* bool = isArguments( [] );
* // returns false
*/

/**
* Test if a value is an array of arrays.
*
* @module @stdlib/assert/is-array-array
*
* @example
* var isArrayArray = require( '@stdlib/assert/is-array-array' );
*
* var bool = isArrayArray( [ [], [] ] );
* // returns true
*
* bool = isArrayArray( [ {}, {} ] );
* // returns false
*
* bool = isArrayArray( [] );
* // returns false
*/

/**
* Test if a value is an array of probabilities that sum to one.
*
* @module @stdlib/assert/is-unity-probability-array
*
* @example
* var isUnityProbabilityArray = require( '@stdlib/assert/is-unity-probability-array' );
*
* var bool = isUnityProbabilityArray( [ 0.25, 0.5, 0.25 ] );
* // returns true
*
* bool = isUnityProbabilityArray( new Uint8Array( [ 0, 1 ] ) );
* // returns true
*
* bool = isUnityProbabilityArray( [ 0.4, 0.4, 0.4 ] );
* // returns false
*
* bool = isUnityProbabilityArray( [ 3.14, 0.0 ] );
* // returns false
*/

/**
* Test if a value is an array of strings.
*
* @module @stdlib/assert/is-string-array
*
* @example
* var isStringArray = require( '@stdlib/assert/is-string-array' );
*
* var bool = isStringArray( [ 'abc', 'def' ] );
* // returns true
*
* bool = isStringArray( [ 'abc', 123 ] );
* // returns false
*
* @example
* var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
*
* var bool = isStringArray( [ 'abc', 'def' ] );
* // returns true
*
* bool = isStringArray( [ 'abc', new String( 'def' ) ] );
* // returns false
*
* @example
* var isStringArray = require( '@stdlib/assert/is-string-array' ).objects;
*
* var bool = isStringArray( [ new String( 'abc' ), new String( 'def' ) ] );
* // returns true
*
* bool = isStringArray( [ new String( 'abc' ), 'def' ] );
* // returns false
*/

/**
* Test if a value is an array-like object containing only integers.
*
* @module @stdlib/assert/is-integer-array
*
* @example
* var isIntegerArray = require( '@stdlib/assert/is-integer-array' );
*
* var bool = isIntegerArray( [ -3.0, new Number(0.0), 2.0 ] );
* // returns true
*
* bool = isIntegerArray( [ -3.0, '3.0' ] );
* // returns false
*
* @example
* var isIntegerArray = require( '@stdlib/assert/is-integer-array' ).primitives;
*
* var bool = isIntegerArray( [ -1.0, 10.0 ] );
* // returns true
*
* bool = isIntegerArray( [ -1.0, 0.0, 5.0 ] );
* // returns true
*
* bool = isIntegerArray( [ -3.0, new Number(-1.0) ] );
* // returns false
*
* @example
* var isIntegerArray = require( '@stdlib/assert/is-integer-array' ).objects;
*
* var bool = isIntegerArray( [ new Number(1.0), new Number(3.0) ] );
* // returns true
*
* bool = isIntegerArray( [ -1.0, 0.0, 3.0 ] );
* // returns false
*
* bool = isIntegerArray( [ 3.0, new Number(-1.0) ] );
* // returns false
*/

/**
* Test if a value is an array-like object containing only nonnegative integers.
*
* @module @stdlib/assert/is-nonnegative-integer-array
*
* @example
* var isNonNegativeIntegerArray = require( '@stdlib/assert/is-nonnegative-integer-array' );
*
* var bool = isNonNegativeIntegerArray( [ 3.0, new Number(3.0) ] );
* // returns true
*
* bool = isNonNegativeIntegerArray( [ 3.0, '3.0' ] );
* // returns false
*
* @example
* var isNonNegativeIntegerArray = require( '@stdlib/assert/is-nonnegative-integer-array' ).primitives;
*
* var bool = isNonNegativeIntegerArray( [ 1.0, 0.0, 10.0 ] );
* // returns true
*
* bool = isNonNegativeIntegerArray( [ 3.0, new Number(1.0) ] );
* // returns false
*
* @example
* var isNonNegativeIntegerArray = require( '@stdlib/assert/is-nonnegative-integer-array' ).objects;
*
* var bool = isNonNegativeIntegerArray( [ new Number(3.0), new Number(1.0) ] );
* // returns true
*
* bool = isNonNegativeIntegerArray( [ 1.0, 0.0, 10.0 ] );
* // returns false
*/

/**
* Test if a value is an array-like object containing only objects.
*
* @module @stdlib/assert/is-object-array
*
* @example
* var isObjectArray = require( '@stdlib/assert/is-object-array' );
*
* var bool = isObjectArray( [ {}, new Number(3.0) ] );
* // returns true
*
* bool = isObjectArray( [ {}, { 'beep': 'boop' } ] );
* // returns true
*
* bool = isObjectArray( [ {}, '3.0' ] );
* // returns false
*/

/**
* Test if a value is an array-like object containing only positive integers.
*
* @module @stdlib/assert/is-positive-integer-array
*
* @example
* var isPositiveIntegerArray = require( '@stdlib/assert/is-positive-integer-array' );
*
* var bool = isPositiveIntegerArray( [ 3.0, new Number(3.0) ] );
* // returns true
*
* bool = isPositiveIntegerArray( [ 3.0, '3.0' ] );
* // returns false
*
* @example
* var isPositiveIntegerArray = require( '@stdlib/assert/is-positive-integer-array' ).primitives;
*
* var bool = isPositiveIntegerArray( [ 1.0, 2.0, 10.0 ] );
* // returns true
*
* bool = isPositiveIntegerArray( [ 3.0, new Number(1.0) ] );
* // returns false
*
* @example
* var isPositiveIntegerArray = require( '@stdlib/assert/is-positive-integer-array' ).objects;
*
* var bool = isPositiveIntegerArray( [ new Number(3.0), new Number(1.0) ] );
* // returns true
*
* bool = isPositiveIntegerArray( [ 1.0, 2.0, 10.0 ] );
* // returns false
*/

/**
* Test if a value is an array-like object containing only positive numbers.
*
* @module @stdlib/assert/is-positive-number-array
*
* @example
* var isPositiveNumberArray = require( '@stdlib/assert/is-positive-number-array' );
*
* var bool = isPositiveNumberArray( [ 3.0, new Number(3.0) ] );
* // returns true
*
* bool = isPositiveNumberArray( [ 3.0, '3.0' ] );
* // returns false
*
* @example
* var isPositiveNumberArray = require( '@stdlib/assert/is-positive-number-array' ).primitives;
*
* var bool = isPositiveNumberArray( [ 1.0, 5.0, 10.0 ] );
* // returns true
*
* bool = isPositiveNumberArray( [ 3.0, new Number(1.0) ] );
* // returns false
*
* @example
* var isPositiveNumberArray = require( '@stdlib/assert/is-positive-number-array' ).objects;
*
* var bool = isPositiveNumberArray( [ new Number(3.0), new Number(1.0) ] );
* // returns true
*
* bool = isPositiveNumberArray( [ 1.0, 5.0, 10.0 ] );
* // returns false
*/

/**
* Test if a value is an array-like object of numbers.
*
* @module @stdlib/assert/is-number-array
*
* @example
* var isNumberArray = require( '@stdlib/assert/is-number-array' );
*
* var bool = isNumberArray( [ 1, 2, 3 ] );
* // returns true
*
* bool = isNumberArray( [ '1', 2, 3 ] );
* // returns false
*
* @example
* var isNumberArray = require( '@stdlib/assert/is-number-array' ).primitives;
*
* var bool = isNumberArray( [ 1, 2, 3 ] );
* // returns true
*
* bool = isNumberArray( [ 1, new Number( 2 ) ] );
* // returns false
*
* @example
* var isNumberArray = require( '@stdlib/assert/is-number-array' ).objects;
*
* var bool = isNumberArray( [ new Number( 1 ), new Number( 2 ) ] );
* // returns true
*
* bool = isNumberArray( [ new Number( 1 ), 2 ] );
* // returns false
*/

/**
* Test if a value is an array-like object.
*
* @module @stdlib/assert/is-array-like-object
*
* @example
* var isArrayLikeObject = require( '@stdlib/assert/is-array-like-object' );
*
* var bool = isArrayLikeObject( [] );
* // returns true
*
* bool = isArrayLikeObject( { 'length':10 } );
* // returns true
*
* bool = isArrayLikeObject( 'beep' );
* // returns false
*/

/**
* Test if a value is an array.
*
* @module @stdlib/assert/is-array
*
* @example
* var isArray = require( '@stdlib/assert/is-array' );
*
* var bool = isArray( [] );
* // returns true
*
* bool = isArray( {} );
* // returns false
*/

/**
* Test if a value is an empty array.
*
* @module @stdlib/assert/is-empty-array
*
* @example
* var isEmptyArray = require( '@stdlib/assert/is-empty-array' );
*
* var bool = isEmptyArray( [] );
* // returns true
*
* bool = isEmptyArray( [ 1, 2, 3 ] );
* // returns false
*
* bool = isEmptyArray( {} );
* // returns false
*/

/**
* Test if a value is an empty object.
*
* @module @stdlib/assert/is-empty-object
*
* @example
* var isEmptyObject = require( '@stdlib/assert/is-empty-object' );
*
* var bool = isEmptyObject( {} );
* // returns true
*
* bool = isEmptyObject( { 'beep': 'boop' } );
* // returns false
*
* bool = isEmptyObject( [] );
* // returns false
*/

/**
* Test if a value is an empty string.
*
* @module @stdlib/assert/is-empty-string
*
* @example
* var isEmptyString = require( '@stdlib/assert/is-empty-string' );
*
* var bool = isEmptyString( '' );
* // returns true
*
* bool = isEmptyString( 'beep' );
* // returns false
*
* bool = isEmptyString( [] );
* // returns false
*
* @example
* var isEmptyString = require( '@stdlib/assert/is-empty-string' ).isObject;
*
* var bool = isEmptyString( new String( '' ) );
* // returns true
*
* bool = isEmptyString( '' );
* // returns false
*
* @example
* var isEmptyString = require( '@stdlib/assert/is-empty-string' ).isPrimitive;
*
* var bool = isEmptyString( '' );
* // returns true
*
* bool = isEmptyString( new String( '' ) );
* // returns false
*/

/**
* Test if a value is an infinite number.
*
* @module @stdlib/assert/is-infinite
*
* @example
* var isInfinite = require( '@stdlib/assert/is-infinite' );
*
* var bool = isInfinite( 1.0/0.0 );
* // returns true
*
* bool = isInfinite( new Number( 1.0/0.0 ) );
* // returns true
*
* bool = isInfinite( 5.0 );
* // returns false
*
* bool = isInfinite( null );
* // returns false
*
* @example
* var isInfinite = require( '@stdlib/assert/is-infinite' ).isPrimitive;
*
* var bool = isInfinite( -1.0/0.0 );
* // returns true
*
* bool = isInfinite( new Number( -1.0/0.0 ) );
* // returns false
*
* @example
* var isInfinite = require( '@stdlib/assert/is-infinite' ).isObject;
*
* var bool = isInfinite( 1.0/0.0 );
* // returns false
*
* bool = isInfinite( new Number( 1.0/0.0 ) );
* // returns true
*/

/**
* Test if a value is an integer.
*
* @module @stdlib/assert/is-integer
*
* @example
* var isInteger = require( '@stdlib/assert/is-integer' );
*
* var bool = isInteger( 5.0 );
* // returns true
*
* bool = isInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isInteger( -3.14 );
* // returns false
*
* bool = isInteger( null );
* // returns false
*
* @example
* // Use interface to check for integer primitives...
* var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;
*
* var bool = isInteger( -3.0 );
* // returns true
*
* bool = isInteger( new Number( -3.0 ) );
* // returns false
*
* @example
* // Use interface to check for integer objects...
* var isInteger = require( '@stdlib/assert/is-integer' ).isObject;
*
* var bool = isInteger( 3.0 );
* // returns false
*
* bool = isInteger( new Number( 3.0 ) );
* // returns true
*/

/**
* Test if a value is an object.
*
* @module @stdlib/assert/is-object
*
* @example
* var isObject = require( '@stdlib/assert/is-object' );
*
* var bool = isObject( {} );
* // returns true
*
* bool = isObject( true );
* // returns false
*/

/**
* Test if a value is array-like.
*
* @module @stdlib/assert/is-array-like
*
* @example
* var isArrayLike = require( '@stdlib/assert/is-array-like' );
*
* var bool = isArrayLike( [] );
* // returns true
*
* bool = isArrayLike( { 'length': 10 } );
* // returns true
*
* bool = isArrayLike( 'beep' );
* // returns true
*/

/**
* Test if a value is ndarray-like.
*
* @module @stdlib/assert/is-ndarray-like
*
* @example
* var ctor = require( '@stdlib/ndarray/ctor' );
* var isndarrayLike = require( '@stdlib/assert/is-ndarray-like' );
*
* var ndarray = ctor( 'generic', 2 );
*
* var arr = ndarray( [ 0, 0, 0, 0 ], [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );
*
* var bool = isndarrayLike( arr );
* // returns true
*
* bool = isndarrayLike( [] );
* // returns false
*/

/**
* Test if a value is object-like.
*
* @module @stdlib/assert/is-object-like
*
* @example
* var isObjectLike = require( '@stdlib/assert/is-object-like' );
*
* var bool = isObjectLike( {} );
* // returns true
*
* bool = isObjectLike( [] );
* // returns true
*
* bool = isObjectLike( null );
* // returns false
*
* @example
* var isObjectLike = require( '@stdlib/assert/is-object-like' ).isObjectLikeArray;
*
* var bool = isObjectLike( [ {}, [] ] );
* // returns true
*
* bool = isObjectLike( [ {}, '3.0' ] );
* // returns false
*/

/**
* Test if a value is typed-array-like.
*
* @module @stdlib/assert/is-typed-array-like
*
* @example
* var Int16Array = require( '@stdlib/array/int16' );
* var isTypedArrayLike = require( '@stdlib/assert/is-typed-array-like' );
*
* var bool = isTypedArrayLike( new Int16Array() );
* // returns true
*
* bool = isTypedArrayLike({
*	'length': 10,
*	'byteOffset': 0,
*	'byteLength': 10,
*	'BYTES_PER_ELEMENT': 4
* });
* // returns true
*/

/**
* Test if an array-like value contains another value.
*
* @module @stdlib/assert/contains
*
* @example
* var contains = require( '@stdlib/assert/contains' );
*
* var bool = contains( 'Hello World', 'World' );
* // returns true
*
* bool = contains( 'Hello World', 'world' );
* // returns false
*
* bool = contains( [ 1, 2, 3, 4 ], 2 );
* // returns true
*
* bool = contains( [ NaN, 2, 3, 4 ], NaN );
* // returns true
*/

/**
* Test if two arguments are strictly equal.
*
* @module @stdlib/assert/is-strict-equal
*
* @example
* var isStrictEqual = require( '@stdlib/assert/is-strict-equal' );
*
* var bool = isStrictEqual( true, true );
* // returns true
*
* bool = isStrictEqual( 3.14, 3.14 );
* // returns true
*
* bool = isStrictEqual( {}, {} );
* // returns false
*
* bool = isStrictEqual( -0.0, -0.0 );
* // returns true
*
* bool = isStrictEqual( -0.0, 0.0 );
* // returns false
*
* bool = isStrictEqual( NaN, NaN );
* // returns false
*
* bool = isStrictEqual( [], [] );
* // returns false
*/

/**
* Test whether a string contains only numeric digits.
*
* @module @stdlib/assert/is-digit-string
*
* @example
* var isDigitString = require( '@stdlib/assert/is-digit-string' );
*
* var out = isDigitString( '0123456789' );
* // returns true
*
* out = isDigitString( '0xffffff' );
* // returns false
*
* out = isDigitString( '' );
* // returns false
*/

/**
* Test whether a value has in its prototype chain a specified constructor as a prototype property.
*
* @module @stdlib/assert/instance-of
*
* @example
* var instanceOf = require( '@stdlib/assert/instance-of' );
*
* var bool = instanceOf( [], Array );
* // returns true
*
* bool = instanceOf( {}, Object ); // exception
* // returns true
*
* bool = instanceOf( 'beep', String );
* // returns false
*
* bool = instanceOf( null, Object );
* // returns false
*
* bool = instanceOf( 5, Object );
* // returns false
*/

/**
* Test whether an input value is a supported ndarray casting mode.
*
* @module @stdlib/ndarray/base/assert/is-casting-mode
*
* @example
* var isCastingMode = require( '@stdlib/ndarray/base/assert/is-casting-mode' );
*
* var bool = isCastingMode( 'none' );
* // returns true
*
* bool = isCastingMode( 'equiv' );
* // returns true
*
* bool = isCastingMode( 'safe' );
* // returns true
*
* bool = isCastingMode( 'same-kind' );
* // returns true
*
* bool = isCastingMode( 'unsafe' );
* // returns true
*
* bool = isCastingMode( 'foo' );
* // returns false
*/

/**
* Test whether an input value is a supported ndarray data type.
*
* @module @stdlib/ndarray/base/assert/is-data-type
*
* @example
* var isDataType = require( '@stdlib/ndarray/base/assert/is-data-type' );
*
* var bool = isDataType( 'binary' );
* // returns true
*
* bool = isDataType( 'float32' );
* // returns true
*
* bool = isDataType( 'float64' );
* // returns true
*
* bool = isDataType( 'generic' );
* // returns true
*
* bool = isDataType( 'int16' );
* // returns true
*
* bool = isDataType( 'int32' );
* // returns true
*
* bool = isDataType( 'int8' );
* // returns true
*
* bool = isDataType( 'uint16' );
* // returns true
*
* bool = isDataType( 'uint32' );
* // returns true
*
* bool = isDataType( 'uint8' );
* // returns true
*
* bool = isDataType( 'uint8c' );
* // returns true
*
* bool = isDataType( 'foo' );
* // returns false
*/

/**
* Test whether an input value is a supported ndarray index mode.
*
* @module @stdlib/ndarray/base/assert/is-index-mode
*
* @example
* var isIndexMode = require( '@stdlib/ndarray/base/assert/is-index-mode' );
*
* var bool = isIndexMode( 'wrap' );
* // returns true
*
* bool = isIndexMode( 'clamp' );
* // returns true
*
* bool = isIndexMode( 'throw' );
* // returns true
*
* bool = isIndexMode( 'foo' );
* // returns false
*/

/**
* Test whether an input value is an ndarray order.
*
* @module @stdlib/ndarray/base/assert/is-order
*
* @example
* var isOrder = require( '@stdlib/ndarray/base/assert/is-order' );
*
* var bool = isOrder( 'row-major' );
* // returns true
*
* bool = isOrder( 'column-major' );
* // returns true
*
* bool = isOrder( 'foo' );
* // returns false
*/

/**
* Test whether an object has a specified property, either own or inherited.
*
* @module @stdlib/assert/has-property
*
* @example
* var hasProp = require( '@stdlib/assert/has-property' );
*
* var beep = {
*     'boop': true
* };
*
* var bool = hasProp( beep, 'boop' );
* // returns true
*
* bool = hasProp( beep, 'bop' );
* // returns false
*/

/**
* Test whether an object has a specified property.
*
* @module @stdlib/assert/has-own-property
*
* @example
* var hasOwnProp = require( '@stdlib/assert/has-own-property' );
*
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* bool = hasOwnProp( beep, 'bop' );
* // returns false
*/

/**
* Test whether an object's own property is enumerable.
*
* @module @stdlib/assert/is-enumerable-property
*
* @example
* var isEnumerableProperty = require( '@stdlib/assert/is-enumerable-property' );
*
* var beep = {
*     'boop': true
* };
*
* var bool = isEnumerableProperty( beep, 'boop' );
* // returns true
*
* bool = isEnumerableProperty( beep, 'hasOwnProperty' );
* // returns false
*/

/**
* Tests (loosely) if an input value is an array-like object.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if an input value is an array-like object
*
* @example
* var bool = isArrayLikeObject( [] );
* // returns true
*
* @example
* var bool = isArrayLikeObject( '' );
* // returns false
*/

/**
* Tests for `Object.defineProperty` support.
*
* @returns {boolean} boolean indicating if an environment has `Object.defineProperty` support
*
* @example
* var bool = hasDefinePropertySupport();
* // returns <boolean>
*/

/**
* Tests for deep equality between two values.
*
* @param {*} a - first comparison value
* @param {*} b - second comparison value
* @returns {boolean} boolean indicating if `a` is deep equal to `b`
*
* @example
* var bool = deepEqual( [ 1, 2, 3 ], [ 1, 2, 3 ] );
* // returns true
*
* @example
* var bool = deepEqual( [ 1, 2, 3 ], [ 1, 2, '3' ] );
* // returns false
*
* @example
* var bool = deepEqual( { 'a': 2 }, { 'a': [ 2 ] } );
* // returns false
*
* @example
* var bool = deepEqual( [], {} );
* // returns false
*
* @example
* var bool = deepEqual( null, null );
* // returns true
*/

/**
* Tests for native `Buffer` support.
*
* @returns {boolean} boolean indicating if an environment has `Buffer` support
*
* @example
* var bool = hasNodeBufferSupport();
* // returns <boolean>
*/

/**
* Tests for native `Float32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Float32Array` support
*
* @example
* var bool = hasFloat32ArraySupport();
* // returns <boolean>
*/

/**
* Tests for native `Float64Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Float64Array` support
*
* @example
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/

/**
* Tests for native `Int16Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Int16Array` support
*
* @example
* var bool = hasInt16ArraySupport();
* // returns <boolean>
*/

/**
* Tests for native `Int32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Int32Array` support
*
* @example
* var bool = hasInt32ArraySupport();
* // returns <boolean>
*/

/**
* Tests for native `Int8Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Int8Array` support
*
* @example
* var bool = hasInt8ArraySupport();
* // returns <boolean>
*/

/**
* Tests for native `Symbol.iterator` support.
*
* @returns {boolean} boolean indicating if an environment has `Symbol.iterator` support
*
* @example
* var bool = hasIteratorSymbolSupport();
* // returns <boolean>
*/

/**
* Tests for native `Symbol` support.
*
* @returns {boolean} boolean indicating if an environment has `Symbol` support
*
* @example
* var bool = hasSymbolSupport();
* // returns <boolean>
*/

/**
* Tests for native `Uint16Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint16Array` support
*
* @example
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/

/**
* Tests for native `Uint32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint32Array` support
*
* @example
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/

/**
* Tests for native `Uint8Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint8Array` support
*
* @example
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/

/**
* Tests for native `Uint8ClampedArray` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint8ClampedArray` support
*
* @example
* var bool = hasUint8ClampedArraySupport();
* // returns <boolean>
*/

/**
* Tests for native `function*()` support.
*
* @returns {boolean} boolean indicating if an environment has native `function*()` support
*
* @example
* var bool = hasGeneratorSupport();
* // returns <boolean>
*/

/**
* Tests for native `toStringTag` support.
*
* @returns {boolean} boolean indicating if an environment has `toStringTag` support
*
* @example
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/

/**
* Tests for native function `name` support.
*
* @returns {boolean} boolean indicating if an environment has function `name` support
*
* @example
* var bool = hasFunctionNameSupport();
* // returns <boolean>
*/

/**
* Tests if a finite double-precision floating-point number is a nonnegative integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a nonnegative integer
*
* @example
* var bool = isNonNegativeInteger( 1.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( 0.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( -10.0 );
* // returns false
*/

/**
* Tests if a finite double-precision floating-point number is a positive integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a positive integer
*
* @example
* var bool = isPositiveInteger( 1.0 );
* // returns true
*
* @example
* var bool = isPositiveInteger( 0.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( -10.0 );
* // returns false
*/

/**
* Tests if a finite double-precision floating-point number is an integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is an integer
*
* @example
* var bool = isInteger( 1.0 );
* // returns true
*
* @example
* var bool = isInteger( 3.14 );
* // returns false
*/

/**
* Tests if a finite numeric value is an even number.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is an even number
*
* @example
* var bool = isEven( 5.0 );
* // returns false
*
* @example
* var bool = isEven( -2.0 );
* // returns true
*
* @example
* var bool = isEven( 0.0 );
* // returns true
*
* @example
* var bool = isEven( NaN );
* // returns false
*/

/**
* Tests if a finite numeric value is an odd number.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is an odd number
*
* @example
* var bool = isOdd( 5.0 );
* // returns true
*
* @example
* var bool = isOdd( -2.0 );
* // returns false
*
* @example
* var bool = isOdd( 0.0 );
* // returns false
*
* @example
* var bool = isOdd( NaN );
* // returns false
*/

/**
* Tests if a number primitive is an integer value.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a number primitive is an integer value
*/

/**
* Tests if a numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/

/**
* Tests if a numeric value is a probability.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a probability
*
* @example
* var bool = isProbability( 0.5 );
* // returns true
*
* @example
* var bool = isProbability( 3.14 );
* // returns false
*
* @example
* var bool = isProbability( NaN );
* // returns false
*/

/**
* Tests if a numeric value is infinite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is infinite
*
* @example
* var bool = isInfinite( Infinity );
* // returns true
*
* @example
* var bool = isInfinite( -Infinity );
* // returns true
*
* @example
* var bool = isInfinite( 5.0 );
* // returns false
*
* @example
* var bool = isInfinite( NaN );
* // returns false
*/

/**
* Tests if a numeric value is negative zero.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is negative zero
*
* @example
* var bool = isNegativeZero( -0.0 );
* // returns true
*
* @example
* var bool = isNegativeZero( 0.0 );
* // returns false
*/

/**
* Tests if a numeric value is positive zero.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is positive zero
*
* @example
* var bool = isPositiveZero( 0.0 );
* // returns true
*
* @example
* var bool = isPositiveZero( -0.0 );
* // returns false
*/

/**
* Tests if a string starts with the characters of another string.
*
* @param {string} str - input string
* @param {string} search - search string
* @param {integer} [position=0] - position at which to start searching
* @throws {TypeError} first argument must be a string primitive
* @throws {TypeError} second argument must be a string primitive
* @throws {TypeError} third argument must be an integer
* @returns {boolean} boolean indicating if the input string starts with the search string
*
* @example
* var bool = startsWith( 'Remember the story I used to tell you when you were a boy?', 'Remember' );
* // returns true
*
* @example
* var bool = startsWith( 'Remember the story I used to tell you when you were a boy?', 'Remember, remember' );
* // returns false
*
* @example
* var bool = startsWith( 'To be, or not to be, that is the question.', 'To be' );
* // returns true
*
* @example
* var bool = startsWith( 'To be, or not to be, that is the question.', 'to be' );
* // returns false
*
* @example
* var bool = startsWith( 'To be, or not to be, that is the question.', 'to be', 14 );
* // returns true
*
* @example
* var bool = startsWith( 'To be, or not to be, that is the question.', 'quest', -9 );
* // returns true
*/

/**
* Tests if a value is `NaN`.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( new Number( NaN ) );
* // returns true
*
* @example
* var bool = isnan( 3.14 );
* // returns false
*
* @example
* var bool = isnan( null );
* // returns false
*/

/**
* Tests if a value is `null`.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is null
*
* @example
* var bool = isNull( null );
* // returns true
*
* bool = isNull( true );
* // returns false
*/

/**
* Tests if a value is `undefined` or `null`.
*
* ## Notes
*
* -   In older browsers, `undefined` is a global which can be overridden. `void`, however, is an operator which **cannot** be overridden. Consequently, better to use `void` to check for `undefined`. See [Stack Overflow][1].
*
* [1]: http://stackoverflow.com/a/19369078/2225624
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is undefined
*
* @example
* var bool = isUndefinedOrNull( undefined );
* // returns true
*
* bool = isUndefinedOrNull( null );
* // returns true
*
* bool = isUndefinedOrNull( false );
* // returns false
*/

/**
* Tests if a value is `undefined`.
*
* ## Notes
*
* -   In older browsers, `undefined` is a global which can be overridden. `void`, however, is an operator which **cannot** be overridden. Consequently, better to use `void` to check for `undefined`. See [Stack Overflow][1].
*
* [1]: http://stackoverflow.com/a/19369078/2225624
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is undefined
*
* @example
* var bool = isUndefined( undefined );
* // returns true
*
* bool = isUndefined( null );
* // returns false
*/

/**
* Tests if a value is a 2-dimensional ndarray-like object.
*
* @param {*} v - value to test
* @returns {boolean} boolean indicating if a value is a 2-dimensional ndarray-like object
*
* @example
* var ctor = require( '@stdlib/ndarray/ctor' );
*
* var ndarray = ctor( 'generic', 2 );
* var arr = ndarray( [ 0, 0, 0, 0 ], [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );
*
* var bool = isMatrixLike( arr );
* // returns true
*
* bool = isMatrixLike( [] );
* // returns false
*/

/**
* Tests if a value is a Buffer instance.
*
* @param {*} value - value to validate
* @returns {boolean} boolean indicating if a value is a Buffer instance
*
* @example
* var v = isBuffer( new Buffer( 'beep' ) );
* // returns true
*
* @example
* var v = isBuffer( new Buffer( [1,2,3,4] ) );
* // returns true
*
* @example
* var v = isBuffer( {} );
* // returns false
*
* @example
* var v = isBuffer( [] );
* // returns false
*/

/**
* Tests if a value is a Float32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Float32Array
*
* @example
* var bool = isFloat32Array( new Float32Array( 10 ) );
* // returns true
*
* @example
* var bool = isFloat32Array( [] );
* // returns false
*/

/**
* Tests if a value is a Float64Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Float64Array
*
* @example
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* @example
* var bool = isFloat64Array( [] );
* // returns false
*/

/**
* Tests if a value is a Uint16Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint16Array
*
* @example
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint16Array( [] );
* // returns false
*/

/**
* Tests if a value is a Uint32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint32Array
*
* @example
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint32Array( [] );
* // returns false
*/

/**
* Tests if a value is a Uint8Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint8Array
*
* @example
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint8Array( [] );
* // returns false
*/

/**
* Tests if a value is a Uint8ClampedArray.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint8ClampedArray
*
* @example
* var bool = isUint8ClampedArray( new Uint8ClampedArray( 10 ) );
* // returns true
*
* @example
* var bool = isUint8ClampedArray( [] );
* // returns false
*/

/**
* Tests if a value is a `Date` object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a `Date` object
*
* @example
* var bool = isDateObject( new Date() );
* // returns true
*
* @example
* var bool = isDateObject( '2017-01-01' );
* // returns false
*/

/**
* Tests if a value is a `NaN` number primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a `NaN` number primitive
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 3.14 );
* // returns false
*
* @example
* var bool = isnan( new Number( NaN ) );
* // returns false
*/

/**
* Tests if a value is a boolean object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a boolean object
*
* @example
* var bool = isBoolean( true );
* // returns false
*
* @example
* var bool = isBoolean( new Boolean( false ) );
* // returns true
*/

/**
* Tests if a value is a boolean primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a boolean primitive
*
* @example
* var bool = isBoolean( true );
* // returns true
*
* @example
* var bool = isBoolean( false );
* // returns true
*
* @example
* var bool = isBoolean( new Boolean( true ) );
* // returns false
*/

/**
* Tests if a value is a boolean.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a boolean
*
* @example
* var bool = isBoolean( false );
* // returns true
*
* @example
* var bool = isBoolean( true );
* // returns true
*
* @example
* var bool = isBoolean( new Boolean( false ) );
* // returns true
*
* @example
* var bool = isBoolean( new Boolean( true ) );
* // returns true
*/

/**
* Tests if a value is a collection.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is a collection
*
* @example
* var bool = isCollection( [] );
* // returns true
*
* @example
* var bool = isCollection( {} );
* // returns false
*/

/**
* Tests if a value is a function.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a function
*
* @example
* function beep() {
*     return 'beep';
* }
*
* var bool = isFunction( beep );
* // returns true
*/

/**
* Tests if a value is a nonnegative integer.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a nonnegative integer
*
* @example
* var bool = isNonNegativeInteger( 5.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( -5.0 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( 3.14 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( null );
* // returns false
*/

/**
* Tests if a value is a nonnegative number.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a nonnegative number
*
* @example
* var bool = isNonNegativeNumber( 5.0 );
* // returns true
*
* @example
* var bool = isNonNegativeNumber( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isNonNegativeNumber( 3.14 );
* // returns true
*
* @example
* var bool = isNonNegativeNumber( -5.0 );
* // returns false
*
* @example
* var bool = isNonNegativeNumber( null );
* // returns false
*/

/**
* Tests if a value is a number object having a nonnegative integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a nonnegative integer value
*
* @example
* var bool = isNonNegativeInteger( 3.0 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns true
*/

/**
* Tests if a value is a number object having a nonnegative value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a nonnegative number value
*
* @example
* var bool = isNonNegativeNumber( 3.0 );
* // returns false
*
* @example
* var bool = isNonNegativeNumber( new Number( 3.0 ) );
* // returns true
*/

/**
* Tests if a value is a number object having a positive integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a positive integer value
*
* @example
* var bool = isPositiveInteger( 3.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( new Number( 3.0 ) );
* // returns true
*/

/**
* Tests if a value is a number object having a positive value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a positive value
*
* @example
* var bool = isPositiveNumber( 3.0 );
* // returns false
*
* @example
* var bool = isPositiveNumber( new Number( 3.0 ) );
* // returns true
*/

/**
* Tests if a value is a number object having a value of `NaN`.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a value of `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns false
*
* @example
* var bool = isnan( new Number( NaN ) );
* // returns true
*/

/**
* Tests if a value is a number object having a value which is a probability.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a value which is a probability
*
* @example
* var bool = isProbability( 0.5 );
* // returns false
*
* @example
* var bool = isProbability( new Number( 0.5 ) );
* // returns true
*/

/**
* Tests if a value is a number object having an infinite value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having an infinite value
*
* @example
* var bool = isInfinite( 1.0/0.0 );
* // returns false
*
* @example
* var bool = isInfinite( new Number( 1.0/0.0 ) );
* // returns true
*/

/**
* Tests if a value is a number object having an integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having an integer value
*
* @example
* var bool = isInteger( 3.0 );
* // returns false
*
* @example
* var bool = isInteger( new Number( 3.0 ) );
* // returns true
*/

/**
* Tests if a value is a number object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object
*
* @example
* var bool = isNumber( 3.14 );
* // returns false
*
* @example
* var bool = isNumber( new Number( 3.14 ) );
* // returns true
*/

/**
* Tests if a value is a number primitive having a nonnegative integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a nonnegative integer value
*
* @example
* var bool = isNonNegativeInteger( 3.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns false
*/

/**
* Tests if a value is a number primitive having a nonnegative value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a nonnegative number value
*
* @example
* var bool = isNonNegativeNumber( 3.0 );
* // returns true
*
* @example
* var bool = isNonNegativeNumber( new Number( 3.0 ) );
* // returns false
*/

/**
* Tests if a value is a number primitive having a positive integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a positive integer value
*
* @example
* var bool = isPositiveInteger( 3.0 );
* // returns true
*
* @example
* var bool = isPositiveInteger( new Number( 3.0 ) );
* // returns false
*/

/**
* Tests if a value is a number primitive having a positive value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a positive value
*
* @example
* var bool = isPositiveNumber( 3.0 );
* // returns true
*
* @example
* var bool = isPositiveNumber( new Number( 3.0 ) );
* // returns false
*/

/**
* Tests if a value is a number primitive having a value which is a probability.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a value which is a probability
*
* @example
* var bool = isProbability( 0.66 );
* // returns true
*
* @example
* var bool = isProbability( new Number( 0.66 ) );
* // returns false
*/

/**
* Tests if a value is a number primitive having an infinite value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having an infinite value
*
* @example
* var bool = isInfinite( -1.0/0.0 );
* // returns true
*
* @example
* var bool = isInfinite( new Number( -1.0/0.0 ) );
* // returns false
*/

/**
* Tests if a value is a number primitive having an integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having an integer value
*
* @example
* var bool = isInteger( -3.0 );
* // returns true
*
* @example
* var bool = isInteger( new Number( -3.0 ) );
* // returns false
*/

/**
* Tests if a value is a number primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive
*
* @example
* var bool = isNumber( 3.14 );
* // returns true
*
* @example
* var bool = isNumber( NaN );
* // returns true
*
* @example
* var bool = isNumber( new Number( 3.14 ) );
* // returns false
*/

/**
* Tests if a value is a number.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a number
*
* @example
* var bool = isNumber( 3.14 );
* // returns true
*
* @example
* var bool = isNumber( new Number( 3.14 ) );
* // returns true
*
* @example
* var bool = isNumber( NaN );
* // returns true
*
* @example
* var bool = isNumber( null );
* // returns false
*/

/**
* Tests if a value is a numeric array.
*
* @param {*} v - value to test
* @returns {boolean} boolean indicating if a value is a numeric array
*
* @example
* var bool = isNumericArray( new Int8Array( 10 ) );
* // returns true
*
* bool = isNumericArray( [ 1, 2, 3 ] );
* // returns true
*
* bool = isNumericArray( [ '1', '2', '3' ] );
* // returns false
*/

/**
* Tests if a value is a parseable JSON string.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a parseable JSON string
*
* @example
* var v = isJSON( '{"a":5}' );
* // returns true
*
* @example
* var v = isJSON( '{a":5}' );
* // returns false
*/

/**
* Tests if a value is a plain object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a plain object
*
* @example
* var bool = isPlainObject( {} );
* // returns true
*
* @example
* var bool = isPlainObject( null );
* // returns false
*/

/**
* Tests if a value is a positive integer.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a positive integer
*
* @example
* var bool = isPositiveInteger( 5.0 );
* // returns true
*
* @example
* var bool = isPositiveInteger( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isPositiveInteger( 0.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( -5.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( 3.14 );
* // returns false
*
* @example
* var bool = isPositiveInteger( null );
* // returns false
*/

/**
* Tests if a value is a positive number.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a positive number
*
* @example
* var bool = isPositiveNumber( 5.0 );
* // returns true
*
* @example
* var bool = isPositiveNumber( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isPositiveNumber( 3.14 );
* // returns true
*
* @example
* var bool = isPositiveNumber( -5.0 );
* // returns false
*
* @example
* var bool = isPositiveNumber( null );
* // returns false
*/

/**
* Tests if a value is a probability.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a probability
*
* @example
* var bool = isProbability( 0.5 );
* // returns true
*
* @example
* var bool = isProbability( new Number( 0.5 ) );
* // returns true
*
* @example
* var bool = isProbability( 3.14 );
* // returns false
*
* @example
* var bool = isProbability( -5.0 );
* // returns false
*
* @example
* var bool = isProbability( null );
* // returns false
*/

/**
* Tests if a value is a regular expression.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a regular expression
*
* @example
* var bool = isRegExp( /\.+/ );
* // returns true
*
* @example
* var bool = isRegExp( {} );
* // returns false
*/

/**
* Tests if a value is a string object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a string object
*
* @example
* var bool = isString( new String( 'beep' ) );
* // returns true
*
* @example
* var bool = isString( 'beep' );
* // returns false
*/

/**
* Tests if a value is a string primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a string primitive
*
* @example
* var bool = isString( 'beep' );
* // returns true
*
* @example
* var bool = isString( new String( 'beep' ) );
* // returns false
*/

/**
* Tests if a value is a string.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a string
*
* @example
* var bool = isString( new String( 'beep' ) );
* // returns true
*
* @example
* var bool = isString( 'beep' );
* // returns true
*/

/**
* Tests if a value is a typed array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a typed array
*
* @example
* var Int8Array = require( '@stdlib/array/int8' );
*
* var bool = isTypedArray( new Int8Array( 10 ) );
* // returns true
*/

/**
* Tests if a value is an Int16Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an Int16Array
*
* @example
* var bool = isInt16Array( new Int16Array( 10 ) );
* // returns true
*
* @example
* var bool = isInt16Array( [] );
* // returns false
*/

/**
* Tests if a value is an Int32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an Int32Array
*
* @example
* var bool = isInt32Array( new Int32Array( 10 ) );
* // returns true
*
* @example
* var bool = isInt32Array( [] );
* // returns false
*/

/**
* Tests if a value is an Int8Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an Int8Array
*
* @example
* var bool = isInt8Array( new Int8Array( 10 ) );
* // returns true
*
* @example
* var bool = isInt8Array( [] );
* // returns false
*/

/**
* Tests if a value is an `Error` object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is an `Error` object
*
* @example
* var bool = isError( new Error( 'beep' ) );
* // returns true
*
* @example
* var bool = isError( {} );
* // returns false
*/

/**
* Tests if a value is an array of probabilities that sum to one.
*
* @param {*} v - value to test
* @returns {boolean} boolean indicating if a value is a probability array
*
* @example
* var bool = isUnityProbabilityArray( [ 0.25, 0.5, 0.25 ] );
* // returns true
*
* @example
* var bool = isUnityProbabilityArray( new Uint8Array( [ 0, 1 ] ) );
* // returns true
*
* @example
* var bool = isUnityProbabilityArray( [ 0.4, 0.4, 0.4 ] );
* // returns false
*
* @example
* var bool = isUnityProbabilityArray( [ 3.14, 0.0 ] );
* // returns false
*/

/**
* Tests if a value is an array-like object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is an array-like object
*
* @example
* var bool = isArrayLikeObject( [] );
* // returns true
*
* @example
* var bool = isArrayLikeObject( { 'length':10 } );
* // returns true
*
* @example
* var bool = isArrayLikeObject( 'beep' );
* // returns false
*/

/**
* Tests if a value is an array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an array
*
* @example
* var bool = isArray( [] );
* // returns true
*
* @example
* var bool = isArray( {} );
* // returns false
*/

/**
* Tests if a value is an empty array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an empty array
*
* @example
* var bool = isEmptyArray( [] );
* // returns true
*
* @example
* var bool = isEmptyArray( [ 1, 2, 3 ] );
* // returns false
*
* @example
* var bool = isEmptyArray( {} );
* // returns false
*/

/**
* Tests if a value is an empty object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an empty object
*
* @example
* var bool = isEmptyObject( {} );
* // returns true
*
* @example
* var bool = isEmptyObject( { 'beep': 'boop' } );
* // returns false
*
* @example
* var bool = isEmptyObject( [] );
* // returns false
*/

/**
* Tests if a value is an empty string object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an empty string object
*
* @example
* var bool = isEmptyString( '' );
* // returns false
*
* @example
* var bool = isEmptyString( new String( '' ) );
* // returns true
*
* @example
* var bool = isEmptyString( [] );
* // returns false
*/

/**
* Tests if a value is an empty string primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an empty string primitive
*
* @example
* var bool = isEmptyString( '' );
* // returns true
*
* @example
* var bool = isEmptyString( 'beep' );
* // returns false
*
* @example
* var bool = isEmptyString( [] );
* // returns false
*/

/**
* Tests if a value is an empty string.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an empty string
*
* @example
* var bool = isEmptyString( '' );
* // returns true
*
* @example
* var bool = isEmptyString( 'beep' );
* // returns false
*
* @example
* var bool = isEmptyString( [] );
* // returns false
*/

/**
* Tests if a value is an infinite number.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is an infinite number
*
* @example
* var bool = isInfinite( 1.0/0.0 );
* // returns true
*
* @example
* var bool = isInfinite( new Number( 1.0/0.0 ) );
* // returns true
*
* @example
* var bool = isInfinite( 5.0 );
* // returns false
*
* @example
* var bool = isInfinite( null );
* // returns false
*/

/**
* Tests if a value is an integer.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an integer
*
* @example
* var bool = isInteger( 5.0 );
* // returns true
*
* @example
* var bool = isInteger( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isInteger( -3.14 );
* // returns false
*
* @example
* var bool = isInteger( null );
* // returns false
*/

/**
* Tests if a value is an object; e.g., `{}`.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an object
*
* @example
* var bool = isObject( {} );
* // returns true
*
* @example
* var bool = isObject( null );
* // returns false
*/

/**
* Tests if a value is array-like.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is array-like
*
* @example
* var bool = isArrayLike( [] );
* // returns true
*
* @example
* var bool = isArrayLike( {'length':10} );
* // returns true
*/

/**
* Tests if a value is ndarray-like.
*
* @param {*} v - value to test
* @returns {boolean} boolean indicating if a value is ndarray-like
*
* @example
* var ctor = require( '@stdlib/ndarray/ctor' );
*
* var ndarray = ctor( 'generic', 2 );
* var arr = ndarray( [ 0, 0, 0, 0 ], [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );
*
* var bool = isndarrayLike( arr );
* // returns true
*
* bool = isndarrayLike( [] );
* // returns false
*/

/**
* Tests if a value is object-like.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is object-like
*
* @example
* var bool = isObjectLike( {} );
* // returns true
*
* @example
* var bool = isObjectLike( [] );
* // returns true
*
* @example
* var bool = isObjectLike( null );
* // returns false
*/

/**
* Tests if a value is typed-array-like.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is typed-array-like
*
* @example
* var arr = {
*	'BYTES_PER_ELEMENT': 8,
*	'length': 10,
*	'byteOffset': 0,
*	'byteLength': 10
* };
* var val = isTypedArrayLike( arr );
* // returns true
*
* @example
* var Int8Array = require( '@stdlib/array/int8' );
*
* var val = isTypedArrayLike( new Int8Array( 4 ) );
* // returns true
*
* @example
* var val = isTypedArrayLike( [] );
* // returns false
*
* @example
* var val = isTypedArrayLike( {} );
* // returns false
*
* @example
* var val = isTypedArrayLike( null );
* // returns false
*
* @example
* var val = isTypedArrayLike( 'beep' );
* // returns false
*/

/**
* Tests if an array-like value contains a search value.
*
* @param {(Collection|string)} val - input value
* @param {*} searchValue - search value
* @param {integer} [position=0] - position at which to start searching for `searchValue`
* @throws {TypeError} first argument must be array-like
* @throws {Error} must provide a search value
* @throws {TypeError} second argument must be a primitive string primitive when the first argument is a string
* @throws {TypeError} third argument must be an integer
* @returns {boolean} boolean indicating whether one value contains another
*
* @example
* var bool = contains( 'last man standing', 'stand' );
* // returns true
*
* @example
* var bool = contains( [ 1, 2, 3, 4 ], 2 );
* // returns true
*
* @example
* var bool = contains( 'presidential election', 'president' );
* // returns true
*
* @example
* var bool = contains( [ NaN, 2, 3, 4 ], NaN );
* // returns true
*
* @example
* var bool = contains( 'javaScript', 'js' );
* // returns false
*
* @example
* var bool = contains( [ 1, 2, 3, {} ], {} );
* // returns false
*
* @example
* var bool = contains( 'Hidden Treasures', '' );
* // returns true
*/

/**
* Tests if an object has a specified property, either own or inherited.
*
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object has a specified property
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasProp( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasProp( beep, 'bap' );
* // returns false
*/

/**
* Tests if an object has a specified property.
*
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object has a specified property
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'bap' );
* // returns false
*/

/**
* Tests if an object's own property is enumerable.
*
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object property is enumerable
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = isEnumerableProperty( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = isEnumerableProperty( beep, 'hasOwnProperty' );
* // returns false
*/

/**
* Tests if an object's own property is enumerable.
*
* @private
* @name isEnumerableProperty
* @type {Function}
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object property is enumerable
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = isEnumerableProperty( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = isEnumerableProperty( beep, 'hasOwnProperty' );
* // returns false
*/

/**
* Tests if two arguments are strictly equal.
*
* ## Notes
*
* -   In contrast to the strict equality operator `===`, `-0` and `+0` are distinguishable.
*
*
* @param {*} a - first input value
* @param {*} b - second input value
* @returns {boolean} boolean indicating whether two arguments are strictly equal
*
* @example
* var bool = isStrictEqual( true, true );
* // returns true
*
* @example
* var bool = isStrictEqual( 3.14, 3.14 );
* // returns true
*
* @example
* var bool = isStrictEqual( {}, {} );
* // returns false
*
* @example
* var bool = isStrictEqual( -0.0, -0.0 );
* // returns true
*
* @example
* var bool = isStrictEqual( -0.0, 0.0 );
* // returns false
*
* @example
* var bool = isStrictEqual( NaN, NaN );
* // returns false
*
* @example
* var bool = isStrictEqual( [], [] );
* // returns false
*/

/**
* Tests that a value is a valid constructor.
*
* @private
* @param {*} value - value to test
* @returns {(Error|null)} error object or null
*
* @example
* var ctor = function ctor() {};
*
* var err = validate( ctor );
* // returns null
*
* err = validate( null );
* // returns <TypeError>
*/

/**
* Tests that an object only has own properties.
*
* @private
* @param {Object} obj - value to test
* @returns {boolean} boolean indicating if an object only has own properties
*/

/**
* Tests the built-in `Object.keys()` implementation when provided `arguments`.
*
* @private
* @returns {boolean} boolean indicating whether the built-in implementation returns the expected number of keys
*/

/**
* Tests whether a string contains only numeric digits.
*
* @param {*} x - value to test
* @returns {boolean} boolean indicating if a string contains only numeric digits
*
* @example
* var out = isDigitString( '0123456789' );
* // returns true
*
* @example
* var out = isDigitString( '0xffffff' );
* // returns false
*
* @example
* var out = isDigitString( '' );
* // returns false
*
* @example
* var out = isDigitString( 123 );
* // returns false
*/

/**
* Tests whether a value equals the prototype of its constructor.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value equals the prototype of its constructor
*/

/**
* Tests whether a value has in its prototype chain a specified constructor as a prototype property.
*
* @param {*} value - value to test
* @param {Function} constructor - constructor to test against
* @throws {TypeError} constructor must be callable
* @returns {boolean} boolean indicating whether a value is an instance of a provided constructor
*
* @example
* var bool = instanceOf( [], Array );
* // returns true
*
* @example
* var bool = instanceOf( {}, Object ); // exception
* // returns true
*
* @example
* var bool = instanceOf( 'beep', String );
* // returns false
*
* @example
* var bool = instanceOf( null, Object );
* // returns false
*
* @example
* var bool = instanceOf( 5, Object );
* // returns false
*/

/**
* Tests whether a value is an `arguments` object.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is an `arguments` object
*
* @example
* function foo() {
*     return arguments;
* }
*
* var bool = isArguments( foo() );
* // returns true
*
* @example
* var bool = isArguments( [] );
* // returns false
*/

/**
* Tests whether an input value is a supported ndarray casting mode.
*
* @param {*} v - value to test
* @returns {boolean} boolean indicating whether an input value is a supported ndarray casting mode
*
* @example
* var bool = isCastingMode( 'none' );
* // returns true
*
* bool = isCastingMode( 'equiv' );
* // returns true
*
* bool = isCastingMode( 'safe' );
* // returns true
*
* bool = isCastingMode( 'same-kind' );
* // returns true
*
* bool = isCastingMode( 'unsafe' );
* // returns true
*
* bool = isCastingMode( 'foo' );
* // returns false
*/

/**
* Tests whether an input value is a supported ndarray data type.
*
* @param {*} v - value to test
* @returns {boolean} boolean indicating whether an input value is a supported ndarray data type
*
* @example
* var bool = isDataType( 'binary' );
* // returns true
*
* bool = isDataType( 'float32' );
* // returns true
*
* bool = isDataType( 'float64' );
* // returns true
*
* bool = isDataType( 'generic' );
* // returns true
*
* bool = isDataType( 'int16' );
* // returns true
*
* bool = isDataType( 'int32' );
* // returns true
*
* bool = isDataType( 'int8' );
* // returns true
*
* bool = isDataType( 'uint16' );
* // returns true
*
* bool = isDataType( 'uint32' );
* // returns true
*
* bool = isDataType( 'uint8' );
* // returns true
*
* bool = isDataType( 'uint8c' );
* // returns true
*
* bool = isDataType( 'foo' );
* // returns false
*/

/**
* Tests whether an input value is a supported ndarray index mode.
*
* @param {*} v - value to test
* @returns {boolean} boolean indicating whether an input value is a supported ndarray index mode
*
* @example
* var bool = isIndexMode( 'wrap' );
* // returns true
*
* bool = isIndexMode( 'clamp' );
* // returns true
*
* bool = isIndexMode( 'throw' );
* // returns true
*
* bool = isIndexMode( 'foo' );
* // returns false
*/

/**
* Tests whether an input value is an ndarray order.
*
* @param {*} v - value to test
* @returns {boolean} boolean indicating whether an input value is an ndarray order
*
* @example
* var bool = isOrder( 'row-major' );
* // returns true
*
* bool = isOrder( 'column-major' );
* // returns true
*
* bool = isOrder( 'foo' );
* // returns false
*/

/**
* Tests whether the built-in `Object.keys()` implementation supports providing `arguments` as an input value.
*
* ## Notes
*
* -   Safari 5.0 does **not** support `arguments` as an input value.
*
* @private
* @returns {boolean} boolean indicating whether a built-in implementation supports `arguments`
*/

/**
* Text component, which allows rendering of raw text as Markdown and enables voice control.
*
* @property {string} raw - text to be rendered
* @property {boolean} inline - controls whether to render the Markdown as inline text
* @property {string} className - class names
* @property {Object} style - CSS inline styles
* @property {string} voiceID - voice control identifier
*/

/**
* The **News** component scans the public **News API** (consisting of 71 international  newspapers) and displays the latest 10 articles of the given newspaper. There are two ways to enter a source: one by typing into the search field and submitting via the ENTER button, the second via voice.
*
* @property {boolean} invisible - indicates whether to show the input fields or rely solely on voice control to be triggered
* @property {string} key - authentication key for the News API
* @property {string} language - language identifier
* @property {string} voiceID - voice control identifier
* @property {Function} onArticles - callback function invoked with an array of article objects once they are received
*/

/**
* The **Wikipedia** component scans the **Wikipedia** and returns an article - if anything valid is found under the entered search term.
*
* @property {boolean} invisible - controls whether to display a text input field to search for Wikipedia articles
* @property {string} language - language identifier
*/

/**
* The Euler-Mascheroni constant.
*
* @constant
* @type {number}
* @default 0.5772156649015329
* @see [OEIS]{@link http://oeis.org/A001620}
* @see [Mathworld]{@link http://mathworld.wolfram.com/Euler-MascheroniConstant.html}
*/

/**
* The Euler-Mascheroni constant.
*
* @module @stdlib/constants/math/float64-eulergamma
* @type {number}
*
* @example
* var GAMMA = require( '@stdlib/constants/math/float64-eulergamma' );
* // returns 0.5772156649015329
*/

/**
* The Switch component allows the display of one element out of a list of several elements. Users can cycle through the different children of the Switch tag by clicking on the currently displayed one.
*
* @property {boolean} active - controls whether the switch is active or not
* @property {string} tooltip - tooltip displayed when hovering over the switch element
* @property {string} tooltipPos - placement of the tooltip (either `top`, `left`, `right`, or `bottom`)
* @property {string} className - class name for the enclosing span element
* @property {Object} style - CSS inline styles
* @property {Function} onChange - callback invoked when elements are switched. Receives as its first argument the index of the currently displayed child
*/

/**
* The appear component will cause all of its children to become visible after a specified amount of time.
*
* @property {boolean} active - controls whether the counter should be active
* @property {number} delay - number of milliseconds before component appears
*/

/**
* The bias of a double-precision floating-point number's exponent.
*
* @module @stdlib/constants/math/float64-exponent-bias
* @type {integer32}
*
* @example
* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/constants/math/float64-exponent-bias' );
* // returns 1023
*/

/**
* The expire component will cause all of its children to become invisible after a specified amount of time.
*
* @property {boolean} active - controls whether the counter should be active
* @property {number} delay - number of milliseconds before component disappears
*/

/**
* The mathematical constant `π` times `2`.
*
* @constant
* @type {number}
* @default 6.283185307179586
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/

/**
* The mathematical constant `π` times `2`.
*
* @module @stdlib/constants/math/float64-two-pi
* @type {number}
*
* @example
* var TWO_PI = require( '@stdlib/constants/math/float64-two-pi' );
* // returns 6.283185307179586
*/

/**
* The mathematical constant `π`.
*
* @constant
* @type {number}
* @default 3.141592653589793
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/

/**
* The mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-pi
* @type {number}
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
* // returns 3.141592653589793
*/

/**
* The maximum base 10 exponent for a double-precision floating-point number.
*
* @constant
* @type {integer32}
* @default 308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* The maximum base 10 exponent for a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max-base10-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE10_EXPONENT = require( '@stdlib/constants/math/float64-max-base10-exponent' );
* // returns 308
*/

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max-base2-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/constants/math/float64-max-base2-exponent' );
* // returns 1023
*/

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* ```text
* 11111111110 => 2046 - BIAS = 1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/math/float64-max-base2-exponent-subnormal' );
* // returns -1023
*/

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ```text
* 00000000000 => 0 - BIAS = -1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default -1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* The minimum base 10 exponent for a normal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-min-base10-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE10_EXPONENT = require( '@stdlib/constants/math/float64-min-base10-exponent' );
* // returns -308
*/

/**
* The minimum base 10 exponent for a normal double-precision floating-point number.
*
* ```text
* 2^-1022 = 2.2250738585072014e-308 => -308
* ```
*
* @constant
* @type {integer32}
* @default -308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* The minimum base 10 exponent for a subnormal double-precision floating-point number.
*
* @constant
* @type {integer32}
* @default -324
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* The minimum base 10 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-min-base10-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base10-exponent-subnormal' );
* // returns -324
*/

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-min-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base2-exponent-subnormal' );
* // returns -1074
*/

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ```text
* -(BIAS+(52-1)) = -(1023+51) = -1074
* ```
*
* where `BIAS = 1023` and `52` is the number of digits in the significand.
*
* @constant
* @type {integer32}
* @default -1074
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* The runner component will execute a supplied function either once or at a given interval.
*
* @property {boolean} active - controls whether the runner should be active. Upon activation, the `onEvaluate` function is called in the given interval (or once)
* @property {number} interval - number of milliseconds between invocations of `onEvaluate`. If no interval is set, the function is only invoked once
* @property {Function} onEvaluate - function to be invoked
*/

/**
* The smallest positive double-precision floating-point normal number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* \frac{1}{2^{1023-1}}
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0 00000000001 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 2.2250738585072014e-308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* The smallest positive double-precision floating-point subnormal number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* \frac{1}{2^{1023-1} 2^{52}}
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0 00000000000 00000000000000000000 00000000000000000000000000000001
* ```
*
* @constant
* @type {number}
* @default 4.940656458412465e-324
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* The smallest positive single-precision floating-point normal number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* \frac{1}{2^{127-1}}
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0 00000001 00000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 1.1754943508222875e-38
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* The user pairer component allows one to group the currently active users into pairs of two, e.g. for group exercises.
*
* @property {boolean} filterOwners - controls whether to include or exclude owners in the pair matching
* @property {Function} onAssignments - callback invoked with the assignments once ready
*/

/**
* This component is used by students to briefly summarize data as it is presented and perform various statistical tests.
*
* @property {Array} categorical - array of strings indicating the name of each categorical variable
* @property {Array} quantitative - array of strings indicating the name of each quantitative variable
* @property {(Object|Array)} data - data object or array to be viewed. If it is an object, the keys correspond to column values while an array will expect an array of objects with a named field corresponding to each column. If you wish to allow students the ability to import a `.csv` file, set the `data` option to be `false`
* @property {Object} dataInfo - object containing the keys \'name\', whose value is a string, \'info\', whose value is an array of strings in which each element in the array is a new line and \'variables\', an object with keys as variable names and values as variable descriptions
* @property {boolean} editor - boolean indicating whether to show the editor to the user
* @property {Object} editorProps - object to be passed to `TextEditor` indicating properties to be used
* @property {string} editorTitle - string indicating the title of the explorer to be displayed
* @property {boolean} groupMode - controls whether to sync editor changes across users in a group
* @property {boolean} dataTable - boolean value indicating whether to hide the data table from view
* @property {boolean} histogramDensities - boolean value indicating whether to display histogram densities
* @property {Array<string>} models - array of strings indicating models that may be fit on the data
* @property {string} opened - page opened at startup
* @property {Array<string>} plots - array of strings indicating which plots to show to the user
* @property {Array<node>} questions - array of nodes indicating surrounding text and question components to be displayed in a tabbed window
* @property {boolean} showTestDecisions - boolean indicating whether to show the decisions made for each test based on the calculated p-values
* @property {Array<string>} statistics - array of strings indicating which summary statistics may be calculated
* @property {Array<string>} tables - array of strings indicating which tables may be created from the data
* @property {Array<Object>} tabs - array of objects and keys indicating any custom tabs to add
* @property {Array<string>} tests - array of strings indicating which hypothesis tests to include
* @property {boolean} transformer - boolean indicating whether one wants to display a variable transformer
* @property {Function} onTutorialCompletion - function invoked when user has completed the data explorer tutorial
* @property {Object} style - CSS inline styles for main container
*/

/**
* This is DiDonato and Morris's BGRAT routine, see Eq's 9 through 9.6.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {NonNegativeInteger} s0 - initial value
* @param {number} mult - initial value
* @param {boolean} normalized - boolean indicating whether to evaluate the regularized or non-regularized incomplete beta function
* @returns {number} function value
*/

/**
* Tokenize a string.
*
* @module @stdlib/nlp/tokenize
*
* @example
* var tokenize = require( '@stdlib/nlp/tokenize' );
*
* var str = 'Hello Mrs. Maple, could you call me back?';
* var out = tokenize( str );
* // returns [ 'Hello', 'Mrs.', 'Maple', ',', 'could', 'you', 'call', 'me', 'back', '?' ]
*
* str = 'Hello World!';
* out = tokenize( str );
* // returns [ 'Hello', 'World', '!' ]
*/

/**
* Tokenize a string.
*
* @param {string} str - input string
* @param {boolean} [keepWhitespace=false] - boolean indicating whether whitespace characters should be returned as part of the token array
* @throws {TypeError} first argument must be a string primitive
* @throws {TypeError} second argument must be a boolean primitive
* @returns {Array} array of tokens
*
* @example
* var str = 'Hello World!';
* var out = tokenize( str );
* // returns [ 'Hello', 'World', '!' ]
*
* @example
* var str = '';
* var out = tokenize( str );
* // returns []
*
* @example
* var str = 'Hello Mrs. Maple, could you call me back?';
* var out = tokenize( str );
* // returns [ 'Hello', 'Mrs.', 'Maple', ',', 'could', 'you', 'call', 'me', 'back', '?' ]
*/

/**
* Tokenizes a substring.
*
* @private
* @param {string} substr - input string
* @returns {Array} token array
*
* @example
* var str = '(never)';
* var out = tokenizeSubstring( str );
* // returns [ '(', 'never', ')' ]
*/

/**
* Top-level namespace.
*
* @namespace lognormal
*/

/**
* Transforms a JSON configuration object to a React component and its children.
*
* ## Notes
*
* -   Only a subset of isle React component are supported.
*
* @param {Object} config - JSON configuration
* @returns {Node} created component
*/

/**
* Transforms the tail of the normal distribution to the unit interval and then uses rejection technique to generate standard normal variable.
*
* ## References
*
* -   Marsaglia, George. 1964. "Generating a Variable from the Tail of the Normal Distribution." _Technometrics_ 6 (1): 101–2. doi:[10.1080/00401706.1964.10490150](http://dx.doi.org/10.1080/00401706.1964.10490150).
*
* @private
* @param {PRNG} rand - pseudorandom number generator
* @param {number} rTail - start value of the right tail
* @param {boolean} isNegative - boolean indicating which side to evaluate
* @returns {number} standard normal variable
*/

/**
* Trim whitespace characters from beginning and end of a string.
*
* @param {string} str - input string
* @throws {TypeError} must provide a string primitive
* @returns {string} trimmed string
*
* @example
* var out = trim( '   Whitespace   ' );
* // returns 'Whitespace'
*
* @example
* var out = trim( '\t\t\tTabs\t\t\t' );
* // returns 'Tabs'
*
* @example
* var out = trim( '\n\n\nNew Lines\n\n\n' );
* // returns 'New Lines'
*/

/**
* Trim whitespace characters from the beginning and end of a string.
*
* @module @stdlib/string/trim
*
* @example
* var trim = require( '@stdlib/string/trim' );
*
* var out = trim( '   Whitespace   ' );
* // returns 'Whitespace'
*
* out = trim( '\t\t\tTabs\t\t\t' );
* // returns 'Tabs'
*
* out = trim( '\n\n\nNew Lines\n\n\n' );
* // returns 'New Lines'
*/

/**
* Trim whitespace characters from the beginning of a string.
*
* @module @stdlib/string/left-trim
*
* @example
* var ltrim = require( '@stdlib/string/left-trim' );
*
* var out = ltrim( '   Whitespace   ' );
* // returns 'Whitespace   '
*
* out = ltrim( '\t\t\tTabs\t\t\t' );
* // returns 'Tabs\t\t\t'
*/

/**
* Trims whitespace characters from the beginning of a string.
*
* @param {string} str - input string
* @throws {TypeError} must provide a string primitive
* @returns {string} trimmed string
*
* @example
* var out = ltrim( '   Whitespace   ' );
* // returns 'Whitespace   '
*
* @example
* var out = ltrim( '\t\t\tTabs\t\t\t' );
* // returns 'Tabs\t\t\t'
*
* @example
* var out = ltrim( '\n\n\nNew Lines\n\n\n' );
* // returns 'New Lines\n\n\n'
*/

/**
* Two-dimensional kernel density estimation.
*
* @module @stdlib/stats/kde2d
*
* @example
* var kde2d = require( '@stdlib/stats/kde2d' );
* var x = [ 1, 3, 5, 6, 21, 23, 16, 17, 20, 10 ];
* var y = [ 0.40, 0.20, 0.20, 0.15, 0.05, 0.55, 0.6, 0.33, 0.8, 0.41 ];
*
* var out = kde2d( x, y );
* // returns { 'x': [1, 1.91, ... ], 'y': [0.05, 0.08125, ...], 'z': ndarray {Float64Array[ 0.031, ...] }
*/

/**
* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint16
*
* @example
* var ctor = require( '@stdlib/array/uint16' );
*
* var arr = new ctor( 10 );
* // returns <Uint16Array>
*/

/**
* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint32
*
* @example
* var ctor = require( '@stdlib/array/uint32' );
*
* var arr = new ctor( 10 );
* // returns <Uint32Array>
*/

/**
* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order clamped to 0-255.
*
* @module @stdlib/array/uint8c
*
* @example
* var ctor = require( '@stdlib/array/uint8c' );
*
* var arr = new ctor( 10 );
* // returns <Uint8ClampedArray>
*/

/**
* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint8
*
* @example
* var ctor = require( '@stdlib/array/uint8' );
*
* var arr = new ctor( 10 );
* // returns <Uint8Array>
*/

/**
* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.
*
* @module @stdlib/array/float64
*
* @example
* var ctor = require( '@stdlib/array/float64' );
*
* var arr = new ctor( 10 );
* // returns <Float64Array>
*/

/**
* Typed array constructor which returns a typed array representing an array of single-precision floating-point numbers in the platform byte order.
*
* @module @stdlib/array/float32
*
* @example
* var ctor = require( '@stdlib/array/float32' );
*
* var arr = new ctor( 10 );
* // returns <Float32Array>
*/

/**
* Typed array constructor which returns a typed array representing an array of twos-complement 16-bit signed integers in the platform byte order.
*
* @module @stdlib/array/int16
*
* @example
* var ctor = require( '@stdlib/array/int16' );
*
* var arr = new ctor( 10 );
* // returns <Int16Array>
*/

/**
* Typed array constructor which returns a typed array representing an array of twos-complement 32-bit signed integers in the platform byte order.
*
* @module @stdlib/array/int32
*
* @example
* var ctor = require( '@stdlib/array/int32' );
*
* var arr = new ctor( 10 );
* // returns <Int32Array>
*/

/**
* Typed array constructor which returns a typed array representing an array of twos-complement 8-bit signed integers in the platform byte order.
*
* @module @stdlib/array/int8
*
* @example
* var ctor = require( '@stdlib/array/int8' );
*
* var arr = new ctor( 10 );
* // returns <Int8Array>
*/

/**
* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/

/**
* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/

/**
* Typed array which represents an array of 8-bit unsigned integers in the platform byte order clamped to 0-255.
*
* @throws {Error} not implemented
*/

/**
* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/

/**
* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.
*
* @throws {Error} not implemented
*/

/**
* Typed array which represents an array of single-precision floating-point numbers in the platform byte order.
*
* @throws {Error} not implemented
*/

/**
* Typed array which represents an array of twos-complement 16-bit signed integers in the platform byte order.
*
* @throws {Error} not implemented
*/

/**
* Typed array which represents an array of twos-complement 32-bit signed integers in the platform byte order.
*
* @throws {Error} not implemented
*/

/**
* Typed array which represents an array of twos-complement 8-bit signed integers in the platform byte order.
*
* @throws {Error} not implemented
*/

/**
* Uncapitalize the first character of a string.
*
* @module @stdlib/string/uncapitalize
*
* @example
* var uncapitalize = require( '@stdlib/string/uncapitalize' );
*
* var out = uncapitalize( 'Last man standing' );
* // returns 'last man standing'
*
* out = uncapitalize( 'Hidden Treasures' );
* // returns 'hidden Treasures';
*/

/**
* Uncapitalizes the first character of a string.
*
* @param {string} str - input string
* @throws {TypeError} must provide a string primitive
* @returns {string} input string with first character converted to lowercase
*
* @example
* var out = uncapitalize( 'Last man standing' );
* // returns 'last man standing'
*
* @example
* var out = uncapitalize( 'Presidential election' );
* // returns 'presidential election'
*
* @example
* var out = uncapitalize( 'JavaScript' );
* // returns 'javaScript'
*
* @example
* var out = uncapitalize( 'Hidden Treasures' );
* // returns 'hidden Treasures'
*/

/**
* Uniform distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/uniform/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/uniform/cdf' );
*
* var y = cdf( 5.0, 0.0, 4.0 );
* // returns 1.0
*
* var mycdf = cdf.factory( 0.0, 10.0 );
* y = mycdf( 0.5 );
* // returns 0.05
*
* y = mycdf( 8.0 );
* // returns 0.8
*/

/**
* Uniform distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/uniform/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/uniform/pdf' );
*
* var y = pdf( 3.0, 2.0, 6.0 );
* // returns 0.25
*
* var myPDF = pdf.factory( 6.0, 7.0 );
* y = myPDF( 7.0 );
* // returns 1.0
*
* y = myPDF( 5.0 );
* // returns 0.0
*/

/**
* Uniform distribution pseudorandom numbers.
*
* @module @stdlib/random/base/uniform
*
* @example
* var uniform = require( '@stdlib/random/base/uniform' );
*
* var v = uniform( 0.0, 1.0 );
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/uniform' ).factory;
* var uniform = factory( -5.0, 5.0, {
*     'seed': 297
* });
*
* var v = uniform();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/uniform' ).factory;
* var uniform = factory({
*     'seed': 297
* });
*
* var v = uniform( -5.0, 5.0 );
* // returns <number>
*/

/**
* Uniformly distributed pseudorandom numbers on the interval \\( [0,1) \\).
*
* @module @stdlib/random/base/randu
*
* @example
* var randu = require( '@stdlib/random/base/randu' );
*
* var v = randu();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/randu' ).factory;
*
* var randu = factory({
*     'name': 'minstd',
*     'seed': 12345
* });
*
* var v = randu();
* // returns <number>
*/

/**
* Updates a PRNG's internal state by generating the next `N` words.
*
* @private
* @param {Uint32Array} state - state array
* @returns {Uint32Array} state array
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination for function options
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.depth] - depth to flatten
* @param {boolean} [options.copy] - boolean indicating whether to deep copy array elements
* @returns {(Error|null)} error or null
*
* @example
* var opts = {};
* var options = {
*     'depth': 10,
*     'copy': false
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination for validated options
* @param {Object} options - function options
* @param {string} [options.method] - method determining how ties are treated
* @param {string} [opts.missing] - determines where missing values go (`first`,`last`, or `remove`)
* @param {Array} [opts.encoding] - array of values encoding missing values
* @returns {(null|Error)} null or an error
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination for validated options
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.size] - sample size
* @param {ProbabilityArray} [options.probs] - element probabilities
* @param {boolean} [options.replace] - boolean indicating whether to sample with replacement
* @param {boolean} [options.mutate] - boolean indicating whether to mutate the `pool` when sampling without replacement
* @returns {(null|Error)} null or an error
*
* @example
* var opts = {};
* var options = {
*     'size': 10,
*     'replace': false,
*     'mutate': true,
*     'probs': [ 0.7, 0.3 ]
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination for validated options
* @param {Options} options - function options
* @param {number} [options.alpha] - significance level
* @param {Array} [options.groups] - array of group indicators
* @returns {(null|Error)} null or an error
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination for validated options
* @param {Options} options - function options
* @param {number} [options.alpha] - significance level
* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)
* @param {number} [options.difference] - difference in means under H0
* @param {string} [options.variance] - whether variances are `equal` or `unequal` under H0
* @returns {(null|Error)} null or an error
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination for validated options
* @param {Options} options - function options
* @param {number} [options.alpha] - significance level
* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)
* @param {number} [options.difference] - difference in means under H0
* @returns {(null|Error)} null or an error
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination for validated options
* @param {Options} options - function options
* @param {number} [options.alpha] - significance level
* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)
* @param {number} [options.mu] - mean under H0
* @returns {(null|Error)} null or an error
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination for validated options
* @param {Options} options - function options
* @param {number} [options.alpha] - significance level
* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)
* @param {number} [options.rho] - correlation coefficient unter HO
* @returns {(null|Error)} null or an error
*
* @example
* var opts = {};
* var options = {
*     'alpha': 0.01,
*     'rho': 0.8
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination for validated options
* @param {Options} options - function options
* @param {string} [options.copy] - string denoting whether to return a copy (`deep`, `shallow` or `none`)
* @returns {(null|Error)} null or an error
*
* @example
* var opts = {};
* var options = {
*     'copy': 'shallow'
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {*} [options.thisArg] - execution context
* @param {string} [options.returns] - output format
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'returns': '*',
*     'thisArg': {}
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {*} [options.thisArg] - execution context
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'thisArg': {}
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {Probability} [options.f] - smoother span (proportion of points which influence smoothing at each value)
* @param {NonNegativeInteger} [options.nsteps] - number of iterations in the robust fit
* @param {NonNegativeNumber} [options.delta] - nonnegative parameter which may be used to save computations
* @param {boolean} [options.sorted] - boolean indicating if the input array is in sorted order
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'f': 0.75,
*     'nsteps': 6,
*     'delta': 0.03,
*     'sorted': true
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {boolean} [options.codegen] - boolean indicating whether to use code generation
* @param {string} [options.mode] - specifies how to handle indices which exceed array dimensions
* @param {string} [options.submode] - specifies how to handle subscripts which exceed array dimensions
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'mode': 'clamp',
*     'submode': [ 'throw', 'wrap', 'clamp' ],
*     'codegen': false
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {number} [options.alpha] - significance level
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'alpha': 0.6
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {number} [options.n] - number of splits in the generated grid
* @param {NumericArray} [options.h] - array of length two indicating the x and y bandwidth values
* @param {number} [options.xMin] - lower limit of x
* @param {number} [options.xMax] - upper limit of x
* @param {number} [options.xMin] - lower limit of y
* @param {number} [options.yMax] - upper limit of y
* @param {(string|Function)} [options.kernel] - a string or function to specifying the used kernel function
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'xMin': 3.14,
*     'kernel': 'gaussian'
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {string} [options.returns] - output format
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'returns': '*'
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - options to validate
* @param {boolean} [options.copy] - boolean indicating whether to return a new data structure
* @returns {(Error|null)} error or null
*
* @example
* var opts = {};
* var options = {
*     'copy': false
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/

/**
* Validates parameters.
*
* @private
* @param {PositiveInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 10, 0.5 );
* if ( err ) {
*     throw err;
* }
*/

/**
* Validates parameters.
*
* @private
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0 );
* if ( err ) {
*     throw err;
* }
*/

/**
* Validates values provided for minimum and maximum support.
*
* @private
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1, 20 );
* if ( err ) {
*     throw err;
* }
*/

/**
* Validates values provided for minimum and maximum support.
*
* @private
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {(Error|null)} error or null
*
* @example
* var err = validate( 1.0, 2.0 );
* if ( err ) {
*     throw err;
* }
*/

/**
* Verifies state array integrity.
*
* @private
* @param {Int32Array} state - state array
* @param {boolean} FLG - flag indicating whether the state array was provided as an option (true) or an argument (false)
* @returns {(Error|null)} an error or `null`
*/

/**
* Verifies state array integrity.
*
* @private
* @param {Uint32Array} state - state array
* @param {boolean} FLG - flag indicating whether the state array was provided as an option (true) or an argument (false)
* @returns {(Error|null)} an error or `null`
*/

/**
* Wrap an index on the interval `[0,max]`.
*
* @module @stdlib/ndarray/base/wrap-index
*
* @example
* var wrapIndex = require( '@stdlib/ndarray/base/wrap-index' );
*
* var idx = wrapIndex( -1, 10 );
* // returns 10
*
* idx = wrapIndex( 14, 10 );
* // returns 3
*
* idx = wrapIndex( 6, 10 );
* // returns 6
*/

/**
* Wrapper around [react-joyride](https://github.com/gilbarbara/react-joyride) to create walkthroughs and guided tours.
*
* @property {Array} steps - array of step `objects`
* @property {boolean} run - controls whether the guide is active
*/

/**
* Wrapper around react-bootstrap's OverlayTrigger disabling the overlay on touch devices.
*/

/**
* Wraps an index on the interval `[0,max]`.
*
* @param {integer} idx - index
* @param {NonNegativeInteger} max - maximum index
* @returns {NonNegativeInteger} index
*
* @example
* var idx = wrapIndex( -1, 10 );
* // returns 10
*
* idx = wrapIndex( 13, 10 );
* // returns 2
*
* idx = wrapIndex( 6, 10 );
* // returns 6
*/

/**
* Wraps the test for constructor prototype equality to accommodate buggy environments (e.g., environments which throw when testing equality).
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value equals the prototype of its constructor
*/

/**
* Zeros an array.
*
* @private
* @param {Array<number>} arr - array to zero
* @returns {Array<number>} input array
*/

/**
* `TeX` is an ISLE element that can be used to display LaTeX equations. Under the hood, the component uses [KaTeX](https://github.com/Khan/KaTeX) for blazingly fast rendering.
*
* @property {(string|number)} raw - The literal LaTeX `string` to render. Also accepts `numbers`
* @property {boolean} displayMode - `boolean` indicating whether to display the equation inline or in display mode
* @property {boolean} numbered - controls whether to display an equation number for display mode equations
* @property {Object} style - `object` with CSS key-value pairs to be applied to the equation container
* @property {string} tag - Custom characters displayed for display equations at the right side. Defaults to the number of the equation inside the lesson
* @property {Object} elems - `object` with `keys` denoting LaTeX characters and their corresponding values being configuration `objects` to make them interactive. Setting a `tooltip` option will show a tooltip when hovering over the LaTeX characters. Setting a `variable` property will display an input slider to change the respective state variable; in this case, additional properties `legend`, `min`, `max`, and `step` are supported
* @property {string} popoverPlacement - popover position for the specified `elems`
* @property {Function} onPopover - callback `function` when a control popover is toggled on or off; receives the display status as a boolean as its sole argument
* @property {Function} onClick - callback `function` invoked whenever a user clicks on the equation
*/

/**
* ndarray data buffer constructors.
*
* @module @stdlib/ndarray/base/buffer-ctors
*
* @example
* var ctors = require( '@stdlib/ndarray/base/buffer-ctors' );
*
* var ctor = ctors( 'float64' );
* // returns <Function>
*
* ctor = ctors( 'int' );
* // returns null
*/

/**
*Computes the sample excess kurtosis of an array of values.
*
* @param {Array} arr - array of values
* @returns {number} sample excess kurtosis
*/

/**
*Computes the sample skewness of an array of values.
*
* @param {Array} arr - array of values
* @returns {number} sample skewness
*/

/** @class */

/** @component */

/** @ignore */

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */

/** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */

/** @prop {Function} */

/** @prop {ModifierFn} */

/** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */

/** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */

/** @prop {number} order=100 - Index used to define the order of execution */

/** @prop {number} order=200 - Index used to define the order of execution */

/** @prop {number} order=300 - Index used to define the order of execution */

/** @prop {number} order=400 - Index used to define the order of execution */

/** @prop {number} order=500 - Index used to define the order of execution */

/** @prop {number} order=600 - Index used to define the order of execution */

/** @prop {number} order=700 - Index used to define the order of execution */

/** @prop {number} order=800 - Index used to define the order of execution */

/** @prop {number} order=850 - Index used to define the order of execution */

/** @prop {number} order=900 - Index used to define the order of execution */

/** @type {(Token|string)[]} */

/** @type {Array} */

/** @type {string} */

/** Add a cell to this section. */

/** Adds a cell to the appropriate Sections and registers it metadata for later retrievable. */

/** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */

/** An `href` passed to the Toggle component */

/** An `onClick` handler passed to the Toggle component */

/** Built-in value references. */

/** Cache for storing the result of stylesFn(theme) for all themes. */

/** Cached calculation results */

/** CellLayoutManager interface */

/** CellMeasurer compatibility */

/** Circular segment area calculation. See http://mathworld.wolfram.com/CircularSegment.html */

/** Define the public API */

/** Derive the create function from the interface and direction */

/** Derive the resolve function from the interface and direction */

/** Detect free variable `exports`. */

/** Detect free variable `global` from Node.js. */

/** Detect free variable `self`. */

/** Detect free variables */

/** Disables both Buttons  */

/** Disables the toggle NavLink  */

/** Error message constants. */

/** Error messages */

/** Get all Sections overlapping the specified region. */

/** Get all cell indices that have been added to this section. */

/** Get size and position information for the cell specified. */

/** Gets all intersection points between a bunch of circles */

/** Given a bunch of sets, and the desired overlaps between these sets - computes
the distance from the actual overlaps to the desired overlaps. Note that
this method ignores overlaps of more than 2 circles */

/** Given two circles (containing a x/y/radius attributes),
returns the intersecting points if possible.
note: doesn't handle cases where there are infinitely many
intersection points (circles are equivalent):, or only one intersection point*/

/** Highest positive signed 32-bit float value */

/** Intended for debugger/test purposes only */

/** Lays out a Venn diagram greedily, going from most overlapped sets to
least overlapped, attempting to position each new set such that the
overlapping areas to already positioned sets are basically right */

/** Missing pair-wise intersection area data can cause problems:
 treating as an unknown means that sets will be laid out overlapping,
 which isn't what people expect. To reflect that we want disjoint sets
 here, set the overlap to 0 for all missing pairwise set intersections */

/** Performs the task of cleaning up resources. */

/** React lifecycle methods */

/** Regular expressions */

/** Returns the center of a bunch of points */

/** Returns the distance necessary for two circles of radius r1 + r2 to
have the overlap area 'overlap' */

/** Returns the intersection area of a bunch of circles (where each circle
 is an object having an x,y and radius property) */

/** Returns the overlap area of two circles of radius r1 and r2 - that
have their centers separated by distance d. Simpler faster
circle intersection for only two circles */

/** Scales a solution from venn.venn or venn.greedyLayout such that it fits in
a rectangle of width/height - with padding around the borders. also
centers the diagram in the available space at the same time */

/** See CellSizeAndPositionManager#getTotalSize */

/** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */

/** See CellSizeAndPositionManager#getVisibleCellRange */

/** See Collection#recomputeCellSizesAndPositions */

/** See Grid#getOffsetForCell */

/** See Grid#invalidateCellSizeAfterRender */

/** See Grid#measureAllCells */

/** See Grid#recomputeGridSize */

/** See Grid#scrollToCell */

/** See Grid#scrollToPosition */

/** Specify where the overlay element is positioned in relation to the target element */

/** Style the toggle NavLink as active  */

/** The content of the non-toggle Button.  */

/** Total number of Sections based on the currently registered cells. */

/** Used as references for various `Number` constants. */

/** Used as the `TypeError` message for "Functions" methods. */

/** Used as the internal argument placeholder. */

/** Used as the maximum memoize cache size. */

/** Used as the size to enable large array optimizations. */

/** Used for built-in method references. */

/** Used to check objects for own properties. */

/** Used to compose bitmasks for cloning. */

/** Used to compose bitmasks for value comparisons. */

/** Used to convert symbols to primitives and strings. */

/** Used to detect hot functions by number of calls within a span of milliseconds. */

/** Used to detect methods masquerading as native. */

/** Used to detect overreaching core-js shims. */

/** Used to detect unsigned integer values. */

/** Used to match `RegExp` flags from their coerced string values. */

/** Used to match property names within property paths. */

/** Used to resolve the decompiled source of functions. */

/** Used to stand-in for `undefined` hash values. */

/** Whether to render the dropdown menu in the DOM before the first time it is shown */

/** `Object#toString` result references. */

/** `inputLength` will hold the number of code points in `input`. */

/** euclidean distance between two points */

/** finds the zeros of a function, given two starting points (which must
 * have opposite signs */

/** given a list of set objects, and their corresponding overlaps.
updates the (x, y, radius) attribute on each set such that their positions
roughly correspond to the desired overlaps */

/** minimizes a function using the downhill simplex method */

/** returns a svg path of the intersection area of a bunch of circles */

/** returns whether a point is contained by all of a list of circles */

/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/******************************************************************************
 * Created 2008-08-19.
 *
 * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.
 *
 * Copyright (C) 2008
 *   Wyatt Baldwin <self@wyattbaldwin.com>
 *   All rights reserved
 *
 * Licensed under the MIT license.
 *
 *   http://www.opensource.org/licenses/mit-license.php
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *****************************************************************************/

/************************************************************************/

/******/

/***/

/*, mode, …*/

/*, values...*/

/*--------------------------------------------------------------------------*/

/*: "x" | "y"*/

/*: ?Layout*/

/*: ?LayoutItem*/

/*: ?Object*/

/*: ?boolean*/

/*: ?number*/

/*: ?{ verticalCompact: boolean, compactType: CompactType }*/

/*: Array<string>*/

/*: Breakpoint*/

/*: Breakpoints<Breakpoint>*/

/*: CompactType*/

/*: DragOverEvent*/

/*: Event*/

/*: FastRGLPropsEqual*/

/*: HTMLElement*/

/*: Layout*/

/*: LayoutItem*/

/*: LayoutItem[]*/

/*: Object*/

/*: PartialPosition*/

/*: Position*/

/*: PositionParams*/

/*: Props*/

/*: Props<*>*/

/*: Props<>*/

/*: React.AbstractComponent<Config>*/

/*: ReactChildren*/

/*: ReactElement<any>*/

/*: ResponsiveLayout<Breakpoint>*/

/*: State*/

/*: any*/

/*: boolean*/

/*: number*/

/*: string*/

/*: { [key: string]: [number, number] } | [number, number]*/

/*: { cols: number }*/

/*: { node: HTMLElement, size: Position }*/

/*:: declare function getWindow(node: Node | Window): Window; */

/*:: declare function isElement(node: mixed): boolean %checks(node instanceof
  Element); */

/*:: declare function isHTMLElement(node: mixed): boolean %checks(node instanceof
  HTMLElement); */

/*:: export type PositionParams = {
  margin: [number, number],
  containerPadding: [number, number],
  containerWidth: number,
  cols: number,
  rowHeight: number,
  maxRows: number
};*/

/*:: import type { Position } from "./utils";*/

/*:: import type { Window } from '../types'; */

/*:: offsetParent = (offsetParent: Element); */

/*:: type FastRGLPropsEqual = (Object, Object, Function) => boolean;*/

/*:: type OverflowsMap = { [ComputedPlacement]: number }; */

/*:: type Props<Breakpoint: string = string> = {|
  ...React.ElementConfig<typeof ReactGridLayout>,

  // Responsive config
  breakpoint?: ?Breakpoint,
  breakpoints: Breakpoints<Breakpoint>,
  cols: { [key: Breakpoint]: number },
  layouts: ResponsiveLayout<Breakpoint>,
  width: number,
  margin: { [key: Breakpoint]: [number, number] } | [number, number],
  containerPadding: { [key: Breakpoint]: [number, number] } | [number, number],

  // Callbacks
  onBreakpointChange: (Breakpoint, cols: number) => void,
  onLayoutChange: (Layout, { [key: Breakpoint]: Layout }) => void,
  onWidthChange: (
    containerWidth: number,
    margin: [number, number],
    cols: number,
    containerPadding: [number, number] | null
  ) => void
|};*/

/*:: type State = {
  layout: Layout,
  breakpoint: string,
  cols: number,
  layouts?: { [key: string]: Layout }
};*/

/*;; type OverflowsMap = { [key in ComputedPlacement]: number }; */

/*</replacement>*/

/*<replacement>*/

/*@__PURE__*/

/*eslint-disable no-self-compare*/

/*eslint-enable no-self-compare*/

/*global AudioContext:true */

/*global MediaStream:true */

/*global URL:true */

/*global cancelAnimationFrame:true */

/*global console:true*/

/*global document:true */

/*global location:true */

/*global requestAnimationFrame:true */

/*global screen:true */

/*global window:true */

/*jshint -W079 */

/*jslint node: true */

//

//     	+ '\\u' + pad(hex(lowSurrogate(codePoint)), 4);

//                           ^                                                 |

//                           inf

//                           |                                                 *??=newPayloadOffsetEnd

//                 [Segment][size][Info][size][Duration][size]....[size][value][Cluster]

//                 |        |     +-newPayloadSize(??)-------------------------+

//                 |        |     |                                            |

//          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

//          a b c d e f g h i j k l m n o p q r s t u v w x y z

//         channel.port2.postMessage(0);

//         nextStatus = ENTERING

//         nextStatus = EXITING

//         setImmediate(callback);

//       A function to add the attribute's value to an attribute

//       A function to read the attribute's value from a DOM node.

//       Called when the view is destroyed or receives a state

//       Called whenever the view's state is updated.

//       The attribute's default value.

//       [ highSurrogates1, lowSurrogates1 ],

//       [ highSurrogates2, lowSurrogates2 ]

//       default:: any

//       destroy:: ?()

//       getFromDOM:: ?(dom.Node) → any

//       if (status !== ENTERING && status !== ENTERED) {

//       if (status === ENTERING || status === ENTERED) {

//       object that's used to render the cell's DOM.

//       setDOMAttr:: ?(value: any, attrs: Object)

//       update:: ?(view: EditorView, prevState: EditorState)

//       with different plugins.

//       }

//      $

//      ( ? ! Disjunction )

//      ( ? : Disjunction )

//      ( ? < ! Disjunction )

//      ( ? < = Disjunction )

//      ( ? = Disjunction )

//      ( Disjunction )

//      ( GroupSpecifier Disjunction )

//      *

//      +

//      -

//      .

//      < RegExpIdentifierName >

//      <ZWJ>

//      <ZWNJ>

//      ?

//      ? GroupName

//      Alternative

//      Alternative Term

//      Alternative | Disjunction

//      Anchor

//      Atom

//      Atom Quantifier

//      CharacterClass

//      CharacterClassEscape

//      CharacterClassEscape :: one of d D s S w W

//      CharacterEscape

//      ClassAtom

//      ClassAtom - ClassAtom ClassRanges

//      ClassAtom NonemptyClassRangesNoDash

//      ClassAtomNoDash

//      ClassAtomNoDash - ClassAtom ClassRanges

//      ClassAtomNoDash NonemptyClassRangesNoDash

//      ControlEscape

//      DecimalEscape

//      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]

//      Disjunction

//      ExtendedPatternCharacter

//      HexEscapeSequence

//      IdentityEscape

//      IdentityEscape[?U]

//      NonemptyClassRanges

//      PatternCharacter

//      QuantifierPrefix

//      QuantifierPrefix ?

//      RegExpIdentifierName RegExpIdentifierContinue

//      RegExpIdentifierStart

//      RegExpUnicodeEscapeSequence[?U] (ES6)

//      SourceCharacter but not any of: ^ $ \ . * + ? ( ) [ ] { } |

//      SourceCharacter but not c

//      SourceCharacter but not one of \ or ] or -

//      SourceCharacter but not one of ^$\.*+?()[|

//      UnicodeEscapeSequence

//      UnicodeIDContinue

//      UnicodeIDStart

//      [ [lookahead ∉ {^}] ClassRanges ]

//      [ ^ ClassRanges ]

//      [empty]

//      \ AtomEscape

//      \ B

//      \ ClassEscape

//      \ RegExpUnicodeEscapeSequence

//      \ b

//      ^

//      _

//      b

//      c ControlLetter

//      k GroupName

//      one of

//      one of d D s S w W

//      one of f n r t v

//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';

//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.

//      { DecimalDigits , DecimalDigits }

//      { DecimalDigits , }

//      { DecimalDigits }

//     "#f00" or "f00"

//     "#ff0000" or "ff0000"

//     "#ff000000" or "ff000000"

//     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"

//     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"

//     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"

//     "red"

//     "rgb 1.0 0 0" or "rgb (1, 0, 0)"

//     "rgb 255 0 0" or "rgb (255, 0, 0)"

//     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"

//     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"

//     A CSS class name to add to the cursor element.

//     A group name (something like `"block"`) to add to the table

//     Additional attributes to add to cells. Maps attribute names to

//     Defaults to 0.

//     Pos(0, 1, ...)

//     Should return an object with the following optional

//     The amount of history events that are collected before the

//     The color of the cursor. Defaults to `black`.

//     The content expression for table cells.

//     The delay between changes after which a new group should be

//     The precise width of the cursor in pixels. Defaults to 1.

//     The starting version number of the collaborative editing.

//     This client's ID, used to distinguish its changes from those of

//     When enabled (the default is `false`), if the current selection

//     [

//     [ surrogateMapping1, surrogateMapping2 ]

//     [+U] -

//     ]

//     `...` DestructuringAssignmentTarget[Yield, Await]

//     aren't adjacent, a new group is always started.

//     b

//     before   after

//     cellAttributes:: ?Object

//     cellContent:: string

//     channel.port1.onmessage = callback;

//     class:: ?string

//     clientID:: ?union<number, string>

//     color:: ?string

//     const { status } = this.state

//     content inserted at the cursor ends up after the cursor. Users

//     depth:: ?number

//     if (this.props.in) {

//     is a [text selection](#state.TextSelection), its sides are

//     mapSelectionBackward:: ?boolean

//     mapped with a negative bias for this transaction, so that

//     newGroupDelay:: ?number

//     node type.

//     objects with the following properties:

//     of backwards compatibility.

//     oldest events are discarded. Defaults to 100.

//     other clients. Defaults to a random 32-bit number.

//     properties:

//     return function requestCall() {

//     return::-

//     started. Defaults to 500 (milliseconds). Note that when changes

//     string = '\\u' + pad(hex(highSurrogate(codePoint)), 4)

//     super . IdentifierName

//     super Arguments

//     super [ Expression ]

//     tableGroup:: ?string

//     usually prefer this, but it isn't done by default for reasons

//     var channel = new MessageChannel();

//     version:: ?number

//     width:: ?number

//     }

//     } else {

//     };

//    !active && "class2",

//    "class1",

//    A valid selection in the document.

//    The initial set of [stored marks](#state.EditorState.storedMarks).

//    The plugins that should be active in this state.

//    The schema to use.

//    The starting document.

//    `$from`, then moves forward as content is placed, and is finally

//    active && "class3"

//    been placed yet.

//    buffer.fill(buffer[, offset[, end]])

//    buffer.fill(number[, offset[, end]])

//    buffer.fill(string[, offset[, end]][, encoding])

//    doc:: ?Node

//    is implicit in `$from`, and its open-end value in `frontier`.

//    plugins:: ?[Plugin]

//    reconciled with `$to`.

//    represent the open side of the replacement. It starts at

//    schema:: ?Schema

//    selection:: ?Selection

//    storedMarks:: ?[Mark]

//    tinycolor.isReadable("#000", "#111") => false

//    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false

//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"

//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"

//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"

//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"

//   (except when it appears in a [node](#model.NodeSpec.parseDOM) or

//   (or deciding not to render) its child nodes.

//   * https://github.com/react-dnd/react-dnd/issues/869

//   * https://github.com/react-dnd/react-dnd/pull/928

//   - events are attached as `'plotly_' + eventName.toLowerCase()`

//   - react props are `'on' + eventName`

//   // ...

//   // return !isNaN( parseInt( obj ) );

//   // return Number.isInteger(parseInt(value))

//   /\091/.exec('\091')[0].length === 3

//   <ZWJ>

//   <ZWNJ>

//   A CSS class name or a space-separated set of class names to be

//   A CSS property name to match. When given, this rule matches

//   A CSS selector describing the kind of DOM elements to match. A

//   A function that will be called to get the text for the current

//   A function to parse text from the clipboard into a document

//   A function used to compute the attributes for the node or mark

//   A set of [document decorations](#view.Decoration) to show in the

//   A set of additional nodes to count as

//   A string of CSS to be _added_ to the node's existing `style` property.

//   Allows a plugin to define a [state field](#state.StateField), an

//   Allows the plugin to append another transaction to be applied

//   Allows you to pass custom rendering and behavior logic for nodes

//   Apply the given transaction to this state field, producing a new

//   AssignmentRestProperty[Yield, Await] :

//   Associates DOM parser information with this mark (see the

//   Associates DOM parser information with this node, which can be

//   Attributes for the node or mark created by this rule. When

//   By default, the content is parsed into the schema's default

//   By default, the element will get a class `"ProseMirror"`, and

//   By default, whitespace is collapsed as per HTML's rules. Pass

//   Called for each node around a click, from the inside out. The

//   Called for each node around a double click.

//   Called for each node around a triple click.

//   Called when a DOM

//   Called when something is dropped on the editor. `moved` will be

//   Called when the editor is clicked, after `handleClickOn` handlers

//   Called when the editor is double-clicked, after `handleDoubleClickOn`.

//   Called when the editor is triple-clicked, after `handleTripleClickOn`.

//   Called when the editor receives a `keydown` event.

//   Called when the node view is removed from the editor or the whole

//   Called when the view, after updating its state, tries to scroll

//   Called with a DOM Element for `tag` rules, and with a string (the

//   Can be an object mapping DOM event type names to functions that

//   Can be set to true to indicate that, though this isn't a [leaf

//   Can be used to change the order in which the parse rules in a

//   Can be used to control which DOM events, when they bubble out

//   Can be used to indicate that this node contains code, which

//   Can be used to make this a keyed plugin. You can have only one

//   Can be used to override the behavior of pasting. `slice` is the

//   Can be used to override the content of a matched node. When

//   Can be used to override the way a selection is created when

//   Can be used to override the way the node's selected status (as a

//   Can be used to prevent the editor view from trying to handle some

//   Can be used to transform pasted HTML text, _before_ it is parsed,

//   Can be used to transform pasted content before it is applied to

//   Cannot read property 'removeEventListener' of undefined

//   Contrary to the other event handling props, when returning true

//   Control the DOM attributes of the editable element. May be either

//   Controls whether nodes of this type can be selected as a [node

//   Controls whether whitespace should be preserved when parsing the

//   Controls which side of the document position this widget is

//   Convert this field to JSON. Optional, can be left off to disable

//   Defaults to only being exclusive with marks of the same type. You

//   Defines the default way a node of this type should be serialized

//   Defines the default way marks of this type should be serialized

//   Deserialize the JSON representation of this field. Note that the

//   Determines how the left side of the decoration is

//   Determines how the right side of the decoration is mapped.

//   Determines the distance (in pixels) between the cursor and the

//   Determines the extra space (in pixels) that is left above or

//   Determines whether marks of this type can span multiple adjacent

//   Determines whether nodes of this type can be dragged without

//   Determines whether this node is considered an important parent

//   Determines which other marks this mark can coexist with. Should

//   For `tag` rules that produce non-leaf nodes or marks, by default

//   For example `"paragraph/"` means the rule only matches when the

//   For text nodes, the default is to create a text DOM node. Though

//   Handler for `keypress` events.

//   If you supply your own parser, you do not need to also specify

//   Initialize the value of the field. `config` will be the object

//   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.

//   It will be given a node (possibly of a different type), and an

//   JSON serialization for the field.

//   Likewise, in _inserted_ content the defining parents of the

//   LoneUnicodePropertyNameOrValue

//   Map a position through this object. When given, `assoc` (should

//   Map a position, and return an object containing additional

//   Map the bookmark through a set of changes.

//   New schema to use.

//   New set of active plugins.

//   Nodes are only matched when the namespace matches or this property

//   ProseMirror does of events fired on the editable DOM element.

//   ProseMirror.

//   Provide the starting content match that content parsed into the

//   RegExpIdentifierName[?U] RegExpIdentifierPart[?U]

//   RegExpIdentifierStart[?U]

//   Resolve the bookmark to a real selection again. This may need to

//   Return false if the editor should re-read the selection or

//   See

//   Should be set to true for inline nodes. (Implied for text nodes.)

//   Should return a DOM node or an [array

//   Supports the following configuration options:

//   The DOM node that should hold the node's content. Only meaningful

//   The DOM serializer to use when putting content onto the

//   The [parser](#model.DOMParser) to use when reading content from

//   The [parser](#model.DOMParser) to use when reading editor changes

//   The [view props](#view.EditorProps) added by this plugin. Props

//   The attributes that marks of this type get.

//   The attributes that nodes of this type get.

//   The callback over which to send transactions (state updates)

//   The child node index to start parsing from.

//   The child node index to stop parsing at.

//   The content expression for this node, as described in the [schema

//   The current state of the editor.

//   The default behavior is to split the text into lines, wrap them

//   The default value for this attribute, to use when no explicit

//   The group or space-separated groups to which this mark belongs.

//   The group or space-separated groups to which this node belongs,

//   The mark types that exist in this schema. The order in which they

//   The marks that are allowed inside of this node. May be a

//   The name of the default top-level node for the schema. Defaults

//   The name of the mark type to wrap the matched content in.

//   The name of the node type to create when this rule matches. Only

//   The namespace to match. This should be used with `tag`.

//   The node types in this schema. Maps names to

//   The outer DOM node that represents the document node. When not

//   The precise set of marks to draw around the widget.

//   The schema to use.

//   The set of active plugins.

//   This will be called to handle setting the selection inside the

//   Transform pasted plain text.

//   UnicodeIDContinue

//   UnicodeIDStart

//   UnicodePropertyName `=` UnicodePropertyValue

//   UnicodePropertyNameCharacters

//   UnicodePropertyValueCharacters

//   When `marks` is null, `side` also determines the marks that

//   When a mark is [added](#model.Mark.addToSet) to a set, all marks

//   When comparing decorations of this type (in order to decide

//   When defining a `selectNode` method, you should also provide a

//   When enabled (default is false), the sides of nodes of this type

//   When given, restricts this rule to only match when the current

//   When given, the parser will, beside parsing the content,

//   When given, this function will be called for each decoration

//   When given, this will be called when the view is updating itself.

//   When non-null, the target node is wrapped in a DOM element of

//   When present, this will be called before a transaction is

//   When set (defaults to false), selection changes inside the

//   When the plugin needs to interact with the editor view, or

//   When there are multiple widgets at a given position, their

//   When this returns false, the content of the view is not directly

//   When true, finding an element that matches this rule will close

//   When true, ignore content that matches this rule.

//   When true, ignore the node that matches this rule, but do parse

//   Whenever the user directly input text, this handler is called

//   Whether this mark should be active when the cursor is positioned

//   [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) on the

//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)

//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)).

//   [`NodeSpec`](#model.NodeSpec) objects that describe the node type

//   [`TextSelection.between`](#state.TextSelection^between)) if

//   [`clipboardParser`](#view.EditorProps.clipboardParser) on it.

//   [`domParser`](#view.EditorProps.domParser) prop is used.

//   [`editable` prop](#view.EditorProps.editable). Additional classes

//   [`inclusiveStart`](#view.Decoration^inline^spec.inclusiveStart).

//   [`someProp`](#view.EditorView.someProp)) will be used.

//   [`transformPastedText`](#view.EditorProps.transformPastedText).

//   [`updateState`](#view.EditorView.updateState) method with a new

//   [applied](#state.EditorState.apply). The callback will be bound to have

//   [context](#model.ParseRule.context) when parsing, above the

//   [empty]

//   [group](#model.NodeSpec.group).

//   [mapped](#transform.Position_Mapping) when content is

//   [mark spec](#model.MarkSpec.parseDOM), in which case the `node`

//   [mutation](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver)

//   [top node type](#model.Schema.topNodeType). You can pass this

//   _added_ to the classes that the node already had.

//   `"property=value"`, in which case the rule only matches if the

//   `"section//"` matches any position inside a section—a double

//   `"selection"` (which doesn't occur for native mutation records).

//   `$`

//   `<` RegExpIdentifierName[?U] `>`

//   `?` GroupName[?U]

//   `\` RegExpUnicodeEscapeSequence[?U]

//   `_`

//   `assoc` points in the direction of the deleted content.

//   `decorations` is an array of node or inline decorations that are

//   `deselectNode` method to remove the effect again.

//   `direct` flag will be true for the inner node.

//   `false`, the rule won't match. When it returns null or undefined,

//   `getAttrs` is provided, it takes precedence.

//   `mark` field in the rules is implied.

//   `preventDefault` yourself (or not, if you want to allow the

//   `side` values determine the order in which they appear. Those

//   `state` argument is again a half-initialized state.

//   `true` to preserve whitespace, but normalize newlines to

//   a CSS selector string that the parser must use to find the actual

//   a selection change, the record will have a `type` property of

//   a) this is on a separate line, or

//   access the plugin's configuration and state through the key,

//   active around the node. They are automatically drawn in the

//   after the given array of transactions. When another plugin

//   already saw.

//   an object or a function going from an editor state to an object.

//   and marks. Should map node and mark names to constructor

//   and return false to indicate that the match failed.)

//   and reuse DOM nodes. Make sure that any widgets with the same

//   any mark that excludes the new mark but is not, itself, excluded

//   appendTransaction:: ?(transactions: [Transaction], oldState: EditorState, newState: EditorState) → ?Transaction

//   appends a transaction after this was called, it is called again

//   applied by the state, allowing the plugin to cancel it (by

//   apply:: (tr: Transaction, value: T, oldState: EditorState, newState: EditorState) → T

//   are marked as defining.

//   are provided determines the order in which [mark

//   argument `getPos` is a function that can be called to get the

//   array of active decorations (which are automatically drawn, and

//   as the top container.

//   associated with that name. Their order is significant—it

//   associated with. When negative, it is drawn before a cursor

//   at its end (or at its start when that is also the start of the

//   at its position, and content inserted at that position ends

//   atom:: ?bool

//   attributes:: ?union<Object<string>, (EditorState) → ?Object<string>>

//   attrs:: ?Object

//   attrs:: ?Object<AttributeSpec>

//   automatically derive a parser. The `node` field in the rules is

//   b) there are no children but there are attributes

//   backspacing or lifting, won't cross. An example of a node that

//   be -1 or 1, defaults to 1) determines with which side the

//   be a space-separated strings naming other marks or groups of marks.

//   be collapsed, `true` means that whitespace should be preserved

//   before the input is applied. If it returns `true`, the default

//   behavior of actually inserting the text is suppressed.

//   being selected. Defaults to false.

//   below the cursor when it is scrolled into view. Defaults to 5.

//   boolean that indicates whether the mark's content is inline.

//   but newlines normalized to spaces, and `"full"` means that

//   by the new mark, the mark can not be added an the set. You can

//   can set it to an empty string (or any string not containing the

//   causes some commands to behave differently.

//   character, as in `"blockquote/|list_item/"`.

//   class:: ?string

//   clipboard. If not given, the result of

//   clipboardParser:: ?DOMParser

//   clipboardSerializer:: ?DOMSerializer

//   clipboardTextParser:: ?(text: string, $context: ResolvedPos) → Slice

//   clipboardTextSerializer:: ?(Slice) → string

//   closeParent:: ?bool

//   code:: ?bool

//   coexist (as long as they have different attributes).

//   coming after this one.

//   compare the widget DOM node by identity. If you pass a key,

//   complicated filters, use [`getAttrs`](#model.ParseRule.getAttrs)

//   conditions the DOM element or style must match. When it returns

//   config::-

//   config::- An optional set of options

//   constructed state does not yet contain the state from plugins

//   constructing a parser, the order of the rule array is used.

//   content and should be treated as a single unit in the view.

//   content are preserved when possible. Typically,

//   content element, or a function that returns the actual content

//   content inside the matched element. `false` means whitespace may

//   content should be inserted.

//   content:: ?string

//   contentDOM:: ?dom.Node

//   contentElement:: ?union<string, (dom.Node) → dom.Node>

//   context:: ?ResolvedPos

//   context:: ?string

//   context—the parent nodes into which the content is being

//   corresponding [node spec field](#model.NodeSpec.parseDOM)). The

//   corresponds to

//   count as boundaries that regular editing operations, like

//   createSelectionBetween:: ?(view: EditorView, anchor: ResolvedPos, head: ResolvedPos) → ?Selection

//   created by this rule. Can also be used to describe further

//   created.

//   css`a { color: #25F; }`

//   cursor into view, scrolling takes place. Defaults to 0.

//   decorations:: ?(state: EditorState) → ?DecorationSet

//   default behavior).

//   default) nodes get dropped when their entire content is replaced,

//   default:: ?any

//   defining:: ?bool

//   deselectNode:: ?()

//   destroy:: ?()

//   determines which [parse rules](#model.NodeSpec.parseDOM) take

//   different contexts, they can be separated by a pipe (`|`)

//   different keys.

//   differently, this is not supported inside the editor, so you

//   dispatchTransaction:: ?(tr: Transaction)

//   do some error checking and may fall back to a default (usually

//   dom:: ?dom.Node

//   domParser:: ?DOMParser

//   draggable:: ?bool

//   editable.

//   editable:: ?(state: EditorState) → bool

//   editor is destroyed.

//   editor view.

//   editor will use [`textBetween`](#model.Node.textBetween) on the

//   editor's schema.

//   element to the parser.

//   end of the visible viewport at which point, when scrolling the

//   ends up before the widget.

//   excludes:: ?string

//   extra slot in the state object in which it can keep its own data.

//   false otherwise. If the node view has a `contentDOM` property (or

//   field value. Note that the `newState` argument is again a partially

//   filterTransaction:: ?(Transaction, EditorState) → bool

//   findPositions:: ?[{node: dom.Node, offset: number}]

//   for example to clean it up.

//   from such a function, you are responsible for calling

//   from the DOM. Defaults to calling

//   from:: ?number

//   fromJSON:: ?(config: Object, value: *, state: EditorState) → T

//   functions that produce a [`NodeView`](#view.NodeView) object

//   getAttrs:: ?(union<dom.Node, string>) → ?union<Object, false>

//   getContent:: ?(dom.Node, schema: Schema) → Fragment

//   given [top node](#model.ParseOptions.topNode).

//   given node

//   given, the default strategy is used to create a DOM node.

//   group:: ?string

//   guide](/docs/guide/#schema.content_expressions). When not given,

//   handle them. Such functions will be called before any handling

//   handleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) → bool

//   handleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) → bool

//   handleDOMEvents:: ?Object<(view: EditorView, event: dom.Event) → bool>

//   handleDoubleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) → bool

//   handleDoubleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) → bool

//   handleDrop:: ?(view: EditorView, event: dom.Event, slice: Slice, moved: bool) → bool

//   handleKeyDown:: ?(view: EditorView, event: dom.KeyboardEvent) → bool

//   handleKeyPress:: ?(view: EditorView, event: dom.KeyboardEvent) → bool

//   handlePaste:: ?(view: EditorView, event: dom.ClipboardEvent, slice: Slice) → bool

//   handleScrollToSelection:: ?(view: EditorView) → bool

//   handleTextInput:: ?(view: EditorView, from: number, to: number, text: string) → bool

//   handleTripleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) → bool

//   handleTripleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) → bool

//   handlers or the default behavior should be tried.

//   have been called.

//   if (prevProps !== this.props) {

//   if the node view also defines a `dom` property and if its node

//   ignore:: ?bool

//   ignoreMutation:: ?(dom.MutationRecord) → bool

//   ignoreSelection:: ?bool

//   ignored.

//   implementations: ']'.match(/]/);

//   implementing the node's display behavior. For nodes, the third

//   implied (the name of this node will be filled in automatically).

//   in `<p>` tags, and call

//   in the parsed content will not be written to.

//   inclusive:: ?bool

//   inclusiveEnd:: ?bool

//   inclusiveStart:: ?bool

//   indicate that it did not handle the scrolling and further

//   information about the mapping. The result's `deleted` field tells

//   init:: (config: Object, instance: EditorState) → T

//   inline styles that list that property. May also have the form

//   inline:: ?bool

//   inserted directly at that position. By default, the decoration

//   is about 17px)

//   is deleted, the position itself is only considered deleted when

//   is not present, the node view itself is responsible for rendering

//   is null.

//   isolating:: ?bool

//   it is possible to create a serializer where text is rendered

//   it to be in a paragraph that is inside a blockquote, and

//   its content.

//   key are interchangeable—if widgets differ in, for example,

//   key:: ?PluginKey

//   key:: ?string

//   let nextStatus = null

//   make sure this ends up calling the view's

//   map:: (mapping: Mapping) → SelectionBookmark

//   map:: (pos: number, assoc: ?number) → number

//   mapResult:: (pos: number, assoc: ?number) → MapResult

//   mapping made the bookmark invalid.

//   mark's own name) to allow multiple marks of a given type to

//   mark:: ?string

//   marks in the schema.

//   marks, other nodes default to not allowing marks.

//   marks:: ?[Mark]

//   marks:: ?string

//   marks:: ?union<Object<MarkSpec>, OrderedMap<MarkSpec>>

//   move when a chunk of content is inserted at the mapped position.

//   names or node group names followed by single or double slashes.

//   namespace:: ?string

//   negative, those of the node after when positive.

//   newlines should also be preserved.

//   no `dom` property), updating its child nodes will be handled by

//   node during replace operations (such as paste). Non-defining (the

//   node selection) is displayed.

//   node's current position, which can be useful when creating

//   node. The `anchor` and `head` positions are relative to the start

//   node:: ?string

//   nodeName:: ?string

//   nodeViews:: ?Object<(node: Node, view: EditorView, getPos: () → number, decorations: [Decoration]) → NodeView>

//   node](#model.NodeType.isLeaf), it doesn't have directly editable

//   nodes when serialized to DOM/HTML. Defaults to true.

//   nodes.

//   nodes:: union<Object<NodeSpec>, OrderedMap<NodeSpec>>

//   non-default-paragraph textblock types, and possibly list items,

//   normal way, and you will usually just want to ignore this, but

//   not given, nodes with inline content default to allowing all

//   not have values for plugin fields initialized after this one.

//   of the node. By default, a DOM selection will be created between

//   of this widget, the editor view should ignore.

//   onRemove:: ?(decorationSpec: Object)

//   option to use the type and attributes from a different node

//   optional number zero (“hole”) in it to indicate where the node's

//   options::- Additional options.

//   options::- The following options are understood:

//   options::- These options are supported:

//   or `mark` property will be derived from its position).

//   or a selection change happens within the view. When the change is

//   or all DOM events that bubble up from the node view. Events for

//   or node. If the child nodes are in a descendent node, this may be

//   override it you can do something else.

//   parent node is a paragraph, `"blockquote/paragraph/"` restricts

//   parent node). Defaults to true.

//   parseDOM:: ?[ParseRule]

//   parsed—matches this expression. Should contain one or more node

//   parsing rules in your schema.

//   passed to [`EditorState.create`](#state.EditorState^create). Note

//   pasted content parsed by the editor, but you can directly access

//   plugin with a given key in a given state, but it is possible to

//   plugins:: ?[Plugin]

//   position is associated, which determines in which direction to

//   precedence by default, and which nodes come first in a given

//   present, instead of parsing the node's child nodes, the result of

//   preserveWhitespace:: ?union<bool, "full">

//   priority:: ?number

//   produced by the view. If you specify this, you probably want to

//   property is only meaningful in a schema—when directly

//   propery's value exactly matches the given value. (For more

//   props:: ?EditorProps

//   provided here will be added to the class. For other attributes,

//   provided whenever a node or mark of a type that has them is

//   re-parse the range around the mutation, true if it can safely be

//   re-sync the selection with its selection state.

//   reading a DOM selection between the given anchor and head.

//   record the document positions of the given DOM positions. It

//   replaced range) during the mapping. When content on only one side

//   resolve:: (doc: Node) → Selection

//   return /^(\-|\+)?[1-9][0-9]*$/.test(value)

//   return { nextStatus }

//   returning false).

//   rule should have one of a `node`, `mark`, or `ignore` property

//   rules](#model.MarkSpec.parseDOM) are tried.

//   schema are tried. Those with higher priority come first. Rules

//   schema.

//   schema:: ?Schema

//   schema:: Schema

//   scrollMargin:: ?union<number, {top: number, right: number, bottom: number, left: number}>

//   scrollThreshold:: ?union<number, {top: number, right: number, bottom: number, left: number}>

//   selectNode:: ?()

//   selectable:: ?bool

//   selected range.

//   selection when copying text to the clipboard. By default, the

//   selection](#state.NodeSelection). Defaults to true for non-text

//   set something up in the DOM, use this field. The function

//   setSelection:: ?(anchor: number, head: number, root: dom.Document)

//   sets](#model.Mark.addToSet) are sorted and in which [parse

//   should probably have this enabled is a table cell.

//   should return true if it was able to update to that node, and

//   shouldn't override that in your text node spec.

//   side:: ?number

//   single rule should have _either_ a `tag` or a `style` property.

//   skip:: ?bool

//   slash matches any sequence of ancestor nodes. To allow multiple

//   slice. Called after

//   space-separated string referring to mark names or groups, `"_"`

//   spaces, and `"full"` to preserve whitespace entirely.

//   spanning:: ?bool

//   spec of that decoration.

//   state that has the transaction

//   state:: ?StateField<any>

//   state:: EditorState

//   stopEvent:: ?(event: dom.Event) → bool

//   structure](#model.DOMOutputSpec) that describes one, with an

//   style's value) for `style` rules.

//   style:: ?string

//   styled.h1`color: red;`

//   tag:: ?string

//   term "Anchor" is used.

//   that `instance` is a half-initialized state instance, and will

//   that are functions will be bound to have the plugin instance as

//   that gets dropped as a result of the mapping, passing the

//   that holds the document position. DOM positions that are not

//   that is interpreted as an empty/default set of attributes.

//   that it excludes are removed in the process. If the set contains

//   that key will be compared instead, which can be useful when

//   the DOM positions corresponding to those positions, but if you

//   the behavior of some event handler, they should get

//   the clipboard. When not given, the value of the

//   the content of the DOM element is parsed as content of the mark

//   the current node.

//   the document.

//   the event to get at the raw content.

//   the node does not allow any content.

//   the node view may ignore if it isn't interested in them), and

//   the node view without adding it to the document itself.

//   the same `side` value is unspecified.

//   the selection into view. A handler function may return false to

//   the top node.

//   the value provided first (as in

//   the view instance as its `this` binding.

//   the widget is wrapped in—those of the node before when

//   their `this` binding.

//   they can also be used as a way to provide context information to

//   this function is used.

//   this type (and the other attributes are applied to this element).

//   this.props.onLazyLoad([leftMostSlide])

//   thus be deleted).

//   to DOM/HTML (as used by

//   to DOM/HTML. When the resulting spec contains a hole, that is

//   to `"doc"`.

//   to a string representation for debugging (e.g. in error messages).

//   to explicitly allow all marks, or `""` to disallow marks. When

//   to make it inclusive.

//   to:: ?number

//   toDOM:: ?(mark: Mark, inline: bool) → DOMOutputSpec

//   toDOM:: ?(node: Node) → DOMOutputSpec

//   toDebugString:: ?(node: Node) -> string

//   toJSON:: ?(value: T) → *

//   top node is matched against.

//   topMatch:: ?ContentMatch

//   topNode:: ?Node

//   topNode:: ?string

//   transactions to update it. For marks, the third argument is a

//   transactions, i.e. it won't be passed transactions that it

//   transformPasted:: ?(Slice) → Slice

//   transformPastedHTML:: ?(html: string) → string

//   transformPastedText:: ?(text: string) → string

//   true if this drop moves from the current selection (which should

//   type is not a leaf node type. When this is present, ProseMirror

//   up after the widget. When zero (the default) or positive, the

//   update:: ?(node: Node, decorations: [Decoration]) → bool

//   use the value `"_"` to indicate that the mark excludes all

//   used by [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) to

//   valid for rules with a `tag` property, not for style rules. Each

//   value is provided. Attributes that have no default must be

//   view.

//   view:: ?(EditorView) → Object

//   where the marked content is placed. Otherwise, it is appended to

//   whereas defining nodes persist and wrap the inserted content.

//   whether it needs to be redrawn), ProseMirror will by default

//   which can be referred to in the content expressions for the

//   which this returns true are not handled by the editor.

//   widget are ignored, and don't cause ProseMirror to try and

//   widget is drawn after the cursor and content inserted there

//   will be called when the plugin's state is associated with an

//   will be used.

//   will do so by writing to the objects, adding a `pos` property

//   will have its `contentEditable` attribute determined by the

//   will take care of rendering the node's children into it. When it

//   with lower values appear first. The ordering of widgets with

//   with the new state and new transactions—but only the new

//   without a priority are counted as having priority 50. This

//   without having access to the plugin instance object.

//   won't include the new content, but you can set this to `true`

//   you generate decorations on the fly and don't want to store

//   you whether the position was deleted (completely enclosed in a

//   }

//  - `exited` switches to true

//  - `frontier` holds a stack of `{type, match}` objects that

//  - `placed` is a fragment of placed content. Its open-start value

//  - `unplaced` is a slice that represents the content that hasn't

//  - component unmounts;

//  - show is `true` _and_ `container` has resolved

//  0..25 map to ASCII a..z or A..Z

//  Printable ASCII (0x20 to 0x7E), zero-padded when needed

//  Unicode string, zero padded when needed (RFC 2279)

//  an external element

//  and yet still defined by a function (a callback to fetch the children)

//  comparisons between nodes inside the `matches` and `treeData` results

//  delete the node from the array.

//  during the search of the descendants. The entire node is used in

//  for in the first place

//  is reached

//  of this method (`find`)

//  or set to load even before expansion, run the function.

//  source tree

//  the row above is a function

// !enableOutsideDays

// ","

// ";"

// "<td>..</td>"` the table cells are ignored.

// "Casting" to the same data type is always allowed, regardless of the casting mode...

// "Software"), to deal in the Software without restriction, including

// "\"

// "add"/null, "subtract", or "prev". When aggressive is false

// "br": "",

// "br": [ "", "" ],

// "br": [ "", "", "" ],

// "br": [ "", "", "", "" ],

// "consumed" by the delegate iterator. If context.method was

// "del": [ "1 - bzlib,", "2 - lzo1x" ],

// "deleted-sign" -> "deleted"

// "drop and blow away the whole document" action.

// "gutter", "class", "widget"

// "line", "div" (display.lineDiv), "local"./null (editor), "window",

// "nulling" of the role if the user really doesn't want one

// "onloadedmetadata" may NOT work in FF?

// "page" or "line". The resulting position will have a hitSide=true

// "return" to "throw", let that override the TypeError below.

// "return", allow the original .return call to continue in the

// "setTimeout" added by Jim McLeod

// "too much recursion" error.

// "tr" elements should always contain an array

// "warm-up" the PRNG...

// "{" <expression> <optional "!s", "!r", or "!a"> <optional ":" format specifier> "}"

// # heading

// # of cols.

// # of cols. This is a breakpoint -> cols map

// # of containerPadding. This is a breakpoint -> containerPadding map

// # of margin. This is a breakpoint -> margin map

// # title 1

// ## Parser utilities

// ## Token types

// ## Tokenizer

// ### Expression parsing

// ### Statement parsing

// ### Token reading

// ###### title 6

// #1011, #1013, #1035).

// #1060

// #3261: make sure, that we're not starting a second selection

// #820

// #93 Wrap the resize box in span (will not break 100% width/height)

// #RGB or #RGBA

// #RRGGBBAA

// $ (dollar) and _ (underscore)

// $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\n' '|'

// $FlowFixMe

// $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps

// $FlowFixMe we know it's not null

// $FlowFixMe: HTMLElement is a Node

// $FlowFixMe: assume body is always available

// $FlowFixMe: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it

// $FlowFixMe: hasOwnProperty doesn't seem to work in tests

// $FlowFixMe: https://github.com/facebook/flow/issues/1414

// $FlowFixMe: isBody tells us target will be an HTMLElement here

// $FlowFixMe: need a better way to handle this...

// $FlowFixMe: this is a quicker (but less type safe) way to save quite some bytes from the bundle

// $FlowIgnore acceptable modification of read-only array as it was recently cloned

// $FlowIgnore isn't refining this correctly to SyntheticEvent

// % (ET):  European Number Terminator

// ' '

// ' \n'

// '"', "'"

// '%*'

// '&'

// '*'

// '+-'

// '-'

// '.'

// '/'

// '0'

// '0b', '0B' - binary number

// '0o', '0O' - octal number

// '0x', '0X' - hex number

// '<'

// '<>'

// '=!'

// '=>'

// 'Project' the visible viewport to cover the area that is being

// '\'

// '\r\n'

// '\x2D'

// '^'

// '`'

// '`', '${'

// 'abxxcd' will be treated as 'ab')

// 'atomic', nondivisible expression types at the bottom. Most of

// 'b' -> '\b'

// 'both' - allows resizing by width or height

// 'chunk' is an input chunk.

// 'class-name' must be matched *after* 'constructor' defined below

// 'e' - East handle (right-center)

// 'eE'

// 'f' -> '\f'

// 'let' indicating that the lval creates a lexical ('let' or 'const') binding

// 'm' and 'r' are mixing constants generated offline.

// 'n' - North handle (top-center)

// 'n' -> '\n'

// 'ne' - Northeast handle (top-center)

// 'none' - disables resizing altogether

// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references

// 'nw' - Northwest handle (top-left)

// 'other' property containing the position of the secondary cursor

// 'r' -> '\r'

// 'readable' etc.

// 'readable' event will be triggered.

// 's' - South handle (bottom-center)

// 'se' - Southeast handle (bottom-right)

// 'simulates' scrolling that position into view in a cheap way, so

// 'sw' - Southwest handle (bottom-left)

// 't' -> '\t'

// 'u'

// 'v' -> '\u000b'

// 'var' indicating that the lval creates a 'var' binding

// 'w' - West handle (left-center)

// 'wrap f in an operation, performed on its `this` parameter'.

// 'x'

// 'x' - only allows the width to be changed

// 'y' - only allows the height to be changed

// '{'

// '{' and '['

// '|&'

// '~'

// (2019). This influences support for strict mode, the set of

// (Adjust for extended bound, if necessary.)

// (And so we can't know the height without measuring all column-cells first).

// (And so we can't know the width without measuring all row-cells first).

// (FIXME it'd be nice if we had a schema-agnostic way to

// (Less wasteful than consing up a hundred closures on every call.)

// (This is a function that allows the custom view to find its

// (Using reflect to get all keys including symbols)

// (Using subclassing for this was intentionally decided against,

// (and non-touching) ranges, sorted, and an integer that indicates

// (backwards compatibility) while at the same time support features

// (bidi-aware) start-of-textblock detection if given.

// (comments) in between. Fallback is to only notice when we hit the

// (ctrl-click), rectangle drag (alt-drag), or xwin

// (direction=-1) cell in a table.

// (e.g. character confirmation may be done with the mouse), and keydown is triggered

// (hidden) cursor is doesn't change the selection, and

// (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)

// (if available) will be matched later.

// (including decorations that start or end directly at the

// (isCollapsed inappropriately returns true in shadow dom)

// (left-to-right), or an array of sections ({from, to, level}

// (markTextShared will call out to this again, once per

// (may be null to just delete). This goes very much against the grain

// (non-standard) ParenthesizedExpression nodes

// (not linked ones).

// (not raw objects).

// (one where the focus is before the anchor), but not all

// (overwritten) the next time the function is called. (Not public.)

// (returning false) when there is nothing to be done and forced is

// (see `matchers` above for definition).

// (sometimes slightly overflows because of FP errors)

// (starting after '<'), attributes, contents and closing tag.

// (such as the target of the link). Marks are created through a

// (the user may have provided their own)

// (typically set to true for forced single-line indents), empty

// (unescaped) to the output.

// (when it fits directly) and will be null when no such wrapping

// (when the bar is hidden). If it is still visible, we keep

// (which can not necessarily be expressed with a text selection, when

// (which is slow). Length 4 is assumed to be the most frequent, followed by

// (x-1) || (x-1.5)

// (|x| > 1 && y === NINF) || (|x| < 1 && y === PINF)

// ); // returns -> class1 class3";

// * * *

// * A 50px thick scrollbar is likely non-existent (macOS is 15px and Windows

// * The mobile bar is 114px tall

// * bullet list

// * item

// ***

// **Do not** directly mutate the properties of a `Node` object. See

// **strong**

// *0    *4    *5  *36      *40   *48=segmentOffset              *185=originalPayloadOffsetEnd

// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]

// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]

// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]

// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]

// *Assumes:* r, g, b in [0, 255] or [0, 1]

// *Example*

// *Returns:* { h, s, l } in [0,1]

// *Returns:* { h, s, v } in [0,1]

// *Returns:* { r, g, b } in [0, 255]

// *Returns:* { r, g, b } in the set [0, 255]

// *below* the call to _read.  The reason is that in certain

// *em*

// *that* in the unary operator node.

// + (ES):  European Number Separator

// + LC_ALL, RANDOM, REPLY, SECONDS.

// + item

// + make sure PS1..4 are here as they are not always set,

// +--+--+

// +-----+

// +-ebmlSize(36)--+        |     +-payloadSize(137)-------------+offsetEndDiff+

// +1 for newline

// , (CS):  Common Number Separator

// - 'async /*\n*/ function' is invalid.

// - 'async /*foo*/ function' is OK.

// - Android 4-4.3

// - Chrome 26-34

// - Figuring out what part of the document a given DOM position

// - Firefox 14-29

// - Incremental redrawing when the document changes

// - Internet Explorer 11

// - Safari 6-7

// - Wiring in custom implementations of the editing interface for a

// - buffer - a Buffer to search

// - byteOffset - an index into `buffer`; will be clamped to an int32

// - createRef() https://reactjs.org/docs/react-api.html#reactcreateref

// - dir - true for indexOf, false for lastIndexOf

// - encoding - an optional encoding, relevant is val is a string

// - forwardRef() https://reactjs.org/docs/react-api.html#reactforwardref

// - https://github.com/facebook/react/issues/6410

// - iPad Safari 6-7.1

// - iPhone Safari 7-7.1

// - item

// - some useless things.

// - val - a string, Buffer, or number

// -- 0 (both), -1 (left), or 1 (right). When lineObj is true, the

// -- for invalidation -- followed by pairs of end positions and

// -- not the instance -- so we only apply the theme to the stylesFn

// ---

// --- Welcome to debugging React ---

// -------

// ---------

// -----------

// ------------------

// --------------------

// ---------------------

// ----------------------

// ------------------------------

// --------------------------------

// --------------------------------------------------

// -0.2929 < x < 0.41422

// ... otherwise it needs to be interpreted as a octal (if the

// ... subsequent chunks get checked to see if they overlap...

// ...and explore the edges that connect u to those nodes, updating

// ...but works with:

// .5 gets interpreted as half of the total, instead of half of 1

// .constructor.prototype properties for functions that return Generator

// .end() fully uncorks

// .offsetParent will return the closest TH, TD or TABLE in case

// .throw, and .return (see defineIteratorMethods).

// .throw, and .return methods.

// .toUpperCase handles XHTML

// 0 * Infinity === NaN, which causes problems with resize constraints;

// 0 00000000000 00111001100010001110

// 0 00000000000 10111011011001111010

// 0 means "already installed".

// 0,1,0,0

// 0..9

// 0.7316 <= x <=  0.9

// 0.84375 <= |x| < 1.25

// 0x

// 0x36E38222, 0x80000000

// 0x387A2520, 0x40000000

// 0x39F01B83, 0x80000000

// 0x3B78CC51, 0x60000000

// 0x3CF84698, 0x80000000

// 0x3DE5D93A, 0x5ACFD57C

// 0x3E54AE0B, 0xF85DDF44

// 0x3E74442D, 0x00000000

// 0x3FD62E42 0xFEFA39EF

// 0x3FF0A2B2 0x3F3BAB73

// 0x3FF921FB, 0x40000000

// 0x3ff00000 - (0x200000>>k) = 1072693248 - (0x200000>>k) => 0x200000 = 0 00000000010 00000000000000000000

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111

// 0xBC50C7CAA48A971F => TT = -(tail of TF)

// 0xBE205C61, 0x0CA86C39

// 0xBFC55555, 0x55555549

// 1 (EN):  European Number

// 1 (version) + 1 (num_sections) + 1 (state_length) + 1 (state) + 1 (seed_length)

// 1 (version) + 1 (num_sections) + 1 (state_length) + N (state) + 1 (other_length) + 1 (state_index) + 1 (seed_length)

// 1 / 1.33.

// 1 => video

// 1 is for escape.length

// 1 is for quote.length

// 1,0,0,0

// 1-9

// 1-second

// 1-|x| >= 0.25

// 1. Figure out what the state of things will be after we do

// 1. First filter out all interpolations

// 1. Mess up scrolling

// 1. item

// 1. ordered list

// 1.7316 <= x < 2

// 1/(x+1) || 1/(x+1.5)

// 10 minutes, enough?

// 15.10.2.19

// 16.3+ will not execute our will-update method;

// 19.1.2.1 Object.assign(target, source, ...)

// 19.1.2.14 / 15.2.3.14 Object.keys(O)

// 19.1.2.14 Object.keys(O)

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])

// 19.1.2.2 Object.create(O [, Properties])

// 19.1.2.3 Object.defineProperties(O, Properties)

// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)

// 19.1.2.4 Object.defineProperty(O, P, Attributes)

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

// 19.1.2.7 Object.getOwnPropertyNames(O)

// 19.1.2.8 Object.getOwnPropertySymbols(O)

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)

// 19.1.2.9 Object.getPrototypeOf(O)

// 19.1.3.1 Object.assign(target, source)

// 19.1.3.19 Object.setPrototypeOf(O, proto)

// 19.4.1.1 Symbol([description])

// 19.4.2.1 Symbol.for(key)

// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14

// 19.4.2.5 Symbol.keyFor(sym)

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

// 19.4.3.5 Symbol.prototype[@@toStringTag]

// 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'

// 1: the menu will fit, do nothing

// 1kb of data being output.  In this case, you could write a very small

// 2 => audio

// 2 leads in a row

// 2**-28

// 2*N+1

// 2. If that resulting state will trigger a _read, then call _read.

// 2. Mess up long tap (which brings up context menu)

// 2/(3LN2) * (ss+...):

// 20.1.2.3 Number.isInteger(number)

// 20.1.2.5 Number.isSafeInteger(number)

// 20.2.1.9 Math[@@toStringTag]

// 21.1.3.27 String.prototype[@@iterator]()

// 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)

// 22.1.3.13 Array.prototype.keys()

// 22.1.3.29 Array.prototype.values()

// 22.1.3.30 Array.prototype[@@iterator]()

// 22.1.3.4 Array.prototype.entries()

// 24.3.2 JSON.stringify(value [, replacer [, space]])

// 24.3.3 JSON[@@toStringTag]

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

// 25.4.1.5 NewPromiseCapability(C)

// 25.4.3.1 Promise(executor)

// 25.4.4.1 Promise.all(iterable)

// 25.4.4.4 Promise.race(iterable)

// 25.4.4.5 Promise.reject(r)

// 25.4.4.6 Promise.resolve(x)

// 25.4.5.1 Promise.prototype.catch(onRejected)

// 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)

// 26..35 map to ASCII 0..9

// 2: the menu will fit, if scrolled

// 2^28

// 3. Actually pull the requested chunks out of the buffer and return.

// 3. If there's an anchor link as a child, tap won't be triggered on link

// 314px. And it doesn't happen all the time. So just ignore this delta

// 3: the menu will fit, if constrained

// 4. Forked beviour when there isn't enough space below

// 4. not enough space, the browser WILL NOT increase scrollable area when

// 46 = dot '.'

// 64bit

// 7.1.1 ToPrimitive(input [, PreferredType])

// 7.1.13 ToObject(argument)

// 7.1.15 ToLength

// 7.1.4 ToInteger

// 7.2.1 RequireObjectCoercible(argument)

// 7.2.2 IsArray(argument)

// 7.3.20 SpeciesConstructor(O, defaultConstructor)

// 7.4.6 IteratorClose(iterator, completion)

// : () → ?Node

// : () → ?ParseRule

// : (Decoration, Decoration) → number

// : (EditorState, Node, number, ?Transaction) → ?Transaction

// : (EditorState, bool) → ?{transform: Transform, selection: ?SelectionBookmark, remaining: Branch}

// : (EditorState, number)

// : (EditorView) → union<DecorationSet, DecorationGroup>

// : (EditorView, number) → {left: number, top: number, right: number, bottom: number}

// : (EditorView, number, number)

// : (EditorView, string, string, ?bool, ResolvedPos) → ?Slice

// : (Fragment, Fragment) → ?{mark: Mark, type: string}

// : (Fragment, [ViewDesc]) → [ViewDesc]

// : (HistoryState, EditorState, (tr: Transaction), bool)

// : (HistoryState, EditorState, Transaction, Object)

// : (Mark)

// : (Mark, bool, string?) → string

// : (Node) → ?Node

// : (Node) → Fragment

// : (Node, [Decoration], DecorationSet) → bool

// : (Node, [Decoration], DecorationSet, EditorView)

// : (Node, [Decoration], DecorationSet, EditorView) → bool

// : (Node, [Decoration], DecorationSet, EditorView, Fragment, number) → bool

// : (NodeType, ?Object)

// : (NodeType, ?Object) → bool

// : (NodeType, ?Object, ?[Node]) → ?Node

// : (Object) → [[{term: ?any, to: number}]]

// : (ResolvedPos, ResolvedPos) → [number]

// : (Schema) → Object<(mark: Mark) → DOMOutputSpec>

// : (Schema) → Object<(node: Node) → DOMOutputSpec>

// : (Schema) → [ParseRule]

// : (Schema, [Fragment]) → {width: number, height: number, rows: [Fragment]}

// : (Slice) → ?{width: number, height: number, rows: [Fragment]}

// : (Transaction) → EditorState

// : (Transaction) → bool

// : (Transform, ?SelectionBookmark, Object) → Branch

// : (Transform, number)

// : (ViewDesc, DecorationSet, (Decoration, number), (Node, [Decoration], DecorationSet, number))

// : ([DecorationSet]) → union<DecorationSet, DecorationGroup>

// : ([Decoration]) → [Decoration]

// : ([Decoration], Node, number) → DecorationSet

// : ([Decoration], [Decoration]) → bool

// : ([Mark], EditorView)

// : ([Rebaseable], [Step], Transform) → [Rebaseable]

// : ([[{term: ?any, to: number}]]) → ContentMatch

// : (dom.Element)

// : (dom.Element, ParseRule) → bool

// : (dom.Event) → bool

// : (dom.MutationRecord) → bool

// : (dom.Node)

// : (dom.Node, ?NodeBuilder, ?number, ?number)

// : (dom.Node, [ViewDesc])

// : (dom.Node, number, ?number) → number

// : (number) → ?NodeViewDesc

// : (number) → dom.Node

// : (number) → {node: dom.Node, offset: number}

// : (number, ?number) → MapResult

// : (number, ?number) → number

// : (number, ?number) → {index: number, offset: number}

// : (number, number, ?string, ?string) → string

// : (number, number, dom.Document)

// : (string)

// : (string) → [string]

// : (string) → bool

// : ({sliceDepth: number, frontierDepth: number, parent: ?Node, wrap: ?[NodeType], inject: ?Fragment})

// : ({width: number, height: number, rows: [Fragment]}, number, number) → {width: number, height: number, rows: [Fragment]}

// : ?[MarkType]

// : DOMParser The parser we are using.

// : Object The options passed to this parse.

// : Object<bool> The block-level tags in HTML5

// : Object<bool> The tags that we normally ignore.

// : [Mark] The current set of marks

// : [Rebaseable]

// : number

// :- An abstraction that allows the code dealing with decorations to

// :: ((element: T, index: number) → ?bool, ?number, ?number)

// :: ((element: T, index: number) → U, ?number, ?number) → [U]

// :: ((key: string, value: any))

// :: ((node: Node, offset: number, index: number))

// :: ((node: Node, pos: number, parent: Node) → ?bool)

// :: ((oldStart: number, oldEnd: number, newStart: number, newEnd: number))

// :: ((state: EditorState, ?(tr: Transaction)) → bool, union<(before: Node, after: Node) → bool, [string]>) → (state: EditorState, ?(tr: Transaction)) → bool

// :: ()

// :: () → ?Object

// :: () → Mapping

// :: () → Object

// :: () → Plugin

// :: () → SelectionBookmark

// :: () → Slice

// :: () → StepMap

// :: () → Transaction

// :: () → [Mark]

// :: () → bool

// :: () → string

// :: (...[(EditorState, ?(tr: Transaction), ?EditorView) → bool]) → (EditorState, ?(tr: Transaction), ?EditorView) → bool

// :: (?Fragment) → Node

// :: (?Object) → Mark

// :: (?Object) → Plugin

// :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → ?Node

// :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node

// :: (?ResolvedPos, ?(Node) → bool) → ?NodeRange

// :: (?[Mark]) → Transaction

// :: (?number) → Node

// :: (?number) → number

// :: (?number, ?number) → Mapping

// :: (?number, ?number) → RopeSequence<T>

// :: (?number, ?number, ?(spec: Object) → bool) → [Decoration]

// :: (?string)

// :: (?union<Fragment, Node, [Node]>) → Fragment

// :: (?union<Mark, [Mark]>) → [Mark]

// :: (?union<Object, OrderedMap>) → OrderedMap

// :: (?union<Object<Plugin>, string, number>) → Object

// :: (?union<[T], RopeSequence<T>>) → RopeSequence<T>

// :: (DirectEditorProps)

// :: (EditorState)

// :: (EditorState) → ?Plugin

// :: (EditorState) → ?any

// :: (EditorState) → any

// :: (EditorState) → number

// :: (EditorState, ?(Transaction)) → bool

// :: (EditorState, ?(tr: Transaction)) → bool

// :: (EditorState, ?(tr: Transaction), ?EditorView) → bool

// :: (EditorState, ?EditorState) → ?Transaction

// :: (EditorState, dispatch: ?(tr: Transaction)) → bool

// :: (Fragment) → ?number

// :: (Fragment) → ?{a: number, b: number}

// :: (Fragment) → Fragment

// :: (Fragment) → bool

// :: (Fragment, ?Object) → dom.DocumentFragment

// :: (Fragment, ?bool) → Slice

// :: (Fragment, ?number, ?number) → ?ContentMatch

// :: (Fragment, bool, ?number) → ?Fragment

// :: (Mapping)

// :: (Mapping, Node, ?Object) → DecorationSet

// :: (Mark) → Transaction

// :: (Mark) → bool

// :: (MarkType) → bool

// :: (MarkType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool

// :: (Node)

// :: (Node) → Selection

// :: (Node) → StepResult

// :: (Node) → TableMap

// :: (Node) → bool

// :: (Node, ?Object) → dom.Node

// :: (Node, ?Object) → string

// :: (Node, ?bool) → Transaction

// :: (Node, Object) → Selection

// :: (Node, [Decoration]) → DecorationSet

// :: (Node, number) → NodeSelection

// :: (Node, number) → bool

// :: (Node, number, ?number) → ?number

// :: (Node, number, ?number) → CellSelection

// :: (Node, number, ?number) → TextSelection

// :: (Node, number, ?number, ?Slice) → ?Step

// :: (Node, number, NodeType) → ?number

// :: (Node, number, Slice) → ?number

// :: (Node, number, number, ?[?{type: NodeType, attrs: ?Object}]) → bool

// :: (Node, number, number, Slice) → StepResult

// :: (Node, string, (number) → string)

// :: (NodeRange) → ?number

// :: (NodeRange, NodeType, ?Object, ?NodeRange) → ?[{type: NodeType, attrs: ?Object}]

// :: (NodeRange, [{type: NodeType, attrs: ?Object}]) → this

// :: (NodeRange, number) → this

// :: (NodeType) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool

// :: (NodeType) → ?ContentMatch

// :: (NodeType) → ?[NodeType]

// :: (NodeType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool

// :: (NodeType, ?Object, ?[Mark]) → bool

// :: (Object) → (view: EditorView, event: dom.Event) → bool

// :: (Object) → EditorState

// :: (Object) → Mark

// :: (Object) → Node

// :: (Object) → Object

// :: (Object) → Plugin

// :: (Object, Object, ?Object<Plugin>) → EditorState

// :: (OrderedMap<NodeSpec>, string, ?string) → OrderedMap<NodeSpec>

// :: (Rect) → [number]

// :: (RegExp, NodeType, ?union<Object, ([string]) → ?Object>) → InputRule

// :: (RegExp, NodeType, ?union<Object, ([string]) → ?Object>, ?([string], Node) → bool) → InputRule

// :: (ResolvedPos) → ?[Mark]

// :: (ResolvedPos) → ResolvedPos

// :: (ResolvedPos) → bool

// :: (ResolvedPos, ?ResolvedPos) → CellSelection

// :: (ResolvedPos, ?number) → Selection

// :: (ResolvedPos, ResolvedPos, ?number) → Selection

// :: (ResolvedPos, number, ?bool) → ?Selection

// :: (Schema) → DOMParser

// :: (Schema) → DOMSerializer

// :: (Schema, ?Object) → Fragment

// :: (Schema, ?Object) → Slice

// :: (Schema, Object) → Mark

// :: (Schema, Object) → Node

// :: (Schema, Object) → Step

// :: (Selection) → Transaction

// :: (Slice) → Transaction

// :: (Slice) → bool

// :: (Step) → StepResult

// :: (StepMap, ?number)

// :: (Transaction)

// :: (Transaction) → EditorState

// :: (Transaction) → Transaction

// :: (Transaction) → {state: EditorState, transactions: [Transaction]}

// :: (Transaction, ?Slice)

// :: (Transaction, Node)

// :: ([Decoration]) → DecorationSet

// :: ([Mark]) → ?Mark

// :: ([Mark]) → Node

// :: ([Mark]) → Transaction

// :: ([Mark]) → [Mark]

// :: ([Mark]) → bool

// :: ([Mark], [Mark]) → bool

// :: ([Node]) → Fragment

// :: (config: {rules: [InputRule]}) → Plugin

// :: (doc: Node) → Step

// :: (dom.Document, DOMOutputSpec) → {dom: dom.Node, contentDOM: ?dom.Node}

// :: (dom.Node, ?ParseOptions) → Node

// :: (dom.Node, ?ParseOptions) → Slice

// :: (dom.Node, number, ?number) → number

// :: (getCellType: ({ row: number, col: number, node: Node}) → NodeType) → (EditorState, dispatch: ?(tr: Transaction)) → bool

// :: (mapping: Mappable) → ?Step

// :: (n: number) → StepMap

// :: (number) → (EditorState, dispatch: ?(tr: Transaction)) → bool

// :: (number) → ?Node

// :: (number) → ?dom.Node

// :: (number) → ?number

// :: (number) → ContentMatch

// :: (number) → Node

// :: (number) → Rect

// :: (number) → ResolvedPos

// :: (number) → T

// :: (number) → Transaction

// :: (number) → number

// :: (number) → {left: number, right: number, top: number, bottom: number}

// :: (number) → {node: ?Node, index: number, offset: number}

// :: (number) → {node: dom.Node, offset: number}

// :: (number) → {type: NodeType, next: ContentMatch}

// :: (number, ?NodeType, ?Object, ?[Mark]) → this

// :: (number, ?number) → Fragment

// :: (number, ?number) → Node

// :: (number, ?number) → Slice

// :: (number, ?number) → this

// :: (number, ?number, ?Slice) → this

// :: (number, ?number, ?[?{type: NodeType, attrs: ?Object}]) → this

// :: (number, ?number, NodeType, ?Object) → this

// :: (number, Node) → Fragment

// :: (number, NodeType, ?ContentMatch) → this

// :: (number, number) → Rect

// :: (number, number) → this

// :: (number, number, (node: Node, pos: number, parent: Node, index: number) → ?bool, ?number)

// :: (number, number, (node: Node, start: number, parent: Node, index: number) → ?bool, ?number)

// :: (number, number, ?Fragment, ?number, ?number) → bool

// :: (number, number, ?string, ?string) → string

// :: (number, number, ?union<Mark, MarkType>) → this

// :: (number, number, DecorationAttrs, ?Object) → Decoration

// :: (number, number, Mark | MarkType) → bool

// :: (number, number, Mark) → this

// :: (number, number, Node) → number

// :: (number, number, Node) → this

// :: (number, number, NodeType, ?[Mark]) → bool

// :: (number, number, Slice) → Node

// :: (number, number, Slice) → this

// :: (number, number, union<Fragment, Node, [Node]>) → this

// :: (number, string, number) → ?number

// :: (number, union<(view: EditorView, getPos: () → number) → dom.Node, dom.Node>, ?Object) → Decoration

// :: (number, union<Fragment, Node, [Node]>) → this

// :: (options: ?Object) → Plugin

// :: (other: Step) → ?Step

// :: (selection: Selection) → ?{pos: number, start: number, node: ProseMirrorNode}

// :: (selection: Selection) → boolean

// :: (state: EditorState) → ?{version: number, steps: [Step], clientID: union<number, string>, origins: [Transaction]}

// :: (state: EditorState, steps: [Step], clientIDs: [union<number, string>], options: ?Object) → Transaction

// :: (step: Step) → this

// :: (string) → ?any

// :: (string) → Node

// :: (string) → OrderedMap

// :: (string) → StepResult

// :: (string) → { leading: ?string, trailing: ?string }

// :: (string, ?(prop: *) → *) → *

// :: (string, ?[Mark]) → Node

// :: (string, ?bool)

// :: (string, ?bool) → string

// :: (string, ?string, Node, ())

// :: (string, ?{ useDeprecatedLogic: bool }) → (EditorState, dispatch: ?(tr: Transaction)) → bool

// :: (string, any) → (EditorState, dispatch: ?(tr: Transaction)) → bool

// :: (string, any) → OrderedMap

// :: (string, any, ?string) → OrderedMap

// :: (string, constructor<Selection>)

// :: (string, constructor<Step>)

// :: (string, from: ?number, to: ?number) → Transaction

// :: (string, number) → string

// :: (string, string, any) → OrderedMap

// :: (union<"up", "down", "left", "right", "forward", "backward">, ?EditorState) → bool

// :: (union<Mark, MarkType>) → Transaction

// :: (union<Object, OrderedMap>) → OrderedMap

// :: (union<[T], RopeSequence<T>>) → RopeSequence<T>

// :: (union<string, MarkType>, ?Object) → Mark

// :: (union<string, NodeType>, ?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node

// :: (union<string, Plugin, PluginKey>) → any

// :: (union<string, Plugin, PluginKey>, any) → Transaction

// :: ({left: number, top: number}) → ?{pos: number, inside: number}

// :: ?Node

// :: ?Node The transformed document.

// :: ?NodeType

// :: ?ResolvedPos

// :: ?[Mark]

// :: ?string Text providing information about a failed step.

// :: ?{slice: Slice, move: bool}

// :: ContentMatch

// :: DecorationSet

// :: DirectEditorProps

// :: EditorProps

// :: EditorState

// :: Fragment

// :: Fragment The slice's content.

// :: InputRule Converts double dashes to an emdash.

// :: InputRule Converts three dots to an ellipsis character.

// :: Mapping

// :: MarkSpec

// :: MarkType

// :: MarkdownParser

// :: MarkdownSerializer

// :: Node

// :: Node The parent node that the range points into.

// :: Node The selected node.

// :: Node The starting document.

// :: NodeSpec

// :: NodeType

// :: Object

// :: Object The mark serializer info.

// :: Object The value of the `tokens` object used to construct

// :: Object<(MarkdownSerializerState, Node)> The node serializer

// :: Object<(node: Node) → DOMOutputSpec>

// :: Object<?(mark: Mark, inline: bool) → DOMOutputSpec>

// :: Object<MarkType>

// :: Object<NodeType>

// :: ResolvedPos

// :: ResolvedPos A position along the end of the content. See

// :: ResolvedPos A resolved position along the start of the

// :: RopeSequence

// :: Schema

// :: SchemaSpec

// :: Selection

// :: Slice

// :: Transaction

// :: [Mark]

// :: [Mark] The empty set of marks.

// :: [Node]

// :: [ParseRule]

// :: [Plugin]

// :: [SelectionRange]

// :: [StepMap]

// :: [Step]

// :: [number] A width * height array with the start position of

// :: bool

// :: bool Tells you whether the position was deleted, that is,

// :: class extends Mappable

// :: class<T> A rope sequence is a persistent sequence data structure

// :: dom.Element

// :: number

// :: number The depth of the node that this range points into.

// :: number The end index of the range in the parent node.

// :: number The mapped version of the position.

// :: number The offset this position has into its parent node.

// :: number The open depth at the end.

// :: number The open depth at the start.

// :: number The position at the end of the range.

// :: number The position at the start of the range.

// :: number The position that was resolved.

// :: number The start index of the range in the parent node.

// :: number The table's height

// :: number The width of the table

// :: string

// :: union<dom.Document, dom.DocumentFragment>

// ::- A DOM parser represents a strategy for parsing DOM content into

// ::- A DOM serializer knows how to convert ProseMirror nodes and

// ::- A [`Selection`](http://prosemirror.net/docs/ref/#state.Selection)

// ::- A collection of [decorations](#view.Decoration), organized in

// ::- A configuration of a Markdown parser. Such a parser uses

// ::- A document schema. Holds [node](#model.NodeType) and [mark

// ::- A fragment represents a node's collection of child nodes.

// ::- A key is used to [tag](#state.PluginSpec.key)

// ::- A mark is a piece of information that can be attached to a node,

// ::- A node selection is a selection that points at a single node.

// ::- A selection type that represents selecting the whole document

// ::- A slice represents a piece cut out of a larger document. It

// ::- A specification for serializing a ProseMirror document as

// ::- A step object represents an atomic change. It generally applies

// ::- A table map describes the structore of a given table. To avoid

// ::- A text selection represents a classical editor selection, with

// ::- Abstraction to build up and track an array of

// ::- Add a mark to all inline content between two positions.

// ::- An editor state transaction, which can be applied to a state to

// ::- An editor view manages the DOM structure that represents an

// ::- An object representing a mapped position with extra

// ::- Decoration objects can be provided to the view through the

// ::- Instances of this class represent a match state of a node

// ::- Like nodes, marks (which are associated with nodes to signify

// ::- Node types are objects allocated once per `Schema` and used to

// ::- Persistent data structure representing an ordered mapping from

// ::- Plugins bundle functionality that can be added to an editor.

// ::- Remove a mark from all inline content between two positions.

// ::- Replace a part of the document with a slice of content, but

// ::- Replace a part of the document with a slice of new content.

// ::- Represents a flat range of content, i.e. one that starts and

// ::- Represents a selected range in a document.

// ::- The result of [applying](#transform.Step.apply) a step. Contains either a

// ::- This class represents a node in the tree that makes up a

// ::- This is an object used to track state and expose

// ::- You can [_resolve_](#model.Node.resolve) a position to get more

// :columnWidth and :rowHeight are derived based on all cells in a column/row.

// <- awaiting reactions

// <- checked in isUnhandled reactions

// <- done

// <- rejection state, 0 - default, 1 - handled, 2 - unhandled

// <- state

// <- value

// <<<<<<<<

// <div ref={node => connectDragSource(connectDropTarget(node))}/>

// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>

// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

// <http://www.w3.org/TR/css3-color/#svg-color>

// <http://www.w3.org/TR/css3-color/>

// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

// = first cluster ptr

// =======

// ================

// ==============================

// ==================================================================

// => Check whether `dest` is still a piping destination.

// => Introduce a guard on increasing awaitDrain.

// > ...

// > blockquote

// >0xffff code points that are a valid part of identifiers. The

// >>>>>>>>>

// @@iterator function is called on it. Some browsers' implementations of the

// @TODO (bvaughn) Add automated test coverage for this.

// @TODO Do we also need this check or can the one in componentWillUpdate() suffice?

// @TRICKY :autoHeight and :autoWidth properties instructs Grid to leave :scrollTop and :scrollLeft management to an external HOC (eg WindowScroller).

// @flow

// @font-face, @page

// @import

// @import is generally only used for font faces from google fonts and etc.

// @param {string} [baz.foo="bar"] foo bar

// @param {string} foo - foo bar

// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805

// @see https://github.com/webpack-contrib/style-loader/issues/177

// @see {@link Mode.getCharCountIndicator}.

// @see {@link initTables}

// @see {@link mul}

// @ts-ignore

// @word, {@word}

// A

// A "clipping parent" is an overflowable container with the characteristic of

// A .throw or .return when the delegate iterator has no .throw

// A CodeMirror instance represents an editor. This is the object

// A Generator should always return itself as the iterator object when the

// A Pos instance represents a position within the text.

// A VP8 keyframe starts with the 0x9d012a header

// A `-->` line comment

// A backdrop key mapping used to make sure we always suppress keys

// A binary search to find the first character whose bounding box

// A bit simpler than readable streams.

// A bug in IE8 can cause this value to be negative, so guard it.

// A collection of DOM events that occur within the editor, and callback functions

// A command function that redoes the last undone change, if any.

// A command function that undoes the last change, if any.

// A container holding the node's children.

// A cursor Pos(line, char, "after") is on the same visual line as `char`

// A cursor Pos(line, char, "before") is on the same visual line as `char - 1`

// A custom `update` method gets to decide whether the update goes

// A description of a DOM structure. Can be either a string, which is

// A dummy desc used to tag trailing BR or span nodes created to work

// A fresh object to act as the ID for this upload:

// A function can be passed as `onComment` option, which will

// A function can be passed as `onToken` option, which will

// A lightweight, document-independent representation of a selection.

// A lineView may contain multiple logical lines (when merged by

// A link back to the `Schema` the node type belongs to.

// A linked list is used to store data chunks instead of an array because the

// A list of lexically-declared names in the current lexical scope

// A list of substrings of CSS properties used to find transition events that

// A list of var-declared names in the current lexical scope

// A map describing the deletions and insertions made by a step, which

// A map from mark names to mark type objects.

// A mapping represents a pipeline of zero or more [step

// A mapping with the maps for each of the steps in this transform.

// A mouse down can be a single click, double click, triple click,

// A native item (such as URL) dragged from inside the document

// A native item (such as file or URL) dragged from outside the document

// A new event is started when the previous origin does not match

// A new image is provided, resolve it.

// A parser parsing unextended [CommonMark](http://commonmark.org/),

// A placement difference in state means popper determined a new placement

// A plugin spec may provide a state field (under its

// A previous entry exists and was in short interval

// A property/value pair cannot end with a comma or a brace

// A recursive descent parser operates by defining functions for all

// A ref and forceUpdate for refocus, b/c we only want to trigger when needed

// A resolved position pointing _in front of_ the anchor cell (the one

// A resolved position pointing in front of the head cell (the one

// A second optional argument can be given to further configure

// A selector can contain parentheses only as part of a pseudo-element

// A selector for the draggable handler

// A selector that will not be draggable.

// A serializer for the [basic schema](#schema).

// A set of attributes to add to a decorated node. Most properties

// A set of marks to apply to the next input. Will be null when

// A shared marker spans multiple linked documents. It is

// A styles array always starts with a number identifying the

// A value that describes how to parse a given DOM node or inline

// A visibility: hidden element used to find the size of things.

// A visual line is a line as drawn on the screen. Folding, for

// A widget desc represents a widget decoration, which is a DOM node

// A..Z

// AB     B|A     B|A

// AL is found, change the type of the European number to Arabic

// API

// API][api].

// AUTO: flip the menu, render above

// Ab     |Ab     A|b

// Abort measurement, if in progress

// Abort mouse wheel delta measurement, when scrolling explicitly

// According to specification a ResizeObserver is deleted by the garbage

// According to the specification following properties are not writable

// Account for augmented dimensions (note: expanding the strides array to account for prepended singleton dimensions does **not** affect the index offset):

// Account for dynamically resizing a collection...

// Account for environments which do not treat string character indices as "own" properties...

// Account for environments which treat `arguments` differently...

// Accumulated changes, for firing change events

// Acorn is organized as a tokenizer and a recursive-descent parser.

// Acorn uses an [operator precedence parser][opp] to handle binary

// Activate records emition if above from_line

// Acts like [`splitBlock`](#commands.splitBlock), but without

// Actual scrollable element.

// Adapted from Modernizr

// Adapted from convert-source-map (MIT)

// Add `q[jz+1]` to `q[jz+k]`...

// Add a DOM node to the content. Text is inserted as text node,

// Add a column at the given position in a table.

// Add a flag to suppress these warnings for this special case.

// Add a key after the given key. If `place` is not found, the new

// Add a mark to the set of stored marks.

// Add a new key to the end of the map.

// Add a new key to the start of the map.

// Add a node at the current position.

// Add a second list item with an empty default start node

// Add a source directive for debugging:

// Add a span to a line.

// Add a step map to the end of this mapping. If `mirrors` is

// Add a table row after the selection.

// Add a table row before the selection.

// Add a terminator.

// Add all child nodes between `startIndex` and `endIndex` (or the

// Add all the step maps in a given mapping to this one (preserving

// Add any remaining nodes that were not bound to data to exit.

// Add data codewords

// Add default alpha value

// Add event listener:

// Add function modules

// Add k to y's exponent:

// Add last point:

// Add lines to path:

// Add listeners if they haven't been added yet.

// Add methods to `Hash`.

// Add methods to `ListCache`.

// Add methods to `MapCache`.

// Add methods to `SetCache`.

// Add methods to `Stack`.

// Add new frontier nodes for any open nodes at the end.

// Add new sub-event

// Add on and off methods to a constructor's prototype, to make

// Add one and continue for nodes with no children or hidden children

// Add pad bytes if the string is still shorter than the total number of required bits.

// Add paddings

// Add position, width and height to our offsets object

// Add properties assigned by `RegExp#exec`.

// Add properties to offsets to make them a complete clientRect object

// Add px to dimension features

// Add remains of b.

// Add slack to the values used to calculate bound position. This will ensure that if

// Add temporary dummy bits for format info just to set them as reserved.

// Add the code points in the other item to this one.

// Add the given array of decorations to the ones in the set,

// Add the given mark to the inline content between `from` and `to`.

// Add the given text to the document. When escape is not `false`,

// Add the necessary cells, using a heuristic for whether to add the

// Add the new operation to the stack

// Add the params to varDeclaredNames to ensure that an error is thrown

// Add the value argument...

// Add this node to the matches if it fits the search criteria.

// Add to comparison array. We only collide with items before this one.

// Add to output array to make sure they still come out in the right order.

// Adding or removing a mark

// Adding the second element, need to change to array.

// Adding to a selection that starts in another cell (causing a

// Adding to an existing cell selection

// Addition is commutative so this is order indep

// Address `typeof null` => `object` (see http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null):

// Address case where `f` cannot be represented exactly...

// Address floating point errors introduced by taking the sqrt and enforce strict [-1,1] bounds...

// Adds "Select all" to context menu in FF

// Adds the given mark to the set of active marks.

// Adds the given text to the current position in the document,

// Adjust a position to refer to the post-change position of the

// Adjust decoration positions to changes made by the transaction:

// Adjust the array shape to satisfy the minimum number of dimensions...

// Adjust the cursor to the dropped position...

// Adjust the line structure

// Adjust the track back to it's original position.

// Advance the index before calling the task. This ensures that we will

// Advanced use-cases (eg CellMeasurer) require batched measurements to determine accurate sizes.

// After adding the terminator, if the number of bits in the string is not a multiple of 8,

// After these have been cleaned up, we'll let them throw.

// Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf

// Algorithm for 'placing' the elements of a slice into a gap:

// Alias added to make those easier to distinguish from strings.

// Align at the center

// All callbacks below have the same signature. 'start' and 'stop' callbacks omit the 'placeholder'.

// All elements equally likely...

// All else failed, just try to get a rectangle for the target node

// All event handlers have been removed, so we want to remove the event

// All in the name of speed.

// All nodes have parent links. The tree is used both to go from

// All nodes marked [selectable](#model.NodeSpec.selectable) can be

// All non-basic code points < n have been handled already. Find the next

// All optional

// All state changes go through this:

// All the actual chunk generation logic needs to be

// All things considered, this seems to be the best current work around that I'm aware of.

// All token type variables start with an underscore, to make them

// Allocate matrix buffer

// Allow "beforeChange" event handlers to influence a change

// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)

// Allow for two levels of nesting

// Allow for unix-like usage: A.pipe(B).pipe(C)

// Allow only one line break

// Allow parent to set layout directly.

// Allow parent to set layouts directly.

// Allow parent to set width or breakpoint directly.

// Allow passing other Regenerate instances.

// Allow scroll on provided target

// Allow the callers to control the unique policy name

// Allow the findChunks to be overridden in findAll,

// Allowed by RFCs, but cause of XSS attacks.  Always escape these.

// Allows consumers to extend a base Select with additional styles

// Allows developers to see this is a property they can set

// Allows for any combination of:

// Allows for loose type truthy/falsey checks

// Allows only 0-377(octal) i.e. 0-255(decimal).

// Alphabetic keys

// Already drawn

// Already have sq defined

// Already observing node.

// Also assumes that first character was already checked

// Also explicitly init styles to 'auto' if scrollbars are required.

// Also, if we have no data yet, we can stand some

// Alternative ::

// An array describes a DOM element. The first value in the array

// An atomic node (e.g. Image) is selected.

// An editable DOM node containing the document. (You probably

// An empty fragment. Intended to be reused whenever a node doesn't

// An event was generated for a text change that didn't change

// An example use of Resizable.

// An exception thrown by a task will permanently interrupt the processing of

// An expando property on the DOM node provides a link back to its

// An extra cell is added to the count

// An object describing a schema, as passed to the [`Schema`](#model.Schema)

// An object for storing whatever values modules may want to

// An object mapping attribute names to values. The kind of

// An object mapping the schema's node names to node type objects.

// An optional array of problems (cell overlap or non-rectangular

// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)

// Anchor ::

// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence

// And e3, and put it in terms[3]:

// And finally we know that our result is below the inflection point, so set an upper limit on our search:

// And from from 9.2:

// And give them width/height of 'auto' so they can grow larger than the parent Grid if necessary.

// And it keeps the caches from growing too large.

// And iterate:

// And merge text with adjacent text

// And prevents us from recording inaccurage measurements when used with CellMeasurer.

// And put a sub-ProseMirror into that

// And the alphabetic keys

// And then down into the next node

// And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).

// And, if locations are used, the {line, column} object

// And, if no more callbacks then stop observing the node

// Animated Scroll To

// Annotations in N4JS spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html#_annotations

// Any elements after that (including the 2nd if it's not an attribute

// Any enumerable properties...

// Any number raised to zero (including 0) is always 1 => b^0 - 1 = 0

// Any property that should trigger a re-render of Grid then is specified here to avoid a stale display.

// Any reducers that existed in both the new and old rootReducer

// Anything else beginning with a digit is an integer, octal

// Anything else let's inspect with %O

// Anything goes for "unsafe" casting...

// Apped EC codewords

// Append a tooltip to the outer node

// Append the inverse of the given mapping to this one.

// Append the previous high-surrogate-to-low-surrogate mappings.

// Appends a noflip comment to a style rule in order to prevent it from being automatically

// Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html

// Apply `position` to popper before anything else because

// Apply a CSS selector.

// Apply a bit mask (0 00000000000 11111111111111111111) to remove the exponent:

// Apply a change to a document, and add it to the document's

// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:

// Apply a new step in this transform, saving the result. Throws an

// Apply any `formatters` transformations

// Apply dynamic padding.

// Apply env-specific formatting (colors, etc.)

// Apply margin

// Apply mask pattern

// Apply the changes and update the offset

// Apply the given transaction to produce a new state.

// Apply the joining algorithm

// Apply the latest event from one branch to the document and shift the event

// Approximation of log1p(f)...

// Arbitrarily large delta...

// Are we oob?

// Argument reduction (reduce to [0,2))...

// Argument reduction (reduce to interval [0,1]). If `x` is negative, we can safely negate the value, taking advantage of the error function being an odd function; i.e., `erf(-x) = -erf(x)`.

// Argument reduction (reduce to interval [0,1]). If `x` is outside [0,1], we can take advantage of the complementary error function reflection formula: `erfc(-z) = 2 - erfc(z)`, by negating the result once finished.

// Argument reduction needed...

// Argument reduction...

// Arguments:

// Array

// Array shape:

// Array was modified...

// Array#includes uses SameValueZero equality algorithm

// Array#indexOf ignores holes, Array#includes - not

// Array;

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass

// Arrays and plain objects...

// Arrays of change events and selections. Doing something adds an

// As `delta` is a small integer, we can use a finite product:

// As a workaround, use cWM and cWRP to invoke the new static lifecycle.

// As a workaround, use cWU to invoke the new lifecycle.

// As long as there's unplaced content, try to place some of it.

// As per issue #47, the web-components registry is inherited by a

// As the parser collects the number of capture groups as the string is

// As well as libraries like react-lite which have a slightly different lifecycle.

// Asserts that following token is given contextual keyword.

// Assign default placeholders.

// Assign the result of the finished delegate to the temporary

// Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,

// AssignmentProperty has type === "Property"

// Assume cyclic values are equal.

// Assumes r, g, and b are contained in the set [0, 255]

// Assumes r, g, b are contained in the set [0, 255] and

// Assumes that there is a "$" at state.src[pos]

// Assuming this is successful, subsequent callbacks go straight to tick.

// Astral code point; split in surrogate halves

// Asymptotic inverse expansion about normal:

// Async and optimistically optimized update – it will not be executed if

// AsyncIterator objects; they just return a Promise for the value of

// At any point we are certain `to` satisfies `pred`, don't know

// At least give some kind of context to the user

// At the start of this parent, look at next one

// At this level in the tree, the nodes had sibling nodes further down

// At this point we may or may not have the right answer, Eq-3.2 has two solutions for x for any given eta, however the mapping in 3.2 is 1:1 with the sign of eta and x-sin^2(theta) being the same. So we can check if we have the right root of 3.2, and if not switch x for 1-x.  This transformation is motivated by the fact that the distribution is *almost* symmetric so 1-x will be in the right ball park for the solution:

// At this point, `|1-x|` is tiny (`<= 2^-20`). Suffice to compute `log(x)` by `x - x^2/2 + x^3/3 - x^4/4`.

// At this point, if `start` is `greater` than `codePoint`, insert a new

// Atom ::

// AtomEscape ::

// Attach `id` column:

// Attach a document to an editor.

// Attach and remove event handlers as they're added or removed from props:

// Attach marginTop and marginLeft because in some circumstances we may need them

// Attach the necessary event handlers when initializing the editor

// Attach total number of actions on initial call:

// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer

// Attribute descriptors

// AttributeSpec:: interface

// Attributes

// Auto discovery of record_delimiter, unix, mac and windows supported

// Automatically convert percentage into number

// Avoid `split(regex)` for IE8 compatibility. See #17.

// Avoid crashing if we missed a drop event or our previous drag died

// Avoid exceeding the maximum stack size on V8 :(. Note that the choice of `500` was empirically determined...

// Avoid failures from read-only properties

// Avoid overflow...

// Avoid propagating failures to Promises returned by later

// Avoid re-creating cells while scrolling.

// Avoid re-rendering in this case as it can cause problems; see #532 for more.

// Avoid spamming the console because they are often not actionable except for lib authors

// Avoid unnecessary DOM access if visibility hasn't changed

// Avoid using object-spread syntax with multiple objects here,

// Axis restrictions

// B.1.4

// B.1.4 ExtendedAtom

// BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!

// BIDI HELPERS

// BMP code point

// BOTTOM: allow browser to increase scrollable area and immediately set scroll

// BP[0] = 1.0, BP[1] = 1.5

// BR nodes tend to only return the rectangle before them

// Back slashes before the query string get converted to forward slashes

// Back up if the node directly above openStart, or the node above

// Backwards-compat with node 0.10.x

// Backwards-compat with node 0.4.x

// Bail out if the visible area is already rendered and nothing changed.

// Based on http://stackoverflow.com/a/22747272/680742, the browser with

// Based on https://mths.be/fromcodepoint by @mathias.

// Based on the premise that every string can be "surrounded" by empty strings (e.g., "" + "a" + "" + "b" + "" === "ab"):

// Basic props

// Basic wrapper around a Resizable instance.

// Be aware, modifiers could override the properties defined in the previous

// Be forgiving, per 25.3.3.3.3 of the spec:

// Because Android doesn't allow us to actually detect backspace

// Because for <= 15.x versions this might be a "prevContext" object.

// Because get-snapshot might return a falsy value.

// Because the close button is the only focusable element inside of the panel, this

// Because the height of the row is equal to the tallest cell within that row,

// Because the width of the column is equal to the widest cell within that column,

// Because they would work differently between older and newer (16.3+) versions of React.

// Become the parent node

// Before Symbol spec.

// Begin by evaluating the next Pn from Eq 9.4:

// Begin by getting an initial approximation for the quantity eta from the dominant part of the incomplete beta:

// Begin by testing whether we're in the "bad" zone where the result will be near 0.5 and the usual series and continued fractions are slow to converge:

// Behavior of elts with overflow: auto and padding is

// Besides, it's as well not necessary as the <html> itself neither has

// Bidi parts are sorted left-to-right, and in a non-line-wrapping

// BidiSpan objects otherwise.

// Bidirectional ordering algorithm

// Big List of Colors

// Big-endian, any size from 1 to 8

// Big-endian, any size from 1 to 8 octets

// Big-endian, defined for 4 and 8 octets (32, 64 bits)

// Binary - not interpreted by the parser

// Binary properties:

// Binding "this" is important for shallow renderer support.

// Bindings should map key names to [command](#commands)-style

// Bit shift to isolate the exponent and then subtract the bias:

// Bitfield to track which aspects of the state were updated by

// Block keywords start new blocks, except 'else if', which only starts

// Block option hover events when the user has just pressed a key

// Block regexp can contain comments and interpolation

// Block strings

// Body series for small N, start with Eq 56 of Shaw:

// Boolean start() 

// Boolean("") === false;

// Boolean("classname") === true;

// Boolean(0) === false;

// Boolean(false) === false;

// Boolean(null) === false;

// Boolean(undefined) === false;

// Borders + scrollbars

// Borrowed from jquery

// Both a and b less than 1, there is a point of inflection at xs:

// Both a,b < 1:

// Both a,b >= 1:

// Both close and finish should trigger unpipe, but only once.

// Both nodes are inside #document

// Both positions in the same text node -- simply insert text

// Both recorders are ready to record things accurately

// Bottom 'y' possible is the bottom of the layout.

// Bottom overlap

// Bound parameter to allow user to add dynamic validation

// Bound parameter to indicate with the propType is required

// Break `z` into 24-bit if necessary...

// Break x^5*(T[1]+x^2*T[2]+...) into x^5(T[1]+x^4*T[3]+...+x^20*T[11]) + x^5(x^2*(T[2]+x^4*T[4]+...+x^22*T[12]))...

// Breakpoint change

// Brian Grinstead, MIT License

// Briefly turn off draggability, to allow widgets to do

// Bring the correction terms together to evaluate eta; this is the last equation on page 151:

// Bring them together to get a final estimate for eta:

// Browser (in caretPosition/RangeFromPoint) will agressively

// Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

// Browsers where the left scrollbar doesn't cause an issue report `0` for

// Browsers with cancelable scroll events (eg. Firefox) interrupt scrolling animations if scrollTop/scrollLeft is set.

// Buffer instances.

// Buffer offset:

// Buffer#write(string)

// Build a command that splits a non-empty textblock at the top level

// Build a fragment containing empty versions of the structure

// Build a fragment from an array of nodes. Ensures that adjacent

// Build a line's DOM representation from scratch

// Build a serializer using the [`toDOM`](#model.NodeSpec.toDOM)

// Build an input rule for automatically wrapping a textblock when a

// Build an input rule that changes the type of a textblock when the

// Build an object containing all ndarray properties needed to revive a serialized ndarray...

// Build optimized segments

// Build the output array...

// Build up a reverse change object to add to the opposite history

// Build up a set of ranges to kill first, merging overlapping

// Build up a tree that corresponds to a set of decorations. `offset`

// Build up the DOM representation for a single token, and add it to

// Building sub-trees:

// Built-in target names

// But Firefox do supports WebAssemblyRecorder

// But allow more writes to happen in this tick.

// But an initial scroll index of offset is set as an external prop.

// But eat eager.

// But if that’s what you need, just add an `else` block with this code:

// But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.

// But we know that count of dragEnter and dragLeave events

// By default EventEmitters will print a warning if more than 10 listeners are

// By default, List cells should be 100% width.

// By default, a node is rendered using the `toDOM` method from the

// By default, document nodes are rendered using the result of the

// By default, if there's a node with the same type above the newly

// By default, reserved words are only enforced if ecmaVersion >= 5.

// By default, returns the index in the tree (omitting hidden nodes).

// By default, updates that start and end at the beginning of a line

// By explicitly using `prop-types` you are opting into new production behavior.

// By this condition we can catch all non-replaced inline, hidden and

// Bypass onClick if it was present

// CHEBYSHEV DISTANCE //

// CHUNKIFY //

// CONTENTEDITABLE INPUT STYLE

// CONTEXT MENU HANDLING

// COSINE DISTANCE //

// COSINE SIMILARITY //

// CP_HI+CP_LO = 2/(3*LN2)

// CSP to forbid Function, and you're not willing to fix either of those

// CSS Transforms support (default)

// CSS selector

// CSS selector regex is not appropriate for Sass

// CSV_INVALID_RECORD_LENGTH_DONT_MATCH_COLUMNS

// Cache

// Cache of size and position data for cells, mapped by cell index.

// Cache references to the parent constructor and parent constructor methods:

// Cache style objects so shallow-compare doesn't re-render unnecessarily.

// Cache the length

// Calculate # ties for each value & rank sums per group:

// Calculate EC codewords for this data block

// Calculate EC for this data block

// Calculate Q via finite sum for half integer a:

// Calculate Q via finite sum:

// Calculate Residuals:

// Calculate a new scroll position needed to scroll the given

// Calculate correction terms:

// Calculate e1 and put it in terms[1], see the middle of page 151:

// Calculate max size from boundary settings

// Calculate mid point:

// Calculate new size

// Calculate penalty

// Calculate powers:

// Calculate required number of bits

// Calculate test statistic using short-cut formula:

// Calculate the increment:

// Calculate the population excess kurtosis:

// Calculate the population skewness:

// Calculating the dimensions trigger a DOM repaint which

// Call [`Node.replace`](#model.Node.replace) with the given

// Call `cb(err)` when you are done with this chunk.  If you pass

// Call `f` for every child node, passing the node, its offset

// Call `push(newChunk)` to pass along transformed output

// Call delegate.iterator[context.method](context.arg) and handle the

// Call f for all linked documents.

// Call the callback when the time left is 0:

// Call the children fetching function

// Call the given callback for every descendant node. Doesn't

// Call the given callback for every descendant node. The callback

// Call the given function for each element between the given

// Call the given function for each key/value pair in the map, in

// Call the parent constructor:

// Call the tree traversal with a pseudo-root node

// Call this.constructor.gDSFP to support sub-classes.

// Call to properly set the breakpoint and resize the elements.

// Callback can either be a function or a string

// Callback so you can save the layout.

// Callback so you can save the layout. Calls after each drag & resize stops.

// Callbacks

// Called after children nodes collapsed or expanded.

// Called after node move operation.

// Called at the end of every token. Sets `end`, `val`, and

// Called at the start of the parse and after every token. Skips

// Called for leaf DOM nodes that would otherwise be ignored

// Called to track between dropped and dragging

// Called when the node view is removed from the editor or the whole

// Called when the window resizes

// Called whenever the selection changes, sets the new selection as

// Called whenever tree data changed.

// Called while dragging an element. Part of browser native drag/drop API.

// Calls back with (containerWidth, margin, cols, containerPadding)

// Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.

// Calls back with breakpoint and new # cols

// Calls delayed callbacks and cursorActivity handlers until no

// Calls on each drag movement.

// Calls the callback...

// Calls the given function on each of the changed ranges included in

// Calls when drag is complete.

// Calls when drag starts. Callback is of the signature (layout, oldItem, newItem, placeholder, e, ?node).

// Calls when resize is complete.

// Calls when resize movement happens.

// Calls when some element is dropped.

// Can be called with any tinycolor input

// Can be either `"script"` or `"module"`. This influences global

// Can not be merged, start a new event.

// Can not handle redirect-url, such as when access 'http://something.com/avatar.png'

// Can typed array instances be augmented?

// Can typed array instances can be augmented?

// Can we do better here?

// Can't replace the whole document, so remove 0 if it's present

// Can't update if nextDOM is or contains this.lock, except if

// Cancel the countdown on unmount of component:

// Cancel the current text selection if any (#5821)

// Cannot assign a treeIndex to hidden nodes

// Cannot drop if we're adding to the children of the row above and

// Cannot have own `constructor` property:

// Canvas to temporarily store data:

// CanvasCaptureMediaStream

// CanvasRecorder.js

// Cap w at numCols

// Capping

// Capture the regular expression pattern and any flags:

// Capture the scroll position so when previous months are rendered above the current month

// Carriage Return <CR>

// Case 1: We move within an ltr part in an ltr editor. Even with wrapped lines,

// Case 1: `|y|` is huge...

// Case 1: x is an array

// Case 2: We move within an rtl part or in an rtl editor on the same visual line

// Case 2: `|y|` is not huge...

// Case 2: scalar

// Case 3: Could not move within this bidi part in this visual line, so leave

// Case 3a: Look for other bidi parts on the same visual line

// Case 3b: Look for other bidi parts on the next visual line

// Case 4: Nowhere to move

// Case A: Iterate over generator object created by a generator function...

// Case A: Predictions for multiple observations:

// Case B: Create prediction for a single observation:

// Case B: Only one new observation:

// Case B: Repeatedly call function...

// Case of ndarray, opts

// Case: 'MatchListQuestion'

// Case: 'MultipleChoiceQuestion'

// Case: 'OrderQuestion'

// Case: ( a <= 1 ) != ( b <= 1 ). If all else fails we get here, only one of a and b is above 1, and a+b is small.  Start by swapping things around so that we have a concave curve with b > a and no points of inflection in [0,1].  As long as we expect x to be small then we can use the simple (and cheap) power term to estimate x, but when we expect x to be large then this greatly underestimates x and leaves us trying to iterate "round the corner" which may take almost forever. We could use Temme's inverse gamma function case in that case, this works really rather well (albeit expensively) even though strictly speaking we're outside it's defined range. However it's expensive to compute, and an alternative approach which models the curve as a distorted quarter circle is much cheaper to compute, and still keeps the number of iterations required down to a reasonable level. With thanks to Prof. Temme for this suggestion.

// Case: -2**-20 <= f < 2**-20

// Case: 0 < x < 2**-1022

// Case: 1.5 < z <= 2

// Case: Argument reduction needed...

// Case: Audio

// Case: Camera + Audio / No Audio

// Case: Harmonization not already done on server for anonymous users

// Case: Have both a second and first variable...

// Case: Node.js

// Case: Other question types...

// Case: RANGE > range

// Case: Resetting the second variable...

// Case: Screen & Audio

// Case: Screen & Camera

// Case: Screen without Audio

// Case: User did not pick correct answer...

// Case: We are not an owner

// Case: We have a categorical variable

// Case: We have a filter for a quantitative variable, which has a min and max value

// Case: `a` is of type 'object'

// Case: `config` already is a React component, clone it to pass in submit handler:

// Case: `data` is already an array of observations

// Case: `data` is an object with keys for the various variables

// Case: browsers

// Case: browsers and web workers

// Case: cos(Inf or NaN) is NaN */

// Case: grouping variable selected, do not omit missing values

// Case: grouping variable selected, omit missing values

// Case: invert upper gamma function

// Case: missing = 'remove'

// Case: more than one statistic calculated

// Case: no grouping variable selected

// Case: p and q are big

// Case: p is small, but q is big

// Case: q > 0.5

// Case: row-major

// Case: tan(Inf or NaN) is NaN

// Case: unknown

// Case: x < 2**-1022

// Case: x < 2**-27

// Case: x is NaN or infinity

// Case: |x| < 2**-27

// Case: |x| < 2**-28

// Case: |x| >= 0.6744

// Case: |x| ~< 2^-26

// Case: |x| ~< 2^20*π/2 (medium size)

// Case: |x| ~< pi/4

// Case: |x| ~< π/4

// Case: |x| ~<= 3π/4

// Case: |x| ~<= 5π/4

// Case: |x| ~<= 7π/4

// Case: |x| ~<= 9π/4

// Case: |x| ~<= π/4 (no need for reduction)

// Case: |x| ~= 3π/2

// Case: |x| ~= 4π/2

// Case: |x| ~= π/2 or π

// Cast boolean to string by default

// Cast data to generic array...

// Cast date to timestamp string by default

// Cast number to string using native casting by default

// Cast record elements

// Cast values to strings for select component to work and sort:

// Cell cache during scroll (for perforamnce)

// Cell sizes may be determined by a function property.

// Central parser implementation

// Certain devices (like Apple touchpad) rapid-fire duplicate events.

// Change after

// Change before

// Change some spaces to NBSP to prevent the browser from collapsing

// Change the content (text, markers) of a line. Automatically

// Change the type, attributes, and/or marks of the node at `pos`.

// Change things around so we can handle as b == 1 special case below:

// Changeover criterion chosen to give a changeover at Q ~ 0.33:

// Changeover here occurs when P ~ 0.75 or Q ~ 0.25:

// Changes to :scrollLeft or :scrollTop should also notify :onScroll listeners

// CharSet containing the one character <BS> (Unicode value 0008).

// Character codes:

// Character count indicator + mode indicator bits

// CharacterClass ::

// CharacterClassEscape ::

// CharacterEscape ::

// CharacterEscape[U] ::

// Characters that are never ever allowed in a hostname.

// Cheap elimination

// Cheap hack to get the text of a react object

// Cheap key test:

// Chebyshev polynomial coefficients...

// Check `document` and `window` in case of server-side rendering

// Check `x` to avoid `pow()` overflow...

// Check children keys for duplicates. Throw if found.

// Check for `Error` objects from the same realm (same Node.js `vm` or same `Window` object)...

// Check for `NaN`...

// Check for a subnormal and scale accordingly to retain precision...

// Check for circular references and return its corresponding clone.

// Check for existing strings

// Check for identical high surrogate ranges.

// Check for listener leak

// Check for out of bounds step:

// Check for over/underflow in the power terms:

// Check for subnormal output...

// Check for the abstract class...

// Check for typed array objects from the same realm (same Node.js `vm` or same `Window` object)...

// Check for underflow...

// Check for underflow/overflow...

// Check if `f=x` can be represented exactly (no need for correction terms), allowing us to bypass argument reduction...

// Check if `x` is subnormal...

// Check if a second iteration is needed (good to 118 bits)...

// Check if a third iteration is needed (151 bits accumulated)...

// Check if adding this code point causes two separate ranges to become

// Check if argument reduction is needed and if we can just return a small value approximation requiring less computation but with equivalent accuracy...

// Check if both `rangeStart` and `rangeEnd` are within the bounds of

// Check if module is in cache

// Check if only `rangeStart` is within the bounds of this pair.

// Check if property name clashes with already added.

// Check if re-computation is needed...

// Check if the clock should be active:

// Check if the code point is already in the set.

// Check if the index is valid

// Check if the set only represents a single code point.

// Check if the specified version can contain the data

// Check if the string starts with a forward slash...

// Check if the text is fully displayed:

// Check if this range can be combined with the previous range.

// Check if this range pair is equal to, or forms a subset of, the range

// Check if u significand is less than sqrt(2) significand => 0x6a09e => 01101010000010011110

// Check if we can reuse allocated memory...

// Check if we have empty content, ie: $$.  Do not parse.

// Check if we're actually ready to finish, but don't emit yet

// Check left diagonal:

// Check non-whitespace conditions for opening and closing, and

// Check right diagonal:

// Check sign to prevent overflow...

// Check that all array element dimensions are consistent:

// Check that lines don't extend past the right of the current

// Check that output string will not exceed the maximum string length:

// Check that we didn't get one last unshift.

// Check the node either in the main document or in the current context

// Check the target ids at the innermost position. If they are valid, add them

// Check to see if our first range ended prematurely.

// Check to see if string passed in is a percentage

// Check whether `x` is even...

// Check whether any plugin in the given state has a

// Check whether splitting at the given position is allowed.

// Check whether the cursor is at the end of a cell (so that further

// Check whether the given mark type is allowed in this node.

// Check whether this node and its descendants conform to the

// Check whether this node's markup correspond to the given type,

// Check whether vertical selection motion would involve node

// Checks at most 3 bytes at the end of a Buffer in order to detect an

// Checks function params for various disallowed patterns such as using "eval"

// Checks if an object has a property.

// Checks if current selection is a `CellSelection`.

// Checks that a user-supplied chunk is valid, especially for the particular

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a

// Checks whether it would be reasonable to apply a given mark type to

// Children may contain false or null, so we should filter them

// Children must be only a single element

// Children must not have duplicate keys.

// Choose vertical or hotizontal compaction

// Chop off zero terms...

// Chose appropriate bandwidth via rule-of-thumb:

// Chrome 1-12 returns 'function' for regular expression instances (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof):

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives

// Chrome Android when after an uneditable node.

// Chrome Android will sometimes, during composition, report the

// Chrome gets confused by <br contenteditable=false>

// Chrome has a rather weird rounding of "client" properties.

// Chrome passes an MediaQueryListEvent object, while other browsers pass MediaQueryList directly

// Chrome will sometimes treat a node selection as a

// Chunk validation

// Circular reference...

// Class Name Prefixer

// Class expressions may have an optional name.

// Class instances...

// Class name for the container wrapping the tree

// ClassAtom - ClassAtom ClassRanges

// ClassAtom ::

// ClassAtomNoDash - ClassAtom ClassRanges

// ClassAtomNoDash ::

// ClassAtomNoDash NonemptyClassRangesNoDash

// ClassEscape ::

// ClassRanges ::

// Clean Value

// Clean up some extranous whitespace

// Clean up the listener if we need to.

// Clear all DOM statefulness of the last node selection.

// Clear cell cache in case we are scrolling;

// Clear moved flag, if it exists.

// Clear queue here to prevent

// Clear sortBy array of all non-selected keys

// Clear the exponent bits within the higher order word:

// Clear the marker.

// Clear the view.

// Click on dots

// Click on the slides

// Client width & height properties can't be

// Clip forced viewport to actual scrollable area.

// Clip or extend (repeat) the given set of cells to cover the given

// Clip the change to the size of this doc

// Clip the part to the wrapped line.

// Cloning is a little expensive, so we want to do it as little as possible.

// Cloning requires ES5 or higher...

// Close all the parentheses...

// Close and return the node that is currently on top of the stack.

// Close the IIFE:

// Close the block for the given node.

// Close the function call:

// Close the function:

// Close the marks that need to be closed

// Closes the popup.

// Closing brace

// Closing braces...

// Closing tag

// Cluster

// Code content is represented as a single token with a `content`

// Code generation. Start with function definition...

// Code generation. Start with the function definition...

// Code generation. Start with the function definition:

// Code point from a supplementary plane. Split into two 16-bit code units (surrogate pair).

// CodeMirror, copyright (c) by Marijn Haverbeke and others

// CodeMirror.prototype, for backwards compatibility and

// Coerce booleans to `1` or `0` and dates to milliseconds.

// Coerce inputs to strings.

// Coerce regexes to strings and treat strings, primitives and objects,

// Coerce to Number.

// Collapsed markers have unique ids, in order to be able to order

// Collect observers that have active observations.

// Combination Functions

// Combinator utils

// Combinators

// Combine a number of command functions into a single function (which

// Combine eta0 and the error terms to compute eta (Second equation p155):

// Combine power terms with Lanczos approximation:

// Combine step 2 and step 3.

// Combine with the leftover terms from the Lanczos approximation:

// Command for adding an annotation

// Command function that removes the selected columns from a table.

// Command to add a column after the column with the selection.

// Command to add a column before the column with the selection.

// Commands are parameter-less actions that can be performed on an

// Commands for tables:

// Comment UI

// Common case.

// CommonJS

// Communicate our context to the combinators.

// Compact vertically if not set to horizontal

// Compare least significant, most likely to change units first

// Compare the markup (type, attributes, and marks) of this node to

// Compare this fragment to another one.

// Compare two positions, return 0 if they are the same, a negative

// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set

// Composite means it takes into account transforms as well as layout.

// Composition Handlers

// Compress `FQ[]` into `y[]`...

// Compressing a branch means rewriting it to push the air (map-only

// Compute -1/(x+r) accurately...

// Compute P:

// Compute Q:

// Compute `1-q`:

// Compute `2^(hp+lp)`...

// Compute `PIO2[0,...,jp]*q[jz,...,0]`...

// Compute `Q[0],Q[1],...,Q[jk]`:

// Compute `ht = ax + bp` (via manipulation, i.e., bit flipping, of the high word):

// Compute `log(ax)`...

// Compute `n`...

// Compute `ss = hs + ls = (x-1)/(x+1)` or `(x-1.5)/(x+1.5)`:

// Compute a style array (an array starting with a mode generation

// Compute a suitable new viewport (from & to)

// Compute a table map.

// Compute percentages...

// Compute robustness weights except last time...

// Compute square root of the result and then square it:

// Compute the 4th root of the result then square it twice:

// Compute the base array of styles

// Compute the character length of a line, taking into account

// Compute the character position closest to the given coordinates.

// Compute the default character width.

// Compute the default text height.

// Compute the key for each datum.

// Compute the key for each node.

// Compute the lines that are visible in a given viewport (defaults

// Compute the number of bytes...

// Compute the number of elements...

// Compute the position of the end of a change (its 'to' property

// Compute the relative visual position of the head compared to the

// Compute the sideValue using the updated popper offsets

// Compute the width and height of a set of cells, and make sure each

// Compute weights (pick up all ties on right):

// Compute whether a line is hidden. Lines count as hidden when they

// Computes display.scroller.scrollLeft + display.gutters.offsetWidth,

// Computes the amount of (end) open nodes at the end of the

// Concatenates all the text nodes found in this fragment and its

// Config presets (e.g. tags.js, attrs.js) are immutable.

// Configures <JSONNestedNode> to render an Array

// Configures <JSONNestedNode> to render an Object

// Configures <JSONNestedNode> to render an iterable

// Connect or disconnect spans from a line.

// Construct a DOM parser using the parsing rules listed in a

// Construct an NFA from an expression as returned by the parser. The

// Constructs a string by concatentating the output of each term.

// Consume a semicolon, or, failing that, see if we are allowed to

// Consumer Handlers

// Consumes contextual keyword if possible.

// Context may be "window", "page", "div", or "local"./null.

// Continue running updates if changes have been detected as there might

// Continuing an existing cross-cell selection

// Continuing lines, if any

// Control + click removes column from sort (if pressent)

// ControlEscape

// ControlEscape ::

// ControlLetter ::

// Controls whether, when a selection of this type is active in the

// Convenience function for adding list-related node types to a map

// Conversion Functions

// Convert SVG string to data URL

// Convert a slice to a JSON-serializable representation.

// Convert a style as returned by a mode (either null, or a string

// Convert back coefficients to original scale:

// Convert existing expression atom to assignable pattern

// Convert fitted values and residuals back to original scale before standardizing:

// Convert from short to long form (fff -> ffffff)

// Convert integer "bit" chunk to floating-point value...

// Convert into [0, 1] range if it isn't already

// Convert list of expression atoms to binding list.

// Convert result to a 13-bit binary string

// Convert the first line into column names

// Convert the input in UCS-2 to Unicode

// Convert the input to a string and treat the empty string special.

// Convert the record into a string

// Convert the selection to a JSON representation. When implementing

// Convert the values with units to absolute pixels to allow our computations

// Convert this mark to a JSON-serializeable representation.

// Converts a decimal to a hex value

// Converts a hex value to a decimal

// Converts a {top, bottom, left, right} box from line-local

// Converts an HSL color value to RGB.

// Converts an HSV color value to RGB.

// Converts an RGB color to hex

// Converts an RGB color value to HSL.

// Converts an RGB color value to HSV

// Converts an RGBA color plus alpha transparency to hex

// Converts an RGBA color to an ARGB Hex8 string

// Copies a specified amount of bytes from the list of buffered data chunks.

// Copies a specified amount of characters from the list of buffered data

// Copy 0 bytes; we're done

// Copy `shape` and `strides` to prevent external mutation:

// Copy and sort data --> build X

// Copy chrome, IE, opera backslash-handling behavior.

// Copy function arguments

// Copy of the full string this token was created from

// Copy over the visible cell styles so avoid unnecessary re-render.

// Copy properties from require('buffer')

// Copy static methods from Buffer

// Copy the array to avoid mutation:

// Copy the provided seed array to prevent external mutation, as mutation would lead to an inability to reproduce PRNG values according to the PRNG's stated seed:

// Copy the sign bit of `y` to `x`:

// Copy the values from the 2D array

// Copy the wrapped component's prop types and default props on WithStyles

// Copy to prevent mutation and sort by x:

// Copyright Joyent, Inc. and other Node contributors.

// Correct for rounding errors...

// Correction for ties:

// Correction term is zero:

// Correction term...

// Cost of s to u plus the cost of u to v across e--this is *a*

// Costs of shortest paths from s to all nodes encountered.

// Costs of shortest paths from s to all nodes encountered; differs from

// Could be a NodeSelection or CellSelection.

// Count number of occurrences of each of value:

// Count number of occurrences of each value:

// Count the number of lines in the view whose DOM representation is

// Counting number of occurrences:

// Counts the column offset in a string, taking tabs into account.

// Covered by a rowspan cell

// Covers bottom of gutter when coverGutterNextToScrollbar is on

// Covers bottom-right square when both scrollbars are present.

// Coverts a box from "div" coords to another coordinate system.

// Create Literal#value property value.

// Create ResizeObserverEntry instance for every active observation.

// Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted

// Create a HTML DOM tree out of html string

// Create a JSON-serializeable representation of this fragment.

// Create a JSON-serializeable representation of this step. When

// Create a `Node` of this type. The given attributes are

// Create a command function that toggles the given mark with the

// Create a command to lift the list item around the selection up into

// Create a command to sink the list item around the selection down

// Create a composition view for the orphaned nodes

// Create a copy of stack values (necessary in order to "snapshot" the stack; otherwise, values could come and go between calls to `next`):

// Create a copy of this node with only the content between the

// Create a copy of this node, with the given set of marks instead

// Create a failed step result.

// Create a fragment from something that can be interpreted as a set

// Create a gap cursor plugin. When enabled, this will capture clicks

// Create a group for the given array of decoration sets, or return

// Create a history change event from an updateDoc-style change

// Create a keymap plugin for the given set of bindings.

// Create a lower-level base constructor:

// Create a map containing all the keys in this map that don't

// Create a map that moves all positions by offset `n` (which may be

// Create a mapping that maps only through a part of this one.

// Create a mark of this type. `attrs` may be `null` or an object

// Create a mark with the given type and attributes.

// Create a marker, wire it up to the right lines, and

// Create a new branch with the given transform added.

// Create a new error...

// Create a new fragment by appending the given node to this

// Create a new fragment by prepending the given node to this

// Create a new fragment containing the combined content of this

// Create a new fragment in which the node at the given index is

// Create a new line for each string on a new line

// Create a new map by appending the keys in this map that don't

// Create a new map by prepending the keys in this map that don't

// Create a new map by replacing the value of `key` with a new

// Create a new module (and put it into the cache)

// Create a new node with the same markup as this node, containing

// Create a new regular expression:

// Create a new seed "view":

// Create a new set that contains the decorations in this set, minus

// Create a new state "view":

// Create a new state (table) "view":

// Create a new state based on this one, but with an adjusted set of

// Create a new state.

// Create a node in this schema. The `type` may be a string or a

// Create a node selection from non-resolved positions.

// Create a plugin that, when added to a ProseMirror instance,

// Create a properly sorted mark set from null, a single mark, or an

// Create a prototype which inherits from the parent prototype:

// Create a range of LineView objects for the given lines.

// Create a rope repesenting a sub-sequence of this rope.

// Create a rope representing the given array, or return the rope

// Create a seed "view":

// Create a set of decorations, using the structure of the given

// Create a slice from a fragment by taking the maximum possible

// Create a sparse array

// Create a state "view":

// Create a state (table) "view":

// Create a successful step result.

// Create a text node in the schema. Empty text nodes are not

// Create a text selection from non-resolved positions.

// Create a transaction that represents a set of new steps received from

// Create a view desc for the top-level document node, to be exported

// Create an empty matrix

// Create an input rules plugin. When enabled, it will cause text

// Create an inverted version of this map. The result can be used to

// Create an inverted version of this mapping.

// Create an inverted version of this step. Needs the document as it

// Create an iterator protocol-compliant object:

// Create and dispatch a cell selection between the given anchor and

// Create final data

// Create new object with different insertion order:

// Create placeholder (display only)

// Create placeholder element (display only)

// Create the `ndarray` to hold the density values:

// Create the code which accesses the nested array values and pushes them onto the flattened array.

// Create the function body...

// Create the function in the current scope to allow access to required modules:

// Create the function in the global scope:

// Create the nested for loops...

// Create the variables...

// Created with markText and setBookmark methods. A TextMarker is a

// Creates a [plugin](http://prosemirror.net/docs/ref/#state.Plugin)

// Creates a new popup.

// Creates a node decoration. `from` and `to` should point precisely

// Creates a plugin that enables the collaborative editing framework

// Creates a widget decoration, which is a DOM node that's shown in

// Creates an inline decoration, which adds the given attributes to

// Creating training sets for each tree:

// Crop output to the desired size (undo dynamic padding).

// Cross-Browser-Declarations.js

// Crude approximation of backspace behavior when no command handled it

// Crypto is kind of old and crusty.  Historically, its default string

// Ctrl-ScrollLock has keyCode 3, same as Ctrl-Pause,

// Cues

// Current position of a dropping element

// Current rendered range (may be bigger than the view window).

// Cursor-blinking

// Custom components can no longer be wrapped directly in React DnD 2.0

// Custom handling for React

// Custom operators are allowed

// Custom probabilities...

// Custom properties to hand to the react-virtualized list

// Custom resize handle

// Cut out early if the target id has not been set. This should prevent errors

// Cut out the part of the document between the given positions, and

// Cut out the sub-fragment between the two given positions.

// Cut walk short if the callback returned false

// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

// DEFAULT PROPERTIES //

// DISPLAY DRAWING

// DO NOT scroll if position is fixed

// DOCUMENT DATA STRUCTURE

// DOM APIs, for completeness

// DOM Element detected

// DOM resizing. Until the observe() method is used again.

// DOM structure.

// DOM, but sometimes—for example when interpreting an event

// DOMOutputSpec:: interface

// DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)

// DOT PRODUCT //

// Data buffer parameter...

// Date - signed 8 octets integer in nanoseconds with 0 indicating

// Dave Vedder <veddermatic@gmail.com> http://www.eskimospy.com/

// DayPicker props

// Debounce the scroll handler.

// Debug.formatArgs = formatArgs;

// DecimalEscape ::

// Decode a generalized variable-length integer into `delta`,

// Decode in chunks to avoid "call stack size exceeded".

// DecorationAttrs:: interface

// Decreate the stack depth

// Decrement the time by 1:

// Deep clone a language definition (e.g. to extend it)

// Deep merge modifiers options

// Default Infinity, but you can specify a max here if you like.

// Default false

// Default is 1; 0 means play indefinitely.

// Default options

// Default to positioning above (if specified and possible); otherwise default to positioning below

// Default true

// Default: invert lower gamma function

// Defaults to a function that uses the `searchQuery` string to search for nodes with

// Defaults to false.

// Defer requiring resize handler in order to support server-side rendering.

// Defer the first tick to end of the current frame; see d3/d3#1576.

// Define Generator.prototype.{next,throw,return} in terms of the

// Define a mask for the least significant 16 bits (low word): 65535 => 0x0000ffff => 00000000000000001111111111111111

// Define iterator

// Define some variables:

// Define the unified helper method that is used to implement .next,

// Define the variables and powers we'll need later on:

// Defines which resize handles should be rendered (default: 'se')

// Delay access of parentNode until mount.

// Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a

// Delete all callbacks for the node.

// Delete property as existing getters/setters prevent assigning value to specified property:

// Delete the content between the given positions.

// Delete the given range, expanding it to cover fully covered

// Delete the selection, if there is one.

// Delete the selection.

// Deletes the table around the selection, if any.

// Deletion

// Deletions on IE11 fire their events in the wrong order, giving

// Deliberately forget the last sent value so that we don't

// Deliver notifications in a separate cycle in order to avoid any

// Depending on the detected platform, this will hold

// Depending upon which approximation method we use, we may end up calculating either x or y initially (where y = 1-x):

// Deprecated

// Deprecated! Use color.formatHex.

// Derivative not set...

// Deselect elements when clicked outside selection path:

// Deserialize a JSON representation of a state. `config` should

// Deserialize a fragment from its JSON representation.

// Deserialize a mark from its JSON representation. This method is

// Deserialize a node from its JSON representation.

// Deserialize a node from its JSON representation. This method is

// Deserialize a slice from its JSON representation.

// Deserialize a step from its JSON representation. Will call

// Deserialize the JSON representation of a selection. Must be

// Destroy all remaining children in `this.top`.

// Destroy and remove the children between the given indices in

// Detach a line from the document tree and its markers.

// Detect buggy property enumeration order in older V8 versions.

// Detect columns from the first record

// Detect different values of attribute:

// Detect drag-and-drop

// Detect free variable `module`.

// Detect free variables `exports`.

// Detect whether transition may affect dimensions of an element.

// Determine `jx`, `jv`, `q0` (note that `q0 < 3`):

// Determine content and append type to types if necessary

// Determine effective options based on given values and defaults.

// Determine if the array can be stored contiguously:

// Determine if we should prevent the cursor being placed to the left/right of an atomic marker

// Determine rectangle on screen

// Determine the interval of `|x|` by comparing significand bits...

// Determine the minimum and maximum linear indices which are accessible by the array view:

// Determine the sign of the result...

// Determine the unique key used to identify each node and

// Determine whether a node can be dragged. Set to false to disable dragging on all nodes.

// Determine whether a node can be dropped based on its path and parents'.

// Determine whether a node can have children

// Determine whether we need to update the PRNG state:

// Determines whether an event happened in the gutter, and fires the

// Determines whether the given [context

// Determines whether the given node may be selected as a node

// Diagonal elements of covariance matrix...

// DirectEditorProps:: interface extends EditorProps

// Directives

// Disable scroll for every ancestor of this DateRangePicker up to the

// Disabled?

// Disambiguating between a `for` and a `for`/`in` or `for`/`of`

// Disjunction ::

// DiskStorage.js

// Dispatch a transaction. Will call

// Dispatch the end event.

// Dispatch the exception by looping back around to the

// Dispatch the start event.

// Dispatching OnDataAvailable Handler

// Distill `q[]` into `IQ[]` in reverse order...

// Distinguish coordinates nearer to the left or right side of the box

// Distributed under an MIT license: https://codemirror.net/LICENSE

// Divide the buffer into the required number of blocks

// Do a bulk-read of the DOM positions and sizes needed to draw the

// Do a few final mixes of the hash to ensure the last few

// Do not attach `id` column:

// Do not cache `Buffer.isEncoding` when checking encoding names as some

// Do nothing if current environment doesn't have the Element interface.

// Do nothing if element is already being observed.

// Do nothing if element is not being observed.

// Do nothing if observer doesn't have active observations.

// Do nothing if running in a non-browser environment or if listeners

// Do this check after everything has been initialized to find

// Dock to the bottom

// Dock to the left

// Dock to the right

// Dock to the top

// Does not start the time, just sets up the members needed.

// Does the actual updating of the line display. Bails out

// Doesn't consider line feeds a character.

// Doesn't do anything on an empty line.

// Doesn't do anything with non-empty selections.

// Doesn't matter what the args are here.

// Doesn't scan more than one line above to find a character.

// Don't adjust scroll offset for single-column grids (eg List, Table).

// Don't attach arbitrary props to DOM elements; this triggers React DEV warnings (https://fb.me/react-unknown-prop)

// Don't bother showing anything if we don't have to.

// Don't change direction for an axis unless scroll offset has changed.

// Don't clear visible cells from cellCache if isScrollingOptOut is specified.

// Don't compare cell sizes if they are functions because inline functions would cause infinite loops.

// Don't connect empty markers unless clearWhenEmpty is false

// Don't continue looking further up if the parent node

// Don't create more object URLs than needed:

// Don't do a replace if the drop happened inside of the selected text.

// Don't do anything if this is the top of the list

// Don't emit hover in `dragenter` on Firefox due to an edge case.

// Don't emit readable right away in sync mode, because this can trigger

// Don't enum bug & hidden keys

// Don't force a re-render if this is the case.

// Don't get fooled by e.g. browserify environments.

// Don't have enough

// Don't interfere with CellMeasurer's measurements by setting an invalid size.

// Don't leave long text in the textarea, since it makes further polling slow

// Don't let the range of [0,255] come back in [0,1].

// Don't measure (which forces) reflow for scrolls that happen inside of children!

// Don't move it if it there was no text before cursor

// Don't move static elements

// Don't move static items - we have to move *this* element away

// Don't overwrite if it already exists.

// Don't prematurely preventDefault() here since it might:

// Don't proceed if `reference` or `popper` are not valid elements

// Don't publish the source just yet (see why below)

// Don't render any of our Grids if there are no cells.

// Don't replace items with themselves

// Don't show a nice cursor but still prevent default

// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.

// Don't trust event.key in Chrome when there are modifiers until

// Don't un-render the overlay while it's transitioning out.

// Don't update scroll offset if the size is 0; we don't render any cells in this case.

// Don't use UCS-2

// Done because IE will fire a selectionchange moving the selection

// Dont loose time calling cast

// Don’t cache length as it changes during the loop

// Double check webkit in userAgent just in case we are in a worker

// Double the string:

// Drag and drop API functions

// Drag source

// Draggable support. This is always on, except for with placeholders.

// Dragging downwards

// Dragging upwards

// Draws a cursor for the given range

// Draws the given range as a highlighted selection

// Drop active composition after 5 seconds of inactivity on Android

// Drop all remaining descs after the current position.

// Drop empty labels in case of many levels for readability of plot:

// Drop empty open nodes

// Drop target

// Drop was cancelled

// Dropdown & Clear Icons

// Due to the fact that we still support jurassic IE versions, some

// Dummy constructor functions that we use as the .constructor and

// Duplex streams are both readable and writable, but share

// E.g. (0, 0x10).

// E.g. (0, 0xD855).

// E.g. (0xD855, 0xD866).

// E.g. (0xDCFF, 0xDDFF).

// E.g. (0xFFAA, 0x10FFFF).

// E.g. `[0, 11, 12, 16]` and we’ve added 5-15, so we now have

// E.g. `[0, 11]` and you add 5-15 → `[0, 16]`.

// E.g. `[0, 3]` and you add 3-6 → `[0, 7]`.

// E.g. for an element with content width of 314.2px it sometimes gives

// E.g. we have `[0, 11, 14, 31]` and want to remove 4-20

// E.g. we have `[0, 11, 40, 51]` and want to remove 0-10 → `[40, 51]`.

// E.g. we have `[0, 11]` and want to remove 4-20 → `[0, 4]`.

// E.g. we have `[0, 11]` and want to remove 4-6 → `[0, 4, 7, 11]`.

// E.g. we have `[40, 51]` and want to remove 0-100 → `[]`.

// EBML

// EBML variable sized integers

// EBML.js copyrights goes to: https://github.com/legokichi/ts-ebml

// EBMLReader returns CueClusterPosition with absolute byte offsets. The Cues section expects them as offsets from the first level 1 element of the Segment, so we need to adjust it.

// ECMAScript 6 symbols shim

// EDITOR CONSTRUCTOR

// ELEMENT_NODE

// ES2016

// ES6 + inline style port of JSONViewer https://bitbucket.org/davevedder/react-json-viewer/

// ES6 symbol

// ESTree requires null if it failed to instantiate RegExp object.

// EUCLIDEAN DISTANCE //

// EVENT HANDLING

// EXPORT //

// EXPORTS //

// EXTENSIONS

// Each scope gets a bitset that may contain these flags

// Eagerly determine array dimensions:

// Early error:

// Early return if no change after constraints

// Edge just doesn't move the cursor forward when you start typing

// Edge sometimes produces wrong names (Issue #3)

// EditorProps:: interface

// EditorView)` arguments, and should return true when they've handled

// Either a fixed row height (number) or a function that returns the

// Either find an existing desc that exactly matches this node,

// Either this is the first call, activity has stopped and we're at the

// Elements are added to these to represent selection and cursors.

// Else, if it continues in the row below, it has to be moved down

// Else, just replace `end` with a new value.

// Else, set sort direction to default direction.

// Emit and stringify the record if an object or an array

// Emit the csv

// Emit the header

// Emits a 'removeListener' event if and only if the listener was removed.

// Empty buffer means no match

// Empty function...

// Empty lines need to contain a single empty token, denoted with { empty: true }

// Empty space (in pixels) above the view

// Empty textblock

// Empty...

// End Types

// End the previous range and start a new one.

// Ensure a given position is not inside an atomic range.

// Ensure a non-zero initial state array:

// Ensure abstract typed array class has expected name:

// Ensure all markup that isn't allowed in the new node type is cleared

// Ensure at least a single node is present, for measuring.

// Ensure is a {from: {line, ch}, to: {line, ch}} object, and

// Ensure left-continuity:

// Ensure previous input has been read, so that the handler sees a

// Ensure readable listeners eventually get something

// Ensure that `\0` null escapes followed by number symbols are not

// Ensure that each array element is an array of the same size:

// Ensure that foreground and background color combinations meet WCAG2 guidelines.

// Ensure that the array is compatible with a single memory segment:

// Ensure that, if the cursor was in the whitespace at the start

// Ensure the current content ends with a newline.

// Ensure the editor is re-focused

// Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'

// Ensure the lineView.wrapping.heights array is populated. This is

// Ensure there's a token end at the current position, and that i points at it

// Ensure w is at least 1

// Ensure we are in an operation.

// Ensure we are not ending in a quoting state

// Ensures that nodes have the correct types.

// Eq Following 2.17:

// Equals -1 when dragged from external tree

// Equivalent of `typeof` but with special handling for array and regexp.

// Equivalent to (mult * (RANGE+1)) == range+1, but avoids overflow...

// Equivalent to push, but avoids a function call.

// Equivalent to setDelay(1000/fps).

// Error if any of these lifecycles are present,

// Error type raised by [`Node.replace`](#model.Node.replace) when

// Escape a quote

// Escape is only active inside quoted fields

// Escape sequences from echo and printf's manuals, and escaped quotes.

// Escape the given string so that it can safely appear in Markdown

// Estimate best version that can contain raw splitted segments

// Estimate x and y, using expm1 to get a good estimate for y when it's very small:

// Even if we are measuring initially- if we're inside of a MultiGrid component,

// Even if we were, there is another bug in Internet Explorer 10.

// Even number of elements, so must take the mean of the two middle values:

// Even number of escapes, potential closing delimiter found

// Event already had some effect

// Events can be reentrant (e.g., focus).

// Every position after the last character on a line is considered to stick

// Every written chunk gets output as-is.

// Everything else in the universe uses 'utf8', though.

// Examine the current node to see if it is a match

// Example:

// Example: `rotate(1.57rad) translateZ(0px)`;

// Examples (upper-case letters are RTL, lower-case are LTR):

// Exception thrown outside of any try block that could handle

// Execute the module function

// Exit as soon as no more matching pairs can be found.

// Exit as soon as no more possibly overlapping pairs can be found.

// Exit early for strings to avoid a performance hit in some environments.

// Exit early if `data` is an empty set.

// Expand the current node if it has descendants matching the search

// Expect a token of a given type. If found, consume it, otherwise,

// Experimental kludge to allow opt-in re-parsing of nodes

// Explicitly clear width/height before measuring to avoid being tainted by another Grid.

// Exploit the fact that the covariance matrix is symmetric...

// Exponentiation would yield a complex result...

// Export existing implementation if available.

// Export regjsgen.

// Export the tree component without the react-dnd DragDropContext,

// Exported until we deprecate this API completely

// Exports

// Expose `MapCache`.

// Expose options

// Expose public methods of ResizeObserver.

// Extend all selections (pos is an array of selections with length

// Extend the buffer to fill the data capacity of the symbol corresponding to

// Extend the primary selection range, discard the rest.

// Extend to a few very special cases...

// ExtendedAtom ::

// ExtendedAtom is defined in Apendix B of the ECMA-262 standard.

// ExtendedPatternCharacter ::

// Extending unicode characters. A series of a non-extending char +

// Extra arguments are stored as the mode's dependencies, which is

// Extract correlation coefficient from correlation matrix:

// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:

// Extract the exponent from `frac` and add it to `exp`:

// Extract the higher order word from `y`:

// Extract the more significant bits from |x|:

// Extract the plugin's state field from an editor state.

// Extract the sign bits:

// Extract the unbiased exponent of `x`:

// Extracts only enough buffered data to satisfy the amount requested.

// FIXME

// FIXME function decls are also not block scoped

// FIXME maybe descend mark views to parse a narrower range?

// FIXME remove this hack

// FIXME the assumption that this can always return the current

// FIXME this is all really shaky. might handle the few cases it needs to handle, but likely to cause problems

// FIXME this is no longer needed as of prosemirror-view 1.9.0,

// FIXME we'll need some awareness of text direction when scanning for selections

// FIXME: This should work even when animation is disabled.

// FIXME: untyped flow code, return any

// FMT sub-chunk

// FUNCTIONS //

// Fails unpredictably on IE[67] when mouse is dragged around quickly.

// Fall back to "prev" when the mode doesn't have an indentation

// Fall back to the tree data if something is being dragged in from

// Fall through means this is global

// Fall through...

// Fallback for IE8

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

// Fallback to WebAudio solution:

// Fallback to the singleton implementation

// Fallback: Return an object instance of the Buffer class

// Falsy arguments are ignored:

// Fast case, write everything using _writev()

// Fast path to cloning, since this is monomorphic

// Fast path: If `val` fits into a single byte, use that numeric value.

// Fatal error conditions

// Favor composition over inheritance to simplify IE10 support

// Feature-detect IE's crummy client rect reporting for bidi text

// Feature-detects support for .focus({preventScroll: true}), and uses

// Fed to the mode parsers, provides helper functions to make

// Fetch form values.

// Fetch the parser token for a given character. Useful for hacks

// Fetches a monochrome sprite bitmap for the specified text.

// Fields in the first line are converted as-is to columns

// Figure out how many digits to iterate towards:

// Figure out if it's a module code.

// Figure out the current label for each set. These can change

// Figure out what the coefficients are. They depend only on the degrees of freedom (Eq 57 of Shaw):

// Figure out which joinable points exist inside those ranges,

// Fill gap with whole-line-spans

// Fill in a browser-detected starting value on browsers where we

// Fill in the digit keys

// Filter out huge and non-finite arguments...

// Finally call hover on all matching targets.

// Finally the normal case:

// Finally, search either indexOf (if dir is true) or lastIndexOf

// Find a line map (mapping character offsets to text nodes) and a

// Find a line view that corresponds to the given line number.

// Find a piece of text in an inline fragment, overlapping from-to

// Find a position on the start spine of `this.unplaced` that has

// Find a set of wrapping node types that would allow a node of the

// Find a valid cursor or leaf node selection near the given

// Find a valid cursor or leaf node selection starting at the given

// Find all decorations in this set which touch the given range

// Find an ancestor of the given position that can be joined to the

// Find best mask pattern

// Find or generate a new layout.

// Find or generate the next layout

// Find out whether a line ends or starts in a collapsed span. If

// Find out whether the selection is at the end of a textblock when

// Find the (direct) child node after the given offset, if any,

// Find the (direct) child node before the given offset, if any,

// Find the DOM node that represents the document node after the

// Find the DOM position that corresponds to the given document

// Find the child nodes that still correspond to a single node,

// Find the cursor or leaf node selection closest to the end of the

// Find the cursor or leaf node selection closest to the start of

// Find the desc for the node after the given pos, if any. (When a

// Find the dimensions of the cell at the given position.

// Find the document position that corresponds to a given DOM

// Find the first position at which this fragment and another

// Find the first position, searching from the end, at which this

// Find the height above the given line.

// Find the index and inner offset corresponding to a given relative

// Find the left side of the cell at the given position.

// Find the line at the given vertical position, using the height

// Find the line object corresponding to the given line number.

// Find the longest line in the document.

// Find the nearest non-table offsetParent

// Find the next cell in the given direction, starting from the cell

// Find the node directly after the given position.

// Find the part of the input that is actually new

// Find the part that overlaps with the start of this text

// Find the position of the marker in the document. Returns a {from,

// Find the prefix of the mark set that didn't change

// Find the shortest column and use it.

// Find the table map for the given table node.

// Find the text in the focused node in the node, stop if it's not

// Find the top change event in the history. Pop off selection

// Find the view element corresponding to a given line. Return null

// Find the word at the given position (as returned by coordsChar).

// Find weighted center of x values:

// Finds a position at or around the given position where the given

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,

// Finds the line to start with when starting a parse. Tries to

// Finds the offset of the step map that mirrors the map at the

// Finish an AST node, adding `type` and `end` properties.

// Finish an operation, updating the display and signalling delayed events

// Finish node at given position

// Finish the basic string - if it is not empty - with a delimiter

// Fire change events, and delayed event handlers

// Fire events for markers that are hidden/unidden by editing or

// Firefox MediaRecorder API can't record CanvasCaptureMediaStream object.

// Firefox can dispatch this event in an infinite loop

// Firefox does NOT supports webp-encoding yet

// Firefox only cares if it's an image, but WebKit also wants it to be detached.

// Firefox returns bad results (the position before the space)

// Firefox sometimes fires spurious events for null/empty styles

// Firefox throws for this call in hard-to-predict circumstances (#994)

// Firefox want us to check `-x` and `-y` variations as well

// Firefox wants us to check `-x` and `-y` variations as well

// Firefox will raise 'permission denied' errors when accessing

// Firefox will sometimes return offsets into <input> nodes, which

// Firefox won't drag without setting data

// First base near 1 only:

// First check for and bypass all properly escaped delimieters

// First chunk just goes straight in the array...

// First coord is always 6

// First loop inlines imports

// First move into "page" coordinate system

// First rounding (good to 85 bits)...

// First term underflows so we need to start at the mode of the distribution and work outwards:

// First three values...

// First try a download, then web filesystem, then object URLs:

// First try the rectangular boxes...

// First, attempt with faster native method

// First, make 100% sure that any "autoEscape" chars get

// First, search the line map for the text node corresponding to,

// Fit width & height to aspect ratio

// Fitted value at x[ i ]:

// Fix #168

// Fix native

// Fix root xlink without namespace

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97

// Fix the given table, if necessary. Will append to the transaction

// Fix this if it occurs.

// Fix up .from in last (or move them into first in case of sameLine)

// Fix up .to properties of first

// Flag that indicates that lines might need to be redrawn

// Flag that indicates whether we expect input to appear real soon

// Flag the module as loaded

// Flags

// Flip the menu, render below

// Flip the signs of negative strides:

// Float - Big-endian, defined for 4 and 8 octets (32, 64 bits)

// Flow can't really figure this out, so we just use Object

// Flow casts this to Text | Element

// Flush if specified

// Focus the editor.

// Followed by a partially overlapping larger span. Split that

// Following conditions are required to handle Internet Explorer which

// Following steps can't be applied to the document's root element as its

// For ClassEscape

// For IE 6–8

// For IE11 support

// For IE9, immediately call onMonthTransitionEnd instead of

// For RegExp validation

// For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape

// For UTF-16LE we do not explicitly append special replacement characters if we

// For UTF-8, a replacement character is added when ending on a partial

// For big changes, we hide the enclosing element during the

// For block nodes, this represents the space taken up by their

// For boundary

// For characters with Shift JIS values from 0x8140 to 0x9FFC:

// For characters with Shift JIS values from 0xE040 to 0xEBBF

// For columns that have defined widths, but whose widths disagree

// For context during callback.

// For custom components provide additional, non-DOM, props;

// For deprecated behavior pass `useDeprecatedLogic` in options with true.

// For each code that doesn't have a shift-equivalent, copy the base name

// For each collection element, determine if we've seen the element before. If not, cache a reference which points to its location in the output array; otherwise, update the running count.

// For every power of `(RANGE+1)`, we determine a random factor:

// For example, "undefined" or "of type array"

// For high frequency updates (e.g. `resize` and `scroll` events), always

// For lockAspectRatio case

// For more info refer to issue #1028

// For more info refer to issue #395

// For more info see bvaughn/react-virtualized/issues/218

// For more info see issues #625

// For more information see https://github.com/bvaughn/react-virtualized/pull/124

// For node types where all attrs have a default value (or which don't

// For non-IE10 modern browsers

// For old IE

// For other targets, ask IE

// For parent boundary

// For positions that are have either a different cell or the end

// For projects implementing objects overriding `.prototype[Symbol.toStringTag]`

// For reasons explained above, we are also unable to use `setImmediate`

// For reference, this issue is further described here:

// For relative vertical movement. Dir may be -1 or 1. Unit can be

// For simplicity, if the timeout is short, just set a normal timeout.

// For small matrices, resort to naive multiplication.

// For some of the methods we can put tighter bounds on the result than simply [0,1]:

// For target boundary

// For target(html element) boundary

// For text nodes, this contains the node's text content.

// For the common JS build we will turn this file into a bundle with no imports.

// For the native GeneratorFunction constructor, the best we can

// For tokens that include more information than their type, the value

// For touch events, button will be undefined. If e.button is defined,

// For web workers, where supported

// Force a hex value to have 2 characters

// Force a number between 0 and 1

// Force a relayout, or Opera won't use our image for some obscure reason

// Force coersion to uint32. This will also coerce falsey/NaN values to 0.

// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>

// Force the update of observations.

// Force the view to cover a given range, adding empty view element

// Formatted table

// Found potential $, look for escapes, pos will point to

// From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words

// From here, the methods are part of the public interface. Most

// From http://w3c.github.io/media-source/webm-byte-stream-format.html#webm-media-segments

// From the spec: "Wait until any invocations of this algorithm started before this one have completed."

// Full overlap

// Function is symmetric, so invert it:

// Function keys

// Function to ensure that all data is rounded to 3 decimal places

// Function to invoke to create an ndarray:

// Function to round an element to 2 places

// Functions

// Functions to run when options are changed.

// Furthermore, the keydown event timestamp must be close to the compositionEndedAt timestamp.

// Gap in the middle

// Gather all decorations from the remaining marked children

// Gather the serializers in a schema's mark specs into an object.

// Gather the serializers in a schema's node specs into an object.

// Gecko will do odd things when the selection is directly in front

// Gecko, Trident, Chrome 34+

// Gecko, WebKit, Chrome <34

// GenStateExecuting and loop back for another invocation.

// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:

// General case:

// General grid attributes

// Generally it's better to avoid mutations, but it's good here for the sake of performance to avoid expensive index searches.

// Generate an integer index on the interval [0,i]:

// Generate an integer index on the interval: [0,i]

// Generate an object with additional props to be passed to the node renderer.

// Generate one layout item per child.

// Generated by CoffeeScript 1.12.2

// Generated using `npm run build`. Do not edit!

// Generated using `npm run build`. Do not edit.

// Generates a regular expression string based on an AST.

// Generates a string based on the given code point.

// Get Scroll Parent

// Get a [bookmark](#state.SelectionBookmark) for this selection,

// Get a rectangular area of cells from a slice, or null if the outer

// Get a {top, bottom, left, right} box (in line-local coordinates)

// Get all descendants

// Get all text between positions `from` and `to`. When

// Get and store the result in the stylesFnResultsCache for the component

// Get bounding client object

// Get cell positions for first row or first column

// Get consecutive differences and slopes

// Get degree-1 coefficients

// Get degree-2 and degree-3 coefficients

// Get first estimate for eta, see Eq 3.9 and 3.10, but note there is a typo in Eq 3.10:

// Get indices for rows that match the search conditions

// Get leading and trailing whitespace from a string. Values of

// Get new XY

// Get nodes adjacent to u...

// Get popper node sizes

// Get rid of `auto` `auto-start` and `auto-end`

// Get the _n_​th outgoing edge from this node in the finite

// Get the a ordered list of nodes that are touched by

// Get the active plugin with this key, if any, from an editor

// Get the bidi ordering for the given line (and cache it). Returns

// Get the child node at the given index, if it exists.

// Get the child node at the given index. Raise an error when the

// Get the child node at the given index. Raises an error when the

// Get the content match in this node at the given index.

// Get the content of this selection as a slice.

// Get the cost of the edge running from u to v.

// Get the current line

// Get the current time, if not already set.

// Get the decorations associated with the current props of a view.

// Get the document root in which the editor exists. This will

// Get the draggable source

// Get the first approximation for eta from the inverse error function (Eq: 2.9 and 2.10):

// Get the first matching node type at this match position that can

// Get the inner size

// Get the line number of the start of the next visual line after

// Get the line number of the start of the visual line that the

// Get the lines between from and to, as array of strings.

// Get the markdown string for a given opening or closing mark.

// Get the marks after the current position, if any, except those

// Get the marks at this position, factoring in the surrounding

// Get the maxWidth that the image could be resized to.

// Get the middle index:

// Get the min version that can contain data

// Get the next edit

// Get the next highest power of 2 to prevent increasing hwm excessively in

// Get the next word of "raw"/untempered state:

// Get the node directly after the position, if any. If the position

// Get the node directly before the position, if any. If the

// Get the node elements of the hovered DropTargets

// Get the nodes that match the search criteria. Used for counting total matches, etc.

// Get the part of a document between two positions, as an array of

// Get the plugin's state from an editor state.

// Get the previous edit

// Get the previous line

// Get the rectangle spanning the two given cells.

// Get the set of nodes reachable by null edges from `node`. Omit

// Get the size of the current dimension:

// Get the source client offset

// Get the spans that 'stick out' on both sides

// Get the standard deviation through the helper function

// Get the step map that represents the changes made by this step,

// Get the styles interface, theme, and direction from context

// Get the version up to which the collab plugin has synced with the

// Get vertical middle

// GetRecorderType.js

// Gets a hash of the given object in an array order-independent fashion

// Gets the maximum area that the element is visible in due to any number of

// Getters

// GifRecorder.js

// Give a chance for events to be registered later

// Give beforeSelectionChange handlers a change to influence a

// Give up, the result is false

// Given a MIME type, a {name, ...options} config object, or a name

// Given a base color and a list of possible foreground or background

// Given a change object, compute the new set of marker spans that

// Given a line object, find its line number by walking up through

// Given a list of EBMLElementBuffers, returns their encoded size in bytes

// Given a mode and a state (for that mode), find the inner mode and

// Given a mode spec (anything that resolveMode accepts), find and

// Given a mouse event, find the corresponding position. If liberal

// Given a pair of viewport coordinates, return the document

// Given a position in the document model, get a bounding box of the

// Given a prepared measurement object, measures the position of an

// Given a range of code points, add any case-folded code points in that range

// Given a set of bindings (using the same format as

// Given a set of marks, create a new set which contains this one as

// Given a string or object, convert that input to RGB

// Given an x,y position on the editor, get the position in the document.

// Given two same-length, non-empty fragments of inline content,

// Go through each item we collide with.

// Go through, add to meanTable by indexing factor[i]

// Go thru each child

// Goes over the values of a prop, first those provided directly,

// Gradually converging on a scrollTop that is within the bounds of the new, smaller height.

// Great, nothing to do

// Grid Dimensions

// Group transforms that occur in quick succession into one event.

// GroupName ::

// GroupName[U] ::

// GroupSpecifier ::

// GroupSpecifier[U] ::

// Guard against AutoSizer component being removed from the DOM immediately after being added.

// HACK This method signature was intended for Grid

// HACK:

// HACK: Apply position adjustment

// HACK: MouseEvent does not have `which` from flow-bin v0.68.

// HACK: To get `react-draggable` state x and y.

// HAMMING DISTANCE //

// HELPER FUNCTIONS

// HIGHLIGHT WORKER

// HTML DOM and SVG DOM may have different support levels,

// Hack for Safari bug with mix-blend-mode with z-index

// Handle +-0...

// Handle Input Change

// Handle UTF BOM

// Handle `+-0`

// Handle `QuantifiableAssertion Quantifier` alternative.

// Handle a key from the keydown event.

// Handle a key from the keypress event

// Handle bounds / percentage checking to conform to CSS color spec

// Handle edge case where column or row count has only just increased over 0.

// Handle empty string

// Handle floating point rounding errors

// Handle infinities...

// Handle invocations in a tight loop.

// Handle other cases based on DOM element used as boundaries

// Handle rounding errors:

// Handle string cases:

// Handle the basic code points

// Handle the basic code points: let `basic` be the number of input code

// Handle the case where overwriting a selection by typing matches

// Handle the interaction of a change to a document with the editor

// Handle the last few bytes of the input array

// Handle trivial cases first...

// Handle unary operators:

// Handle viewport case

// Handling array of media queries

// Height of sub-rectangle of source image in the destination context

// Helper class for incrementally updating a tree of mark descs and

// Helper for creating a schema that supports tables.

// Helper for defining the .next, .throw, and .return methods of the

// Helper for deleting text near the selection(s), used to implement

// Helper for generating column width

// Helper for iterating through the nodes in a document that changed

// Helper to get the selected rectangle in a table, if any. Adds table

// Helper to test if a character is a space or a line delimiter

// Helper used to collapse a small branch into a single leaf.

// Helpers used when computing which overlapping collapsed span

// Here we are inside a tag, and not inside a JSX context.

// Here we depart from the documented algorithm, in order to avoid

// Here we make sure to give as "start" the element that comes first in the DOM

// Here we might have entered a JSX context inside a tag

// Here we might have left a JSX context inside a tag

// Here's how this works:

// Here-document with quotes around the tag

// Hey, this item has a data-grid property, use it.

// Hide cleanup logic when:

// High word of |x|:

// Highlight variable names as variables in for and select beginnings.

// Highlight variable names as variables in the left-hand part

// Historically this was determined using the inclusiveLeft/Right option, but the new way to control it

// Hit start of document

// Holds `true` when a

// Holds info about a single rendered line when it was rendered

// Hook into react-dnd state changes to detect when the drag ends

// How a prop is resolved depends on the prop. Handler functions are

// However if we are scaling scroll positions and sizes, we should also avoid caching.

// However, `flush` does not make any arrangements to be called again if an

// However, even in such a pathological case, only a single written chunk

// However, if we ever elect to use timers in Safari, the prevalent work-around

// However, if we're not ended, or reading, and the length < hwm,

// However, since this timer gets frequently dropped in Firefox

// However, some cases require setting options to different

// Hypothesis

// I hope you're setting the data-grid property on the grid items

// I'm hackily redefining below. TODO: remove this and change to d3.schemeCategory10

// ID is nice to have for callbacks

// ID to attach to its JSON representation. Use this method to

// IDNA Support: Returns a punycoded representation of "domain".

// IE 10+ (native saveAs)

// IE 11

// IE 8 does not throw here

// IE 8 has a broken gOPD

// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')

// IE 8- don't enum bug keys

// IE < 10 will throw when accessed while the page is loading or in an iframe.

// IE > 9 and Edge will throw when accessed in an iframe if document.body is unavailable.

// IE and Edge may throw an "Unspecified Error" when accessing document.activeElement.

// IE and Edge's clipboard interface is completely broken

// IE does strange things with escape.

// IE doesn't fire input events, so we schedule a read for the pasted content in this way

// IE doesn't support MIME types in setData

// IE requires this to fire dragover events

// IE's approach to draggable

// IE10 10 FIX: Please, don't ask, the element isn't

// IE11 does not support Object.values

// IE11 gives us incorrect next/prev siblings for some

// IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified

// IE11 returns a seemingly empty object in some cases when accessing

// IE11 sometimes weirdly moves the DOM selection around after

// IE11 will insert a non-breaking space _ahead_ of the space after

// IE11 will sometimes (on backspacing out a single character

// IE8 returns string on undefined

// IE8 will throw if the textarea is display: none or not in DOM

// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>

// INFO: Apply x position by resize to draggable.

// INFO: Make uncontorolled component when resizing to control position by setPostion.

// INFO: To calculate parent width with flex layout

// INFO: To set bounds in `lock aspect ratio with bounds` case. See also that story.

// INFO: Use original width or height if set auto.

// ISINTEGER //

// ISOBJECT //

// Ideally, the image should not be wider than its containing element.

// Identifier node, we switch to interpreting it as a label.

// Identifier or keyword. '\uXXXX' sequences are allowed in

// IdentityEscape ::

// If :rangeStopIndex is not null it means we haven't ran out of unloaded rows.

// If <html> has a CSS width greater than the viewport, then this will be

// If _read pushed data synchronously, then `reading` will be false,

// If `check()` returns a value less than `ndims`, trim off the inconsistent dimensions:

// If `d >= MAX_VALUE`, we will overflow, as `EPS <<< 1`. To prevent overflow, we cap out at the maximum double-precision floating-point number...

// If `d` is `NaN` or `+infinity`, nothing we can do...

// If `n` exceeds the maximum number of feasible decimal places (such as with subnormal numbers), nothing to round...

// If `x == 0`, return the first coefficient...

// If `x` is an integer, the mod is an integer...

// If `x` is even, recognize that `(-b)**x == (b)**x`...

// If `|x|` is large enough, no decimals to round...

// If a `stack` property is present, copy it over...

// If a block node is selected, create an empty paragraph before (if

// If a box around the coordinates was found, use that

// If a higher row spans past our clone row, bump the higher row to cover this new row too.

// If a maxDepth is defined, constrain the target depth

// If a rejected Promise was yielded, throw the rejection back

// If a scroll is in progress- cache and reuse cells.

// If a task throws an exception, `flush` ensures that its state will remain

// If a transform is set, this functions sets the scale manually:

// If a type was specified, set the callback for the given type and name.

// If a valid location is found, mark it as the insertion location and

// If all else fails, fall back to the default

// If all steps originated with us, we're done.

// If an array does not contain any elements, then no data to store, and, if the array is unordered, adjacent array elements are not guaranteed to be stored next to each other.

// If an editor sits on the top or bottom of the window, partially

// If an exception is thrown from innerFn, we leave state ===

// If any have not yet been measured, then we need to render all columns initially,

// If any have not yet been measured, then we need to render all rows initially,

// If border: 0; -- iOS fails to open keyboard (issue #1287)

// If bottom box, sample from the tail...

// If by this time no drag source reacted, tell browser not to drag.

// If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.

// If child drag source refuses drag but parent agrees,

// If children change, also regenerate the layout. Use our state

// If closing to `$to` succeeded, create a step

// If columns have a dynamic width, scan the columns we are about to render.

// If context.method was "throw" but the delegate handled the

// If copying is enabled, a drop outside leaves behind a copy in the

// If debug isn't set in LS, and we're in Electron, try to load $DEBUG

// If divider is found, we divide the list of values and operands to divide

// If dom is outside of this desc's nodeDOM, don't count it.

// If dragging, use the exact width and height as returned from dragging callbacks.

// If e is null or undefined we interpret this as someone trying

// If enabled, skip leading hashbang line.

// If enqueue has been called before, then we want to wait until

// If estimated version is undefined, try with the highest version

// If eta is large we need to solve Eq 3.2 more directly, begin by getting an initial approximation for x from the last equation on page 155, this is a polynomial in u:

// If expecting a statement and finding a slash operator, parse a

// If input is already a tinycolor, return itself

// If input is an object, force 1 into "1.0" to handle ratios properly

// If input parms are invalid, return {"level":"AA", "size":"small"}

// If isScrolling is defined in props, use it to override the value in state

// If isScrollingOptOut is specified, we always cache cells.

// If it already exists, just return it.

// If it is a text node, use a range to retrieve the coordinates.

// If it is a widget, simply get the box for the whole widget.

// If it was supposed to be 128, this was already taken care of by `inputToRgb`

// If it's a functional component make sure we don't break it with a ref

// If it's an obj, this is a no-op.

// If it's not a number it's an operator, I guess

// If key is already selected, reverse sort direction.

// If maybeInvokeDelegate(context) changed context.method from

// If multiple nodes have the same key, the duplicates are added to exit.

// If new component APIs are defined, "unsafe" lifecycles won't be called.

// If no callback was specified, return the callback of the given type and name.

// If no children exist yet, just add the single newNode

// If no coefficients, the function always returns 0...

// If no context can be found, return early.

// If no scrollbar, the extra space is overflow:hidden anyway

// If no valid indices to add the node were found

// If no version is found, data cannot be stored

// If nodes within the same range have the same mark, returns the first node.

// If not provided a data buffer, create it; otherwise, see if we need to cast a provided data buffer to another data type or perform a copy...

// If not provided a shape, infer from a provided data source...

// If not specified, use min version as default

// If not, try to move the selected block closer to the next one in

// If nothing changed, bail.

// If obj.hasOwnProperty has been overridden, then calling

// If offsetParent is the reference element, we really want to

// If order doesn't matter, we need to sort our arrays

// If orientation is VERTICAL_SCROLLABLE and currentMonth has changed adjust scrollTop so the

// If our initial approximation is out of bounds then bisect:

// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.

// If parent changes height/width, set that in our state.

// If passed a ReactElement, clone it and attach this function as a ref.

// If pos == Pos(_, 0, "before"), pos and end are unchanged

// If pos.sticky == "before", that is around pos.ch - 1, otherwise around pos.ch

// If prop has been specified, do not change it

// If prop is specified in theme, use the theme setting

// If provided a PRNG state, we ignore the `seed` option...

// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.

// If provided an `Object`, return an equivalent primitive!

// If resizing, use the exact width and height as returned from resizing callbacks.

// If rows have a dynamic height, scan the rows we are about to render.

// If scrolling is controlled outside this component, clear cache when scrolling stops

// If shift is held or the extend flag is set, extends a range to

// If size has changed, let Grid know to re-render.

// If strarr[i] is a Token, then the match starts inside another Token, which is invalid

// If text is selected, wrap them in the characters

// If that fails, either increase the open score of the unplaced

// If the 'end' option is not supplied, dest.end() will be called when

// If the DOM position is in the content, use the child desc after

// If the `after` flag is true of there is no node before, make

// If the `typeof` operator returned something other than `object`, we are done. Otherwise, we need to check for an internal class name or search for a constructor.

// If the above failed, fall back to a more robust (and significantly slower) means for resolving underlying data types:

// If the absolute difference is `0`, then so is the relative difference:

// If the arguments for the last insert operation are different than this time,

// If the array element is not an array or is not the same size, we have found an inconsistent dimension:

// If the bit string is fewer than four bits shorter, add only the number of 0s that

// If the bit string is more than four bits shorter than the required number of bits,

// If the bit string is shorter than the total number of required bits,

// If the browser does not support passive event listeners, the normalized

// If the constructor has not already been created, create it; otherwise, return a memoized constructor...

// If the count is odd, append the current concatenated string:

// If the current position is the only possible place to add, add it

// If the cursor is in an empty textblock that can be lifted, lift the

// If the delegate iterator has a return method, give it a

// If the difference between window innerHeight and html clientHeight is more

// If the dispatched exception was caught by a catch block,

// If the drag ends and the tree is still in a mid-drag state,

// If the elapsed delay is less than our first sleep, start immediately.

// If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

// If the histories were shared, split them again

// If the image is not cropped.

// If the indices are "inbounds", then the buffer length is compatible:

// If the interface and theme haven't changed for this direction,

// If the last position in this node's children is less than the minimum index

// If the line isn't plain left-to-right text, first figure out

// If the max line changed since it was last measured, measure it,

// If the ndarray can be considered both "row-major" and "column-major", then use the default order; otherwise, use the ndarray's stated layout order...

// If the new MetadataSize is not the same as the previous iteration, we need to run once more.

// If the next node is a desc matching this widget, reuse it,

// If the next node is an atom, delete it

// If the node above has no content and the node below is

// If the node before is an atom, delete it

// If the node below has no content and the node above is

// If the node has children defined by a function, and is either expanded

// If the number is not octal format and starts with zero (e.g. `091`)

// If the number of input data characters is not a multiple of two,

// If the number of input digits is not an exact multiple of three,

// If the numbers changed, we must have introduced some slack. Record it for the next iteration.

// If the parent types match, and the entire node was moved, and

// If the previous statement did not throw an error, we can cache the constructor...

// If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword

// If the result is smaller than 25 lines, ensure that it is a

// If the result was falsy (returned from the newNode function), then

// If the result went down the correct path

// If the selection falls entirely in a child, give it to that child

// If the selection is empty and at the start of a textblock, try to

// If the selection is empty and the cursor is at the end of a

// If the selection is in a node whose type has a truthy

// If the state is not SCHEDULED, then we previously errored on start.

// If the statement does not start with a statement keyword or a

// If the target changes position as the result of `dragenter`, Firefox

// If the target node is not found, return the farthest traversed index

// If the textblock is all LTR, or the browser doesn't support

// If the theme or the interface changed, then there are some values

// If the theme prop is a function, assume the function

// If the touch move started as a scroll, or is is between the scroll angles

// If the user doesn't set a desired height,

// If the user indicated that "any" order suffices (meaning the user does not care about ndarray order), then we use the default order, unless the input ndarray is either unequivocally "row-major" or "column-major" or configured as such....

// If the user pushes more data while we're writing to dest then we'll end up

// If the user unpiped during `dest.write()`, it is possible

// If the user uses them, then switch into old mode.

// If there a node associated with this key, join and add it to update.

// If there is a $ sign at the beginning highlight $(( and )) as variable

// If there is an @ in the hostname, then non-host chars *are* allowed

// If there is enough space above the collision to put this element, move it there.

// If there is no $ sign at the beginning highlight (( and )) as punctuation

// If there is no 'error' event listener then throw.

// If there is no node after this, there's nothing to do

// If there is no node before this, try to lift

// If there is not (or the key is a duplicate), add it to enter.

// If there was a month transition, do not update the focused date until the transition has

// If this cell starts in the row above, simply reduce its rowspan

// If this collides with anything, move it.

// If this component is being rendered server-side, getScrollbarSize() will return undefined.

// If this component was first rendered server-side, scrollbar size will be undefined.

// If this desc be updated to match the given node decoration,

// If this is a sortable header, clicking it should update the table data's sorting.

// If this is a strict mode function, verify that argument names

// If this is non-null, this item is the start of a group, and

// If this is part of a col-spanning cell

// If this is static and collides with other statics, we must move it down.

// If this is static and not explicitly enabled as draggable,

// If this is the final location in the path, return its changed form

// If this is the firstTime sort of this column, use the column default sort order.

// If this is the target depth for the insertion,

// If this isn't the first part, the part's start is also after

// If this item is the inverse of a previous mapping on the stack,

// If this looks like the effect of pressing Enter (or was recorded

// If this node is part of the path, but has no children, return the unchanged node

// If this node shared a dispatch with the previous node,

// If this node shared tween with the previous node,

// If this position falls inside a col-spanning cell

// If this starts with whitespace, and there is no node before it, or

// If token.content is an array, increase the stack depth and repeat this while-loop

// If true, an external element can trigger onDrop callback with a specific grid position as a parameter

// If true, grid items won't change position when being dragged over.

// If true, the container height swells and contracts to fit contents

// If true, will not render children until mounted. Useful for getting the exact width before

// If true, will only allow width/height to move in lockstep

// If u flag is given, this returns the code point at the index (it combines a surrogate pair).

// If we are called as a function, call using new instead

// If we are provided an "external" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.

// If we are re-measuring a cell that has already been measured,

// If we call `asap` within tasks scheduled by `asap`, the queue will

// If we didn't find any constructors, this could be due to 1) we have yet to create the constructor or 2) we have been provided invalid options. Either way, let's attempt to create an ndarray constructor...

// If we don't know, then assume that we are waiting for one.

// If we encounter an escaped % then don't increase the array index

// If we end up here, we have a case like /\91/. Then the

// If we get here before consuming all the bytes, then that is a

// If we get here then a and b are very different in magnitude and we need to use the third of Temme's methods which involves inverting the incomplete gamma.  This is much more expensive than the other methods.  We also can only use this method when a > b, which can lead to cancellation errors if we really want y (as we will when x is close to 1), so a different expansion is used in that case.

// If we have a new scroll target OR if height/row-height has changed,

// If we have a remainder, run a clean-up loop...

// If we have nothing in the buffer, then we want to know

// If we have yet to determine array strides, we assume that we can compute the strides, along with the index offset, for a **contiguous** data source based solely on the array shape and specified memory layout order...

// If we haven't visited v yet OR if the current known cost from s to

// If we need to scroll a specific position into view, do so.

// If we overflow, return `x`, as the number of digits to the right of the decimal is too small (i.e., `x` is too large / lacks sufficient fractional precision) for there to be any effect when rounding...

// If we return false, then we need a drain event, so set that flag.

// If we searched the string to no avail or if the first letter is not `/`, assume that the string is not of the form `/[...]/[guimy]`:

// If we tried to read() past the EOF, then emit end on the next tick.

// If we're asking for more than the current hwm, then raise the hwm.

// If we're colliding, we need adjust the placeholder.

// If we're copying a row with rowspan somewhere, we dont want to copy that cell

// If we're in a region where the first derivative is very large, then we have to take care that the root-finder doesn't terminate prematurely.  We'll bump the precision up to avoid this, but we have to take care not to set the precision too high or the last few iterations will just thrash around and convergence may be slow in this case. Try 3/4 of machine epsilon:

// If we're in an ES6 environment, make parsers iterable

// If we're not dragging and we've moved a little, that counts as a drag start

// If we've already got an array, just append.

// If whitespace has to be expelled from the node, adjust

// If x < 2, use lgamma(x) = lgamma(x+1) - log(x)

// If x equals 1 or 2, return 0

// If you change this, be sure to update your css

// If you do this, be careful of constraints

// If you just need a quick toggle

// If you need that behavior, use WidthProvider.

// If you use Resizable directly, you are responsible for updating the child component

// If you want the commands defined in this module to apply to your

// If |x| < 2**-70, return -ln(|x|)

// If |x| >= 2**52, must be -integer

// Ignore comments starting with { to privilege string interpolation highlighting

// Ignore hidden nodes by only advancing the index counter to the returned treeIndex

// Ignore mutations inside nodes that were already noted as inserted

// Ignore non-index properties.

// Ignore selections

// Ignore special case target method

// Ignore static items

// Ignore the error -- the null return will be explanation enough

// Ignore the finally entry if control is not jumping to a

// Ignore the tree depth of the source, if it had any to begin with

// Ignore this hover if it is at the same position as the last hover

// Implement an async ._write(chunk, encoding, cb), and it'll handle all

// Implementation inspired from scikit

// Implementation of `Transform._flush`

// Implementation of `Transform._transform`

// Important!

// In "safe" casting mode, only casts which preserve values are allowed...

// In Autoplay the focus stays on clicked button even after transition

// In IE11 calling Object.defineProperty has a side-effect of evaluating the

// In Safari, onKeyDown does not consistently fire ahead of onChange. As a result, we need to

// In `return` (and `break`/`continue`), the keywords with

// In a transform stream, the written data is placed in a buffer.  When

// In a web browser, exceptions are not fatal. However, to avoid

// In a wrapped line, rtl text on wrapping boundaries can do things

// In an empty block. If this is a nested list, the wrapping

// In an empty parent, return the empty array

// In case `e.target.value` is a percentage remove the `%` character

// In case of HTML, we need a different computation

// In case the main (bottom right) Grid has a scrollbar

// In cases where **relatedTarget** is not null, it points to the right

// In cases where the parent is fixed, we must ignore negative scroll in offset calc

// In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.

// In deferred mode, cells will be initially rendered before we know their size.

// In each of the following, we further reduce to [-π/4,π/4)...

// In email addresses, only the domain name should be punycoded. Leave

// In firefox, if the cursor is after but outside a marked node,

// In order to ensure consistent ES5/ES6 behavior, cast input value to an object (strings, numbers, booleans); ES5 `Object.getPrototypeOf` throws when provided primitives and ES6 `Object.getPrototypeOf` casts:

// In pass 1, if the next node matches, or there is no next

// In relax mode, treat opening quote preceded by chrs as regular

// In some browsers (only in Firefox, actually) CSS width & height

// In some cases the user may want to override this behavior, e.g.

// In some cases with Chrome the selection is empty after calling

// In that event users should use the manual recompute methods to inform of changes.

// In that event we need to remeasure.

// In the Shift JIS system, Kanji characters are represented by a two byte combination.

// In the context of a TransitionGroup all enters are really appears

// In the nodes remaining in graph that have a known cost from s,

// In this case the cDU handler can't know if they changed.

// In this case we don't show any windowed cells at all.

// In this case we may have to restore a previously-specified scroll offset.

// In this case we should also update the scrollTop to ensure it stays visible.

// In this case we should avoid checking scrollingContainer.scrollTop and scrollingContainer.scrollLeft since it forces layout/flow.

// In this case we should scan backwards to try filling our :minimumBatchSize.

// In which Chrome does really wrong things when the down arrow is

// Includes support for = and + shortcuts

// Incomplete beta power term, combined with the Lanczos approximation:

// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,

// Increment record length if record size must not exceed a limit

// Increment the index by the child itself plus the number of descendants it has

// Incrementally adds only escaped chars, adding other chunks as-is

// Indent selected lines

// Indent the given line. The how parameter can be "smart",

// Index into `this.top`'s child array, represents the current

// Indicate success

// Indicate that the editor should scroll the selection into view

// Indicates whether the editor is currently [editable](#view.EditorProps.editable).

// Indicates whether the selection contains any content.

// Infer the array "order" from the stride array (this is supplementary to the `order` parameter):

// Info

// Info comes directly after SeekHead

// Information

// Information about the rendered lines.

// Inherit from the parent constructor:

// Init closest distances

// Initial look-ahead is used to prevent matching of blank selectors

// Initial w/h

// Initialize `jk` for double-precision floating-point numbers:

// Initialize active set to all predictors:

// Initialize empty function node.

// Initialize model parameters to zero:

// Initialize onScroll callback

// Initialize onScroll callback.

// Initialize sections:

// Initialize state variables...

// Initialize the coordinates using the client offset

// Initialize the full coordinates

// Initialize the hash

// Initialize the internal PRNG state:

// Initialize the iteration index:

// Initialize the remaining state array elements:

// Initialize the self timer when the transition is created.

// Initialize the shape/dimensions array:

// Initialize the shuffle table...

// Initialize the state

// Initialize the tween, deleting null tween.

// Initialize token array:

// Initially we should not clearStyleCache

// Inlined Object.is polyfill.

// Input data characters are divided into groups of two characters

// Input data has to be sorted:

// Input must be lineSpace-local ("div" coordinate system).

// Inputs and textareas should be selectable

// Insert `n` at position `i` of the output

// Insert empty pages at the correct locations:

// Insert indentation character at caret

// Insert tab character at caret

// Insert the given array of lines at offset 'at', count them as

// Insert the given content at the given position.

// Insert the given set of cells (as returned by `pastedCells`) into a

// Insert the newNode at the insertIndex

// Insert the node as a newly created node desc.

// Inspect all tables in the given state's document and return a

// Inspired by https://github.com/garycourt/murmurhash-js

// Instead, small slices are taken. They're taken in order because sequential memory accesses are fastest.

// Instead, we periodically shift 1024 tasks off the queue.

// Int64BE() style

// Int64BE(buffer, offset) style

// Int64BE(buffer, offset, value, raddix) style

// Int64BE(value, raddix) style

// Intentionally not documented for this reason.

// Interface

// Interleave the data and error correction codewords from each block

// Intermediate scroll position, not pushed to DOM yet

// Internal state

// Internet Explorer and Edge do not support colors.

// Interpolate

// Interpolate pairs of numbers in a & b.

// Interpret and default an options object

// Interrupt the active transition, if any.

// Invalid dates are coerced to `NaN`.

// Invalid ranges are not set to a default, so can range check early.

// Invalid row heights likely mean invalid cached content as well.

// Investigation required

// Invoke a callback for all descendant nodes between the given two

// Invoke a callback for all descendant nodes recursively between

// Invoke hover for drop targets when source node is still over and pointer is outside

// Invoke the leading edge.

// Invokes callbacks only when their values have changed.

// Invokes onSectionRendered callback only when start/stop row or column indices change

// Is firebug? http://stackoverflow.com/a/398120/376773

// Is firefox >= v31?

// Is not required, so just run typeValidator.

// Is this a sample from the wedges?

// Is webkit? http://stackoverflow.com/a/16459606/376773

// Isolate the least significant 16-bits:

// Isolate the significand bits of `x`:

// Issue #867 / https://bugs.chromium.org/p/chromium/issues/detail?id=903821

// It also indexes by height, and is used to convert between height

// It also neatly avoids a situation where render() returns null

// It can span multiple lines.

// It cannot have indented content unless it ended with a semicolon

// It could be a `General_Category` value or a binary property.

// It is also done this way as a slight performance increase instead of using a

// It is an ugly unfortunate mess of history.

// It is best to copy the component in `node-renderer-default.js` to use as a base, and customize as needed.

// It is best to copy the component in `placeholder-renderer-default.js` to use as a base,

// It is not possible to accurately assert the low surrogates aren’t

// It is not sufficient to assign `setImmediate` to `requestFlush` because

// It is possible to parse multiple files into a single AST by

// It may be the case that prevChunk completely surrounds nextChunk, so take the

// It must end with a comma or an accolade or have indented content.

// It only converts parts of the domain name that

// It seems a linked list but it is not

// It was modified only if it started with a tab

// It will have a hard-coded width/height from the previous measurement.

// It will pass a snapshot value to did-update though.

// It's possible the portal props have been changed in response to window resizes

// Item is new...

// Item was edited...

// Iterate from the end of the fragment and array of descs to find

// Iterate over each child and their descendants and return the

// Iterate over the data per `(start, end)` pair.

// Iterate over the document. Supports two forms -- with only one

// Iterate over the logical lines that make up this visual line.

// Iterate over the remaining centers

// Iterates over parent nodes, returning the closest table node.

// Iterator interface in terms of a single ._invoke method.

// Iterator will provide entry [k,v] tuples rather than values.

// Its name will be periodically randomized to break any code that

// Its name will be periodically randomized to break any code that depends on

// Its original children (resizable's child's children), and

// Its start and end offset

// Its type

// It’s not a `General_Category` value, so check if it’s a binary

// JIS X 0208 gives details of the shift coded representation.

// JSON-serialization identifier using

// JSONP chunk loading for javascript

// JSXEmptyExpression is unique type since it doesn't actually parse anything,

// Join the blocks around the given position. If depth is 2, their

// Join the joinable points

// Join the selected block or, if there is a text selection, the

// Join the selected block, or the closest ancestor of the selection

// Just because we received an event doesn't necessarily mean we need to collect drag sources.

// Just let it drag. It's a native type (URL or text) and will be picked up in

// Just like with React input elements, you have to update your

// Just remove `start` and `end`.

// Just replace `end` with a new value.

// Just replace `start` with a new value.

// Just replace `start`.

// Just return an object and let the conversion functions handle that.

// KEYMAP DISPATCH

// KNOWN ISSUE

// Keep it in case we implement the `cast_int` option

// Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]

// Keep this list in sync with production version in `./factoryWithThrowingShims.js`.

// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

// Keep track of references used before the corresponding group.

// Keep track of the number of matching nodes, so we know when the searchFocusOffset

// Key names may be strings like `"Shift-Ctrl-Enter"`—a key

// Keyword token types.

// Keywords from N4JS language spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html

// Kludge to allow the view to track mappings between different

// Kludge to kill 'control selection' in IE11 when selecting an

// Kludge to prevent 'maybelse' from blocking lexical scope pops

// Kludge to prevent issues due to the fact that the whole

// Kludge to work around Webkit not allowing a selection to start/end

// Kludge to work around directly nested list nodes produced by some

// Kludge to work around strange IE behavior where it'll sometimes

// Kludges for bugs and behavior differences that can't be feature

// Know that result is below the inflection point, so set an upper limit on search...

// Known modes, by name and by MIME

// L  M  Q  H

// L (L):   Left-to-Right

// L2NORM //

// LETTER size:

// LIFO order

// LINE DATA STRUCTURE

// LTR scrollbar

// Label for screenreaders, accessibility

// Labels in scope.

// Lanczos calculation:

// Last coord is always (size - 7)

// Last three values...

// Last time updated: 2019-06-21 4:09:42 AM UTC

// Last time updated: 2020-05-17 5:04:38 PM UTC

// Last two steps haven't converged, try bisection:

// Later on, put the first path part into the host field.

// Layout algorithm below always inserts into the shortest column.

// Lazily generate table...

// Leave only the sign bit of `y` turned on:

// Leave string untouched

// Legacy `process.binding('util')` for Node.js < 10.

// Legacy support for compactType

// Legacy support for verticalCompact: false

// Length is the combined lengths of all the buffers in the list.

// Let :focus outline show through

// Let componentDidMount fire to initialize the collected state

// Let the drag handler handle this.

// Let the image resize freely.

// Let the value of current attribute be the pivot:

// Lifecycle

// Lift the selected block, or the closest ancestor block of the

// Lightweight event framework. on/off also work on DOM nodes,

// Lightweight form of highlight -- proceed over this line and

// Like [`create`](#model.NodeType.create), but check the given content

// Like [`create`](#model.NodeType.create), but see if it is necessary to

// Like nodes, fragments are persistent data structures, and you

// Like the above, but a lot simpler.

// Limit chosen so that we use Temme's expansion only if the result would be larger than about 10^-6. Below that the regular series and continued fractions converge OK, and if we use Temme's method we get increasing errors from the dominant erfc term as it's (inexact) argument increases in magnitude.

// Limit the length of the path to the deepest possible

// Limit the number of operations to 100

// Line Feed <LF>

// Line Separator <LS>

// Line objects. These hold state related to a line, including

// Line widgets are block elements displayed above or below a line.

// Lines with gutter elements, widgets or a background class need to

// List markers in Mobile Safari will mysteriously disappear

// Listen to all scroll events, and filter them out inside of 'onScroll'

// Listen to wheel events in order to try and update the viewport on time.

// Load any children in the tree that are given by a function

// Load entry module and return exports

// Load in batches for speed.

// Load the document from the server and start up:

// Load the normalized high word into `|x|`:

// Lodash implementation of `get`

// LoneUnicodePropertyNameOrValue

// LoneUnicodePropertyNameOrValue ::

// Look up a handler for the given node. If none are found, return

// Look up the name of a key as indicated by an event object.

// Lookahead / Lookbehind

// Looks like a Safari bug: dataTransfer.types is null, but there was no draggable.

// Loop invariants: result < mult && mult <= range

// Loop over possible expansion levels, starting with the

// Loop over the elements in the view, syncing cur (the DOM nodes

// Loop through the array, only incrementing a pointer when successive values are different. When a succeeding value is different, move the pointer and set the next value. In the trivial case where all array elements are unique, we incur a slight penalty in resetting the element value for each unique value. In other cases, we simply move a unique value to a new position in the array. The end result is a sorted array with unique values.

// Loop through x and y indices:

// Loop trough the offsets arrays and execute the operations

// Lots of redirections here, but not just that.

// Lower bound for our search:  We're not interested in denormalized answers as these tend to take up lots of iterations, given that we can't get accurate derivatives in this area (they tend to be infinite).

// Lower values (minimum = 1) produce better colors, 

// MAIN //

// MANHATTAN DISTANCE //

// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN

// METHODS //

// MIT License   - www.WebRTC-Experiment.com/licence

// MODEL COMPONENTS //

// MODULES //

// MRecordRTC.js

// MS Edge converts symbol values to JSON as {}

// MSB (most significant bit) is 1

// Main

// Main decoding loop: start just after the last delimiter if any basic code

// Main encoding loop:

// Main process

// Make 'in' and truthy checks like Boolean(set.constructor)

// Make `instanceof Error` still work for returned errors.

// Make a mock item so we don't modify the item here, only modify in moveElement.

// Make a shallow copy of x:

// Make a stdlib/stats/base/kernels package

// Make it easy to access colors via `hexNames[hex]`

// Make sum of weights equal to one:

// Make sure a table has at least the given width and height. Return

// Make sure a textblock looks and behaves correctly in

// Make sure all handlers get registered

// Make sure all nodes above this.open are finished and added to

// Make sure both matrices are the same size.

// Make sure data can be encoded

// Make sure our error handler is attached before userland ones.

// Make sure requested changes to :scrollLeft or :scrollTop get applied.

// Make sure scrollbar width isn't included in the rectangle

// Make sure that at the end of the operation the current cursor is

// Make sure the current stored marks or, if that is null, the marks

// Make sure the cursor isn't directly after one or more ignored

// Make sure the cursor isn't directly before one or more ignored

// Make sure the given line (left, top) to (left, bottom) doesn't

// Make sure the given line (left, top) to (right, top) doesn't cross

// Make sure the high surrogates aren’t part of a surrogate pair.

// Make sure the next range pair doesn’t overlap, e.g. `[0, 11, 12, 14]`

// Make sure the wrapping mark descs match the node's marks.

// Make sure we didn't create any zero-length spans

// Make sure we don't have a zero derivative:

// Make sure we render at least 1 cell extra before and after (except near boundaries)

// Make the grid:

// Make the head cell the first range, so that it counts as the

// Make the same message as V8.

// Make the same messages as V8.

// Manually shift all values starting at the index back to the

// Manually shove something into the read() buffer.

// Manually trigger blur event since not happening when pressing ENTER:

// Many host objects are `Object` objects that can coerce to strings

// Map a position through this mapping, returning a mapping

// Map a position through this mapping.

// Map the given functions over the elements of the rope, producing

// Map the set of decorations in response to a change in the

// Map this selection through a [mappable](#transform.Mappable) thing. `doc`

// Map this step through a mappable thing, returning either a

// Mappable:: interface

// Mapping from data types to underlying buffer constructors...

// Mapping from ndarray data buffer constructors to data types...

// Maps cell index to x coordinates for quick lookup.

// Margin between items [x, y] in px

// Mark the children that are directly touched by changes, and

// Mark this node as being the selected node.

// Mark views only support `dom` and `contentDOM`, and don't support

// MarkSpec:: interface

// Markdown/CommonMark text.

// Marks

// Marks applied to its children

// Marks applied to this node itself

// Marks that can't apply here, but will be used in children if possible

// Master-Element - contains other EBML sub-elements of the next lower level

// Match "@@ ... @@" coord lines in unified diff.

// Match a node type, returning a match after that node if

// Match all kinds of coord lines (prefixed by "+++", "---" or "***").

// Match anything that isn't a dot or bracket.

// Match coord lines in normal diff (starts with a number).

// Match the last word in the line

// Matches a whole line break (where CRLF is considered a single

// Matrix holding partial residuals:

// Maximum depth nodes can be inserted at. Defaults to infinite.

// May have to protect focused DOM from being changed if a composition is active

// Mean sum of squares

// Measure a bunch of lines, for browsers that compute

// Measurement can be split in two steps, the set-up work that

// Measurements for cells up to this index can be trusted; cells afterward should be estimated.

// Media Stream Recording API has not been implemented in chrome yet;

// MediaStreamRecorder.js

// Memoization reset

// Menu Component

// Menu List

// Menu Options

// Menu Portal

// Merge Utility

// Merge the list items into a single big item

// Merge the selected cells into a single cell. Only available when

// Merge this change into the last event

// Merge with the next item.

// Merge with user options

// Methods

// Might be a file drop, in which case we simply extract the text

// Might be a text scaling operation, clear size caches.

// Mimic the constructor's `return` behavior.

// Min/max capping

// Min/max size

// Minimal default mode.

// Minimum delay before invoking the update of observers.

// Misc. Instance Properties

// Mix 4 bytes at a time into the hash

// Mobile Device Detector

// Mobile Safari ignores { overflow: hidden } declaration on the body.

// Modal is handled separately at `onClick`

// Model a distorted quarter circle:

// Modification Functions

// Modifier key presses don't count as 'real' key presses for the

// Modifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or

// Modifiers have the ability to reset the current update cycle. The

// Modify this pair.

// Module

// Moment's isSame clones moment inputs and is a tad slow

// More lines tabbed than spaced? Assume tabs, and

// More lower-level change function, handling only a single document

// Most of the external API clips given positions to make sure they

// Most of the units rely on the orientation of the popper

// Most transforming methods return the `Transform` object itself, so

// Most types of statements are recognized by the keyword they

// Mostly taken from ReactPropTypes.

// Mounting

// Mouse Handlers

// Mouse is not clicked anymore...

// Move content from the unplaced slice at `sliceDepth` to the

// Move cursor behind the two swapped characters afterwards.

// Move dirty info to nearest node view

// Move each item that collides away from this element.

// Move it down, and keep moving it down if it's colliding.

// Move the element here

// Move the element left as far as it can go without colliding.

// Move the element to the dragged location.

// Move the element up as far as it can go without colliding.

// Move the end cursor by total number of characters added

// Move the end cursor by total number of characters removed

// Move the hidden textarea near the cursor to prevent scrolling artifacts

// Move the index i to the element in strarr that is closest to from

// Move the selection to the node wrapping the current selection, if

// Move the start cursor by number of characters added in first line of selection

// Move the start cursor if first line in selection was modified

// Move to one of the sub-trees:

// Move to the next token

// Move y into line-local coordinate space

// Moved around its parent to cover visible view.

// Moving out of the initial cell -- start a new cell selection

// Muaz Khan     - www.MuazKhan.com

// MultiStreamRecorder.js

// MultiStreamsMixer v1.2.2

// Multiple actions are dispatched here, which is why this doesn't return an action

// Multiple lines

// Multiply most significant byte of result by 0xC0

// Must be defined after the function pattern

// Must be the first iteration, pretend that we had a previous one at either min or max:

// Must force callback to be called on nextTick, so that we don't

// Must read oldChildren because children was tagged with -1

// Must use `global` or `self` instead of `window` to work in both frames and web

// MutationObservers are desirable because they have high priority and work

// MutationObservers, so we don't need to fall back in that case.

// N (ON):  Other Neutrals

// N1. A sequence of neutrals takes the direction of the

// N2. Any remaining neutrals take the embedding direction.

// NB: In an Electron preload script, document will be defined but not fully

// NFA is represented as an array of states, which are themselves

// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,

// NO OP

// NOTE:

// NOTE: 1 DOM access here

// NOTE: Auto-scrolling while dragging, and scrolling to the `searchFocusOffset` will be disabled.

// NOTE: Changing `searchMethod` will not update the search, but changing the `searchQuery` will.

// NOTE: DOM access here

// NOTE: Remove trailing semicolon to get an actual expression.

// NOTE: The ECMA-262 standard uses the term "Assertion" for /^/. Here the

// NOTE: These type checking functions intentionally don't use `instanceof`

// NOTE: This allows `yield import()` to parse correctly.

// NOTE: We are using a manual event listener here, because React doesn't

// NOTE: if Decorated is a Function Component, decoratedRef will not be populated unless it's a refforwarding component.

// NOTE: possibility of perf boost if key enumeration order is known (see http://stackoverflow.com/questions/18531624/isplainobject-thing).

// NOTE: this is almost always unequal. Therefore the only way to get better performance

// NOTE: we could also use typed-arrays to achieve the same end.

// NOTES //

// NaN

// Name the function so it is clearer in the documentation

// Native Symbol.

// Native event target might be the layout itself, or an element within the layout.

// Need `IQ[jz-1]` to determine `n`...

// Need re-computation...

// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595

// Need to get it back to the parent

// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1

// Need to set a minimum width to see the scrollbar on IE7 (but must not set it on IE8).

// Need to wrap the cursor in mark nodes different from the ones in the DOM context

// Needed for dndManager

// Needed to hide big blue blinking cursor on Mobile Safari (doesn't seem to work in iOS 8 anymore)

// Needs to be removed:

// Negative look-ahead prevents from matching things like String.capitalize

// Negative numbers represent not expansion over the whole node at

// Neutral.

// Never forget.

// New behavior only for users of `prop-types` package

// New steps are defined by creating classes that extend `Step`,

// New's precedence is slightly tricky. It must allow its argument to

// Newer versions of React will ignore that lifecycle if gSBU exists.

// Newer versions of React will ignore these lifecycles if gDSFP exists.

// Newton-Raphson iteration of a polynomial case, choice of seed value is taken from Shaw's online supplement:

// Next line

// Next term is given by Eq 41:

// Next, remove those actual ranges.

// No casts between different data types are allowed in "none" or "equiv" casting modes...

// No closing delimter found.  Consume $ and continue.

// No collision? If so, we can go up there; otherwise, we'll end up moving down as normal

// No enough data

// No error code for this since it is a Warning

// No good/quick approximation for ln(b)*x, so we have to evaluate...

// No need to verify that "this.length <= MAX_UINT32" since it's a read-only

// No wrapping needed.

// No-op...

// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

// Node converts strings with length < 2 to ''

// Node strips out invalid characters like \n and \t from the string, base64-js does not

// Node takes equal signs as end of the Base64 encoding

// Node's code seems to be doing this and not & 0x7F..

// Node.js

// Node.js 0.10 has enumerable non-index properties on buffers.

// Node.js 0.8-

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:

// Node.js LazyTransform implementation, which has a non-trivial getter for

// Node.js specific (system errors)...

// Node: Export function

// NodeSpec:: interface

// NodeView:: interface

// Nodes are considered joinable when they are of the same type and

// Nodes are persistent data structures. Instead of changing them, you

// Nodes have their start and end characters offsets recorded in

// Non `Object` object instances with different constructors are not equal.

// Non object, non array...should be good?

// Non-binary properties:

// Non-normalized, just compute the power:

// Non-public interface for adding and removing lines.

// NonemptyClassRanges ::

// NonemptyClassRangesNoDash ::

// Normal behavior is to insert the new text into every selection

// Normal drop

// Normal selection, as opposed to text dragging.

// Normalize `ahx` by setting the (biased) exponent to `1023`:

// Normalize `x` or `x/2`...

// Normalize by dropping open parent nodes

// Normalize byteOffset

// Normalize byteOffset: negative offsets start from the end of the buffer

// Normalize option `bom`

// Normalize option `cast_date`

// Normalize option `cast`

// Normalize option `columns_duplicates_to_array`

// Normalize option `columns`

// Normalize option `comment`

// Normalize option `delimiter`

// Normalize option `eof`

// Normalize option `escape`

// Normalize option `from_line`

// Normalize option `from`

// Normalize option `header`

// Normalize option `info`

// Normalize option `ltrim`

// Normalize option `max_record_size`

// Normalize option `objname`

// Normalize option `on_record`

// Normalize option `quote`

// Normalize option `quoted_empty`

// Normalize option `quoted_match`

// Normalize option `quoted_string`

// Normalize option `quoted`

// Normalize option `raw`

// Normalize option `record_delimiter`

// Normalize option `relax_column_count`

// Normalize option `relax`

// Normalize option `rtrim`

// Normalize option `skip_empty_lines`

// Normalize option `skip_lines_with_empty_values`

// Normalize option `skip_lines_with_error`

// Normalize option `to_line`

// Normalize option `to`

// Normalize option `trim`

// Normalize option cast.bigint

// Normalize option cast.boolean

// Normalize option cast.date

// Normalize option cast.number

// Normalize option cast.object

// Normalize option cast.string

// Normalize options `trim`, `ltrim` and `rtrim`

// Normalize the input fraction:

// Normalize u by setting the exponent to 1023 (bias) => 0x3ff00000 => 0 01111111111 00000000000000000000

// Normalize u/2 by setting the exponent to 1022 (bias-1 => 2**-1 = 1/2) => 0x3fe00000 => 0 01111111110 00000000000000000000

// Normalize val

// Normalize x or x/2...

// Normalized Scroll Top

// Not Firefox/Chrome, or not in a text node, so we have to use

// Not available in IE8, Safari 5, etc.

// Not currently escaping and chr is a quote

// Not drawn yet

// Not in a cell, let the default behavior happen.

// Not running in a browser, provide a factory function

// Not sure about the optimal order of these conditions:

// Not used

// Note that all referencing and parsing is done with the

// Note that any invalid chars are also handled, but these

// Note that if you're doing a full-width element, this can get a little wonky if a scrollbar

// Note that invalid values may exist in this map so only rely on cells up to this._lastMeasuredIndex

// Note that simple async functions are implemented on top of

// Note that the save and find-related commands aren't defined by

// Note that this isn't fully fleshed out and won't error if you specify a layout that

// Note that this may be asynchronous, or synchronous.  Yes, it is

// Note that unlike typical NFAs, the edge ordering in this one is

// Note that we specify :rowCount, :scrollbarWidth, :sortBy, and :sortDirection as properties on Grid even though these have nothing to do with Grid.

// Note that, despite the name, this function is also used to check

// Note that, due to the fact that required nodes can always be

// Note that, since the stride is negative, this operation increments, not decrements, the offset...

// Note the actual delay is not known until the first callback!

// Note the transition may be canceled after start and before the first tick!

// Note this must be done before the tween are initialized.

// Note this must be scheduled before the start event; see d3/d3-transition#16!

// Note we do it here rather than later because Math.round(Infinity) causes deopt

// Note: *can* be more performant to use `getHighWord` and `getLowWord` directly, but using `toWords` looks cleaner.

// Note: 0 is a valid value, means "don't call _read preemptively ever"

// Note: 0 is a valid value, means that we always return false if

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:

// Note: Jan 18, 2016 status is that, 

// Note: The comments on the `throw` lines are intentional, they show

// Note: We intentionally don't use bit shift operators to en- and

// Note: ["return"] must be used for ES3 parsing compatibility.

// Note: `processTerm` mutates `tree` and `groups`.

// Note: `unicodeMatchPropertyValue` throws on invalid values.

// Note: `valueOf` is aliased as `toArray`.

// Note: cannot use `length < K_MAX_LENGTH` here because that fails when

// Note: cannot use `length < kMaxLength()` here because that fails when

// Note: cannot use `typeof` directly, as various browser engines incorrectly return `'function'` when operating on non-function objects, such as regular expressions and NodeLists.

// Note: order should match `ctors` order

// Note: property order matters in order to maintain consistency of PRNG "shape" (hidden classes).

// Note: see first and second post-conditions.

// Note: see third post-condition.

// Note: the `- 1` makes `end` inclusive.

// Note: the `\b` escape sequence for U+0008 BACKSPACE in strings has a

// Note: the loop starts at the next index.

// Note: this updates `state.lastStringValue` property with the eaten name.

// Note: we assume that an option value can be uniquely serialized to a `string` via `JSON.stringify()`...

// Note: we assume that an option value can be uniquely serialized to a `string` via `toString()`...

// Note: we cannot `return` just yet, in case any following pairs still

// Note: we ignore whether `options` has a `buffer` property

// Note: we only check for indices, as properties attached to a `String` object are properly detected as enumerable above.

// Note: we skip the first element, as no further swaps are possible given that all other indices are excluded from swapping...

// Note: we use an array to avoid unordered key look-up

// Note: we're mutating the monitor item here!

// Note: yes, we are precluding the `arguments` array-like object from having other enumerable properties; however, this should (1) be very rare and (2) not be encouraged (e.g., doing something like `arguments.a = 'b'`; in certain engines directly manipulating the `arguments` value results in automatic de-optimization).

// Nothing to do here.

// Notify application code

// Now an initial value for J, see 9.6: gammainc( u, b, regularized, upper )

// Now bring everything together to provide the result this is Eq 62 of Shaw:

// Now connect the enter nodes to their following update node, such that

// Now evaluate e2 and put it in terms[2]:

// Now get accurate coordinates for this place, in order to get a

// Now get total ss:

// Now iterate, we can use either p or q as the target here depending on which is smaller:

// Now make the mean by dividing by the sample size

// Now start adding in values

// Now that we have eta we need to back solve for x, we seek the value of x that gives eta in Eq 3.2. The two methods used are described in section 5. Begin by defining a few variables we'll need later:

// Now that whole lines for other patterns are consumed,

// Now we can start to pull things together and evaluate the sum in Eq 9:

// Now we have a guess for x (and for y) we can set things up for iteration.  If x > 0.5 it pays to swap things round:

// Now we have a portion which is definitely the auth.

// Now we need to compute the perturbation error terms that convert eta0 to eta, these are all polynomials of polynomials. Probably these should be re-written to use tabulated data (see examples above), but it's less of a win in this case as we need to calculate the individual powers for the denominator terms anyway, so we might as well use them for the numerator-polynomials as well. Refer to p154-p155 for the details of these expansions:

// Now we need to convert eta to the return value `x`, by solving the appropriate quadratic equation:

// Now we need to ensure that we start our iteration from the right side of the inflection point:

// Now we need to perturb eta0 to get eta, which we do by evaluating the polynomial in 1/r at the bottom of page 151, to do this we first need the error terms e1, e2 e3 which we'll fill into the array "terms".  Since these terms are themselves polynomials, we'll need another array "workspace" to calculate those...

// Now we need to remove `args[index]` since it's inlined in the `format`

// Now we want Jn from Jn-1 using Eq 9.6:

// Number keys

// Number of logical lines in this visual line

// Number of pixels added to scroller and sizer to hide scrollbar

// Number of tokens to delete and replace with the new match

// OK, starting slightly above the mode didn't work, we'll have to sum the terms the old fashioned way:

// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

// OR the last index of `val` in `buffer` at offset <= `byteOffset`.

// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

// Object keys are strings; this function returns numbers

// Object property

// Object type used to represent tokens. Note that normally, tokens

// Object used to store metadata properties for the transaction.

// Object used to track the context of a running parse.

// Object.prototype.hasOwnProperty.call

// Object/class getters and setters are not allowed to clash —

// Objects returned as node views must conform to this interface.

// Objects with no prototype (e.g., `Object.create( null )`) are plain...

// Objects...

// Obviously not all Emitters should be limited to 10. This function allows

// Offsets are the actual position the popper needs to have to be

// Offsets can be applied only to the popper element

// Often, we want to signal events at a point where we are in the

// Old behavior for people using React.PropTypes

// Old-fashioned briefly-focus-a-textarea hack

// Older IE's will not fire a second mousedown for a double click

// Older versions will require our polyfilled will-update value.

// On Android Chrome (version 56, at least), backspacing into an

// On Japanese input method editors (IMEs), the Enter key is used to confirm character

// On Safari, for reasons beyond my understanding, adding an input

// On any filesystem errors, revert to saving with object URLs:

// On each update cycle, the `modifiersData` property for each modifier

// On iOS, if we preventDefault enter key presses, the virtual

// On iOS, we can arrive at negative offsets by swiping past the start or end.

// On iOS, we can arrive at negative offsets by swiping past the start.

// On some browsers, horizontal scrolling will cause redraws to

// On some exotic environments, it's not clear which object `setimmediate` was

// On visiting object, check for its dependencies and visit them recursively

// Once a flush has been requested, no further calls to `requestFlush` are

// One or more draggable handles.

// One-char codes used for character types:

// Only IE requires us to explicitly say

// Only a small out of bounds step, let's assume that the result is probably approximately at minimum:

// Only allow octal numbers in the following. All matched numbers start

// Only checks the top-left point.

// Only do something if both the selection and a focused text node

// Only escape the characters between the `/`:

// Only flow one buffer at a time

// Only for Firefox

// Only invoke if we have `lastArgs` which means `func` has been

// Only leafs contains predicted category...

// Only methods need binding

// Only monitor this failure once because there tends to be a lot of the

// Only multiselects support value focusing

// Only normalize list elements when lists in the schema can't directly contain themselves

// Only pass through the highlightIndex attribute for custom components.

// Only perform the move when the mouse has crossed half of the items height

// Only prevent default scrolling if vertical scrolling is

// Only proceed if we have not handled it already.

// Only remove all elements from the sending user on the page:

// Only replace the old node if it's the one we set off to find children

// Only try wrapping nodes (pass 2) after finding a place without

// Only update non-fixed dimensions though to avoid doing unnecessary work.

// Oops zero derivative!!!

// Oops, under/overflow, sidestep if we can:

// Open a node of the given type

// Open the marks that need to be opened

// Open-Sourced: https://github.com/muaz-khan/MultiStreamsMixer

// Open-Sourced: https://github.com/muaz-khan/RecordRTC

// Opening tag

// Opera has no cut event... we try to at least catch the key combo

// Opera is difficult.

// Operations are used to wrap a series of changes to the editor

// Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic

// Operators are parsed inline in tiny state machines. '=' (61) is

// Operators. These carry several kinds of properties to help the

// Optimization -- avoid work if it's obvious that it's not needed.

// Optimization: double the size of the anti-log table so that we don't need to mod 255 to

// Optimization: we can break early if we know we're past this el

// Optimize some code when these features are not used.

// Optimize the case of one listener. Don't need the extra array object.

// Optimized case for simple insertion -- don't want to add

// Optimized version since JSX identifiers can't contain

// Optional information to store with the decoration. It

// Optional props

// Optional, but if you are managing width yourself you may want to set the breakpoint

// Optionally returns Black or White if the most readable color is unreadable.

// Optionally wire in some hacks into the token-rendering

// Or hovered above the same node but at a different depth

// Or just add it as a new desc.

// Or try updating the next desc to reflect this node.

// Order:

// Orders the modifiers based on their dependencies and `phase`

// Other browsers (eg. Safari) don't scroll as well without the help under certain conditions (DOM or style changes during scrolling).

// Other validations

// Others

// Otherwise people can pipe Writable streams, which is just wrong.

// Otherwise they will remain in their unloaded visual state.

// Otherwise, copy-on-write.

// Otherwise, evaluate the polynomial...

// Otherwise, if a null callback was specified, remove callbacks of the given name.

// Otherwise, if shift is active, also try the binding with the

// Otherwise, interpolate each of the numbers and rejoin the string.

// Otherwise, invert the direction of the sort.

// Otherwise, simply returns the range between the given positions.

// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).

// Otherwise, use various heuristics, falling back on the bias

// Otherwise, we need to guess the multiple

// Our model of the DOM might be outdated, in which case the range we try to set can be impossible

// Our recursive multiplication function.

// Our search algorithms find the nearest match at or below the specified offset.

// Outline the <`searchFocusOffset`>th node and scroll to it.

// Output any previously expelled trailing whitespace outside the marks

// Outputs a number of spans to make up a line, taking highlighting

// Over- or underflow if `x` is not close to unity...

// Overflow, return an arbitrarily large value:

// Overflows left

// Overflows right

// Override `__proto__` to avoid touching inherited accessors:

// Override magic textarea content restore that IE sometimes does

// Override the default component for rendering an empty tree

// Override the default component for rendering nodes (but keep the scaffolding generator)

// Overwrite previous entry so that undo will remove whole word

// Own action, clear page:

// Owners should only process actions from selected users:

// PLOT COMPONENTS //

// POSITION MEASUREMENT

// PROPERTIES //

// Pad minutes and seconds with zeroes:

// Padding inside the container [x, y] in px

// Parameterized commands

// Parse JSX text

// Parse a `for`/`in` and `for`/`of` loop, which are almost

// Parse a base-16 hex value into a base-10 integer

// Parse a class declaration or literal (depending on the

// Parse a document from the content of a DOM node.

// Parse a full expression. The optional arguments are used to

// Parse a function declaration or literal (depending on the

// Parse a list of variable declarations.

// Parse a program. Initializes the parser, reads any number of

// Parse a regular `for` loop. The disambiguation code in

// Parse a semicolon-enclosed block of statements, handling `"use

// Parse a single statement.

// Parse a string as [CommonMark](http://commonmark.org/) markup,

// Parse a ternary conditional (`?:`) operator.

// Parse an assignment expression. This includes applications of

// Parse an atomic expression — either a single token that is an

// Parse an object literal or binding pattern.

// Parse argument.

// Parse arrow function expression with given parameters.

// Parse binary operators with the operator precedence parsing

// Parse call, dot, and `[]`-subscript expressions.

// Parse function body and check parameters.

// Parse namespaced identifier.

// Parse next token as JSX identifier

// Parse object or class method.

// Parse template expression.

// Parse the input a second time.

// Parse the next token as an identifier. If `liberal` is true (used

// Parse unary operators, both prefix and postfix.

// ParseOptions:: interface

// ParseRule:: interface

// Parser

// Parses JSX closing tag starting after '</'.

// Parses JSX expression enclosed into curly brackets.

// Parses JSX opening tag starting after '<'.

// Parses a comma-separated list of expressions, and returns them as

// Parses a comma-separated list of module exports.

// Parses a comma-separated list of module imports.

// Parses any type of JSX attribute value.

// Parses assignment pattern around given atom if possible.

// Parses element name in any form - namespaced, member

// Parses entire JSX element from current position.

// Parses entire JSX element, including it's opening tag

// Parses following JSX attribute name-value pair.

// Parses import declaration.

// Parses lvalue (assignable) atom.

// Parses module export declaration.

// Parses spread element.

// Parses the content of the given DOM node, like

// Parses yield expression inside generator.

// Parsing Atom and ExtendedAtom together due to redundancy.

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)

// Pass the `paste` event to the textarea so it's handled by its event listener.

// Passed to option handlers when there is no old value.

// Patch up this.children to contain the composition view

// Pattern ::

// PatternCharacter ::

// Perform a change on the document data structure.

// Performance is most sensitive when a user is scrolling.

// Permission is hereby granted, free of charge, to any person obtaining a

// Permissive string parsing.  Take in a number of formats, and output an object

// PhantomJS 1.9 returns 'function' for `NodeList` instances (underscore #2236):

// PhantomJS 2 has enumerable non-index properties on typed arrays.

// Plain array or object...

// Pluck off n bytes from an array of buffers.

// Plug for library

// Plugin to make entity title show the real entity, idea by Roman Komarov

// PluginSpec:: interface

// Points are spread out enough to compute slope:

// Policy creation failed (most likely another DOMPurify script has

// Policy creation with duplicate names throws in Trusted Types.

// Poll for input changes, using the normal rate of polling. This

// Pop all selection events off the end of a history array. Stop at

// Pop matching opening tag

// Pop the latest event off the branch's history and apply it

// Popper 1 is broken in this case and never had a bug report so let's assume

// Populates the default ARIA attributes here.

// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86

// Pos objects returned contain a line object, rather than a line

// Position information for the previous token

// Position not-yet-measured cells at top/left 0,0,

// Position the mover div to align with the current scroll position

// Positioning them further to the right/bottom influences their measured size.

// Positions returned by coordsChar contain some extra information.

// Positions to delayed-check that yield/await does not exist in default parameters.

// Possible overflow, use Newton step:

// Possible string inputs:

// Possibly call back with layout on mount. This should be done after correcting the layout width

// Possibly expensive deep equality test for each corresponding key:

// Possibly split or suppress the update based on the presence

// Potentially lose a little bit of precision here, but will fix issues where

// Pre-cache these derived values for faster lookup later.

// Preact compat; see developit/preact-compat/issues/228

// Precompute and cache column styles before rendering rows and columns to speed things up

// Predecessor map for each node that has been encountered.

// Predicate that tests whether the next token is of the given

// Prefer anchoring to end when Backspace is pressed

// Prefer using a weak map to cache table maps. Fall back on a

// Prefix data with character count indicator.

// Prefixed by 4 spaces or 1 tab and preceded by an empty line

// Prepare DOM reads needed to update the scrollbars. Done in one

// Prepare data buffer

// Prepare scroll-on-drag options for this list

// Prepare the state for writing output (closing closed paragraphs,

// Prepare the table to be large enough and not have any cells

// Prepend BOM for UTF-8 XML and text/* types (including HTML). Note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF

// Prepend an array or other rope to this one, returning a new rope.

// Preserve indentation on inserting a new line

// Preserve the current layout if the current breakpoint is not present in the next layouts.

// Pressure v2.1.2 | Created By Stuart Yamartino | MIT License | 2015 - 2017

// Pretend we’ve set an alarm, if we haven’t already.

// Prevent browsers like Firefox from getting stuck in an infinite loop

// Prevent clicks in the scrollbars from killing focus

// Prevent default "drop and blow away the whole document" action.

// Prevent default delete behaviour

// Prevent focus change

// Prevent further manipulation of configuration.

// Prevent future logging when redrawing element:

// Prevent leaking memory for long chains of recursive calls to `asap`.

// Prevent normal selection in the editor (we handle our own)

// Prevent pointer events from interrupting a smooth scroll

// Prevent prototype setters from intercepting set as a this value.

// Prevent scrolling when touching the canvas on iOS in fullscreen mode:

// Prevent selection and cursors from interfering with the scroll

// Prevent the above loop from being discarded by the compiler...

// Prevent this from being ran twice

// Prevent wrapper from ever scrolling

// Prevents infinite loop

// Previous char was a valid escape char

// Primitive, Buffer, special class instance...

// Primitives and functions...

// Probably cancellation error, try a Newton step instead:

// Process exclusion ranges

// Promise = chunk loading, 0 = chunk loaded

// Promise.resolve without an argument throws an error in LG WebOS 2

// Prop type validation may throw. In case they do, we don't want to

// Propagate the number of consistent dimensions up the recursion chain...

// Propagate the scroll position to the actual DOM scroller

// Propagate to the linked documents

// Properly handle server-side rendering.

// Properties of the current token:

// Property accessors are not being used as they'd require to define a

// Props are configuration values that can be passed to an editor view

// ProseMirror document. So a document is an instance of `Node`, with

// ProseMirror to miss the change (see #930)

// Protect against keys like “__proto__”.

// Prototype `constructor` property must be a function (see also https://bugs.jquery.com/ticket/9897 and http://stackoverflow.com/questions/18531624/isplainobject-thing):

// Provide a helper to append the new data when it is received

// Provides data describing the editor's unconfirmed steps, which need

// Public alias.

// Pull a state from the table:

// Pull it together with Eq 9:

// Pull that off.

// Punctuation token types.

// Punctuation tokens.

// Pushes a set of steps (received from the central authority) into

// Put a matrix into the top left of a matrix of zeros.

// Put any non-null nodes that don’t fit into exit.

// Put any non-null nodes that fit into update.

// Put any null nodes into enter.

// Put any remaining data into enter.

// Put the new selection at the position after the inserted

// Put this after the other two cases because it simplifies the booleans

// Quantifier ::

// QuantifierPrefix ::

// Queries whether a given mark type is

// Query external layout logic for position of newly-measured cells

// Query whether the given position shares the same parent node.

// Query whether the view has focus.

// Quotes produce strings.

// R (R):   Right-to-Left

// RFC 2396: characters not allowed for various reasons.

// RFC 3490 separators

// RHL removes it sometimes

// RIFF chunk descriptor/identifier 

// RIFF chunk length

// RIFF type 

// RTL scrollbar (scrolling containers only)

// Radius will not decrease by a move to the right...

// Raise an unexpected token error.

// Rare case: chance is 1 in 12...

// Rarely used, but required for "toFilter()"

// Rather than returning an object with a next method, we keep

// RawTasks are recycled to reduce GC churn.

// Re-align line numbers and gutter marks to compensate for

// Re-assign `events` because a newListener handler could have caused the

// Re-compact the layout and set the drag placeholder.

// Re-create the same nodes with same attrs, dropping the node content.

// Re-set this, in case some other handler touched the

// Re-synchronize the fake scrollbars with the actual size of the

// React <= 16.2 does not support getSnapshotBeforeUpdate.

// React <= 16.2 does not support static getDerivedStateFromProps.

// React may warn about cWM/cWRP/cWU methods being deprecated.

// React v16.11 and below

// React v16.12 and above

// React's built version is broken: https://github.com/facebook/react/issues/4251

// React.addons.cloneWithProps look-alike that merges style & className.

// Read a JSX identifier (valid tag or attribute name).

// Read a single token, updating the parser object's token-related

// Read a slice of content from the clipboard (or drop data).

// Read a string value, interpreting backslash-escapes.

// Read an identifier or keyword token. Will check for reserved

// Read an identifier, and return it as a string. Sets `this.containsEsc`

// Read an integer in the given radix. Return null if zero digits

// Read an integer, octal integer, or floating-point number.

// Read and store the height of line widgets associated with the

// Read input from the textarea, and update the document to match.

// Read the actual heights of the rendered lines, and update their

// Readability Functions

// Reads a template token to search for the end, without validating any escape sequences

// Reads are expected to occur more frequently than writes in this case.

// Reads template string tokens.

// Rearrange xs and ys so that xs is sorted

// Reassemble:

// Rebasing/resetting history to deal with externally-sourced changes

// Rebuild the gutter elements, ensure the margin to the left of the

// Recall the negative decision to decide if the input must be parsed

// Receiving a mouse event in the middle of a dragging operation

// Recompute active set:

// Record a transformation in undo history.

// Record is a literal object

// Record is an array

// RecordRTC v5.6.1

// RecordRTC-Configuration.js

// RecordRTC.js

// RecordRTC.promises.js

// Recovery values encode a range index and an offset. They are

// Rectangle's properties are not writable and non-enumerable.

// Recursively compare arrays (susceptible to call stack limits).

// Recursively compare objects (susceptible to call stack limits).

// Recursively convert values (susceptible to call stack limits).

// Recursively examine nested elements:

// Recursively flatten arrays (susceptible to call stack limits).

// Recursively merge objects and arrays (susceptible to call stack limits).

// Recursively populate clone (susceptible to call stack limits).

// Redraw if hovered above different nodes

// Redraw the line's text. Interacts with the background and text

// Redraw the selection and/or cursor

// Reduce `x`...

// Reduce and compute `r = hi - lo` for extra precision.

// Ref: http://stackoverflow.com/a/26303918/552182

// Refactored to another module to make way for preval

// Refactoring modifiers' list (Object => Array)

// Reference to "MediaRecorder" object

// Reference: RFC 3986, RFC 1808, RFC 2396

// Referenced by utils/onScroll

// Reflects arrays of arrays = results

// Refresh the visible rows if any of them have just been loaded.

// Refs

// RegExpIdentifierContinue ::

// RegExpIdentifierName ::

// RegExpIdentifierName[U] ::

// RegExpIdentifierPart[U] ::

// RegExpIdentifierStart ::

// RegExpIdentifierStart[U] ::

// Regardless of whether this script is executing as a CommonJS module

// Register a change in the history. Merges changes that are within

// Register a change to a single line. Type must be one of "text",

// Register media query for full screen. Need to support resize from small to large

// Reject immediately following calls.

// Reject parenthesized strings.

// Relate to the binomial distribution and use a finite sum:

// Remaining children must be collected and rebuilt into the appropriate structure

// Remember pairs 'attribute-predicate-value' which provide gain...

// Remember that these lines changed, for updating the display

// Remove a DOM node and return its next sibling.

// Remove a mark or mark type from the set of stored marks.

// Remove a span from an array, returning undefined if no spans are

// Remove a subtree of the element tree that has been touched

// Remove ellipsis on spread property

// Remove listeners if controller has no connected observers.

// Remove marks from `hard_break` that are the last node inside

// Remove marks from inline nodes between `from` and `to`. When `mark`

// Remove observer if it's present in registry.

// Remove resize event listener on window

// Remove scroll event listener on scroll parents

// Remove selected node marking from this node.

// Remove spans that are empty and don't have a clearWhenEmpty

// Remove tab character at caret

// Remove the bias and return:

// Remove the n lines at offset 'at'.

// Remove the other, now redundant, item.

// Remove the passed in callback from the callbacks of the observed node

// Remove the placeholder:

// Remove the previously added `end` and the current `start`.

// Remove the sample observations:

// Remove the selected rows from a table.

// Remove the sign bits (i.e., get absolute values):

// Remove this mark from the given set, returning a new set. If this

// Remove this pair.

// Remove those targetIds that don't match the targetType.  This

// Remove unknown props, see also https://reactjs.org/warnings/unknown-prop.html

// Removes all marks and nodes from the content of the node at `pos`

// Removes the editor from the DOM and destroys all [node

// Removes the given mark from the set of active marks.

// Removes the marks that are not allowed in this node from the given set.

// Render PDF page into canvas context

// Render a block, prefixing each line with `delim`, and the first

// Render a line into the hidden node display.externalMeasured. Used

// Render a node's content as a list. `delim` should be the extra

// Render all cells visible within the viewport range defined.

// Render an [output spec](#model.DOMOutputSpec) to a DOM node. If

// Render list with react-virtualized

// Render list without react-virtualized

// Render only enough columns and rows to cover the visible area of the grid.

// Render the DOM representation of the text of a line. Also builds

// Render the contents of `parent` as block nodes.

// Render the contents of `parent` as inline content.

// Render the given node as a block.

// Render the node. Special case code marks, since their content

// Renderer process

// Renderers

// Repeat the given string `n` times.

// Repeatedly call function...

// Replace : with = if Property::transpile inserted the :

// Replace `[start, end]` with `[startA, endA, startB, endB]`.

// Replace `[start, end]` with `[startB, endB]`.

// Replace `end` with `rangeStart`.

// Replace `end` with the new value.

// Replace a decimal with it's percentage value

// Replace a range of the document with a given slice, using `from`,

// Replace format info bits with correct values

// Replace range from-to in an array of view descs with replacement

// Replace the current selection with the given slice.

// Replace the given range with a node, but use `from` and `to` as

// Replace the given range with the given content, which may be a

// Replace the given range, or the selection if no range is given,

// Replace the part of the document between `from` and `to` with the

// Replace the part of the document between the given positions with

// Replace the pulled state:

// Replace the selection with a placeholder.

// Replace the selection with a placeholder:

// Replace the selection with a slice or, if no slice is given,

// Replace the selection with the given node, appending the changes

// Replace the selection with the given node. When `inheritMarks` is

// Replace unitless items with px

// ReplaceError:: class extends Error

// Represent delta as a generalized variable-length integer

// Require that one and only one child be present.

// Required Props

// Required in this propTypes stanza because generateInitialState() will fail without it.

// Reset after measuring to avoid breaking styles; see #660

// Reset any `maxWait` timer.

// Reset background data for inserted slides:

// Reset cache. set it to {} in render

// Reset cell and style caches once scrolling stops.

// Reset delta2 so that this branch will *not* be taken on the next iteration:

// Reset initial offsets to be ignored in browser

// Reset isUserAction flag because we're not in the main collision anymore.

// Reset output for async (no inline) evaluation

// Reset state

// Reset the current text selection only if the click is done outside of the selection

// Reset the input to correspond to the selection (or to be empty,

// Reset the position again, as maybe only parts of the previous

// Reset the scroll position of the editor's parent nodes to that what

// Reset the selection to a single range.

// Resetting context._sent for legacy support of Babel's

// Resizable support. This is usually on but the user can toggle it off.

// Resize event listener on window

// ResizeObserver are tracking the same element and the callback of one

// ResizeObserver instance from receiving notifications of

// Resolve the given position in the document, returning an

// RestElement inside of a function parameter must be an identifier

// Restart recording after it stopped due to no voice input for a few seconds:

// Restart the timer.

// Restore image before line and redraw smoothed version:

// Restore original position

// Restore original prototype:

// Restore the previous selection

// Restriction by maximal depth of tree or size of training set is to small so we have to terminate process of building tree...

// Restricts resizing to a particular axis (default: 'both')

// Result is then an odd polynomial in v (see Eq 56 of Shaw)...

// Resume execution at the desired location (see delegateYield).

// Retrieve a metadata property for a given name or plugin.

// Retrieve and filter the old marked spans stored in a change event.

// Retrieve the current state index:

// Retrieve the element at the given position from this rope.

// Retrieve the value stored under `key`, or return undefined when

// Retry a maximum of 4 times when nonsense rectangles are returned

// Return a 3 character hex if possible

// Return a 4 character hex if possible

// Return a JSON-serializeable representation of this node.

// Return a debugging string that describes this fragment.

// Return a horizontal line in block context

// Return a map with the given content. If null, create an empty

// Return a map with the given key removed, if it existed.

// Return a new value having the same magnitude as `x`, but with the sign of `y`:

// Return a selection that does not partially select any atomic

// Return a string representation of this node for debugging

// Return a text selection that spans the given positions or, if

// Return a tuple with the error and the casted value

// Return a valid alpha value [0,1] with all invalid values being set to 1

// Return an augmented `Uint8Array` instance

// Return an augmented `Uint8Array` instance, for best performance

// Return an iterator with no values.

// Return body, `getScroll` will take care to get the correct `scrollTop` from it

// Return early if start > this.length. Done here to prevent potential uint32

// Return max number of storable codewords

// Return node with successful insert result

// Return nodes that are not the parent as-is

// Return position inside of the canvas element:

// Return promise that immediately resolves as no background needs to be drawn:

// Return self on nodes with no children or hidden children

// Return target node when found

// Return the corrected sample excess kurtosis:

// Return the corrected sample skewness:

// Return the exports of the module

// Return the greater of this and the given position.

// Return the instance:

// Return the last step when the tour is finished

// Return the local global object if it's not possible extract one from

// Return the ndarray instance:

// Return the position at which the cell at the given row and column

// Return the position of all cells that have the top left corner in

// Return the smaller of this and the given position.

// Return true when the given mouse event happened in a widget

// Returned or thrown by various protocols to signal 'I'm not

// Returns a 3 or 6 character hex

// Returns a box for a given cursor position, which may have an

// Returns a command for selecting the next (direction=1) or previous

// Returns a command function that wraps the selection in a list with

// Returns a command that sets the given attribute to the given value,

// Returns a command that tries to set the selected textblocks to the

// Returns a function that estimates the height of a line, to use as

// Returns a number from the range [`0`; `str.length`] unless `pos` is outside that range.

// Returns a number indicating which of two overlapping collapsed

// Returns a plugin that enables the undo history for an editor. The

// Returns a range based on the place where this position and the

// Returns a rectangular slice of table rows containing the selected

// Returns a resolved position if this is a cursor selection (an

// Returns a string that is postfixed to a warning about an invalid type.

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a

// Returns an array of all depths for which $from - $to spans the

// Returns an array of logical lines that continue the visual line

// Returns class name of the object, if any.

// Returns null if characters are ordered as they appear

// Returns only complete characters in a Buffer

// Returns the "n Items" string for this node,

// Returns the composite rect of an element relative to its offsetParent.

// Returns the layout rect of an element relative to its offsetParent. Layout

// Returns the smallest column selection that covers the given anchor

// Returns the smallest row selection that covers the given anchor

// Returns the value from the range [`from`; `to`] that satisfies

// Returns the viewport rectangle at a given document position. `left`

// Returns this node's first child, or `null` if there are no

// Returns this node's last child, or `null` if there are no

// Returns true if the given fragment is valid content for this node

// Returns true if the given side of a box is after the given

// Returns true if this transaction doesn't contain any metadata,

// Returns whether any transforms that will happen use `arguments`

// Reused array to avoid allocating fresh arrays for things that will

// Reused empty array added for node fields that are always empty.

// Reverse order because dnd-core reverse it before calling the DropTarget drop methods

// Revert a change stored in a document's history.

// Revert answers

// Review our test case against browsers more comprehensively.

// Right-shift the bits:

// Robustness iterations:

// Round the offsets to the nearest suitable subpixel based on the DPR.

// Rows have a static height, but you can change this based on breakpoints if you like

// Rowspanning cell that has already been handled

// Run a handler that was bound to a key.

// Run any style parser associated with the node's styles. Either

// Run overlays, adjust style array.

// Run re-order events:

// Run the given function in an operation

// Run the given mode's parser over a line, calling f for each token.

// S

// SCROLLBARS

// SCROLLING THINGS INTO VIEW

// SEE: https://github.com/jviereck/regjsparser/issues/70

// SEE: https://www.ecma-international.org/ecma-262/10.0/index.html#prod-annexB-ExtendedPatternCharacter

// SHARED TEXTMARKERS

// SSR Fix (https://github.com/react-dnd/react-dnd/pull/813

// STRING STREAM

// SVG

// SVG-related properties

// Sadly this is not cacheable as some libraries bundle their own

// Safari (iOS + Mac), last tested v8.0.5, crashes if you try to

// Safari 5.0 bug

// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that

// Safari 6.0 has a problem where timers will get lost while the user is

// Safari 6.0.5 (at least) intermittently fails to create message ports on a

// Safari 8 returns 'object' for typed array and weak map constructors (underscore #1929):

// Safari 8.1 makes `arguments.callee` enumerable in strict mode.

// Safari 9 has enumerable `arguments.length` in strict mode.

// Safari NS namespace fix

// Safari doesn't allow downloading of blob URLs:

// Safari ignores clicks on draggable elements

// Safari replaces the list item or table cell with a BR

// Safari returns null in some cases (#2780)

// Safari's caretRangeFromPoint returns nonsense when on a draggable element

// SafeAnchor handles the disabled case, but we handle it here

// Safely expand the rendered area by the specified overscan amount

// Same for backspace

// SameValue algorithm

// Sass comments don't need to be closed, only indented

// Save chosen confidence level:

// Save current state of the input

// Save last selection state

// Save the changes

// Scale all drawing operations by the DPR when no background is present:

// Scale all drawing operations by the DPR:

// Scale image to fit its containing space.

// Scale the magnifying glass:

// Scan a sorted array of decorations for partially overlapping spans,

// Scan forward to try filling our :minimumBatchSize.

// Scan over the children to see if there's a place among them that fulfills

// Scan over the fragment, fitting as many child nodes as

// Scan up from this position

// Scan up the dom finding the first desc that is a descendant of

// Schedule new call to be in invoked when the pending one is resolved.

// SchemaSpec:: interface

// Scope tracking for duplicate variable names (see scope.js)

// Screen for obvious non-objects...

// Scroll Helpers

// Scroll Into View

// Scroll a given position into view (immediately), verifying that

// Scroll a given set of coordinates into view (immediately).

// Scroll event does not bubble, so we need to look up all the scrollable

// Scroll event listener on scroll parents

// Search an array of spans for a span matching the given marker.

// Search for a byte value [0-255]

// Search for a query string inside a node property

// Search for the interval x is in, returning the corresponding y if x is one of the original xs

// Second base near 1 only:

// Second loop parses rules

// Secondary cursor, shown when on a 'jump' in bi-directional text

// Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

// See 15.10.2.15:

// See ECMA-262 Standard: 15.10.1

// See PR https://github.com/bvaughn/react-virtualized/pull/942

// See `createPrimitiveTypeChecker`.

// See also http://marijnhaverbeke.nl/blog/codemirror-line-tree.html

// See below

// See eq following 2.15:

// See http://unicode.org/reports/tr9/tr9-13.html for the algorithm

// See http://www.regexguru.com/2008/04/watch-out-for-zero-length-matches/

// See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.

// See https://discuss.prosemirror.net/t/copy-selection-issue-with-the-image-node/1673/2;

// See https://es5.github.io/#x13.2.2 for more details.

// See https://github.com/facebook/regenerator/issues/274 for more details.

// See https://github.com/mozilla/sweet.js/wiki/design

// See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.

// See if "".split is the broken IE version, if so, provide an

// See if the node before (or its first ancestor) is closed

// See if the transaction adds or removes any placeholders:

// See input.poll and input.reset

// See issue #150 for more context.

// See issue #2 for more information.

// See issue #2901

// See issue #404 for more information.

// See issue #41

// See issue #593 for more info.

// See triangular numbers: T_n = n * (n + 1) / 2.

// See whether non-active variables all pass exclusion test:

// See:

// See: https://code.google.com/p/chromium/issues/detail?id=25916

// See: https://en.wikipedia.org/wiki/Base64#URL_applications

// See: https://github.com/JedWatson/react-select/issues/3117

// See: https://github.com/beatgammit/base64-js/issues/42

// See: https://github.com/feross/buffer/issues/154

// See: https://github.com/feross/buffer/issues/166

// See: https://github.com/joyent/node/issues/1707

// Seek to the focused search result if there is one specified

// SeekHead starts at 0

// Segment

// Select calculation method for the initial estimate:

// Select the whole document.

// Select-all will be greyed out if there's nothing to select, so

// Selection objects are immutable. A new one is created every time

// Selection.extend can be used to create an 'inverted' selection

// Selection.isCollapsed isn't reliable on IE

// Selection.modify (Edge), fall back to a primitive approach

// SelectionBookmark:: interface

// Selector for draggable cancel (see react-draggable)

// Selector for draggable handle

// Self-resetting timeout for the poller

// Send message to other users:

// Send the given steps to the server

// Serialize the content of the given node to

// Serialize the content of this fragment to a DOM fragment. When

// Serialize this node to a DOM node. This can be useful when you

// Serialize this state to JSON. If you want to serialize the state

// Serializer

// Series summation from 0 to k-1:

// Set @@toStringTag to native iterators

// Set `ExpressionStatement#directive` property for directive prologues.

// Set `allowReserved` to a boolean value to explicitly turn this on

// Set `diff` timestamp

// Set a flag on the given transaction that will prevent further steps

// Set a new selection.

// Set autofocus to true if this textarea is focused, or if it has

// Set color of editor background to signal own report:

// Set color of editor background to signal that report belongs to someone else:

// Set initial component states...

// Set new width and height.

// Set of handlers to fire cursorActivity on

// Set on use.

// Set pos and end to the cursor positions around the character pos sticks to

// Set private properties...

// Set react-floater props

// Set state

// Set the appropriate state for this handler.

// Set the constructor to refer to the child constructor:

// Set the current stored marks.

// Set the exponent bits to the new exponent:

// Set the first element of the state array to the provided seed:

// Set the type of all textblocks (partly) between `from` and `to` to

// Set the value:

// Set to a safe zero to avoid a

// Set to current coordinates:

// Set to false to disable virtualization.

// Set to the height of the document, allowing scrolling.

// Set to true when a non-horizontal-scrolling line widget is

// Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:

// Set up cache to hold tokens for substring matches:

// Set up methods on CodeMirror's prototype to redirect to the editor's document.

// Set up token state

// Set when the widest line needs to be determined anew

// Set white background if none present:

// Set y = |x|:

// Set z = scalbn(|x|, ilogb(x)-23)...

// Sets `display` always block when `animation` is false

// Sets frame rate in frames per second. 

// Sets quality of color quantization (conversion of images to the 

// Sets the number of times the set of GIF frames should be played. 

// Setting a state may cause us to later thing we've updated the offce when we haven't.

// Setting context._sent for legacy support of Babel's

// ShadowRoot detected

// Shared markers (across linked documents) are handled separately

// Shift + click appends a column to existing criteria

// Shift- prefix enabled. See #997

// Short circuit for the from_line options

// Short circuit so we can't infinite loop

// Short-circuit if nothing to do.

// Shortcut for trivial case

// Should be a string for the default `searchMethod`, but can be anything when using a custom search.

// Should we highlight user defined functions too?

// Show a loading symbol on the handle when the children are expanded

// Show logic when:

// Show user-specified drop effect.

// Showing up as a widget implies collapsed (widget replaces text)

// Side Effect

// Sidestep on a, and then use the series representation:

// Sidestep so we can use the series representation:

// Signal NaN...

// Signal overflow...

// Signal underflow...

// Signals that the marker's widget changed, and surrounding layout

// Signed Integer - Big-endian, any size from 1 to 8 octets

// Simple cases...

// Simple implementation of mouseEnter and mouseLeave.

// Simple, cheap variant for when there are no local decorations

// Simple, flat case

// Since JS doesn't have multiple prototypal inheritance, this class

// Since it results in an extra method call to 'babel-runtime/helpers/extends'

// Since the CellMeasurerCache is shared between them this taints derived cell size values.

// Since the delta values reported on mouse wheel events are

// Since this is called a *lot*, try to bail out as cheaply as

// Since we can't grow without bounds horizontally, if we've overflown, let's move it down and try again.

// Since we're setting an entirely new layout object, we must generate a new responsive layout

// Since x is so small that P is necessarily very small too, use http://functions.wolfram.com/GammaBetaErf/GammaRegularized/06/01/05/01/01/

// Single line

// Single line expression

// Size in px of the region near the edges that initiates scrolling on dragover

// Size is cached per cell so we don't have to re-measure if cells are re-ordered.

// Size is stable

// Skip BOM

// Skip ahead if rowspan > 1

// Skip ahead to chosen start time:

// Skip full comment line

// Skip hidden elements which don't have an offsetParent

// Skip if line is empty and skip_empty_lines activated

// Skip if position is occupied by finder patterns

// Skip if the remaining buffer can be delimiter

// Skip if the remaining buffer can be escape sequence

// Skip if the remaining buffer can be row delimiter following the closing quote

// Skip if the remaining buffer smaller than comment

// Skip if the remaining buffer smaller than row delimiter

// Skip index properties.

// Skip last line if it has no characters

// Skip over nodes with no children or hidden children

// Skip past cells from previous rows (via rowspan)

// Skip search if no conditions are specified

// Skip zero term...

// Slice to clone array as sort modifies

// Slow case, write chunks one-by-one

// Small a and b, both greater than 1, there is a point of inflection at xs, and it's complement is xs2, we must always start our iteration from the right side of the point of inflection.

// Small eta use the expansion Temme gives in the second equation of section 5, it's a polynomial in eta:

// So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.

// So explicitly clear it out (eg set to "auto") so we can recalculate.

// So if we're currently running a task, we'll need to delay this invocation.

// So let's ensure we reset this back to the base state each time

// So make sure the offset is at least 0 or no match will be found.

// So we only set these when we require an adjustment of the scroll position.

// So we should always recalculate offset afterwards.

// So, if this is awaiting a drain, then we just call it now.

// So, the steps are:

// Some browsers fire contextmenu *after* opening the menu, at

// Some browsers fire keypress events for backspace

// Some browsers use the wrong event properties to signal cmd/ctrl on OS X

// Some browsers, namely IE and Edge, don't have the SVGGraphicsElement

// Some powers of sin(theta) cos(theta) that we'll need later:

// Some values we'll need later, these are Eq 9.1:

// Some variables we'll need...

// Some versions of FF have rAF but not cAF

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// Somehow in MultiGrid the main grid doesn't trigger a update on mount.

// Something like quad tree should be used

// Something went terribly wrong, ABORT, ABORT!

// Sometimes the cell can be in the same depth.

// Sometimes, block scope declarations change name during transpilation

// Soonest alarm already set, or will be.

// Sort array in ascending order:

// Sort data in ascending order:

// Spec says greater than zero

// Special case for "transparent", all other non-alpha formats

// Special case for Google doc's image.

// Special case for a simple path URL

// Special case for function names as bound inside the function

// Special case for large a and a ~ z:

// Special case see: http://functions.wolfram.com/GammaBetaErf/BetaRegularized/03/01/01/

// Special case to return head of iframe instead of iframe itself

// Special case where the base of the power term is close to 1; compute `(1+x)^y` instead:

// Special case where the previous size was 0:

// Special case: +-0

// Special case: +infinity

// Special case: -1

// Special case: -infinity

// Special case: 0

// Special case: 1

// Special case: 2

// Special case: NaN

// Special case: looking for empty string/buffer always fails

// Special case: |x| > 1 (range error)

// Special cases `x`...

// Special cases `y`...

// Special cases for handling +-0.0...

// Special cases:

// Special cases: NaN, +-infinity

// Special optimization for only a single match.

// Specify that nodes that do not match search will be collapsed

// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.

// Split `x` into high and low words:

// Split `x` into higher and lower order words:

// Split `y` into `y1 + y2` and compute `(y1+y2) * (t1+t2)`...

// Split `y` into high and low words:

// Split a selected cell, whose rowpan or colspan is greater than one,

// Split by newlines

// Split on whitespace:

// Split the content in the given range off from its parent, if there

// Split the fraction into higher and lower order words:

// Split the node at the given position, and optionally, if `depth` is

// Split the parent block of the selection. If the selection is a text

// Split up the calculation to avoid spurious overflow:

// Splitting training set by given 'attribute-predicate-value':

// Standard className for selected node.

// Start a [transaction](#state.Transaction) from this state.

// Start a new operation.

// Start a new scope with regard to labels and the `inFunction`

// Start a text drag. When it ends, see if any dragging actually

// Start an AST node, attaching a start offset.

// Start flowing on next tick if stream isn't explicitly paused

// Start must be at the end of a block

// Start rendering pages one by one:

// Start the precedence parser.

// Start the timer for the trailing edge.

// StateField:: interface<T>

// Statics are already in this array.

// Statics go in the compareWith array right away so items flow around them.

// Step 1: `(startHigh, startLow)` to `(startHigh, LOW_SURROGATE_MAX)`.

// Step 2: `(startHigh + 1, LOW_SURROGATE_MIN)` to

// Step 3. `(endHigh, LOW_SURROGATE_MIN)` to `(endHigh, endLow)`.

// StereoAudioRecorder can work with all three: Edge, Firefox and Chrome

// StereoAudioRecorder.js

// Stop listening to mouse motion events.

// Storage.js

// Store a metadata property in this transaction, keyed either by

// Store a relative adjustment to the scroll position in the current

// Store and register the task

// Store drag source node so we can check whether

// Store for _invokeOnGridRenderedHelper()

// Store for later calls to getLastRenderedIndices()

// Store some values that we'll need later (but don't want to force a relayout for)

// Store the countdown reference:

// Store the map and a cache object for the current logical line

// Store the new layout.

// Store the reference and popper rects to be read by modifiers

// Store the scroll position of the editor's parent nodes, along with

// Store the target node and delete it from the tree

// Store this flag to let the next cDU pass know it needs to recompute the scroll offset.

// Store tops and bottoms of each cell for fast intersection lookup.

// Strategy

// Strictly less than if we recomputed clockNow.

// Stride array...

// String input requires "1.0" as input, so 1 will be treated as 1

// StringDecoder provides an interface for efficiently splitting a series of

// Stringify object as JSON by default

// Strings are multiline

// Strip off the surrounding list. At the sides where we're not at

// Strip out disabled modifiers

// Strip trailing whitespace

// Student's T with b = 0.5 gets handled as a special case, swap around if the arguments are in the "wrong" order:

// Style applied to the container wrapping the tree (style defaults to {height: '100%'})

// Style applied to the inner, scrollable container (for padding, etc.)

// Sub-views need their line numbers shifted when text is added

// Submit all questions on the current page:

// Subnormal number, scale up `x`...

// Subnormal number, scale up `x`:

// Subnormal number, scale up x:

// Subscription to the "Transitionend" event is used as a workaround for

// Subtract 0x8140 from Shift JIS value

// Subtract 0xC140 from Shift JIS value

// Subtract hu significand from next largest hu => 0 00000000001 00000000000000000000 => 0x00100000 => 1048576

// Subtract margins of documentElement in case it's being used as parent

// Succinct definitions of keyword token types

// Such objects conform to this interface.

// Such overlap is not allowed.

// SuperCall:

// SuperProperty:

// Superclass for the various kinds of descriptions. Defines their

// Supply `nBins` as a suggested value for the number of bins; exact number of bins may differ...

// Support decoding URL-safe base64 strings, as Node.js does.

// Support for Here-documents https://en.wikipedia.org/wiki/Here_document

// Support: <=IE11 doesn't support `focus()` on svg elements (RB: #917)

// Support: IE 9 only

// Suppress optimizelegibility in Webkit, since it breaks text

// Suspiciously specific kludge to work around caret*FromPoint

// Swallow

// Swap `a` and `b`:

// Swap elements:

// Swap the two chars left and right of each selection's head.

// Switch the grammar back

// Switch the grammar to markup

// Sync editor state

// Sync scroller and scrollbar, ensure the gutter elements are

// Sync scrolling between fake scrollbars and real scrollable

// Sync the DOM if anything changed

// Sync the actual display DOM structure with display.view, removing

// Sync the content of the given DOM node with the nodes associated

// Sync the current stack of mark descs with the given array of

// Sync the editor with this.dispatchState.edit

// Sync the scrollable area and scrollbars, ensure the viewport

// Sync the store to this component's state.

// Sync update – it will always be executed, even if not necessary. This

// Synchronously set :isScrolling the first time (since _setNextState will reschedule its animation frame each time it's called)

// Syncs `this.children` to match `this.node.content` and the local

// Synonyms

// SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term

// TEST COMPONENTS //

// TEXTAREA INPUT STYLE

// TEXTMARKER SPANS

// TEXTMARKERS

// TEXT_NODE

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS

// TODO

// TODO Check for a bad combination of fixedWidth and missing numeric width or vice versa with height

// TODO Move this into WindowScroller and import from there

// TODO deprecate this? not really very useful

// TODO https://gitlab.com/Rich-Harris/buble/issues/8

// TODO implement proper continue...

// TODO is this block necessary?...

// TODO is this right?

// TODO last chunk in the array may not be the last chunk, if it's moved...

// TODO memoize these calculations so they don't take so long?

// TODO needs a tidier implementation

// TODO only check for collisions within current bounds.

// TODO other cases where it's safe

// TODO prefer single quotes?

// TODO publish internal ReactClass displayName transform

// TODO reuse arrays?

// TODO there's a bunch of this sort of thing, needs cleaning up

// TODO this function is slightly flawed – it works on the original string,

// TODO: Internal Option Type here

// TODO: Legacy, not needed anymore. Remove in next major version.

// TODO: Optimize this by writing and using `dataIntersectionData()`.

// TODO: Revisit once we have function for sorting multiple arrays by the elements of one of the arrays

// TODO: Support UI for cropping later.

// TODO: This is very brittle, so it needs to be replaced if react-dnd

// TODO: add support for generator functions?

// TODO: consider changing this at the regenerate level.

// TODO: consider extracting as a constant

// TODO: consider moving to pkg

// TODO: defer error events consistently everywhere, not just the cb

// TODO: for backwards compatibility, we allow the prop to return a new

// TODO: if we ever make a react-native version of this,

// TODO: implementation

// TODO: implementation (?)

// TODO: need to compare bytes instead of single char

// TODO: proper preconditioner?

// TODO: remove fallback for next major

// TODO: replace with `isCallable` check

// TODO: replace with `stdlib` pkg

// TODO: reserved for future use

// TODO: should be noflip wrapped and handled by an isRTL prop

// TODO: this wont work on nested parents

// TODO: try and combine these effects: https://github.com/react-bootstrap/react-overlays/pull/794#discussion_r409954120

// TODO: use null

// TODO: validate that minimum number of dimensions does not exceed the maximum number of possible dimensions (in theory, infinite; in practice, determined by max array length; see https://github.com/stdlib-js/stdlib/blob/ac350059877c036640775d6b30d0e98e840d07cf/lib/node_modules/%40stdlib/ndarray/ctor/lib/main.js#L57)

// TODO: wire options into createSourceConnector

// TODO: write (browser) polyfill

// TODO: write polyfill

// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context

// TYPES //

// Tail series expansion, see section 6 of Shaw's paper. `w` is calculated using Eq 60:

// Take an unsorted, potentially overlapping set of ranges, and

// Take in a single string / number and check to see if it looks like a CSS unit

// Take input from [0, n] and return it as [0, 1]

// Take into account vertical resize with N/S handles on locked aspect

// Take note if the _read call is sync or async (ie, if the read call

// Taken from the Esprima parser.

// Takes a slice parsed with parseSlice, which means there hasn't been

// Targets

// Tells you whether this node type has any required attributes.

// Temme doesn't specify what value to switch on here, but this seems to work pretty well:

// Tempering transform to compensate for the reduced dimensionality of equidistribution:

// Template strings compiled in strict mode uses concat, which is slow. Since

// Temporary hack

// Term ::

// Test basic support...

// Test failed: include predictor in active set -> iterate again

// Test for A's keys different from B.

// Test for IE <= 9 as proposed by Browserhacks

// Test for object-specific method:

// Test if potential opening or closing delimieter

// Test if the prototype matches the global `Object` prototype (same realm):

// Test that all properties are own properties (cross-realm; *most* likely a plain object):

// Test that the style string either precisely matches the prop,

// Test whether a given character code starts an identifier.

// Test whether a given character is part of an identifier.

// Test whether a given mark or mark type occurs in this document

// Test whether a semicolon can be inserted at the current position.

// Test whether replacing the range `from` to `to` (by index) with a

// Test whether replacing the range between `from` and `to` (by

// Test whether the blocks before and after a given position can be

// Test whether the given node's content could be appended to this

// Test whether the given set of marks are allowed in this node.

// Test whether the selection is the same as another selection.

// Test whether there exists a collapsed span that partially

// Test whether this mark has the same type and attributes as

// Test whether this mark is in the given set of marks.

// Test whether two nodes represent the same piece of document.

// Test whether two sets of marks are identical.

// Tests for existence of standard globals is to allow style-loader

// Tests whether parsed token is a contextual keyword.

// Tests whether there is a mark of this type in the given set.

// Tests whether this slice is equal to another slice.

// Thank's IE8 for his funny defineProperty

// Thanks to jQuery xColor for some of the ideas behind these

// Thanks to less.js for some of the basics here

// That means the fitting must be done to the end of the textblock

// That we got here means that the readable side wants more data.

// That's not a problem for the way that it's currently used, but it could

// That's plain text: drop any tokens matched.

// That's why using WebAudio API to record stereo audio in WAV format

// The 'scroll' parameter given to many of these indicated whether

// The (absolute) position at the end of the node at the given

// The (absolute) position at the start of the node at the given

// The (absolute) position directly after the wrapping node at the

// The (absolute) position directly before the wrapping node at the

// The (forward) step map for this item.

// The ._invoke method unifies the implementations of the .next,

// The Browser also has localStorage in the global context.

// The DOM events that CodeMirror handles can be overridden by

// The DOM updates done when an operation finishes are batched so

// The QR code specification says to use byte-wise modulo 100011101 arithmetic.

// The Transform stream has all the aspects of the readable and writable

// The [editor view](#view.EditorView) uses a few metadata properties:

// The [props](#view.EditorProps) exported by this plugin.

// The [spec](#model.SchemaSpec) on which the schema is based,

// The `beforeExpr` property is used to disambiguate between regular

// The `bias` parameter can be used to influence which side of a DOM

// The `default` clause is only here as a safeguard; it should never be

// The `getLineInfo` function is mostly useful when the

// The `startsExpr` property is used to check if the token ends a

// The `super` keyword can appear at below:

// The `tokenizer` export provides an interface to the tokenizer.

// The above cases all prevent default event event behavior.

// The above copyright notice and this permission notice shall be included

// The algorithm used to determine whether a regexp can appear at a

// The amount of keys in this map.

// The amount of redoable events available in a given editor state.

// The amount of undoable events available in a given state.

// The ancestor node at the given level. `p.node(p.depth)` is the

// The approach which follows is to resolve a view index to its subscripts and then plug the subscripts into the standard formula for computing the linear index in the underlying data buffer...

// The assignment of fine-grained, information-carrying type objects

// The attributes associated with this mark.

// The awkward -1 offsets are needed because findFirst (called

// The browsers will use the image intrinsic size under different conditions.

// The character count indicator is a string of bits that represents the

// The character count indicator must be placed after the mode indicator

// The character value of the first character is multiplied by 45

// The character value of the second digit is added to the product

// The check for `tt.name && exprAllowed` detects whether we are

// The child could have been expanded from the start,

// The chunk loading function for additional chunks

// The code below helps compile a regular-expression-like language

// The content must have shrunk

// The context stack is used to superficially track syntactic

// The context.catch method must only be called with a location

// The current document (the result of applying the steps in the

// The current document.

// The current position of the tokenizer in the input.

// The data set contains BMP code points that are not high surrogates

// The data set contains astral code points; append character classes

// The date picker just changed from being closed to being open.

// The date picker just changed from being open to being closed.

// The default configuration options.

// The delegate iterator is finished, so forget it and continue with

// The depth up to which this position and the given (non-resolved)

// The destination range is an integer power of the generator's range...

// The different types of PHP strings "replace" the C-like standard string

// The display handles the DOM integration, both for input reading

// The document is represented as a BTree consisting of leaves, with

// The documents before each of the steps.

// The drag preview may either be attached via ref or connect function

// The drop target may either be attached via ref or connect function

// The editor will use this as the node's DOM representation

// The editor will use this as the node's DOM representation.

// The element in which the editor lives.

// The empty rope sequence.

// The empty set of decorations.

// The empty slice.

// The end of this one overlaps with a subsequent span. Split

// The end position in the `maps` array.

// The end position. Will be the same as `from` for [widget

// The extra wrapper is somehow necessary on IE/Edge to prevent the

// The fact that we are measuring indicates this measurement is probably stale,

// The final "%c" is somewhat tricky, because there could be other

// The final `>>>0` converts the intermediate sum to an unsigned integer (possible integer overflow during sum):

// The final step is a few Newton-Raphson iterations to clean up our approximation for x, this is pretty cheap in general, and very cheap compared to an incomplete beta evaluation. The limits set on x come from the observation that the sign of eta and x-sin^2(theta) are the same.

// The first child of the fragment, or `null` if it is empty.

// The first element of the state array must equal the supported state array schema version...

// The flag invert is set to true if we swap a for b and p for q, in which case the result has to be subtracted from 1:

// The flush function processes all tasks that have been scheduled with

// The following will handle plain text inside tags

// The format of `surrogateMappings` is as follows:

// The fragments after the join point must match

// The function keys

// The function that wraps the provided component in a wrapper

// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.

// The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of

// The index into the ancestor at the given level. If this points at

// The index pointing after this position into the ancestor at the

// The input data string is divided into groups of three digits,

// The interpretation of a dot depends on whether it is followed

// The inverse of countColumn -- find the offset that corresponds to

// The inverted step

// The last child of the fragment, or `null` if it is empty.

// The last or only node in this level of the tree

// The last word of the previous line and current line match

// The length of the "other" section must equal `1`...

// The length of the "seed" section much match the empirical length...

// The length of the "state" section must equal `1`...

// The length of the "state" section must equal `2`...

// The length of the "state" section must equal `N`...

// The length of the "table" section must equal `TABLE_LENGTH`...

// The local steps that havent been successfully sent to the

// The loop has finished without doing anything; add the new pair to the end

// The loop has finished; add the new pair to the end of the data set.

// The lower bound of the range.

// The lower bound of the selection's main range.

// The main exported interface (under `self.acorn` when in the

// The mark serialization functions.

// The marks (things like whether it is emphasized or part of a

// The maximum absolute double is ~1.8e308. Accordingly, any possible finite `x` rounded to the nearest >=10^309 is 0.0.

// The message channel technique was discovered by Malte Ubl and was the

// The method used to search nodes.

// The module cache

// The mouse may move faster then the animation frame does.

// The name of the mark type.

// The name the node type has in this schema.

// The naming convention is:

// The new range is a superset of the old range.

// The new range lies entirely within an existing range pair. No action

// The next textblock must start before end and end near it

// The node is already part of a local view desc, leave it there

// The node serialization functions.

// The node was dropped in an external drop target or tree

// The node's representation in the editor (empty, for now)

// The number of child nodes in this fragment.

// The number of children that the node has.

// The number of levels the parent node is from the root. If this

// The number of outgoing edges this node has in the finite

// The number zero (pronounced “hole”) is used to indicate the place

// The options passed to the serializer.

// The padding-right forces the element to have a 'border', which

// The parent node that the position points into. Note that even if

// The pattern consists of two parts, i.e. `Property=Value`.

// The plugin's [spec object](#state.PluginSpec).

// The plugins that are active in this state.

// The production ClassEscape :: b evaluates by returning the

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect

// The props object given directly to the editor view supports two

// The pseudo-root is not considered in the path

// The publicly visible API. Note that methodOp(f) means

// The quantifier contains the atom. Therefore, the beginning of the

// The range has already been added to the set; at this point, we just

// The range starts and ends after the low surrogate range.

// The range starts and ends before the high surrogate range.

// The range starts and ends in the astral range.

// The range starts and ends in the high surrogate range.

// The range starts and ends in the low surrogate range.

// The range starts before the high surrogate range and ends after the

// The range starts before the high surrogate range and ends in the low

// The range starts before the high surrogate range and ends within it.

// The range starts in the high surrogate range and ends after the low

// The range starts in the high surrogate range and ends in the low

// The range starts in the low surrogate range and ends after the low

// The ranges covered by the selection.

// The reason we want to know the amount a wheel event will scroll

// The require function

// The resolved anchor of the selection (the side that stays in

// The resolved head of the selection (the side that moves when

// The resolved lowerbound of the selection's main range.

// The resolved upper bound of the selection's main range.

// The result is at the point of inflection, best just return it:

// The returned object contains the DOM node, this map, and

// The rightmost point in the dataset should give an exact result

// The root entry object (effectively a try statement without a catch

// The root node in which the position was resolved.

// The schema into which the parser parses.

// The schema of the state's document.

// The schema that this mark type instance is part of.

// The second element of the state array must contain the number of sections...

// The second error function case is the next cheapest to use, it breaks down when the result is likely to be very small, if `a+b` is also small, but we can use a cheaper expansion there in any case. As before `x` won't be much larger than `p`, so as long as `p` is small we should be free of cancellation error.

// The selection's anchor, as an unresolved position.

// The selection's head.

// The selection.

// The semihidden textarea that is focused when the editor is

// The set of [parse rules](#model.ParseRule) that the parser

// The set of marks allowed in this node. `null` means all marks

// The setTimeout will wait until the transition ends.

// The size of the content represented by this desc.

// The size of the fragment, which is the total of the size of its

// The size of this node, as defined by the integer-based [indexing

// The size this slice would add when inserted into a document.

// The spans will have null for their from/to properties when the

// The spec on which the type is based.

// The spec provided when creating this decoration. Can be useful

// The spec requires to interpret the `\2` in `/\2()()/` as backreference.

// The spec that this type is based on

// The start position of the decoration.

// The starting line

// The starting match of the node type's content expression.

// The starting position in the `maps` array, used when `map` or

// The state array must have a minimum length...

// The step count for which the current selection is valid.

// The step maps in this mapping.

// The steps in this transform.

// The stored marks set by this transaction, if any.

// The sum is then stored as 11-bit binary number

// The test against `importScripts` prevents this implementation from being installed inside a web worker,

// The textarea is kept positioned near the cursor to prevent the

// The third argument is an optional Object.

// The timestamp associated with this transaction, in the same

// The transaction's current selection. This defaults to the editor

// The trick is to first set the id to be empty and then to

// The type of node that this is.

// The type of the [default top node](#model.SchemaSpec.topNode)

// The type of this mark.

// The upper bound of the range.

// The upper bound of the selection's main range.

// The use of `Object#toString` avoids issues with the `typeof` operator

// The value of the state field that tracks undo/redo history for that

// The various event-handling functions may all return `true` to

// The version number of the last update received from the central

// The view's current [props](#view.EditorProps).

// The view's current [state](#state.EditorState).

// The width of the blocks containing the lines representing the structure of the tree.

// The width of this component.

// The wrapper component that injects the withStyles props

// The wrappers are assumed to be valid in this position, and should

// There are several things that positions can be mapped through.

// There are siblings after the lifted items, which must become

// There can be a race condition where the target may no longer exist

// There is *some* kind of drag-and-drop support in IE6-8, but I

// There might have been a widget with a focused element that got

// There was a collision; abort

// There's a step to use, but there's no target in the DOM

// There’s no need to account for astral symbols / surrogate pairs here,

// These are a run-length and offset encoded representation of the

// These are all in grid units

// These are the options recognized by the

// These are used when `options.locations` is on, for the

// These are used when the footnote is selected

// These blocks will be replaced with correct values later in code.

// These browsers support querying empty text ranges

// These byte values are shifted from the JIS X 0208 values.

// These can be null

// These is screen coordinate.

// These must be handled carefully, because naively registering a

// These nest, from the most general expression type at the top to

// These objects are used to represent the visible (currently drawn)

// These options can be provided separately as readableXXX and writableXXX.

// These two are, on init, called from the constructor because they

// These values are in context so we're listening for their updates.

// These values are to center the datepicker (approximately) on the page

// These will be passed wholesale to react-draggable's DraggableCore

// They are implemented in all modern browsers.

// They are part of the [editor state](#state.EditorState) and

// They form a doubly-linked mutable tree, starting at `view.docView`.

// They're not really 'magic', they just happen to work well.

// This action has a similiar effect to ActionTypes.INIT.

// This addresses the problem that Transform.replace expects a

// This adds missing items.

// This allows you to do nice stuff like specify {y: Infinity}

// This avoids a crash in Safari v9.0 with double-ids.

// This avoids possible overflow, but appears to be marginally less accurate:

// This behaves neither like String nor Uint8Array in that we set start/end

// This block is on the bottom (target) line

// This block points at the target block (where the row will go when released)

// This bug tends to close the virtual keyboard, so we refocus

// This cache will be thrown away once scrolling completes.

// This cache will be thrown away once scrolling complets.

// This can be changed by passing an array of types and attributes to

// This can be set explicitly. If it is not set, it will automatically

// This can be used to attach properties to mode objects from

// This can be useful as a base to build a custom serializer from.

// This can cause a funky scroll offset because of the vertical scrollbar width.

// This can lead to the same cell being created many times and can cause performance issues for "heavy" cells.

// This can result in invalid style values which can result in NaN values if we don't handle them.

// This causes a series of rapid renders that is slow for long lists.

// This check is needed to avoid errors in case one of the elements isn't defined for any reason

// This class tracks the state of the placement progress in the

// This duplicates behavior from Property::transpile which is disabled

// This environment has a native %IteratorPrototype%; use it instead

// This error was thrown as a convenience so that you can use this stack

// This field belongs to a plugin mapped to a JSON field, read it from there.

// This file contains only the entry chunk.

// This file defines a ProseMirror selection subclass that models

// This file defines a number of helpers for wiring up user input to

// This file defines a number of table-related commands.

// This file defines a plugin that handles the drawing of cell

// This file defines helpers for normalizing tables, making sure no

// This file is a fallback for a consumer who is not yet on React 16

// This fixes logging for webm streams with Cluster of unknown length and no Cluster closing elements.

// This function abstracts iterating over the nodes and decorations in

// This function creates a set of [node

// This function is designed to be inlinable, so please take care when making

// This function is used to raise exceptions on parse errors. It

// This function tries to parse a single expression at a given

// This gives the smaller Grid extra room for offset,

// This guards against the case where compositionend is triggered without the keyboard

// This hack (see related code in patchDisplay) makes sure the

// This hackery is required for IE8/9, where

// This handles edge-cases where the component has already been unmounted before its ref has been set,

// This handles more types than `getPropType`. Only used for error messages.

// This has a complexity linear to the value of the code. The

// This helps us achieve a neat API where user doesn't even know that refs

// This higher-order component consumes a string from React context that is

// This hook exists purely for testing purposes.

// This intentionally forwards size and variant (if set) to the

// This invalid event can be detected by comparing event.target to this component's scrollable DOM element.

// This is *not* part of the readable stream interface.

// This is CodeMirror (https://codemirror.net), a code editor

// This is a command that will undo an input rule, if applying such a

// This is a crude lookahead trick to try and notice that we're

// This is a hack to make sure that our error handler is attached before any

// This is a huge hack, but appears to be the best we can

// This is a kludge to keep keymaps mostly working as raw objects

// This is a performance optimization for WindowScroller + Grid

// This is a polyfill for %IteratorPrototype% for environments that

// This is a whole-line replace. Treated specially to make

// This is an advanced option for complete customization of the appearance.

// This is at the top of an existing list item

// This is b/c the Popper lib is all esm files, and would break in a common js only environment

// This is because the offset changes slightly as scroll position changes and caching leads to stale values.

// This is done because Grid is a pure component and won't update unless its properties or state has changed.

// This is exclusively for simplicity:

// This is externally triggered

// This is for `asap.js` only.

// This is here because the layout must be sorted in order to get the correct bottom `y`.

// This is important for "transitions" which never actually start

// This is intended to be able to call things like

// This is intentionally an invariant that gets caught. It's the same

// This is method 2 below, done in logs, we're really outside the range of this method, but since the result is almost certainly infinite, we should probably be OK:

// This is method 2 below, done in logs:

// This is method 4 below, done in logs:

// This is necessary in order to support keyboard navigation (TAB/SHIFT+TAB) in some cases

// This is needed because the drag preview needs to be drawn or else it fires an 'mousemove' event

// This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}

// This is not the complete set of editor methods. Most of the

// This is only run once to _create_ the popper

// This is performed at the last minute so newNode can be sent in its final form.

// This is probably a native item type we don't understand.

// This is quite a bit faster than extending the object

// This is relevant for synchronous Transform streams

// This is the function that is called to fetch the next token. It

// This is the magic part:

// This is the method, for example, to handle paste. The similar

// This is the most basic placement, and will be adjusted by

// This is the node that holds the child views. It may be null for

// This is the part where you do stuff!

// This is the reason such behavior is strictly opt-in.

// This is the type passed to the [`Plugin`](#state.Plugin)

// This is to keep the grid from scrolling after the snap-to update.

// This is to support parse stuff like "  http://foo.com  \n"

// This is used for server rendering.

// This is used to make sure we don't warn about the same

// This is used to notify the history plugin to not merge steps,

// This is useful to prevent an error thrown in a task from stalling the event

// This is very crude, but unfortunately both these browsers _pretend_

// This isn't reproducible in IE10 compatibility mode of IE11

// This isn't very sophisticated, or accurate, but it does work:

// This keeps the cellCache to a resonable size.

// This looks ugly, but we're creating specialized arrays with a specific

// This loop picks a preferred target depth, if one of the covering

// This loop repeatedly gives plugins a chance to respond to

// This loop will assume that the first leading backtick can not

// This makes Grid simpler to use (since cells commonly change).

// This means that when a number is 256 or larger, it should be XORed with 0x11D.

// This method is bound to the view instance, so that it can be

// This method returns true if the keydown event should be ignored.

// This mirrors what Grid does,

// This module should not be running in strict mode, so the above

// This must be declared before keyword because we use "function" inside the look-forward

// This only needs to be imported once in your app

// This piece of state is used to remember when a mouse-drag

// This prevents them from flowing under a scrollbar (if present).

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)

// This returns true if the highWaterMark has not been hit yet,

// This row has been shifted, and is at the depth of

// This should be overwrite by subclass.

// This shouldn't be necessary, but there are weird race conditions with

// This state field accumulates changes that have to be sent to the

// This test prevents this from firing when a context

// This value, if given, is stored in every node, whether

// This was originally reported via clauderic/react-infinite-calendar/issues/23

// This way the result will be the same whether the tinycolor is initialized with string or object.

// This way, back-pressure is actually determined by the reading side,

// This will be set to a {lineWise: bool, text: [string]} object, so

// This will throw an exception if access to iframe is blocked

// This works around a Google Docs misbehavior where pasted content will be inexplicably wrapped in `<b>` tags with a font-weight normal.

// This works around a bug in Safari, where input[type=file]

// This works around an obscure edge case where external CSS styles have not yet been loaded,

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// This works in non-strict mode

// This writes the GIF Header and returns false if it fails.

// Thrash, waste and sodomy: IE GC bug

// Throughout this interface, methods that take an optional `depth`

// Thus, in rtl, we are looking for the first (content-order) character

// Tidy up, if we "lower" was too high then zero is the best answer we have:

// Time to actually perform the action

// TinyColor v1.4.1

// To avoid creating an additional object, we just hang the .value

// To avoid memory thrashing when child.lines is huge (e.g. first view of a large file), it's never spliced.

// To avoid recursion in the case that type === "newListener"! Before

// To be able to deserialize selections from JSON, custom selection

// To be able to serialize steps to JSON, each step needs a string

// To determine which side to associate with, get the box to the

// To disallow parenthesized identifier via `this.toAssignable()`.

// To disallow trailing comma via `this.toAssignable()`.

// To ensure persistent data, use `${name}#persistent`

// To find out whether the scrollbar is still visible, we

// To fix https://github.com/acornjs/acorn/issues/575

// To make the context menu work, we need to briefly unhide the

// To prevent flicker here, we make playing in the negative offset zone cause nothing to happen.

// Toggle capturing tab key so users can focus away

// Toggle strict mode. Re-reads the next number or string to please

// Toggles between row/column header and normal cells (Only applies to first row/column).

// Toggles whether the selected column contains header cells.

// Toggles whether the selected row contains header cells.

// Token-specific context update code

// Tokenize a style attribute into property/value pairs.

// Top overlap

// Top-left corner of the tree

// Top-left corner of the tree, but has no siblings

// Total codewords for this QR code version (Data + Error correction)

// Total number of error correction codewords

// Touch Capability Detector

// Touch Handlers

// Touch events will have buttons be undefined, while mouse events will have e.buttons's left button

// Touched nodes

// Track scrolling direction so we can more efficiently overscan rows to reduce empty space around the edges while scrolling.

// Track the height of each column.

// Track which rows we must add cells to, so that we can adjust that

// TrackEntry

// Tracks

// Tracks the height of each column

// Tracks the maximum line length so that the horizontal scrollbar

// Tracks whether anything was changed

// Tracks which cursorActivity handlers have been called already

// Transactions track changes to the document (they are a subclass of

// Transform record array to an object

// Transforms JSX element name to string.

// Translation value is a hack to force an invisible transition that

// Transpilation arguments

// Traverse a language definition with Depth First Search

// Traversing tree from the root to leaf:

// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:

// Treat next char as a regular character

// Tree data in the following format:

// Trick from jQuery -- some elements must be wrapped in other

// Tries to rebase an array of history events given a change in the

// Trigger redo with Ctrl+Shift+Z on other platforms

// Trigger redo with Ctrl+Y on Windows

// Trigger redo with ⌘+Shift+Z on Mac

// Trigger undo with Ctrl+Z on other platforms

// Trigger undo with ⌘+Z on Mac

// Trim leading whitespace

// Trim off extra bytes after placeholder bytes are found

// Trim off integer >= 8

// Trim trailing comma because it can easily become a leading comma which is illegal

// Trivial case where we have all negative strides...

// Trivial case where we have all positive strides...

// True for node types that allow no content.

// True if the error was already emitted and should not be thrown again

// True if this is a block type

// True if this is a textblock type, a block that contains inline

// True if this is an inline type.

// True if this is the text node type.

// True if this node type has inline content.

// True if this selection goes all the way from the left to the

// True if this selection goes all the way from the top to the

// True when shift is held down.

// True when the document has been changed (when there are any

// True when this is a block (non-inline node)

// True when this is a leaf node.

// True when this is a text node.

// True when this is a textblock node, a block node with inline

// True when this is an atom, i.e. when it does not have directly

// True when this is an inline node (a text node or a node that can

// True when this match state represents a valid end of the node.

// True when this node allows inline content.

// True when this node is an atom, i.e. when it does not have

// Truncate the array:

// Try and compute the easy way first:

// Try falling back to the keyCode when there's a modifier

// Try fast path regexp

// Try http://functions.wolfram.com/06.06.06.0039.01

// Try the joining algorithm

// Try the left side first, fall back to the right one if that

// Try to apply a step in this transformation, ignoring it if it

// Try to find a handler for the given tag and use that to parse. If

// Try to find a node desc matching the given data. Skip over it and

// Try to find a point where a node of the given type can be inserted

// Try to find a selection inside the given node. `pos` points at the

// Try to find a target depth to which the content in the given range

// Try to find a valid way to wrap the content in the given range in a

// Try to find a way to fit the given node type into the current

// Try to fit each possible depth of the slice into each possible

// Try to insert the given node, adjusting the context when needed.

// Try to match a fragment. Returns the resulting match when

// Try to match string input using regular expressions.

// Try to match the given fragment, and if that fails, see if it can

// Try to merge this step with another one, to be applied directly

// Try to move start of change to start of selection if ambiguous

// Try to reorder 'mixable' marks, such as em and strong, which

// Try to skip TypeScript return type declarations after the arguments

// Try to start a node of the given type, adjusting the context when

// Try to update the next node, if any, to the given data. Checks

// Try...catch will protect from navigator not existing (e.g. node) or a bad implementation of navigator

// Try/catch helper to minimize deoptimizations. Returns a completion

// Trying to use the custom `instanceof` for Writable here will also break the

// Turn duplicate columns into an array

// Turn mouse into crosshair when Alt is held on Mac.

// Turn off the sign bit of `x`:

// Tweak for Android Chrome

// UPDATING

// URLs are obnoxious.

// USE OR OTHER DEALINGS IN THE SOFTWARE.

// UTF-16 Decoding

// UTF-16LE typically needs two bytes per character, but even if we have an even

// Under a limited range of circumstances we can improve our estimate for x...

// Undo Spectacle scaling as it messes up the rendering of the ACE editor:

// Undo a given set of steps, apply a set of other steps, and then

// Undo previously applied mask

// Unfinished key sequence

// Unhandled 'error' event

// Unhandled stream error in pipe.

// Unicode surrogate pair

// UnicodePropertyName ::

// UnicodePropertyName `=` UnicodePropertyValue

// UnicodePropertyValue ::

// UnicodePropertyValueExpression ::

// Unindent selected lines

// Unmounting.

// Unreachable since it threw "unterminated regular expression" error before.

// Unshift should *always* be something directly out of read()

// Unsigned Integer - Big-endian, any size from 1 to 8 octets

// Update `data` attributes, styles and arrowStyles

// Update `this.unplaced`. Drop the entire node from which we

// Update brackets:

// Update caret position

// Update current marker set

// Update draggable attribute to handle Firefox bug (https://stackoverflow.com/questions/21680363/prevent-drag-event-to-interfere-with-input-elements-in-firefox-using-html5-drag)

// Update hash of URL:

// Update information about previous labels on this node

// Update onRowsRendered callback

// Update onRowsRendered callback if start/stop indices have changed

// Update onSectionRendered callback.

// Update references in other language definitions

// Update scaleX and scaleY every 100ms or so

// Update scroll offsets if the current :scrollToCell values requires it

// Update scroll offsets if the current :scrollToColumn or :scrollToRow values requires it

// Update the PRNG state:

// Update the cache with all the new values

// Update the editor's `state` prop, without touching any of the

// Update the height of a line, propagating the height change

// Update the internal queue size state for each user:

// Update the state index:

// Update the timestamp for the transaction.

// Update the transaction's current selection. Will determine the

// Update the tree with data leaving all paths leading to matching nodes open

// Update the view by updating existing props object with the object

// Update the view's props. Will immediately cause an update to

// Update values and selection state

// Update w/h

// Updated cell metadata may have hidden the previous scrolled-to item.

// Updated line heights might result in the drawn area not

// Updates a single range in the selection.

// Updates the display.view data structure for a given change to the

// Updates the popup.

// Upload report:

// Upload was cancelled:

// Usage:

// Use Boolean constructor as a filter callback

// Use Byte mode as default

// Use CSS transforms instead of top/left

// Use Eq 45 to extract the result:

// Use Mode.BYTE if Kanji support is disabled

// Use Reflect if exists

// Use `\0` instead of `\x00` where possible.

// Use `util.types` for Node.js 10+.

// Use a `switch` statement to work with class constructors. See

// Use a dynamic array as insertion and deletion is O(1) amortized:

// Use a for loop to avoid recursion

// Use a heuristic to avoid memoization of highly-specialized ndarray constructors, thus effectively introducing "fast" and "slow" ndarray construction paths...

// Use a minimum line width to make selecting easier:

// Use a simple two-term Taylor series...

// Use all marks in the main node, except those that have

// Use at least two and at most n points:

// Use built-in when available, missing from IE11

// Use capture for this listener so it fires before React's listener, to

// Use custom drag image if user specifies it.

// Use first touch if available:

// Use height if placement is left or right and index is 0 otherwise use width

// Use higher error correction level as default

// Use large-sample normality to calculate p-value based on Fisher's z transform...

// Use lowercase letters to refer to letter keys (or uppercase letters

// Use mask-based collision detection.

// Use recursive definition...

// Use requestAnimationFrame to avoid over-updating.

// Use string comparison for regexes

// Use symbols if support is provided

// Use t-test for H0: rho = 0.0 vs H1: rho != 0.0...

// Use the default theme if there are no customizations.

// Use the fastest means possible to execute a task in its own turn, with

// Use the last position in the children array to insert the newNode

// Use the setState() updater to ensure state isn't stale in certain edge cases.

// Use this for adding buttons via the `buttons` key,

// Use unrolled loops if both strides are equal to `1`...

// Used as a reference to the global object.

// Used as hash-set for avoiding the checking of split by rules with the same 'attribute-predicate-pivot' more than once

// Used as scratch variables to communicate multiple values without

// Used both to provide a JSON-safe object in .getHistory, and, when

// Used by hacks like the beforeinput handler to check whether anything happened in the DOM

// Used by react-virtualized

// Used by replaceSelections to allow moving the selection to the

// Used by the `searchMethod` to highlight and scroll to matched nodes.

// Used by the editor's event handler to ignore events that come

// Used by the isClean() method

// Used for DEV mode warning check

// Used for MouseEvent.buttons (note the s on the end).

// Used for cursor motion and such.

// Used for e.button (note the lack of an s on the end).

// Used for horizontal relative motion. Dir is -1 or 1 (left or

// Used for measuring wheel scrolling granularity

// Used for testing.

// Used for the algorithm that adjusts markers for a change in the

// Used for un/re-doing changes from the history. Combines the

// Used in checkLVal and declareName to determine the type of a binding

// Used in deferred mode to track which cells have been queued for measurement.

// Used mostly to find indentation.

// Used to 'clip' out readOnly ranges when making a change.

// Used to [define](#model.NodeSpec.attrs) attributes on nodes or

// Used to add methods to editor and doc instances, wrapping them in

// Used to catch context-menu undo

// Used to cheaply estimate the coordinates for a position. Used for

// Used to check objects for own properties.

// Used to check whether a given description corresponds to a

// Used to detect need to update scrollbar

// Used to determine if values are of the language type `Object`.

// Used to ensure that the line number gutter is still the right

// Used to ensure timeout re-tries don't fire when another extend

// Used to find a DOM range in a single parent for a given changed

// Used to force a redraw

// Used to generate strings for each node type.

// Used to get the editor into a consistent state again when options change.

// Used to group adjacent nodes wrapped in similar parents by

// Used to iterate over a part of the tree.

// Used to only resize the line number gutter when necessary (when

// Used to read character escape sequences ('\x', '\u', '\U').

// Used to read escaped characters

// Used to scroll to a specific position

// Used to signal to callers of `readWord1` whether the word

// Used to signify the start of a potential arrow function

// Used to sort decorations so that ones with a low start position

// Used to store marked span information in the history.

// Used to suppress mouse event handling when a touch happens

// Used to track when changes can be merged into a single undo

// Used to track whether anything happened since the context menu

// Used to work around IE issue with selection being forgotten when focus moves away from textarea

// Used when finding a mark at the top level of a fragment parse.

// Used when mouse-selecting to adjust the anchor to the proper side

// User provided a covariance matrix instead of dataset.

// User provided a dataset but wants us to compute and use the covariance matrix.

// Using "setDelay" instead of "setFrameRate"

// Usually we want to publish it in the next tick so that browser

// Utilities

// Utilities to help with copying and pasting table cells

// Utilities used for copy/paste handling.

// Utility Functions

// Utility for applying a change to a line by handle or number,

// Utility for getTokenAt and getLineTokens

// V8 throws on boxed symbols

// VARIABLES //

// VP8 の場合

// Validate pattern

// Validate some options before others...

// Validate the remaining options...

// Validates as many continuation bytes for a multi-byte UTF-8 character as

// Value at N = 0

// Value is an array of length 2:

// Values greater than 20 do not yield significant improvements in speed.

// Values outside of this range will be wrapped into this range.

// Variable declaration (the colon must be consumed!)

// Variable usage

// Various helper function for working with tables

// Verbose variant of [`apply`](#state.EditorState.apply) that

// Verify that a node is an lval — something that can be assigned

// Verify that the selection does not partially select any atomic

// Verify that there is an actual destination to break or

// Very basic readline/emacs-style bindings, which are standard on Mac.

// Very specific hack to deal with backspace sometimes failing on

// Video

// View descriptions are data structures that describe the DOM that is

// View descs are responsible for setting any selection that falls

// Visible

// W1. Examine each non-spacing mark (NSM) in the level run, and

// W2. Search backwards from each instance of a European number

// W3. Change all ALs to R.

// W4. A single European separator between two European numbers

// W5. A sequence of European terminators adjacent to European

// W6. Otherwise, separators and terminators change to Other

// W7. Search backwards from each instance of a European number

// WARNING: `typeof` is not a foolproof check, as certain envs consider RegExp and NodeList instances to be functions

// WARNING: in C, this is not thread safe

// WARNING: in C, this would not be thread safe

// WARNING: not thread safe

// Wait for more data

// Wait for null event data to indicate that the encoding is complete

// Walk the prototype tree until we find an object having a desired class...

// Walk the prototype tree until we find an object having a desired native class...

// Walk the prototype tree until we find an object having the desired native class...

// Warning: maxLength not taken into account in base64Write

// We also can't just check "__reactInternalSnapshot",

// We also need to adjust to take into account the change in metadata size from when EBMLReader read the original metadata.

// We are getting an array but the user has specified output columns. In

// We are in an Object.assign context, so we need to wrap regular properties

// We are quoting, the char is an escape chr and there is a chr to escape

// We are then defining its children as:

// We can avoid that by doing some simple bounds checking to ensure that scrollTop never exceeds the total height.

// We can do this b/c it's a sorted layout

// We can say that if CSS dimensions + paddings are equal to the "client"

// We can set the width and height on the child, but unfortunately we can't set the position.

// We can use this to conditionally switch layout/direction for right-to-left layouts.

// We can't deeply compare children. If the developer memoizes them, we can

// We can't match functions property, so let's not even try.

// We can't use class properties because they don't get listed in the

// We cannot add this node to the matches right away, as it may be changed

// We consider `result` as expressed base `(RANGE+1)`:

// We consider the content of each node that is open to the left to be

// We dispatch a timeout with a specified delay of 0 for engines that

// We do not return zero-length matches

// We don't expect any of the above to throw, but better to be safe.

// We don't know which browsers have buggy or odd implementations of this, so

// We found a tag, now find its kind

// We get numeric overflow in this area:

// We go 1 magnitude less, for safety

// We go through the items by row and column.

// We handle both situations here by using the ` || ` operator to fallback

// We handle this case in componentDidMount()

// We have a Student's T distribution:

// We have an arcsine distribution:

// We have integer degrees of freedom, try for the special cases first:

// We have nothing to observe. Stop observing, which stops the

// We have to do something nicer than just letting them overlap.

// We must do this at the start of the method as we may calculate and update scroll position below.

// We need logs, and this *will* cancel:

// We need the quantity Pn. Unfortunately, this is computed recursively and requires a full history of all the previous values. No choice but to declare a big table and hope it's big enough...

// We need to check all keys in case some are required but missing from

// We need to check for presence here because a handler function may

// We need to de-construct the string...

// We need to handle both cases, but can't just check for the presence of "maybeSnapshot",

// We need to measure additional cells for this layout

// We need to regenerate the layout.

// We need to save these props to state for using

// We need to wait before we start listening for mousemove events.

// We only are interested in the *last* %c

// We only collect start collecting drag sources on touch and left mouse events.

// We only do this on the main collision as this can get funky in cascades and cause

// We only ignore it once, as pressing Enter a second time *should* insert a newline.

// We only want to re-render if the theme, stylesInterface, or direction change.

// We provide an empty the TabContext so `<Nav>`s in `<TabPane>`s don't

// We return undefined, instead of nothing here, so it's

// We should ensure that the scroll target is visible.

// We should probably do more with beforeinput events, but support

// We shouldn't need this after updating to React v16.3.0, which introduces:

// We want non-word chars around "-" because it is

// We want to consume the whole line

// We wrap tasks with recyclable task objects.  A task object implements

// We'll have to wait for @3x to see if this is entirely correct

// We'll increment its span below.

// We're not interested in answers smaller than machine epsilon:

// We've crossed over so move in opposite direction to last step:

// WebAssemblyRecorder.js

// WebAudio API representer

// WebKit converts symbol values to JSON as null

// Webkit browsers on OS X abort momentum scrolls when the target

// Webkit seems to refuse to render text nodes longer than 57444

// Whammy.js

// WhammyRecorder.js

// What we're doing here is getting the child of this element, and cloning it with this element's props.

// When `locations` is on, `loc` properties holding objects with

// When `locations` is on, you can pass this to record the source

// When `type` isn't given, the existing node type is preserved,

// When a and b differ by a small amount the curve is quite symmetrical and we can use an error function to approximate the inverse. This is the cheapest of the three Temme expansions, and the calculated value for x will never be much larger than p, so we don't have to worry about cancellation as long as p is small.

// When a droppingPosition is present, this means we should fire a move event, as if we had moved

// When a node has grown, check whether it should be split.

// When a store is created, an "INIT" action is dispatched so that every

// When a yielded Promise is resolved, its final value becomes

// When a+b is large then we can use one of Prof Temme's asymptotic expansions, begin by swapping things around so that p < 0.5, we do this to avoid cancellations errors when p is large.

// When adding node from external source

// When an 'electric' character is inserted, immediately trigger a reindent

// When an aspect of a line changes, a string is added to

// When an event has just come in that is likely to add or change

// When an operation has its scrollToPos property set, and another

// When determining the bucket size, avoid overflow...

// When directly calling `measureCharPrepared`, we have to adjust

// When doing this comparison, we have to sort the items we compare with

// When dragging downwards, only move when the cursor is below 50%

// When dragging upwards, only move when the cursor is above 50%

// When editor content is being dragged, this object contains

// When enabled, a return at the top level is not considered an

// When enabled, await identifiers are allowed to appear at the top-level scope,

// When enabled, hashbang directive in the beginning of file

// When enabled, import/export statements are not constrained to

// When enabled, parenthesized expressions are represented by

// When entering a mark, the current top and index are pushed

// When inside a text node, just return the text node's marks

// When lines outside of the viewport are measured, they are drawn in this.

// When no options are passed, use the hook directly

// When parsing in-editor content (in domchange.js), we allow

// When passed a node, call the hook straight away.

// When pasting N lines into N selections, insert one line per selection

// When something is selected, it is present in the textarea, and

// When something updates, drop the redo operations

// When the `locations` option is on, two more parameters are

// When the base of the exponent is very near 1 we get really gross errors unless extra care is taken:

// When the callback returns false for a given node, that node's

// When the collab module receives remote changes, the history has

// When the datepicker is full screen, we never want to focus the end date first

// When the selection is empty and at the end of a textblock, select

// When the selection is empty and at the start of a textblock, select

// When the selection is in a node with a truthy

// When the window loses focus, we want to show the editor as blurred

// When the writable side finishes, then flush out anything remaining.

// When there is a mark of this type in the given set, a new set

// When there's inline content directly after the frontier _and_

// When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,

// When this position points into a text node, this returns the

// When true, or a callback returning true, dropping nodes to react-dnd

// When un/re-doing restores text containing marked spans, those

// When user click with right button the resize is stuck in resizing mode

// When using a custom drag layer, the only way to prevent

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// Whether the command for apply specific text style mark is enabled.

// Whether the selection needs to be redrawn

// Whether the selection was explicitly updated by this transaction.

// Whether the stored marks were explicitly set for this transaction.

// Whether this reset should be careful to leave existing text (for compositing)

// Whether to render lists in a tight style. This can be overridden

// Whether to reset the input textarea

// Whether vertical position motion in a given direction

// Whichever timer succeeds will cancel both timers and

// While the output is causally related to the input, it's not a

// While this element already has a starting transition during this frame,

// Width & height include paddings and borders when the 'border-box' box

// Width of image in destination canvas

// Will be zero for positions that point between nodes.

// Will contain the actual code, positioned to cover the viewport.

// Will contain the gutters, if any.

// Will recognize its own changes, and confirm unconfirmed steps as

// With a wrapped rtl chunk (possibly spanning multiple bidi parts),

// With the plugin enabled, these will be created when the user

// Within the body of any async function, `await x` is transformed to

// Without it we would need to implement separate methods for each of

// Without the global flag, lastIndex won't work

// Without this style, Grid would render the correct range of cells but would NOT update its internal offset.

// Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/

// Work around @2x coordinate discrepancies in browsers

// Work around Chrome issue (#2712)

// Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523

// Work around IE7 z-index bug (not perfect, hence IE7 not really being supported)

// Work around Safari 8 positioning bug

// Work around an issue in Chrome, IE, and Edge where changing

// Work around fat-arrow-detection complication for detecting typescript typed arrow params

// Work around for an issue where an update arriving right between

// Work around https://bugs.chromium.org/p/chromium/issues/detail?id=489206

// Work around issue in Chrome where backspacing sometimes replaces

// Work around nonsense dimensions being reported for stretches of

// Work around nonsensical selection resetting in IE9/10, and

// Work around problem with bounding client rects on ranges being

// Work around unexplainable focus problem in IE9 (#2127) and Chrome (#3081)

// Workaround to get in-selection views selected.

// Works around a throw-scroll bug in OS X Webkit

// Works with __proto__ only. Old v8 can't work with null proto objects.

// Wrap a command so that, when it produces a transform that causes

// Wrap in a new function to prevent

// Wrap subsequent content in a node of the given type.

// Wrap the given [range](#model.NodeRange) in the given set of wrappers.

// Wrap the pattern in a non-capturing group.

// Wrap the selection in a node of the given type with the given

// Wrapper around buildLineContent which will reuse the structure

// Wrapping classes for use with react-dnd

// Wraps a function in an operation. Returns the wrapped function.

// Wraps and hides input textarea

// Wraps everything that needs to exist inside the vertically-padded coordinate system

// Writable ctor is applied to Duplexes, too.

// Writable.

// Writing a hex string, for example, that contains invalid characters will

// X

// XXX (@Qix-) should we be logging these?

// XXX: Do we actually need both `costs` and `open`?

// X[i] is the individual continuous

// You can add multiple keymap plugins to an editor. The order in

// You can define a custom bookmark type for a custom selection class

// You can find some technical background for some of the code below

// You can set an `"addToHistory"` [metadata

// You can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on

// You can use any node as an editor document

// You should probably put this plugin near the end of your array of

// Zero raised to any number (except 0) is always zero => 0^x - 1 = -1

// Zero the buffer

// Zooming can change the DPR, but it seems to report a value that will

// [0] is bottom block: V / f(R)

// [0]: Arithmetic Environment

// [0x1F, 0x43, 0xB6, 0x75] で Cluster 意

// [1] Compute the covariance...

// [1]: Command Substitution

// [2] Normalize the co-moments...

// [2]: Brace expansion

// [3] Compute the standard deviations...

// [4] Set the diagonal elements to 1:

// [5] Compute the correlation coefficients...

// [CommonMark](http://commonmark.org/).

// [EBML][size]....[Segment][size][Info][size][Duration][size]...[Cluster]

// [`AllSelection`](#state.AllSelection) if no valid position

// [`EditorState.tr`](#state.EditorState.tr) to create an instance.

// [`KeyEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).

// [`OrderedMap`](https://github.com/marijnh/orderedmap) instances

// [`ReplaceError`](#model.ReplaceError) is thrown.

// [`Selection.near`](#state.Selection^near) when the document

// [`Step.jsonID`](#transform.Step^jsonID).

// [`Transform`](#transform.Transform)), but also other state changes,

// [`bulletList`](#schema-list.bulletList) as `"bullet_list"`, and

// [`code`](#model.NodeSpec.code) property in its spec, create a

// [`code`](#model.NodeSpec.code) property in its spec, replace the

// [`decorations` prop](#view.EditorProps.decorations). They come in

// [`dispatchTransaction`](#view.DirectEditorProps.dispatchTransaction)

// [`init`](#state.StateField.init) method, passing in the new

// [`joinBackward`](#commands.joinBackward) or other deleting

// [`joinForward`](#commands.joinForward) and similar deleting

// [`keymap`](#keymap.keymap), return a [keydown

// [`liftTarget`](#transform.liftTarget) to compute `target`, to make

// [`listItem`](#schema-list.listItem) as `"list_item"`.

// [`macBaseKeymap`](#commands.macBaseKeymap).

// [`orderedList`](#schema-list.orderedList) as `"ordered_list"`,

// [`parseSlice`](#model.DOMParser.parseSlice) methods.

// [`parse`](#model.DOMParser.parse) and

// [`parse`](#model.DOMParser.parse), and takes the same set of

// [`pcBasekeymap`](#commands.pcBaseKeymap) or

// [`replace`](#transform.Transform.replace) method is a more

// [`serializeFragment`](#model.DOMSerializer.serializeFragment) on

// [`setSelection`](#state.Transaction.setSelection).

// [`state`](#state.PluginSpec.state) property) of this type, which

// [`toDOM`](#model.NodeSpec.toDOM) method of their spec, and managed

// [`undo`](#history.undo) and [`redo`](#history.redo) commands.

// [`updateState`](#view.EditorView.updateState) with the result.

// [a] Extract the values and compute the deltas...

// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API

// [b] Update the covariance between one array and every other array...

// [c] Update the means...

// [composition](https://developer.mozilla.org/en-US/docs/Mozilla/IME_handling_guide)

// [define](#view.EditorProps.nodeViews) a custom node view.

// [defining](#model.NodeSpec.defining).

// [determined](#model.NodeSpec.attrs) by the node type.

// [example] [id]

// [example](http://example.com "Optional title")

// [example][id]

// [excluded](#model.MarkSpec.excludes) by this one.

// [exclusive](#model.MarkSpec.excludes) with this mark are present,

// [id]: <http://example.com> "Optional title"

// [id]: http://example.com "Optional title"

// [id]: http://example.com 'Optional title'

// [id]: http://example.com (Optional title)

// [isolating](#model.NodeSpec.isolating) parent nodes.

// [markdown-it](https://github.com/markdown-it/markdown-it) to

// [object](#model.ResolvedPos) with information about its context.

// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser

// [priority](#model.ParseRule.priority).

// [props](#view.DirectEditorProps).

// [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678

// [registered](#state.Selection^jsonID) your class.

// [semi-standardized][range] `range` property holding a `[start,

// [step](#transform.Step) that inserts it. Will return null if

// [steps](#transform.Step) representing a document transformation.

// [tag](#model.Node.type) `Node` instances. They contain information

// [tagged](#model.Mark.type) with type objects, which are

// [the guide](/docs/guide/#doc) for more information.

// [{title: 'main', subtitle: 'sub'}, { title: 'value2', expanded: true, children: [{ title: 'value3') }] }]

// \[lookahead = c]

// \b \B

// ^, $

// _________

// __________ (used to handle stuff like http://goo.gl/xmE5eg) issue #129

// ____________

// _____________

// ______________

// ______________ (indexed-db)

// ________________

// _________________

// __________________

// _____________________

// ______________________

// ________________________

// __________________________

// _____________________________

// __isInt(value){

// __strong__

// __webpack_public_path__

// _em_

// _read(n) is called, it transforms the queued up data, calling the

// _transform does all the work.

// _usually_(not always since there could be multiple style tags)

// ` inline code

// `"block"`.

// `"paragraph (ordered_list | bullet_list)*"`. `listGroup` can be

// `(endHigh - 1, LOW_SURROGATE_MAX)`.

// `(k<<18)` can be considered the word equivalent of `1.0` or `1.5`

// `0,16` range that was previously added.

// `2` may be desired in some cases – research later

// `<!--`, an XML-style comment that should be interpreted as a line comment

// `Fragment.empty` as content.

// `INV_LN2_HI` has `21` significant bits

// `Meta-`) are recognized. For characters that are created by holding

// `NaN`, `+Infinity`, or `-Infinity`

// `NodeType` instance. Attributes will be extended

// `ProseMirror-gapcursor`. You can either include

// `Schema`, which controls which types exist and which

// `[0, 16, 12, 16]`. Remove the `12,16` part, as it lies within the

// `[start, end]` pair before the current pair, or after the current pair

// `\2` is handled. In case the local decision turns out to be wrong after

// `_writableState` that would lead to infinite recursion.

// ```

// ``` code block

// ```javascript

// ```optional language

// ``code``

// `a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or

// `allowEmpty` can be turned on to allow subsequent commas with

// `appendMap`).

// `basicLength` is the number of basic code points.

// `bias` determines whether the method searches forward (default)

// `binop`, when present, specifies that this operator is a binary

// `blockSeparator` is given, it will be inserted whenever a new

// `call`, just like a function.

// `cancel` potentially being assigned

// `children` is an array of child nodes belonging to the node.

// `class` and `function` keywords push new context into this.context.

// `code`

// `contrast`

// `costs` in that it provides easy access to the node that currently has

// `d` is one more than the index of the last consistent dimension and thus equal to the number of consistent dimensions:

// `df = 1` is the same as the Cauchy distribution, see Shaw Eq 35:

// `df = 2` has an exact result, see Shaw Eq 36:

// `e0 = ilogb(z) - 23` => unbiased exponent minus 23

// `ecmaVersion` indicates the ECMAScript version to parse. Must be

// `end` doesn’t. E.g. `[0, 11, 12, 31]` and we’ve added 5-15, so

// `end` lies within the range that was previously added as well,

// `equals`

// `expanded` shows children of the node if true, or hides them if false. Defaults to false.

// `firstDelim` is a function going from an item index to a

// `getBoundingClientRect` on that DOM node. Do **not** mutate the

// `handleDOMEvents`, where the handler itself is responsible for that.

// `handledCPCount` is the number of code points that have been handled;

// `hasOwn.call(value, "__await")` to determine if the yielded value is

// `historyPreserveItems` property in its spec, in which case we must

// `hslToRgb`

// `hsvToRgb`

// `i` was supposed to wrap around from `out` to `0`,

// `if (foo) /blah/.exec(foo)`, where looking at the previous token

// `inclusive` set to false and are not present in the other node.

// `index` is the index of the next character to be consumed.

// `initial`

// `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as

// `isLoop` marks a keyword as starting a loop, which is important

// `isReadable`

// `isStatement` parameter).

// `isValidCSSUnit`

// `itemContent` determines the content expression for the list items.

// `jp+1` is the number of terms in `PIO2[]` needed:

// `l1` and `l2` are the base of the exponents minus one:

// `locations` is on or off.

// `locations` option is off (for performance reasons) and you

// `mapResult` is called.

// `maxTouchPoints` works on IE10/11 and Surface

// `minPrec` provides context that allows the function to stop and

// `mostReadable`

// `new`, or an expression wrapped in punctuation like `()`, `[]`,

// `nodeType` is the type of node to wrap in. If it needs attributes,

// `null`, a `Node`, or an array of nodes.

// `null`. Similarly `marks` may be `null` to default to the empty

// `onInsertedSemicolon` can be a callback that will be called

// `onTrailingComma` is similar to `onInsertedSemicolon`, but for

// `ontouchstart` check works on most browsers

// `origins` holds the _original_ transactions that produced each

// `p.index(0)` is 1 and `p.index(1)` is 2.

// `parseStatement` will already have parsed the init statement or

// `pred` and is closest to `from`. Assumes that at least `to`

// `prefix` and `postfix` mark the operator as a prefix or postfix

// `process.on("uncaughtException")` or by a domain.

// `program` argument.  If present, the statements will be appended

// `program` option in subsequent parses. This will add the

// `rawAsap` unless and until one of those tasks throws an exception.

// `realHasInstance` is necessary because using plain `instanceof`

// `requestFlush` is implemented using a strategy based on data collected from

// `requestFlush` requests that the high priority event queue be flushed as

// `rgbToHex`

// `rgbToHsl`

// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:

// `rgbToHsv`

// `rgbToRgb`

// `rgbaToArgbHex`

// `rgbaToHex`

// `rows` and `cols` are the dimensions of the output matrix.

// `selectedCell` CSS class.

// `setImmediate` must be called *by name* and therefore must be wrapped in a

// `setTimeout` does not call the passed callback if the delay is less than

// `setimmediate` library.

// `sourceType` indicates the mode the code should be parsed in.

// `startLoc` and `endLoc` properties.

// `start` and `end` are omitted, all decorations in the set are

// `start` and `end` properties (directly on the node, rather than

// `start` and `end` properties in `{line, column}` form (with

// `start` lies within the range that was previously added, but

// `start` lies within the range that was previously added.

// `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion

// `stringInputToObject`

// `style/gapcursor.css` from the package's directory or add your own

// `style` attribute, `addElementWithStyles`.

// `subtitle` is a secondary label for the node

// `table`, `table_row`, and `table_cell` nodes types as used by this

// `text` is the content of the comment, and `start` and `end` are

// `this.children`.

// `this.top`.

// `title` is the primary label for the node

// `to` point directly before and after the selected node, `anchor`

// `to`, and the slice's [`openStart`](#model.Slice.openStart) property

// `true`.

// `tt.name`.

// `type` property whose value matches the ID under which you

// `useCapture` is set to true by default so that a `stopPropagation` in the

// `wrappingInputRule` function.

// `x` has a biased exponent greater than or equal to `0`...

// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test

// `yield` expression. It is set on all token types that either can

// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`

// `|y| > 2^64`, then must over- or underflow...

// `|z| > 0.5`, set `n = z+0.5`

// a = -1/w

// a DOM selection change and the "selectionchange" event for it

// a Promise means "currently loading".

// a ProseMirror document conforming to a given schema. Its behavior

// a `"uiEvent"` property of that may be `"paste"`, `"cut"`, or `"drop"`.

// a capacity of 17 after pushing the first item), or slicing out a subarray

// a change event.

// a dictionary of setid to list of circles that completely overlap it

// a different cell above them, add a decoration

// a duplex stream is just a stream that is both readable and writable.

// a fallback kludge when not supported.

// a flag to be able to tell if the event 'readable'/'data' is emitted

// a flag to be able to tell if the onwrite cb is called immediately,

// a flag to know if we're processing previously buffered items, which

// a flag to see when we're in the middle of a write.

// a flat array.

// a fragment. Calls `onNode` for each node, with its local and child

// a given node, by looking at the way the mark occurs in the schema.

// a given position is a valid end of the node.

// a hard break, or a text node that ends with whitespace, strip the

// a head (the moving side) and anchor (immobile side), both of which

// a in [0, 1]. Returns a 4 or 8 character rgba hex

// a is equivalent to this

// a more abstract-ish API

// a new empty registry is used when creating a template contents owner

// a nextTick recursion warning, but that's not so bad.

// a node's spec (typically used when the node is displayed as an

// a particular area is on top (relativeTo) - and

// a particular column.

// a passthrough stream.

// a pathological inflate type of transform can cause excessive buffering

// a position points into a text node, that node is not considered

// a read from the buffer.

// a reference to user's recordRTC object

// a second time with the total normal-groups.

// a selection starts in such a node and ends in another, in which

// a selector must start at the end of a property or after a brace (end of other rules or nesting)

// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding

// a single operation, or are close together with an origin that

// a single range, e.g. `dataAdd([0, 4, 5, 10], 4)` → `[0, 10]`.

// a single set when possible.

// a size change it will result in a misaligned popper. So we schedule an update to be sure.

// a string or number, in which case it is ignored, to support the

// a string precedes the next number in b

// a super limited subset of the node buffer API

// a terminator of up to four 0s must be added to the right side of the string.

// a transform stream is a readable/writable stream where you do

// a trick to get signed

// a wrapping list.

// a zlib stream might take multiple plain-text writes(), and then

// a) and c)

// a) function foo {

// a..z

// aB     a|B     aB|

// ab     a|b     a|b

// able to install onto.  Search each possibility in the same order as the

// about the node type, such as its name and what kind of node it

// above or below them in the parent document.

// absolute value high word `x`

// absolutely positioned element rendered above the viewport (only below).

// abstract method.  to be overridden in specific implementation classes.

// accepted in property names.

// accessibility

// accessibility props

// accessing global.localStorage can trigger a DOMException in sandboxed iframes

// accidentally pass it on to the delegate.

// account for dedented class constructors

// account for possible declaration `width: 100%;` on body

// account for touch devices

// account for vertical scrollbar

// achromatic

// action.

// actions that shouldn't happen until "later" should generally also

// active or the character produced isn't ASCII, and our table

// active plugins. State fields that exist in both sets of plugins

// active.

// actual character (or fetches it from the cache).

// actual element/character rectangles to get a solution (this part

// actual scrolling happens, reducing flickering.

// actually covering the viewport. Keep looping until it does.

// actually exist within the document.

// actually hit the arrow token. It only works if the arrow is on

// actually part of the list item above it.

// actually possible. Otherwise, it causes vertical scroll

// adapted from https://github.com/facebook/react/blob/144328fe81719e916b946e22660479e31561bb0b/packages/shared/shallowEqual.js#L36-L68

// add "__proto__" for Object.getPrototypeOf polyfill

// add 'maybe-class-name' to tokens which might be a class name

// add .toArrayBuffer() method only when Uint8Array available

// add .toBuffer() method only when Buffer available

// add a custom class to let the user customize the element

// add a token for each prefix

// add alias

// add binary data sequence to buffer

// add default propTypes for folks that use runtime checks

// add doc comment: /** */

// add extraWidth to the detected width. for number types, this defaults to 16 to allow for the stepper UI

// add four 0s to the end.

// add function

// add in missing pairwise areas as having 0 size

// add missing metadata

// add most overlapped set at (0,0)

// add nodes to the start or end of the given fragment to make it

// add the value for all dimensions of the point

// add unit if the value is numeric and is one of the following

// added to it. This is a useful default which helps finding memory leaks.

// added. As an optimization, line widget aligning is skipped when

// adding delimiters, and so on), and then optionally add content

// adding it to the listeners, first emit "newListener".

// additional methods and properties).

// additional transforms, not from

// additional width for input element

// adds a point to the output

// adjust to the authority's view of the document.

// adjust w && h to maximum allowed space

// advancing the input stream and returning an AST node. Precedence

// after a `yield` or `of` construct. See the `updateContext` for

// after error

// after it. Returns the merged step when possible, null if the

// after the bite. Otherwise add them at the end).

// afterwards- we wouldn't want to ignore the keydown event in this case.

// against the node type's content restrictions, and throw an error

// algorithm, to deal with browser quirks.

// algorithm. `left` is the left-hand side of the operator.

// aliased for consumers

// aligned.

// all credits and original code to the author

// all enumerable object keys, includes symbols

// all other areas are so that the smallest areas are on top

// all other browsers

// all previous Promises have been resolved before calling invoke,

// all the css 'style' of the parents must be transferred to the children

// all the if statements are to appease Flow 😢

// all, so a binary search doesn't work, and we want to return a

// allocate all memory up front here, keep out of the loop for perfomance

// allocate the first CorkedRequest, there is always

// allow deletion at the selected point.

// allow for multiline macro definitions

// allow function declarations in branches, but only in non-strict mode

// allow one nested instance of bold text using the same delimiter

// allow one nested instance of italic text using the same delimiter

// allow users to set options using startRecording method

// allowed.

// allows for nested Transitions

// allows merging (starting with "+") into a single event.

// allows seeding via an externally seeded PRNG

// allows the tokenizer to store the information it has about a

// already have a bunch of data in the buffer, then just trigger

// already have an existing method we want to call, so there's no need

// already have that attribute set to that value.

// already run). Skip creating the policy, as this will only cause errors

// also directly pass a DOM node. `getPos` can be used to find the

// also ensures that the minifier will not anonymize the function.

// also object key order independent (easier since they can be alphabetized)

// also returned false.

// also update constraints to indicate if its a subset or disjoint

// also worth checking out is

// also, that means that the chunk and cb are currently

// alter Buffer.concat - https://github.com/feross/buffer/issues/154

// alternative to using Object.keys for old browsers

// alternative way to split lines.

// always called with the plugin instance as their `this` binding.

// always follow `open` in controlled mode

// always follow error

// always return "true"

// amount of characters. For other leaf nodes, it is one. For

// amount of input, and end up with a very large amount of output.  In

// amounts to a very basic focus trap. The user can exit the panel by "pressing" the

// an array of bottom offsets for the lines that make up a drawn

// an array. `close` is the token type that ends the list, and

// an error, then that'll put the hurt on the whole operation.  If you

// an event 20 times per second until it succeeds.

// an item past the barrier. They can push items beyond the barrier, though.

// an off. When this option has the value "never", reserved words

// analyse of all frames takes some time!

// anchor (<0 is to the left, >0 to the right)

// and "client" properties, though that is not always true in Chrome.

// and 'resetSelectionOnContextMenu' option is true.

// and .done properties off the next function object itself. This

// and 00010001 (0x11) alternately.

// and D3 won't necessarily update (fixes https://github.com/benfred/venn.js/issues/103)

// and `right` will be the same number, as this returns a flat

// and add least significant byte to product

// and after `char - 1` in writing order of `char - 1`

// and also looks for line-wide styles.

// and are also not enumerable in the native implementation.

// and are at the start or end of a parent node in which the given

// and before `char` in writing order of `char`

// and called read() to consume some data.  that may have triggered

// and can thus safely be extended.

// and content drawing. It holds references to DOM nodes and

// and create a ProseMirror document as prescribed by this parser's

// and customize as needed.

// and data mode

// and don't consider for purposes of computing the text

// and don't want to reset the set in the effect

// and drop the descs before it.

// and each group is converted to its 10-bit binary equivalent.

// and encoded as 11-bit binary codes.

// and end token).

// and end-of-level-run (eor) are used at level run boundaries.

// and ensure the document's width matches it.

// and h scrollbar is present.

// and head cell.

// and height. In this case, though, returning null from render()

// and https://github.com/bpampuch/pdfmake/issues/205

// and if successful, rebuilds the slice so that it fits into that parent.

// and if there was a path

// and insert it.

// and is only available when the currently selected cell doesn't

// and keywords can also not be used as property names.

// and line object, and to find the total height of the document.

// and marked text into account.

// and must be a certain number of bits long, depending on the QR version

// and not the bottom of the html element

// and object pattern might appear (so it's possible to raise

// and optionally a set of attributes that provide further information

// and preventDefault-ing the event in that handler.

// and produces good color mapping at reasonable speeds. 

// and provide reference for storing '=' operator inside shorthand

// and refer to originalPlacement to know the original value

// and return it along with its index and offset relative to this

// and returns null if it was. forRect is used by rectangular

// and simulates a backspace press in this case.

// and so it should start at the end of last read token (left brace) and finish

// and so steals focus from it

// and some helper methods.

// and split those so that only fully overlapping spans are left (to

// and start scrolling if necessary

// and taking the point with the biggest margin

// and the components are attached to dnd-core

// and the new document.

// and the one after it, either by joining them or by moving the other

// and the second argument - flag - preferred type is a string

// and the settings are set to do so.

// and then, because it's not editable, hide the virtual keyboard.

// and there are more children on the level of this node, return without insertion

// and there will be very few iterations of this generally

// and this field can't be associated to a key present in columns

// and try there, even if the original position wasn't directly at the

// and undefined/non-string values are only allowed in object mode.

// and update accordingly with a percentage

// and update the areas

// and use that angle to figure out the width of the

// and used by the view class.

// and we could have a special build just for that

// and we need to re-evaluate how much data we can return to the user.

// and which can be used to transform between positions in the old

// and whose decorations match the new ones.

// and you add 5-15 → `[0, 16]`, i.e. remove the `12,14` part.

// and you can only have one source map per style tag

// and, *if* the syntactic construct they handle is present, wrap

// and, from that, detects the way it can convert deltas to pixel

// animating state should be cleared while resizing, otherwise autoplay stops working

// animation-frame used in WebM recording

// announce that option is disabled

// another mark.

// another read() call => stack overflow.  This way, it might trigger

// answer: probably not

// any actions that shouldn't happen until "later" should generally also

// any additional property we may add in the future

// any content-expression checking done on the top nodes, tries to

// any necessary setup in a predictable way. This predictability

// any number of extending chars is treated as a single unit as far

// any of such methods are called

// any of the node view methods.

// any property present in `data.attributes` will be applied to the popper,

// any property present in `data.styles` will be applied to the popper,

// any rowspan cells by splitting cells that cross it. Return true if

// any text. Mark the dom change to fall back to assuming the

// any type.

// any. (Will not select the document node.)

// anymore

// anything else is assumed to be absolute.

// anything, or an element merely doesn't have paddings/borders styles.

// anyway.

// apart from the props value. By the time the popper element is rendered with

// apparently only works on the dialog role element

// appear among text).

// appear in `map` after the keys in `map`.

// appear in `map` before the keys in `map`.

// appear in `map`.

// appearing at the top of the program.

// appears because of the grid. In that case, fire your own resize event, or set `overflow: scroll` on your body.

// appendChild can insert the materialized enter node before this node,

// applicable.

// applies to the whole line, and the measurement of the actual

// apply default style

// apply minimal style if wanted

// apply the lock styles and padding if this is the first scroll lock

// appropriate. Remaining unconfirmed steps will be rebased over

// approximately 7 in web workers in Firefox 8 through 18, and sometimes not

// arbitrary, and perhaps not very meaningful.

// arc

// arcsin(1-x) = pi/2 - sqrt(2x)(1+R(x))

// are allowed.

// are also available from CodeMirror (editor) instances.

// are based on the strings that can appear in

// are being used under the hood.

// are inside of this node, and the node isn't already part of a

// are kept unchanged. Those that no longer exist are dropped, and

// are left alone.

// are needed to reach the required number of bits.

// are not repeated, and it does not try to bind the words `eval`

// are part of a visual line that starts with another line, or when

// are simply ignored.

// are the ones that are *expected* to be seen, so we fast-path

// are treated specially, in order to make the association of line

// area, ensure viewport is updated when scrolling.

// aren't currently visible.

// argument list.

// argument that corresponds to a known catch block.

// argument to parseSubscripts to prevent it from consuming the

// argument, it calls that for each line in the document. With

// argument.

// arguments passed either before or after the %c, so we need to

// arguments. Create a successful result if it succeeds, and a

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

// aria attributes makes the JSX "noisy", separated for clarity

// around contentEditable terribleness.

// around those blocks in their shared ancestor is returned. You can

// array of boolean

// array of colors

// array of strings was passed, if their node type name is in that

// array.

// array.shift()

// arrays of edges, which are `{term, to}` objects. The first state is

// arrays with one element for each line in (after) the change.

// arrow depends on keepTogether in order to work

// arrow, and not declare the arguments as locals for the arrow

// as a micro-optimization.

// as a non-relevant.

// as being an iOS enter press), just dispatch an Enter key instead.

// as createPortal was introduced in React 16

// as editing and measuring is concerned. This is not fully correct,

// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring

// as hints, rather than fixed start and end points. This method may

// as normal characters.

// as second argument.

// as soon as we *do* get something into the buffer.

// as the base in case because it may be more up to date than

// as the hot path ends with doWrite

// as the last (content-order) character).

// as the second character will happen less often than

// ascending copy from start

// ascii

// asm type annotation

// asm type annotation; possible integer overflow

// assignment should always work unless something is misconfigured. Just

// associated segment data).

// assume that it's an IPv6 address.

// assume utf8

// assumed to match.

// assumption is that looking up astral identifier characters is

// async functions in terms of async generators, it is especially

// at `j` is the size of the first non-prepended dimension

// at `pos`, if any.

// at each position to figure out where to put it at

// at http://marijnhaverbeke.nl/blog/#cm-internals .

// at least one last frame should be available for next manipulation

// at the beginning of the next one (right brace).

// at the old document shape. This is made cheaper by sharing

// at the selection, match the given set of marks. Does nothing if

// at the start of calling end()

// at this point, either we have an explicit point where the

// at this point, the user has presumably seen the 'readable' event,

// at-rule

// atSign can be anywhere.

// attribute at the time.

// attributes allowed and required are

// attributes they have.

// attributes, and marks.

// attributes.

// attrs in the dom, that won't be picked up. Not entirely sure

// attrs means that if the user somehow manages to change the

// audio diff

// audio timecode

// audio-only recording

// auth portion cannot go past, or the last @ char is the decider.

// authority. Starts at 0 or the value of the `version` property

// autofocus after onShow to not trigger a focus event for previous

// autofocus and no other element is focused.

// automatically move focus into the dialog by moving

// automaton that describes the content expression.

// avoid extra slice()

// avoid false positives in the contains() check below if the target DOM

// avoid mem leaks in IE.

// avoid re-renders if the placement has not changed

// avoid scope creep, the keys array can then be collected

// avoid to make this modifier completely useless and look like broken

// b (BN):  Boundary Neutral

// b)

// b) foo() {

// backspace, delete, and similar functionality.

// backspacing out the first element in a textblock

// backward compatibility

// backward compatibility, the user is explicitly

// backwards compatibility.

// bail early if no element is available to attach to

// bail early if not enabled

// bail early if required elements aren't present

// bars are the only difference between rounded dimensions + paddings

// base X position

// base64 encoded url.

// base64 is 4/3 + up to two characters of the original data

// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`

// based on the java naming conventions

// based on their surrogate pairs.

// based on: github.com/GoogleChromeLabs/webm-wasm

// basic structure and shared methods.

// basically just the most minimal sort of Transform stream.

// be a `[]` or dot subscript expression, but not a call — at least,

// be a valid example of a transform, of course.)

// be able to do that, positions saved in the map are relative to the

// be configured with the [`atom` property](#model.NodeSpec.atom) on

// be followed by an expression (thus, a slash after them would be a

// be future ones caused by CSS transitions.

// be generated.

// be in future...

// be influenced by the [transaction

// be made to match by inserting nodes in front of it. When

// be numeric, and `1 + 2 + '3' === '33'`)

// be replaced by whatever the Enter key handlers do.

// be set to the container width. Note that resizes will *not* cause this to adjust.

// be the first character in state.src, which is known since

// be the first ones in prod and generally later in dev

// be used here.

// be wrapped, and have the extra elements added to the wrapper div

// because "self.audioContext" is not initialized

// because `rebased` relies on a clean, untouched set of items in

// because each remote change adds one. The `upto` argument is used

// because it fixes readable/writable streams issues

// because it is fragile and can be easily faked with `Object.create()`.

// because otherwise some prototype manipulation in

// because that's known to be hostless.

// because the final record is an object

// because there's no indication that that is the case once the datepicker is open and it

// because they might be escaped, we need a lookbehind, so we use Prism

// because this module is primarily intended for the browser and node

// because this should sync the subtree for a whole node at a time.

// because we will override it

// before actually updating the DOM, which will cause

// before and after a node in the document. That node, and only that

// before closing marks.

// before the event, the event's positions are updated. Uses a

// before the position is returned.

// before there was *not* enough.

// begin flushing on the next task the task throws an error.

// beginning of the queue.

// behavior as without this statement except with a better message.

// behavior. The continuation byte check is included three times in the case

// being processed, so move the buffer counter past them.

// being wrong would just be a slight flicker on the first wheel

// below function via: http://goo.gl/B3ae8c

// better than glitching out.

// between events.

// between non-editable block nodes. We briefly make something

// between rows, fix up the cells whose width doesn't match the

// between the two given positions.

// between them.

// bidirectionally map sets to a rowid  (so we can create a matrix)

// binary operators with a very low precedence, that should result

// bind

// bind timers to global for call from export context

// bindingType can be either:

// bit field unset if the left mouse button has been released

// bit hacky...

// bits per sample 

// bitsPerSecond: 256 * 8 * 1024,

// block align (channel count * bytes per sample) 

// block before (or after if `dir` is positive). Returns the joinable

// block closer to this one in the tree structure. Will use the view

// block node is started. When `leafText` is given, it'll be

// block selections.

// block.

// block. If not, we call `posFromDOM` on the raw node/offset.

// block: 'nearest',

// body.

// boolean indicating whether this is a block (`/* */`) comment,

// both side are ‘open’ (cut through).

// bottom limit

// bottom of the table.

// bottom-left

// bottom/right side

// bound to keys like backspace, after

// bound to return false, and to make sure that cursor-motion keys

// bound.

// boundaries) and match the given predicate on their spec. When

// boundaries.

// brace, it's an ExpressionStatement or LabeledStatement. We

// break out of the loop

// breaks loose when it comes to block scoping

// breaks the CSS transition.

// bring active slide to the beginning of visual area

// broken by replacing non-ASCII by nothing

// browser is IE, and can also be disabled by the `injectStyles` prop.

// browser)

// browser) is a `parse` function that takes a code string and

// browser, the selected range should be visible to the user. Defaults

// browsers give this different errors name and messages:

// browsers support it yet.

// browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339

// buffer slice

// buffered _write cb's as it consumes chunks.  If consuming a single

// buffered up.  When you call read(), that calls _read(n) until

// buffers into a series of JS strings without breaking apart multi-byte

// bug in node.  Should never happen.

// bug: find a way to clear old recorded blobs

// build a selection out of it. 'Consumes' ranges array (modifying

// building up an actual levels array. Since there are only three

// bumped when mode/overlay changes, used to invalidate highlighting info

// but d3 3.0 used 'each' instead. switch appropiately

// but for backwards compatibility we export as the old name

// but guard against overflow

// but in some cases (e.g. `for` statements), we need to create

// but it's also required in react native and similar environments sometimes

// but js number is float64, so max 6 bit

// but js number is float64, so max 6 bit octets

// but not “foo {”

// but slow processing significantly. 10 is the default, 

// but that's not a great name for it, since that implies a thing where

// but they are still not allowed in non-async functions.

// but this is much easier and the native packages

// but using getBoundingClientRect to get a sub-pixel-accurate

// by a DOM change, so that the next update will redraw it.

// by a digit or another two dots.

// by a namespace URL and a space. If the second element is plain

// by adding a data-tt-policy-suffix to the script element with the DOMPurify.

// by checking all node boundaries in their parent nodes.

// by isIdentifierStart in readToken.

// byte rate (sample rate * block align)

// byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer

// bytes are well-incorporated.

// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in

// c ClassControlLetter

// c) function foo() {

// c1

// c2

// c3

// cache bypass so we dont have CORS issues with cached images

// cache inner-loop calculations as they are based on t alone

// cache the result of stylesFn(theme)

// cached from whatever global is present so that test runners that stub it

// calc. points

// calculate _styleCache here

// calculate children to render here

// calculated in the past if the objects they're derived from have not

// calendar presentation and interaction related props

// calendar presentation props

// call `rawAsap.requestFlush` if an exception is thrown.

// call cb(er, data) where data is <= n in length.

// call internal read method

// call invoke immediately, without waiting on a callback to fire,

// call something on iterator step with safe closing on error

// call the draw function

// call the tree layout function on the data

// callback for occassions where the menu must "flip"

// callbacks

// callbacks from appending listeners

// callback—that will corrupt its internal state.

// called one at a time, starting with the base props and then

// called when the widget is actually drawn in a view, but you can

// calls the onChange callback on the new treeData

// calls them one by one until one returns true).

// can "pass" as a selector- e.g: proper#{$erty})

// can be disambiguated. Try to pick something that's unlikely to

// can be kept static when scrolling.

// can be lifted. Will not go across

// can be used to find the correspondence between positions in the

// can cause a spurious DOM selection update, disrupting mouse

// can optionally pass `start` and `end` indices into the

// can reliably accommodate that request. This will usually be snapped

// can't set metadata to uncaught frozen object

// can-promise has a crash in some versions of react native that dont have

// cancel mouse events when disabled

// cancel scroll

// cannot be dynamically set after type has been removed

// cannot get keys using array notation with DOMRect

// care to call `preventDefault` on the event, except with

// case it should overwritten)

// case no marks should be preserved).

// case we just use whatever domFromPos produces as a best effort.

// cases want to overflow. A 64-bit float can represent 48-bit

// cast to ints.

// cause Acorn to call that function with `(block, text, start,

// cause Acorn to call that function with object in the same

// cause everything after the first invalid character to be ignored. (e.g.

// cause later handlers to get removed. This can happen if you for

// cause the system to run out of memory.

// causes a decoration to show up at the drop position when something

// caveat for [`$from`](#model.NodeRange.$from).

// cell selection to be created).

// cell-based copy/paste, and makes sure tables stay well-formed (each

// cell-selection is happening, so that it can continue even as

// cells at the start or end of the rows (if it looks like a 'bite'

// cells.

// central authority in the collaborating group and makes it possible

// central authority.

// centre

// chance to clean up.

// chance to tick (and possibly end); see d3/d3-transition#54!

// change is on 3

// change parameter name when same as method name

// change the type of the NSM to the type of the previous

// changed "44" to "36" via #401

// changed.

// changes to a European number. A single common separator between

// changes to the function body.

// character at that position, relative to the window.

// character in a list item or table cell (#708, #862)

// character offsets that denote the start and end of the comment.

// character position, returning an array of remaining chunks (or

// character.

// character. Functions like coordsChar, that need to do a lot of

// character. If the NSM is at the start of the level run, it will

// characters in the part's range

// characters it is given as second argument, and returns a token

// characters, and returns inaccurate measurements in nodes

// characters.

// charcode for b

// charcode for l

// chars). The visually param controls whether, in right-to-left

// cheap lodash replacements

// check 'async [no LineTerminator here] function'

// check children

// check for keywords used as local names

// check for visited object

// check if the element has a "style" attribute

// check if we have 'width' and 'height'

// check if we have inherent styles to apply when a text is inside several <tag>

// check input is sane

// check on default Array iterator

// check rowspan for the current row in order to then apply it to the next ones

// check that closing delimeter isn't followed by a number

// check the node type

// check whether the element under the pixel in the bottom

// check which kind of tag we have

// checked and defaulted (you can pass `null` to use the type's

// checks that all sets are in exclude;

// child index) with the given replacement fragment (which defaults

// children may also contain string filled with spaces (in certain cases where we use jsx strings)

// children of the last item

// children that are also instances of `Node`.

// children will not be recursed over. The last parameter can be

// children will not prevent all outside click handlers from firing - maja

// children.

// chooses a random point as initial cluster

// chooses the more distant point

// chooses the set of points that maximises the min distance

// chop off any delim chars.

// chop off from the tail first.

// chrome 58 ではこれを回避するために DefaultDuration 要素を抜き取った。

// chrome 58 以前でもこのタグを抜き取ることで回避できる

// chrome 9-10 lack `subarray`

// chrome-based fallback

// chrome/safari: "RangeError", "Maximum call stack size exceeded"

// chunk of lines in them, and branches, with up to ten leaves or

// chunks.

// circular references

// clamp the width to the largest is can actually be

// clamped

// clash with classes from other modules.

// class factory

// class name could be used further down

// class prototype and break stuff like Sinon stubs

// className for the input element

// className for the outer element

// classes because the mode may output tokens that influence these

// classes must register themselves with an ID string, so that they

// classes.

// clean up any unclosed Master Elements at the end of the stream.

// clean up the container

// cleanly divide the values into the appropriate subpixels.

// cleanup bookkeeping

// cleanup event handlers once the pipe is broken

// client[Width/Height] properties represent viewport area of the window.

// clipping (or hiding) overflowing elements with a position different from

// clipping parents

// clone children in order

// clone layout so we don't modify existing items

// close button or hitting escape

// close main group if set, logging is enabled, and has actually logged anything.

// close the menu if the user taps outside

// closest ancestor block of the selection that can be joined, with

// closure.

// code block

// code matches their width.

// code unit is the high surrogate of a surrogate pair

// coercion fail below.

// coherent slice, and will fail to place a set of siblings that don't

// collaboration or history management.)

// collapse, even when it should be valid. This appears to be a bug, but

// collapsed ranges (see markText) that might hide parts, and join

// collapsed spans). The widgets for all of them need to be drawn.

// collector if the target element is deleted.

// collisions between observers, e.g. when multiple instances of

// colors for that base, returns the most readable color.

// column-major

// column-width dragging plugin, might want to get a turn first to

// combined and executed at once.

// come first, and within a set with the same start position, those

// comes *before* the @-sign.

// command handle lifting.

// commands, as a fall-back behavior when the schema doesn't allow

// commands, to provide a fall-back behavior when the schema doesn't

// compare them. This is a persistent data structure—it is not

// compared to the given previous document. Useful for avoiding

// comparing ids when the spans cover exactly the same range.

// compatibility wrappers are needed.

// compiled once on the first module load.

// completed. Otherwise, attempting to focus on a DOM node may interrupt the CSS animation. If

// completely block the rest of the keys that have functionality outside of this panel

// completely covers a parent node, this method may completely replace

// completely overlapped

// completely overlapped circles shouldn't be positioned early here

// completely removed.

// complexity.

// component that injects the withStyles props

// composing:: boolean

// compute and cache per schema. (If you want to store something

// compute auto placement, store placement inside the data object,

// compute center of the popper

// compute reference element offsets

// compute required distances between all the sets such that

// compute the center of some circles by maximizing the margin of

// compute the centroid of all but the worst point in the simplex

// compute the popper offsets

// compute the range, not re-resolved positions directly at its

// compute them from the regular expression match.

// computed one.

// config.nbinsx = nBins;

// config2 is similar to main "config" object (second parameter over RecordRTC constructor)

// config::- Configuration options. Must contain `schema` or `doc` (or both).

// config::- configuration options

// configuration object..

// conflict with the top level one.

// connect the stream to the script processor

// consider default type=audio

// considered in DOM in some circumstances...

// considered. When `predicate` isn't given, all decorations are

// consing up tons of objects.

// consistent and will resume where it left off when called again.

// consistent view of the document

// console.error(`cuesStart: ${cuesStart}, cuesSize: ${cuesSize}`);

// console.error(`infoStart: ${infoStart}, infoSize: ${infoSize}`);

// console.error(`originalMetadataSize: ${originalMetadataSize}, newMetadataSize: ${newMetadataSize}, sizeDifference: ${sizeDifference}`);

// console.error(`tracksStart: ${tracksStart}, tracksSize: ${tracksSize}`);

// console.log('content should be tags');

// console.log('frame is passed : ' + f);

// console.log('▶ ▶ ▶ NEW STATE', this.getState());

// const DeepDiff = require('deep-diff');

// const active = true

// const className = classnames(

// const m = 0x5bd1e995;

// const r = 24;

// const table = findTable(selection);

// const { DeepDiff } = require('deep-diff');

// constants

// constrained MDS for higher order problems, take its output

// constructor

// constructor polyfill

// constructor.

// constructor. It provides a definition for a plugin.

// contain anything (rather than allocating a new empty fragment for

// contain matching code points.

// contain multiple lines when collapsed ranges are present.)

// contained any escape sequences. This is needed because words with

// containing one or more styles) to a CSS style. This is cached,

// containing only some of the mark's attributes. The others, if

// contains buffers or objects.

// contains in native

// content expression.

// content from being mangled when it is put onto the clipboard

// content nodes must be valid children for the node they are placed

// content nodes.

// content of `range`.

// content of the block.

// content that can be moved somewhere on the frontier. Returns two

// content.

// content. If `startOfLine` is true, also escape characters that

// content. May have a `depth` greater than this object's `depth`

// content. The callback is invoked with the node, its

// content. When that ended in an inline node, search backwards,

// contentEditable.

// context to predict whether a regular expression is allowed in a

// context, and memoizes them on the instance per direction.

// context. May add intermediate wrappers and/or leave non-solid

// context.dispatchException(context.arg) call above.

// context.method was "next", forget context.arg since it has been

// continuation byte. If an invalid byte is detected, -2 is returned.

// continue

// continue an expression (like the body of a string).

// continue jumps to that label.

// continue to.

// control over what happens.

// convenience.

// convert back to solution form

// convert javascript object to media query string

// convert regex to object

// convert to timecodescale

// coordinates

// coordinates aren't inside of the editor. When an object is

// coordinates beyond the right of the text.

// coordinates into another coordinate system. Context may be one of

// coordinates, and its `inside` property holds the position of the

// coordinates, in top-to-bottom, left-to-right order.

// coordinates.

// coordsCharInner is safe. As such, we first find the extent of the

// copied or moved. At any other time, it is null.

// copies of the 'buffer' package in use. This method works even for Buffer

// copy 1. point and insert at beginning

// copy of this software and associated documentation files (the

// copy previous centers

// copy the simplex (since later iterations will mutate) and

// copy!

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)

// copy-on-write scheme for the positions, to avoid having to

// correct subclassing with @@species support

// corresponding to those offsets

// cost from s to v that may or may not be less than the current

// cost of u to v across e), update v's cost in the cost list and

// could be found. When `innerRange` is given, that range's content is

// couldn't get it to work yet.

// count buffered requests

// counts as the larger one.

// cover the line in which the change took place. Removes spans

// covers the visible area.

// create a fake namespace object

// create a shallow copy of the node

// create a synthetic block statement, otherwise all hell

// create an irreducible generator polynomial

// create an updated state. Use

// create error before stack unwound to get useful stacktrace later

// create new ones with the content you want. Old ones keep pointing

// create svg if not already existing

// create the Cues element

// create the SeekHead element

// create the appropriate tree structure.

// create wav file

// createDict = iframe.contentWindow.Object;

// created, this will always succeed if you pass null or

// creates an audio node from the microphone incoming stream

// creating a a schema.

// creating and deserializing such documents.

// creation, but is necessary in the composition hack.

// cross a defining node.

// cross any colspan cells by splitting cells that cross it. Return

// cross line boundaries), "word" (across next word), or "group" (to

// crossing the boundaries of the rectangle that we want to

// css base code, injected by the css-loader

// css styles for the input element

// css styles for the outer element

// current document, and later resolved to a real selection for a

// current iteration.

// current match in a

// current match in b

// current paths

// current tag の data size 決定

// currently do: use `Selection.modify` to move the selection by

// cursor and display (which would be awkward, slow, and

// cursor, but still report that the node is selected

// cursor-ish rectangle.

// cursor-motion keys, the code in the handlers also takes care of

// custom things with the selection. Note that this falls apart when

// d3 4.0 uses 'on' for events on transitions,

// data chunk identifier 

// data chunk length 

// data sub-chunk

// dataURI, mailto:, tel:, etc.

// date.

// day presentation and interaction related props

// day props

// days belonging to the next month

// days belonging to the previous month

// debounced at least once.

// debug.rawLog = rawLog;

// declare global: os, navigator

// declare global: window

// decode the last character properly.

// decode these, since those clip to 32 bits, which we might in rare

// decorations, possibly introducing nesting for marks. Then, in a

// decorations. Splits text nodes when there is a decoration starting

// decorations](#view.Decoration^widget).

// deeply ugly to write APIs this way, but that still doesn't mean

// default behavior of scrolling the content of the Keyboard Shortcuts Panel

// default block after the code block, and move the cursor there.

// default duration がないときに使う delta

// default field value

// default is 60 minutes; enough?

// default style for the HR

// default to tabs in the case of a tie (or nothing

// default. User code or addons can define them. Unknown commands

// defaultDuration は 生の nano sec

// defaults entirely, if no required attributes exist). `content`

// defer further parser to one of its callers when it encounters an

// defer starting an interrupting transition until that transition has a

// defer the callback if we are being called synchronously

// define __esModule on exports

// define a circle for each set

// define getter function for harmony exports

// define the draw function

// define the tree layout function

// define these here so at least they only have to be

// defined by the plugin, and will be available as the `collab` field

// defining this for a custom subclass, make sure the result object

// delay rendering the widget by passing a function that will be

// delayed syntax error at correct position).

// delayed transitions. This way it's possible to capture at least the

// delegate iterator, or by modifying context.method and context.arg,

// delete the selection. Will append to the given transaction.

// deletion at the selected point.

// deletion. Will return `null` if this position is at the end of

// delimiter for the first line of the item.

// depends on its existence.

// depths for any depth that has $from at its start and does not

// depths is not outside of a defining node, and adds negative

// depths, one for the slice and one for the frontier.

// descend into a node when the callback returns `false`.

// descending copy from end

// describes the state it wants to keep. Functions provided here are

// description.

// descriptions to determine the parse rules that should be used to

// descs matched to the child at that index, or empty.

// descs that don't have children.

// designed to be sync/async agnostic.

// despite having improperly defined `toString` methods.

// dest will only emit one 'drain' event for the multiple writes.

// destructuring is part of an expression - need an rvalue

// detached elements. Though elements with width & height properties less

// detaching a document, to split the history in two

// detected are enabled based on userAgent etc sniffing.

// determine whether the first could be created from the second by

// didTransitionMonth is true, the focusedDate gets updated in #updateStateAfterMonthTransition

// difference in color it is difference in color vectors (r1,g1,b1) <=> (r2,g2,b2)

// different (in number of selected ranges, emptiness, or time).

// different meaning in regular expressions (word boundary), so it cannot

// different reference viewports and invalidate our calculations.

// differently when margins are applied to it. The margins are included in

// direction. European and Arabic numbers act as if they were R in

// directly after `this.$to`, we must generate a `ReplaceAround`

// directly editable content.

// directly in the list node (?!) if you delete the last

// directly interact with the UI.

// directly matching ones, in order to avoid overeagerly reusing

// directly passed through to the `InputRule` constructor. You'll

// directly start an expression (like a quotation mark) or can

// directly).

// disable hex4 and hex8

// display-related state.

// disregard the `bar` in `class Foo { bar () {...} }`

// disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`

// distance between the position and the start of the text node.

// distribute, sublicense, and/or sell copies of the Software, and to permit

// div.innerHTML = `<p></p>`

// divides by length

// do a reduction

// do an inside contraction

// do an outside contraction

// do is to check its .name property.

// do not consider JSX expr -> JSX open tag -> ... anymore

// do not inherit user-select (it may be `none`)

// do not use `remove` because IE11 doesn't support it

// do nothing

// do nothing - this allows the up and down arrows continue their

// do so and return true.

// do we have a default style to apply?

// do we have a rowspan to apply from previous rows?

// doWrite is almost always async, defer these to save a bit of time

// doc:: Node

// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632

// document level. This ensures the input and the picker never move. Other

// document structure directly, rather than poking around in the

// document).

// document, should be passed so that the serializer can create

// document, so we use that as our parent document to ensure nothing

// document.

// document. From and to are in pre-change coordinates. Lendiff is

// document. If the change touches the same lines as the event, the

// document. Line objects hold arrays (markedSpans) containing

// document. These functions cut an array of spans at a given

// document. To serialize a whole document, use

// document.activeElement from an <iframe>

// document.documentElement.clientHeight on iOS reports the height of the

// does not help.

// doesn't account for +-0

// doesn't contain a valid text position.

// doesn't include paddings and borders to computed CSS dimensions.

// doesn't support that mark. This will remove the mark if any marks

// doesn't work.

// don't break things.  But we need to wrap it in a try catch in case it is

// don't capture the event if the menu opens on focus and the focused

// don't collapse size to less than the placeholder

// don't cycle from the start to the end

// don't hoist over string (html) components

// don't leave dangling pipes when there are errors.

// don't mutate input

// don't natively support it.

// don't set trackStyle hence don't break animation

// don't skip over falsy values in objectMode

// don't support this type of collections.

// drag selection.

// dragenter handler.

// drain event flag.

// draw path around arcs

// drawn between the document nodes.

// drop targets outside of this tree will not remove them from this tree

// dropping fully covered parent nodes of the replaced region when

// due to cross-origin restrictions

// due to its instance

// duplicate work on each transaction.

// duration を追加する

// e.g. [10, 10]

// e.g. `#fff` or `#ff0048`

// e.g. dropBlackFrames(frames, 10) === dropBlackFrames(frames, 10, 0, 0) - will analyse 10 frames with strict black color

// e.g. dropBlackFrames(frames, 10, 0.5, 0.5) - will analyse 10 frames

// e.g. dropBlackFrames(frames, 10, 1, 1) - will cut all 10 frames

// e.g. { lg: [5, 5], md: [10, 10], sm: [15, 15] }

// e.g. {lg: Layout, md: Layout, ...}

// e.g., 5%(2+1) == 2

// each inline node between `from` and `to`.

// each leaf node).

// easier to handle this case. if(!global) { ...}

// easily passed around.

// easy to recognize.

// edge case (#80)

// edge: "Error", "Out of stack space"

// editable content. This is usually the same as `isLeaf`, but can

// editable document. Its state and behavior are determined by its

// editable, set the selection, then set it uneditable again.

// editor DOM directly, or add styling this way, since that will be

// editor is destroyed.

// editor state. Assigning a key does mean only one plugin of that

// editor width

// editor, mostly used for keybindings.

// effective test for hidden elements. E.g. even jQuery's ':visible' filter

// eg top/left Grid renders before bottom/right Grid

// either 3, 5, 6 (2015), 7 (2016), 8 (2017), 9 (2018), or 10

// either be valid `DOMOutputSpec` values, or the number zero.

// either ensure that no exceptions are thrown from your task, or to manually

// either with each other or with an init property — and in

// el has no layout at all, use its children instead.

// element here. However, in cases where it is null (such as clicking on a

// element is kept around.

// element is removed in the React mouse callback.

// element.

// elements for innerHTML to work. I.e. if you do `div.innerHTML =

// elements.

// else { not reached }

// elsewhere, and we should reset the state of this tree

// emit 'drain' before the write() consumer gets the 'false' return

// emit 'readable' now to make sure it gets picked up.

// emit a single compressed chunk some time in the future.

// emit prefinish if the only thing we're waiting for is _write cbs

// emit removeListener for all listeners on all events

// emits a 'removeListener' event iff the listener was removed

// emitted. The keydown event triggers newline insertion, which we don't want.

// emphasis

// empty

// empty if nothing had to be inserted). When `toEnd` is true, only

// empty string to avoid regexp issues

// empty text selection), and null otherwise.

// ems

// enabled, it is given the location as a `{line, column}` object

// encapsule in a stack

// enclose run of non-spread properties in curlies

// encode to utf16 (surrogate pair dance)

// encode utf8

// encoding is 'binary' so we have to make this configurable.

// end FUNCTION argmax()

// end FUNCTION chebyshev()

// end FUNCTION chunkify()

// end FUNCTION distance()

// end FUNCTION dot()

// end FUNCTION euclidean()

// end FUNCTION hamming()

// end FUNCTION isArray()

// end FUNCTION isFunction()

// end FUNCTION isInteger()

// end FUNCTION isNumber()

// end FUNCTION isObject()

// end FUNCTION isString()

// end FUNCTION l2norm()

// end FUNCTION manhattan()

// end FUNCTION partial()

// end FUNCTION similarity()

// end FUNCTION validate()

// end fast-deep-equal

// end of the comments. Note that you are not allowed to call the

// end on a partial character, we simply let v8 handle that.

// end up in an overlapped onwrite situation.

// end)` parameters whenever a comment is skipped. `block` is a

// end]` array with the same numbers, set the `ranges` option to

// ends in the same node.

// english locale

// enqueue has not been called before, then it is important to

// ensure constructor is first

// ensure focus is on the Input when the menu opens

// ensure focus is restored correctly when the control becomes enabled

// ensure it's an object, and not a string url.

// ensure that a menu set triggers an update for consumers

// entirely by the editor. For some use cases, such as embedded

// entirely inside of them, so that custom implementations can do

// entirely within the change, reconnects spans belonging to the

// env-specific initialization logic for debug instances

// eq:: (Selection) → bool

// equal the number of selections)

// equals `from`, and `head` equals `to`..

// equivalent to (b-a)*r + a

// equivalent to `s & 0xffffffffUL` in original C implementation

// erase trailing comma after last array element if not an array hole

// error when the step fails.

// error-prone). Instead, display updates are batched and then all

// error.

// errors

// escape characters and so can be read as single slice.

// escape sequences must not be interpreted as keywords.

// escaped, even if encodeURIComponent doesn't think they

// eslint-disable-line

// eslint-disable-line consistent-this

// eslint-disable-line default-case

// eslint-disable-line dot-notation

// eslint-disable-line eqeqeq

// eslint-disable-line func-name-matching

// eslint-disable-line guard-for-in

// eslint-disable-line id-length

// eslint-disable-line jsx-a11y/interactive-supports-focus

// eslint-disable-line max-len

// eslint-disable-line max-len, no-mixed-operators

// eslint-disable-line no-buffer-constructor

// eslint-disable-line no-console

// eslint-disable-line no-control-regex

// eslint-disable-line no-empty-function

// eslint-disable-line no-eval

// eslint-disable-line no-new

// eslint-disable-line no-new-func

// eslint-disable-line no-new-wrappers

// eslint-disable-line no-plusplus

// eslint-disable-line no-restricted-syntax

// eslint-disable-line no-script-url

// eslint-disable-line no-self-compare

// eslint-disable-line no-undef

// eslint-disable-line no-underscore-dangle

// eslint-disable-line no-unused-expressions

// eslint-disable-line no-unused-vars

// eslint-disable-line no-use-before-define

// eslint-disable-line no-useless-escape

// eslint-disable-line react/forbid-prop-types

// eslint-disable-line react/no-danger

// eslint-disable-line react/no-find-dom-node

// eslint-disable-line react/no-unused-state

// eslint-disable-line stdlib/no-builtin-math

// eslint-disable-line stdlib/no-redeclare

// eslint-disable-line stdlib/require-globals

// eslint-disable-next-line

// eslint-disable-next-line camelcase

// eslint-disable-next-line class-methods-use-this

// eslint-disable-next-line comma-spacing

// eslint-disable-next-line complexity

// eslint-disable-next-line func-names

// eslint-disable-next-line getter-return

// eslint-disable-next-line import/no-unresolved

// eslint-disable-next-line import/no-unused-modules

// eslint-disable-next-line import/prefer-default-export

// eslint-disable-next-line jsx-a11y/label-has-for, jsx-a11y/label-has-associated-control

// eslint-disable-next-line max-depth

// eslint-disable-next-line no-console

// eslint-disable-next-line no-constant-condition

// eslint-disable-next-line no-multi-assign

// eslint-disable-next-line no-negated-condition

// eslint-disable-next-line no-new-func

// eslint-disable-next-line no-param-reassign

// eslint-disable-next-line no-proto

// eslint-disable-next-line no-prototype-builtins

// eslint-disable-next-line no-restricted-syntax

// eslint-disable-next-line no-self-compare

// eslint-disable-next-line no-throw-literal

// eslint-disable-next-line no-underscore-dangle

// eslint-disable-next-line no-unused-expressions

// eslint-disable-next-line no-unused-vars

// eslint-disable-next-line no-unused-vars, no-restricted-syntax

// eslint-disable-next-line prefer-const

// eslint-disable-next-line prefer-destructuring

// eslint-disable-next-line prefer-template

// eslint-disable-next-line react-hooks/exhaustive-deps

// eslint-disable-next-line react-hooks/rules-of-hooks

// eslint-disable-next-line react/destructuring-assignment

// eslint-disable-next-line react/forbid-prop-types

// eslint-disable-next-line react/jsx-key

// eslint-disable-next-line react/no-array-index-key

// eslint-disable-next-line react/no-danger

// eslint-disable-next-line react/no-did-mount-set-state

// eslint-disable-next-line react/no-find-dom-node

// eslint-disable-next-line react/prop-types

// eslint-disable-next-line stdlib/no-redeclare

// eslint-disable-next-line unicorn/prefer-includes

// eslint-disable-next-line unicorn/prefer-node-append

// eslint-disable-next-line unicorn/prefer-node-remove

// estimated pixels/delta value, we just handle horizontal

// even href="" will remove it.

// even if there is invalid data

// even then.

// event

// event emitter implementation with them.

// event handler makes an issue where the composition vanishes when

// event options will be a boolean.

// event that same frame. So we double the strengthMultiplier and only adjust

// event to done and clears undo. Undoing moves events from done

// event, and everything 'behind' it, is discarded. If the change is

// events in browsers.

// events that are in the way.

// every available SauceLabs Selenium web driver worker at time of writing.

// ex:

// exact

// example, can cause multiple logical lines to appear on the same

// exception if _P_ did not conform to the grammar, if any elements of _P_

// exception is thrown by a task, that the task queue will continue flushing as

// exception is thrown.

// exception, let the outer generator proceed normally. If

// execute code before the first await. Since we implement simple

// execute the callback.

// executor callback, and why async functions synchronously

// existed in the history (so that deleting around a span and then

// exists.

// explicit embedding into account, we can build up the order on

// explicitly

// explicitly.

// exponentiation operator ** and **=

// export

// export * from '...'

// export default ...

// export for convenience, in order for components to spread these onto their propTypes

// export native or passed

// export proto methods to core.%CONSTRUCTOR%.methods.%NAME%

// export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%

// export raw PCM

// export var|const|let|function|class ...

// export { x, y as z } [from '...']

// expose the module cache

// expose the modules object (__webpack_modules__)

// exposed for testing purposes only.

// expression match and the node before the wrapped node, and can

// expression, an expression started by a keyword like `function` or

// expression.

// expressions and divisions. It is set on all token types that can

// extend global

// extends beyond the row capacity. It will, however, not allow users to drag/resize

// extends data size to data+genPoly size

// extends keepTogether behavior making sure the popper and its

// external library to record as GIF images

// extract a block of data from buffer

// extract the header, we can reuse this as-is

// extract the track info, we can re-use this as is

// fact that it'll be scrolled into view on input from scrolling

// faiiled to find point that satifies wolfe conditions.

// fail the render phase where it didn't fail before. So we log it.

// failed one if it throws a `ReplaceError`.

// fails. Returns the step result.

// fall outside of. If so, we take the position before/after that

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

// fallback for non-array-like ES3 and non-enumerable old V8 strings

// falls through

// falls through to AssignmentPattern

// false -> Array#indexOf

// false -> String#codePointAt

// false for lines that are fully left-to-right, and an array of

// false indicates no spread elements

// false.

// false. Otherwise, apply it, use its return value to drive the way

// fast apply, http://jsperf.lnkit.com/fast-apply/5

// fast case for arrays with default iterator

// fast cases

// fast-deep-equal index.js 2.0.1

// faster than map

// fields that can't be used in plugins:

// figure out if it's got a host

// figure out sets that are completly overlapped by relativeTo

// figure out the angle halfway between the two points

// figure out the correct index to insert the CSS into

// file in every node's `loc` object.

// file is a File

// file is an object URL

// fill the gaps

// filter out columns without cells (where all rows have colspan > 1 in the same column)

// filter out points that aren't included in all the circles

// filter out rows without cells (where all columns have rowspan > 1 in the same row)

// final state of an element.

// finalize string values (regular strings and functions interpolated into css calls)

// finally, reconstruct the href based on what has been validated.

// find a cursor (as opposed to a node selection) when pressed. For

// find a line with a stateAfter, so that it can start with a

// find a parent node in the current context that might fit the nodes,

// find all the disjoint clusters and group them together

// find another change.

// find first audio track

// find first video track

// find start chunk

// find the first instance of any hostEndingChars

// find the node, u, that currently has the shortest path from s.

// find the tagname from _metadata

// fire the first update to position the popper in the right place

// firefox: "InternalError", too much recursion"

// first approximation until the line becomes visible (and is thus

// first chunk is a perfect match

// first field

// first frame

// first index

// first non escape when complete

// first number only here - other number-characters

// first slash is to be ignored and the 9 & 1 to be treated

// first two circles

// first, if it's not file:, then we MUST have a host,

// first, the easy part – `**=` -> `=`

// fit anywhere in the schema.

// fit the node. If no fitting wrapping can be found, return null.

// fix Array#{values, @@iterator}.name in V8 / FF

// fix for some old engines

// fixed module

// fixed steps don't need to scroll

// fixed-size cache if that's not supported.

// fixes shallow isOver which would only be non-shallow because of

// flag (restore them to their old value afterwards).

// flipped in RTL contexts. This should be used only in situations where the style must remain

// flowing again.

// focused element.

// focused option changes so we calculate additional props based on that

// focused, and receives input.

// following conditions:

// following properties:

// footnote is node-selected (and thus DOM-selected) when

// for 'td' and 'th' we check if we have "rowspan" or "colspan"

// for BR we return '\n'

// for Firefox

// for TABLE / UL / OL

// for TD and TH we want to include the style from TR

// for a given character.

// for a tiny bit of correctness that won't matter in the real world

// for a while (if only as a no-op)

// for accurate start-of-textblock detection if given.

// for all the other DOM elements, this one is good

// for array literals).

// for atom nodes selection position after insertion is the previous pos

// for borders

// for bound mouse clicks.

// for cases when the trigger is disabled and mouseOut/Over can cause flicker

// for changing the sampling rate, reference:

// for cloning point array

// for computed properties or if conciseMethodProperty is false

// for debug

// for debugging

// for envs missing Object.prototype.constructor (e.g., Safari 5-7)

// for links

// for measurement, while not in view.

// for more details.

// for now we're only applying it to iOS to fix the keyboard issue.

// for other components

// for performance, the menu options in state aren't changed when the

// for recursive calls).

// for selectable node, selection position would be the position of the replaced parent

// for testing

// for the `" "` name.

// for the color

// for the editor.

// for the widgets at this line.

// for the width

// for this schema.

// for virtual (non-string, non-buffer) streams, "length" is somewhat

// forbid the `in` operator (in for loops initalization expressions)

// force scrolling by one if centerMode is on

// force showing one slide and scrolling by one if the fade mode is on

// forced

// forces those lines into the viewport (if possible).

// forcing better codecs on Firefox (via #166)

// format a parsed object into a url string

// format as `Date.now()`.

// format as tokens returned from `tokenizer().getToken()`. Note

// format chunk identifier 

// format chunk length 

// found end chunk before start

// found, then change the type of the European number to L.

// found.

// fractional heights.

// fragment and the given fragment differ, or `null` if they are the

// fragment and the other.

// fragment containing those nodes.

// fragment differ, or `null` if they are the same.

// fragment, node, or array of nodes.

// fragment, the fragment itself. For a node or array of nodes, a

// fragment.

// fragment. When 0, the parent is open, but no more. When

// frames *always* changes identity so fall back to check length only :(

// from SCU is if the user intentionally memoizes children. If they do, and they can

// from a position would leave a text block.

// from being appended to an existing history event (so that they

// from certain descs.

// from largest

// from the outer list item to the parent node of the cursor

// frontier node at `frontierDepth`. Close that frontier node when

// fulfil contract with flow: implicit return value of undefined

// full copy. It is represented as a mostly-balanced tree.

// function because try/catches deoptimize in certain engines.

// function bodies).

// function expression IDs belong to the child scope...

// function makeRequestCallFromMessageChannel(callback) {

// function makeRequestCallFromSetImmediate(callback) {

// function that parses unary prefix operators is called first, and

// function.sent implementation.

// functions for this serializer.

// functions to specify precedence, for all of the ten binary

// functions, which will be called with `(EditorState, dispatch,

// g can still be undefined, but nothing to do about it...

// gammaln(1+s) = ln(s) + gammaln(s)

// garbage collected.

// gc

// generally horribly unpredictable, this code starts by measuring

// generate classes

// generate the `path` array passed in callbacks.

// generated by bin/generate-identifier-regex.js

// generating and caching it if it hasn't been created yet.

// get a fit that is more in line with WYSIWYG expectations, by

// get all the disjoint clusters

// get all the intersection points of the circles

// get an initial estimate by sampling around the interior circles

// get appropriate distance from most overlapped already added set

// get dirname

// get distances between all points. TODO, necessary?

// get initialized state

// get list of most overlapped sets

// get out at first zero weight on right

// get reference and popper elements (allow jQuery wrappers)

// get rid of any default styles

// get string content

// get the type of sor.

// get the union of all overlapping sets

// get width of an element

// getDefaultExport function for compatibility with non-harmony modules

// getDerivedStateFromProps instead of componentDidMount (in which we would get extra rerender)

// getSnapshotBeforeUpdate(prevProps) {

// getter for the property which is being replaced. This causes infinite

// getting scrollBarSize (moved from componentWillMount)

// getting tag from 19.1.3.6 Object.prototype.toString()

// github/muaz-khan/MultiStreamsMixer

// given `slice`.

// given a dictionary of {setid : circle}, returns

// given an invalid replacement.

// given an object and a list of keys, return new object with given keys

// given as argument. Equivalent to `view.update(Object.assign({},

// given attributes. Will return `false` when the current selection

// given document again. (This is used mostly by the history to

// given document.

// given level, or the original position when `depth` is `this.depth + 1`.

// given level, or, when `depth` is `this.depth + 1`, the original

// given level.

// given line is part of (usually that is the line itself).

// given line number is part of.

// given line.

// given node is allowed at the current cursor position

// given node type with the given attributes.

// given offset, in this mapping (as per the second argument to

// given point in the program is loosely based on sweet.js' approach.

// given position diverge around block content. If both point into

// given position.

// given position. May return `null` when the position doesn't point

// given positions. If `to` is not given, it defaults to the end of

// given specifications/props for a slide, fetch all the classes that need to be applied to the slide

// given string is typed. The `regexp` argument is

// given to assign a group name to the list node types, for example

// given type to appear at this position. The result may be empty

// given, it should be the index of the step map that is the mirror

// given, the key of the binding will be replaced with that key.

// gives wrong results for elements with width & height less than 0.5.

// global

// go one step up and use the next offsetParent as reference to

// go through the array every three bytes, we'll deal with trailing stuff later

// got a fragment string.

// got a match.

// gql`...`, graphql`...`, graphql.experimental`...`

// greater than one, any number of nodes above that. By default, the

// greedylayout is sufficient for all 2/3 circle cases. try out

// green

// grow the replaced area or close open nodes in the slice in order to

// grow, but to avoid an O(n) walk for every task we execute, we don't

// hackish...

// had a rule with `ignore` set.

// handle +-0 (IEEE 754-2008 spec)

// handle 0-sized sets by removing from input

// handle alpha since hsl2rgb doesn't know (or care!) about it

// handle block scoping

// handle changes properly, performance will increase.

// handle complete overlapped circles

// handle row direction support

// handle that can be used to clear or find a marked position in the

// handled in onMouseDown for these browsers.

// handler for each editor will cause the editors to never be

// handler in flow(), but adding and removing repeatedly is

// handler](#view.EditorProps.handleKeyDown) that handles them.

// handlers for the corresponding event.

// handles 'first'

// handles +-0

// handles +-0 (IEEE 754-2008)

// handles responsive breakpoints

// handling at a lower level.

// handling mapping positions through a series of steps in which some

// handling this'.

// happen before the gutter has been realigned, causing it to

// happen, and treat as a click if it didn't.

// happened in the meantime (clearTimeout isn't reliable -- at

// happening, don't update the selection.

// happens amids the pending invocation.

// has a stable shape and so hopefully should be cheap to allocate.

// has an uneditable node after it

// has focus (which will mess up the editor's selection state).

// has it been destroyed

// has not been initialized yet

// has returned yet), so that we know whether or not it's safe to emit

// has special meaning only at the start of the line.

// hash is always overridden, no matter what.

// have WebKitMutationObserver but not un-prefixed MutationObserver.

// have any attributes), build up a single reusable default attribute

// have at least a `schema` field, and should contain array of

// have been (and was previously) designed to take a closure to be

// have been already added.

// have been already removed.

// have no actual children, from caretPositionFromPoint (#953)

// have non-ASCII characters, i.e. it doesn't matter if

// have one cluster (in top left). lay out next three relative

// have to attach the listeners to the body

// have to be initialized before the editor can start at all.

// having "@" as the first character

// having the given height.

// height of a row given its index: `({ index: number }): number`

// height, and ensure (see op.scrollToPos) properties.

// height.

// help recognize paste/cut edits in input.poll

// helper for intervals based blobs

// here.  For example, imagine a stream where every byte of input is

// hidden or updated, if so re-focus it.

// high

// high surrogate, and there is a next character

// highest order set intersections first

// highlight macro directives as keywords

// highlight predefined macros as constants

// highlight the path of the include statement as a string

// highlighting info (the styles array).

// highlighting overlays, as added by addOverlay

// hints, rather than precise positions. When from and to are the same

// history, and propagating it to all linked documents.

// hooks](#state.PluginSpec.filterTransaction) of

// horizontal

// horizontal scrolling.

// hostnames are always lower case.

// how frequently we check for clock skew

// how the browser resolves relative URLs.

// however, don't suppress the throwing behavior for this.

// however, if it ends in anything else non-slashy,

// however, if we've ended, then there's no point, and if we're already

// hrefs like //foo/bar always cut to the protocol.

// html.removeChild(iframe);

// html2canvas recording!

// html`<p></p>`

// http://a@b?@c => user:a host:c path:/?@c

// http://a@b@c/ => user:a@b host:c

// http://accessibility.athena-ict.com/aria/examples/dialog.shtml

// http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist

// http://engineering.findthebest.com/wrapping-axis-labels-in-d3-js/

// http://fb.me/prop-types-in-prod

// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae

// http://stackoverflow.com/a/28977136/552182

// http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/

// http://www.ecma-international.org/ecma-262/5.1/#sec-9.10

// http://www.ecma-international.org/ecma-262/5.1/#sec-9.11

// http://www.nonblocking.io/2011/06/windownexttick.html

// https://bugs.chromium.org/p/chromium/issues/detail?id=606000#c22

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// https://bugs.chromium.org/p/v8/issues/detail?id=3443

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/

// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is

// https://developers.Blob.com/speed/webp/docs/riff_container

// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

// https://esbench.com/bench/5b809c2cf2949800a0f61fb5

// https://featuretests.io

// https://gist.github.com/jimfb/d99e0678e9da715ccf6454961ef04d1b

// https://gist.github.com/mathiasbynens/bbe7f870208abcfec860

// https://github.com/Modernizr/Modernizr/blob/acb3f0d9/feature-detects/dom/passiveeventlisteners.js#L26-L37

// https://github.com/ProseMirror/prosemirror-commands/blob/master/src/commands.js

// https://github.com/ProseMirror/prosemirror-schema-basic/blob/master/src/schema-basic.js

// https://github.com/antimatter15/whammy/blob/master/LICENSE

// https://github.com/bgrins/TinyColor

// https://github.com/bvaughn/react-virtualized/blob/master/docs/List.md#prop-types

// https://github.com/casesandberg/react-color/issues/383

// https://github.com/codemirror/CodeMirror/pull/5673

// https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral

// https://github.com/feross/buffer/pull/148

// https://github.com/mattdiamond/Recorderjs#license-mit

// https://github.com/mbostock/d3/issues/1642),

// https://github.com/popperjs/popper-core/issues/1078

// https://github.com/popperjs/popper-core/issues/837

// https://github.com/react-dnd/react-dnd/issues/1310

// https://github.com/retrofox/is-array

// https://github.com/soldair/node-qrcode/issues/157

// https://github.com/tc39/proposal-promise-finally

// https://github.com/tc39/proposal-promise-try

// https://github.com/themasch/node-ebml/blob/master/lib/ebml/tools.js

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028

// https://gitlab.com/Rich-Harris/buble/issues/154

// https://mathiasbynens.be/notes/javascript-encoding#surrogate-pairs

// https://mathiasbynens.be/notes/javascript-escapes#single

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume

// https://prosemirror.net/examples/tooltip/

// https://prosemirror.net/examples/upload/

// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative

// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom

// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass

// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape

// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom

// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash

// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges

// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape

// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter

// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits

// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape

// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction

// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits

// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit

// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits

// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence

// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges

// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash

// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit

// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern

// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter

// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier

// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix

// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence

// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term

// https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html

// i.e. an arrow function expression like `a => a`

// i.e., where the newNode can be added to the current node's children

// i.e.:

// i18n

// iOS exposes the clipboard API, but seems to discard content inserted into it

// id to use for the input, can be set for consistent snapshots

// identifier prefixed with zero or more modifiers. Key identifiers

// identifiers, so '\' also dispatches to that.

// identifiers.

// identify nodes that serialize as hard breaks)

// identity bit shift to ensure integer

// ie10 has broken `subarray`

// if 'text' is just blank and parentNodeName is a TABLE/THEAD/TBODY/TR, then ignore it

// if (!(symObj instanceof Symbol)) { return false; }

// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

// if (isCellSelection(selection)) {

// if (sym instanceof Symbol) { return false; }

// if (this.props.onLazyLoad) {

// if (typeof Symbol.prototype.toString !== 'function') { return false; }

// if TH/TD and key is 'background', then we use 'fillColor' instead

// if TT are enforced.

// if _final has been called

// if `inner` modifier is enabled, we can't use the `flip` modifier

// if a Content Security Policy forbids using Function, but in that case

// if a let/const declaration in the function clashes with one of the params.

// if a url ENDs in . or .., then it must get a trailing slash.

// if a user is already in the queue

// if an hypothetical scrollbar is detected, we must be sure it's not a `border`

// if any Track within the MediaStream is muted or not enabled at any time, 

// if arrowElement is a string, suppose it's a CSS selector

// if arrowElement is defined and arrowStyles has some properties

// if arrowElement is not found, don't run the modifier

// if chunk was trimmed, we have a new lastChunk

// if clearTimeout wasn't available but was latter defined

// if dragend handler does something like showing an alert.

// if empty, we need to add it

// if hostname begins with [ and ends with ]

// if is an explicit pixel unit, we get rid of the unit and keep the value

// if is an implicit unit, it's px, and we return just the value

// if it doesn't match.

// if it is file:, then the host is dropped,

// if it is not the same then call the onDragStateChanged

// if it outperforms. (greedy is aesthetically better on 2/3 circles

// if it's a DIV and only inline tags in its section, then we want to use 'text' instead of 'stack'

// if it's a Master element, extract the start and end element, and everything in between

// if it's a known url protocol, then changing

// if it's a table cell (TH/TD) with an empty content

// if it's not a basic code point

// if it's past the high water mark, we can push in some more.

// if it's the empty string, but only if the second and

// if it's the entire body of a function without a block statement –

// if next scroll doesn't have enough children, just reach till the end of original slides instead of shifting slidesToScroll children

// if nothing has changed then don't resubscribe

// if object isn't iterable or it's array with default iterator - use simple case

// if one does not exist.

// if one of the parents is a TH or a TD, then we go up until them to see if all ancestors are empty too

// if onlyExpandSearchedNodes collapse the tree and search

// if popper is destroyed, don't perform any further update

// if possible.

// if setTimeout wasn't available but was latter defined

// if shift shiftvariation is specified, run the modifier

// if slide needs to be precloned or postcloned

// if someone wants to use RecordRTC with the "new" keyword.

// if state.isScrolling (not from _isScrolling) then reset

// if that was the last modal in a container,

// if the arrowElement isn't a query selector we must check that the

// if the child is expanded.

// if the clear happens after their scheduled firing time).

// if the dest has an error, then stop piping into it.

// if the length is currently zero, then we *need* a readable event.

// if the path is allowed to go above the root, restore leading ..s

// if the previous content was not P or DIV, then we need to add a \n too

// if the reader is waiting for a drain event from this

// if the reflected point is the best seen, then possibly expand

// if the relative url is empty, then there's nothing left to do here.

// if the url is a non-slashed url, then relative

// if the user is navigating around using a mouse

// if there is a known `lastIndex`.

// if there is no match.

// if there's nothing in the write buffer, then that means

// if there's something in the buffer waiting, then process it

// if this doesn't exist then it will be null so the style element will be appended

// if this is a duplex stream mark the writable part as destroyed as well

// if to far away, or self contained - can't be done

// if total duration of all frames will be < 1000 than ffmpeg doesn't work well...

// if true, a maybeReadMore has been scheduled

// if we allow half-open state, or if the writable side ended,

// if we are mounting and running this it means appear _must_ be set

// if we currently have less than the highWaterMark, then also read some

// if we didn't call the onwrite immediately, then

// if we don't contract here, we're done

// if we have P or DIV in a table cell TD or TH, then we need to add \n

// if we have at least 2 overlaps, then figure out where the

// if we have intersection points that are within all the circles,

// if we increase `i` as we go, then subtract off its starting

// if we need a readable event, then we need to do some reading.

// if we still have not hit it, then the entire thing is a host.

// if we want to delete a specific property

// if we want to remove a default style

// if we're already writing something, then just put this

// if we're doing read(0) to trigger a readable event, but we

// if we're not piping anywhere, then do nothing.

// if we've been passed a fontSize explicitly, use it to

// if we've ended, and we're now clear, then finish it up.

// if x <= -56*ln(2)

// if x > sqrt(2)/2-1 => ~-0.2929

// if you want shift to be held). You may use `"Space"` as an alias

// if you've stored extra information in that object.

// if |f| < 2**-20

// if |x| < 1.5*ln(2)

// if |x| < 2**-29

// if |x| < sqrt(2)-1 => ~0.41422

// if |x| > 0.5*ln(2)

// if |x| >= 56*ln(2)

// if |x| >= 709.78...

// ignore mouse events that weren't triggered by the primary button

// ignore the keydown event from an Input Method Editor(IME)

// ignore unnecessary end() calls.

// image of this one.

// immediately in some browsers.

// immediately overriden by the editor as it redraws the node.

// immediately so there is a chance that we might miss one if change

// immediately, or on a later tick.  We set this to true at first, because

// implementation details to the user code that they probably will

// implementation from standard node.js 'util' module

// implemented as a meta-marker-object controlling multiple normal

// implemented for custom classes (as a static class method).

// implemented in JavaScript on top of the browser's DOM.

// import '...'

// import DeepDiff from 'deep-diff'

// import a list of modules into the list

// import defaultObj, { x, y as z } from '...'

// import { DeepDiff } from 'deep-diff'

// important to get this right, even though it requires care.

// important when wrapping filters and duplexes.

// important! without `width` browsers won't allow focus

// in AssignmentExpression nodes.

// in IE

// in JavaScript, we only explicitly have doubles

// in Markdown may be opened and closed in different order, so

// in Safari 8-9 which returns 'object' for typed array and other constructors.

// in Safari 9 which returns 'object' for typed arrays and other constructors.

// in all copies or substantial portions of the Software.

// in an empty block or between br nodes.

// in case of lazyLoad, whether or not we want to fetch the slide

// in case runtime.js accidentally runs in strict mode, we can escape

// in display.externalMeasured when possible.

// in display.lineDiv) with the view as we go.

// in every case, so we don't have to touch the arguments object. The

// in front of a node or if the node is inside an opaque node view.

// in it, try to use property names unlikely to clash.)

// in ms

// in ondata again. However, we only want to increase awaitDrain once because

// in the option object, for the editor's value when the option

// in the queue, and wait our turn.  Otherwise, call _write

// in the resulting editor state.

// in the rtl chunk that is on the last line (that is, the same line

// in the same tick for the source element, and browser freaks out.

// in this way the first offset will use an axis and the second one

// in this way we can make the 3rd party modifiers add custom styles to it

// in turn another _read(n) call, in which case reading = true if

// in turn calls the function that parses `[]` subscripts — that

// in which case reading its value would be expensive.

// include a given position (and optionally a second position).

// include all expressions

// include all non-empty strings

// include scroll bars size which can be removed at this step as scroll

// includes the step type's [JSON id](#transform.Step^jsonID) under

// including an open parent node from the slice that _is_ marked as

// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)

// inconsistent across browsers. This is used to ensure the

// incorrect for RTL.

// increment active scroll locks

// incrementing `n` each time, so we'll fix that now:

// indentation added to all lines except the first in an item,

// independent of any properties defined on Object.prototype.

// independently placeable. I.e. in <p("foo"), p("bar")>, when the

// index in s

// index is out of range.

// index of current point

// index of previously estimated point

// indicate that they handled the given event. The view will then take

// indicating that such a marker is present on that line. Multiple

// indices and calling `get`, because it doesn't have to descend the

// indices. This tends to be more efficient than looping over the

// inexplicable appearance of private area unicode characters on

// infinite loop until convergence

// infinite vertical growth

// information about it. Objects of this class represent such a

// information about line-wide styles that were set by the mode.

// information about the dragged slice and whether it is being

// information in the document tree.

// information that client code or plugins can use to describe what a

// information.

// init state

// initialize an actual mode object.

// initialize an empty distance matrix between all the points

// initialize phrases

// initialize simplex.

// initialize with source styles

// initialized. Since we know we're in Chrome, we'll just detect this case

// initializer

// inject the custom stylesheet to hide clear UI, defaults to true

// injected easily by `bin/regenerator --include-runtime script.js`.

// inline: 'nearest',

// inner node that the position falls inside of, or -1 if it is at

// input related props

// input that matches any of the given rules to trigger the rule's

// insert <Cues />

// insert [<CuePoint />] to <Cues />

// insert empty cell due to rowspan

// insert empty cells due to colspan

// insert end point as first point

// insert into. If anything about it changes, recompute the table

// insert keyframes

// inserted for every non-text leaf node encountered.

// insertions, so if there are added nodes, recompute those

// inside function expressions

// inside if necessary.

// install a JSONP callback for chunk loading

// instance have a waypoint that unmounts another waypoint as part of an

// instances of a state.

// instances that were created from another copy of the `buffer` package.

// instances whenever needed. The API tries to make this easy.

// instances with the property names they use in the JSON object.

// instantiated once per `Schema`.

// instead of `(!x)[1]` is handled by the fact that the parser

// instead of the ES6 spec version, we didn't implement @@toPrimitive case

// integers precisely.

// interface.

// interleave both channels together

// intermediate scroll updates.

// internal DOM, only inspect it (and even that is usually not

// internally, and returns false if there's a lot of pending writes

// internationalization

// internationalization props

// interpolate intersection area paths between previous and

// interpolate non-matching numbers

// interpreted as a text node, a DOM node, which is interpreted as

// interpreted as an integer from 0-255, and then results in that many

// interrupted

// intervals based blobs

// into a deterministic finite automaton. For a good introduction to

// into a node when the callback returns `false`.

// into a parent of the previous block. Will use the view for accurate

// into an inner list.

// into it.

// into smaller cells with the cell type (th, td) returned by getType function.

// into smaller cells. Use the first cell type for the new cells.

// into the async generator function so it can be handled there.

// into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.

// into this parent node, and its index.

// into.

// into. If any of this is violated, an error of type

// invalidates cached information and tries to re-estimate the

// inverse of the circlePath function, returns a circle object from an svg path

// invisible cursor wrapper, since that would result in those weird

// invocations of the iterator.

// invoked without arguments, but in all the cases we care about we

// is 9.

// is a QuantifiableAssertion.

// is a base offset that should be subtractet from the `from` and `to`

// is a regular `for` loop.

// is a single mark, remove precisely that mark. When it is a mark type,

// is a timeout pending?

// is able to screenshot the current (not yet dragging) state.

// is active.

// is allowed and treated as a line comment.

// is also used when comparing decorators for equality.

// is an animation frame pending?

// is at least one node type that can appear in both nodes (to avoid

// is defined by an array of [rules](#model.ParseRule).

// is dragged over the editor.

// is false, it checks whether a gutter or scrollbar was clicked,

// is filled with the initial data specified by the modifier. This means

// is inherited.

// is it safe to use @latest ?

// is large (issue #3579)

// is mostly useful for getting the set of marks to preserve after a

// is needed on Webkit to be able to get line-level bounding

// is needed.

// is not handled by isRTL

// is not very bidi-safe)

// is set to 0, also immediately invoke the onMonthTransitionEnd callback

// is sibling content before or after it, and move it up the tree to

// is so spotty that I'm still waiting to see where they are going.

// is somewhat obscure, because it works in character codes rather

// is surrogate component

// is that it gives us a chance to update the display before the

// is there any class to this element?

// is to add a scroll event listener that calls for a flush.

// is true, that means the coordinates lie outside the line's

// is useful for low frequency updates where sync behavior simplifies the

// is why the Promise constructor synchronously invokes its

// is with selectLeft/Right

// isScrolling is used to determine if we reset styleCache

// isUint64BE, isInt64BE

// isn't a valid place but is at the start or end of a node. Return

// istanbul ignore if

// istanbul ignore if // hopefully this is impossible to test :-)

// istanbul ignore next

// it actually became visible (as line heights are accurately

// it as the trailing edge, or we've hit the `maxWait` limit.

// it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable

// it could be that the last bidi part is not on the last visual line,

// it doesn't persist and is fresh on each update.

// it enabled, if it's hidden, we disable pointer events.

// it got selected.

// it is async

// it is difficult to isolate. If this happens fallback to the old path

// it is its parent's first child) or after it.

// it is removed from DOM and trigger endDrag manually.

// it means that the drag was canceled or the dragSource dropped

// it means that we need to wait until it does.

// it to figure out a position.

// it was before, when storeScrollPos was called.

// it was given, if non-null, or create a new one if necessary.

// it will attach a property `"pointer"` with the value `true` to

// it will be an array...

// it will be escaped.

// it will return true if moving left from the current cursor

// it's 1 in dev because we insert source maps that map a single rule to a location

// it's a text node whose content already matches the new text

// it's absolute.

// it's in progress.

// it's not an issue. I don't think anyone ever specifies width on <html>

// it's not open, close this frontier node right away.

// it's relative

// it).

// it, so set the completion value of the entire function to

// items) out. During collaboration, these naturally accumulate

// iter aborts when callback returns a truthy value

// iter aborts when callback returns truthy value

// iterate over all points, get arc between the points

// iterating over all attributes of item

// iterator prototype chain incorrectly implement this, causing the Generator

// its [content](#model.Node.content).

// its existence.

// its own modifications.

// its parent links.

// its parent node or its parent node isn't a textblock (in which

// itself (when the bar is still visible) or its filler child

// itself if a rope was given.

// itself, or an array.

// javascript handler for  css media query

// jitter on OSX trackpads when deltaX is small and deltaY

// joined.

// js number is float64 so 8 bytes.

// jscs:ignore disallowUnusedVariables

// just assign the updated shared dispatch and we’re done!

// just assign the updated shared tween and we’re done!

// just define here

// just one destination.  most common case.

// just pull out the search.

// jviereck: allow ']', '}' here as well to be compatible with browser's

// keep distances bounded, things get messed up otherwise.

// keep in mind that we don't support arrays

// keep track of any circles that overlap this area,

// keep track of what sets have been laid out

// key is added to the end.

// key is the value of the data-emotion attribute, it's used to identify different sheets

// keyboard gets confused. So the hack here is to set a flag that

// keys multiple times.

// keywords are the first word in a line preceded be an `@` or surrounded by curly braces.

// kill webworker (or Chrome will kill your page after ~25 calls)

// know one. These don't have to be accurate -- the result of them

// known cost to v.

// knows how to merge the passed-in default theme with

// l1 is left of l2

// l1 is right of l2

// larger one:

// largest of the end indeces.

// last and first siblings are also joined, and so on.

// last char was a lead

// last frame (remaining buffer)

// layout is an array of object with the format:

// layouts is an object mapping breakpoints to layouts.

// leading and trailing accordingly.

// leading or trailing property of the return object will be undefined

// leading space.

// leaf node

// least on Chrome, the timeouts still happen even when cleared,

// left (we don't store arrays for lines without spans).

// left of the character and compare it's vertical position to the

// legacy

// legacy.

// length 1 (it's probably rare for a source substring to not have an

// length 5 (since not everything will have an associated name), followed by

// length is NaN (which is otherwise coerced to zero.)

// length. This is much faster than creating a new array (which v8 expands to

// let the value of current attribute be the pivot

// let { value, ...options } = value

// letting go of the mouse button.

// level.

// levels (0, 1, 2) in an implementation that doesn't take

// lhs is contains a cycle at this element and it differs from rhs

// like href='?foo'.

// like normalization and multi-stroke key bindings. It compiles a

// like ordinary characters. Create a character for the

// like selection updates and adjustments of the set of [stored

// line being 1-based and column 0-based) will be attached to the

// line break). Used to count lines.

// line in `firstDelim`. `node` should be the node that is closed at

// line numbers to line objects, and to go from objects to numbers.

// line's height.

// line.

// line. When lineWrapping is on, there might be more than one

// lineIsHidden depends on the presence of the spans, so needs a second pass

// lineView.changes. This updates the relevant part of the line's

// lines are divided into visual lines. regLineChange (below)

// lines are not indented, and places where the mode returns Pass

// lines may point to the same marker when it spans across lines.

// lines of this modifier!

// link) applied to this node.

// linked list can remove elements from the beginning faster than

// links back to the lines they currently touch.

// links like ../.. should be able

// list item should be split. Otherwise, bail out and let next

// list of all recording states

// list structure, it should have a shape like `"paragraph block*"` or

// listen to dragging

// listener from the target node.

// load a mode. (Preferred mechanism is the require/define calls.)

// location outside the try/catch block.

// locations where there is no enclosing try statement.

// log2(ax)

// log2(ax) = (ss+...)*2/(3*LN2) = n + dp + hz + lz

// logic was previously ran for the previous placement and is therefore

// logic.

// logical lines, if those are connected by collapsed ranges.

// looking for a place in the doc where the node is allowed

// looking for selection end column (endIndex)

// looking for selection end row (endIndex)

// loop is non-trivial. Basically, we have to parse the init `var`

// loop.

// low surrogate

// low surrogate range. E.g. (0, 0x10FFFF).

// lower 16 bits provide the index, the remaining bits the offset.

// lower priority turn.

// m (NSM): Non-Spacing Mark

// maintains `context` and `exprAllowed`, and skips the space after

// make all the buffer merging and length checks go away

// make certain babel optimisations not possible

// make prefixes available to Diff plugin

// make static versions for prototype methods

// make subsequent rendering easier). Will return the input array if

// make sure that stopRecording always getting fired

// make sure the smallest circle is completely contained in all

// make sure we have the most recent version of treeData

// make update() debounced, so that it only runs at most once-per-tick

// makes sure that children is an array, even when there is only 1 child

// makes the DOM change code recognize that what just happens should

// making it explicit this property is not enumerable

// managing destroyed

// mandatory to make sure Firefox doesn't fails to record streams 3-4 times without reloading the page.

// map each set to a list of all the other sets that overlap it

// map positions in the post-step document to the pre-step document.

// map so that subsequent operations can see the current shape.

// map, table node, and table start offset to the object for

// map. If given an ordered map, return that map itself. If given an

// map:: (doc: Node, mapping: Mappable) → Selection

// mapping, for example, a large number of decorations. The number's

// maps for the remote changes in its array of items.

// maps](#transform.StepMap). It has special provisions for losslessly

// mark is not in the set, the set itself is returned.

// mark that we need a transform, so that any data that comes in

// marked ranges.

// marker continues beyond the start/end of the line. Markers have

// markers.

// marks of various types to DOM nodes.

// marks' [`inclusive`](#model.MarkSpec.inclusive) property. If the

// marks, reusing existing mark descs when possible.

// marks.

// marks](#state.EditorState.storedMarks) instead of a range of the

// marks](#state.EditorState.storedMarks). In addition, you can store

// massage in target styles

// master element は子要素を持つので生データはない

// matched numbers are actual octal numbers. E.g. in '019' only

// matched text is typed into it. You'll usually want to start your

// matching `title` or `subtitle` values.

// max value => 1048575

// maxKeys <= 0 means that we should not limit keys count

// maximize the margin numerically

// maximum 256 colors allowed by the GIF specification). 

// maximum similarity

// may be a `Fragment`, a node, an array of nodes, or

// may be a completely synchronous operation which may change

// may call the _write() callback in the same tick, so that we don't

// may influence that state and the view that contains it.

// may need to be constrained after flipping

// may not be escaped.

// may return `false` to prevent traversal of a given node's children.

// may throw

// maybe window.navigator?

// md`# h1`, markdown`## h2`

// means it doesn't take into account transforms.

// means it has ended and the drag source node disappeared from DOM,

// meant to be awaited.

// measured, the position of something may 'drift' during drawing).

// measurement cache for the given line number. (A line view might

// measurements in a row, can thus ensure that the set-up work is

// measuring on line wrapping boundaries.

// media query for each breakpoint

// media source api は DefaultDuration を計算するとバグる。

// memoized from props

// menu is closed (since the input reset would kill the

// menus are display: none when not shown.

// merged when similar and close together in time.

// merging completely incompatible nodes).

// mess with these values

// message.

// metadata for the steps, but note that the steps may have been

// metadata properties in a transaction, which are extra pieces of

// metadata 末尾に <Cues /> を追加

// method always terminates the yield* loop.

// method.

// methods

// methods defined on the Doc type are also injected into

// methods related to markdown serialization. Instances are passed to

// methods, and registering your class with a unique

// middle frames

// middle of some work, but don't want the handler to start calling

// middle-click-paste. Or it might be a click on something we should

// might affect dimensions of observed elements.

// might confuse the user

// might use a different theme context in the future anyway

// mimic the behaviour of d3.scale.category10 from the previous

// minifier not to mangle the names of these two functions.

// minimum distance

// minimum distance to centers

// minimum width for input element

// minus `LineTerminator`s (https://mths.be/es6#sec-line-terminators):

// mirror solution if third solution is above plane specified by

// mirroring information).

// mixedVideoStream.prototype.appendStreams = appendStreams;

// mixedVideoStream.prototype.clearRecordedData = clearRecordedData;

// mixedVideoStream.prototype.resetVideoStreams = resetVideoStreams;

// mixin parameters

// modals before this one is shown.

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// mode the stream is in. Currently this means that `null` is never accepted

// mode/overlays that it is based on (for easy invalidation).

// model is applied (except for IE).

// modified from https://github.com/es-shims/es5-shim

// modified, updates create a new value.

// modifiers have the ability to execute arbitrary code when Popper.js get inited

// modifiers will be able to edit `placement` if needed

// modifying the input value

// modifying the selection.

// module. The result can then be added to the set of nodes when

// module.parent = undefined by default

// modules monkey-patch it to support additional encodings

// monitor, window, application, browser

// month props

// more bytes.  This is to work around cases where hwm=0,

// most Object methods by ES6 should accept primitives

// most common use case for this is the `flip` modifier changing the

// motion would move out of the cell)

// mousemove events from a container that also emits a scroll

// move cursor to the start of the node

// move those that are after the changes.

// moves when extending the selection).

// moving from one child element to another.

// moving in a given direction. When, for example, given `"left"`,

// multi select, by default, IS clearable

// multiply by 2

// must be able to connect to the surrounding content, and its

// must be an even number of digits

// must be inserting at the end

// must be multiple of 3

// mutation observers, so that implementation is used instead.

// n (AN):  Arabic Number

// naked function expression

// name or by plugin.

// nano second; Date.UTC(2001,1,1,0,0,0,0) === 980985600000

// nanoseconds

// navigation props

// navigation related props

// near `pos`, by searching up the node hierarchy when `pos` itself

// near and arrow-key-motion past places that don't have a normally

// nearby circles (exterior)

// nearest collision.

// necessarily symmetric or synchronous transformation.  For example,

// necessary until the next `flush` completes.

// necessary).

// necessary.

// necessary. v is the node across the current edge from u.

// need some basic operations on vectors, rather than adding a dependency,

// need to be.

// need to get rid of the following ranges in case they overlap.

// need to serialize a part of a document, as opposed to the whole

// need to sort div's so that Z order is correct

// needReadable was set, then we ought to push more, so that another

// needed for astral code points in the set.

// needed in order to know whether we have left focus or not.

// needed or are available. If we see a non-continuation byte where we expect

// needed to complete the UTF-8 character (if applicable) are returned.

// needed.

// needless duplicated nodes.

// negative). This can be useful when applying steps meant for a

// negative, it will search backwards first.

// negative, nothing is open.

// never call cb(), then you'll never get another chunk.

// never need.)

// never returning a position at the end of the document

// new changesets for every character typed

// new document created via createHTMLDocument. As per the spec

// new document or a failure value.

// new k for n

// new months rendered above the current month don't push the current month out of view.

// new normalized keymap, and then updates the old object to reflect

// new ones appear

// newEnd must point directly at or after the end of the block that newStart points into

// next index

// next token is a colon and the expression was a simple

// nextStatus will always be ENTERING or EXITING.

// no combination of Error Correction Level and data mask pattern

// no default

// no enter animation skip right to ENTERED

// no exit animation skip right to EXITED

// no explicit marks have been set.

// no intersection points, is either disjoint - or is completely

// no lead yet

// no more data can be written.

// no move is possible, so we can short-circuit this immediately.

// no offsetParent is present, I hate this job...

// no overlap

// no partially overlapping spans are found (the common case).

// no path at all.  easy.

// no query string, but parseQueryString still requested

// no rvalue needed for expression statement

// no styles applied to the vertical-scrollable orientation

// no such key exists.

// node ID => cost

// node ID => predecessor node ID

// node after `this.$to`, not `this.$to` itself.

// node after it (if any) are returned.

// node and mark serialization methods (see `toMarkdown`).

// node but the parents look compatible, we've found a

// node doesn't fit, this method may _move_ them out towards a parent

// node if possible. Issue prosemirror/prosemirror#832.

// node is a Document

// node of the given type would leave the node's content valid.

// node of the given type. May introduce extra nodes around and inside

// node to see if a range into that parent is acceptable.

// node to use when the position is inside a leaf node.

// node type spec. But client code can use the `nodeViews` spec to

// node with the hole.

// node, and is the document object itself (meaning it has

// node, will receive the given attributes.

// node-specific editing interfaces, you want more control over

// node.

// node. If that node is empty, this will only return true if there

// node.js module exports

// node::ParseEncoding() requires lower case.

// nodejs compatible on server side and in the browser.

// nodes for lines that are no longer in view, and creating the ones

// nodes of the slice aren't table cells or rows.

// nodes that we're in.

// nodes with only a single null-out-edge, since they may lead to

// nodes, which will confuse the browser's cursor motion logic.

// nodes.

// non-generic

// non-leaf nodes, it is the size of the content plus two (the start

// non-matching targets.

// non-undefined value is found. When `f` returns a truthy value,

// none is found, the element's content nodes are added directly.

// noop

// normal dragging things.

// normalize towards nearby inline nodes. Since we are interested in

// normalizeSiblings into the same parent node

// normally the scope gets created here, during initialisation,

// not a Master element, so we've found what we're looking for.

// not a function

// not a valid Unicode code point

// not all libs have this method yet

// not an actual buffer we keep track of, but a measurement

// not happen before the first read call.

// not happen before the first write call.

// not in the browser, the `document` option, containing a DOM

// not interfere with, such as a scrollbar or widget.

// not its current edited state.

// not listening for removeListener, no need to emit

// not necessary (debounced to run at most once-per-tick)

// not necessary to add metadata

// not passing the registered cache to serializeStyles because it would

// not reset the textarea when typing, because that breaks IME).

// not support lookbehind.

// not supported in IE 10

// not the most efficient thing ever but this is a pretty rare case

// not used by this implementation

// not without wrapping it in parentheses. Thus, it uses the noCalls

// nothing buffered

// nothing in between them to be parsed as `null` (which is needed

// nothing interesting happens.

// nothing to send.

// now (after some event like 'keypress' or 'input') and are

// now rest is set to the post-host stuff.

// now we have `[0, 16, 12, 31]`. This must be written as `[0, 31]`.

// null if no position was found.

// null means we're using CellMeasurer and haven't yet measured a given index.

// number (used to prevent looking up the same line twice).

// number interpolators

// number is in an octal format). If it is NOT octal format,

// number of bytes are available.

// number of bytes available, we need to check if we end on a leading/high

// number of characters that are being encoded.

// number of frames

// number of pending user-supplied write callbacks

// number when a is less, and a positive number otherwise.

// number, or float.

// number.

// numbers as `this.depth + value`.

// numbers changes to all European numbers.

// numbers in a & b match

// obj.hasOwnProperty(prop) will break.

// obj[columns[i].name] = record[i]

// object ID

// object literal concise method

// object stream flag to indicate whether or not this stream

// object stream flag. Used to make read(n) ignore n and to

// object to not be returned from this call. This ensures that doesn't happen.

// object to store loaded and loading chunks

// object with two separate positions is returned.

// object) are interpreted as children of the DOM elements, and must

// object, and use it for all nodes that don't specify specific

// object, create a map from the object's properties.

// object, it is interpreted as a set of attributes for the element.

// object.

// objects) in the order in which they occur visually.

// objects. For full spec compliance, you may wish to configure your

// occur in conforming documents, and provides functionality for

// of a bidi jump depending on the visual position of the head.

// of a list item by also splitting that list item.

// of a non-editable node, so in that case, move it into the next

// of an existing parse tree.

// of assignments (“=” and “+=”).

// of code points as a group.

// of constructs (for example, the fact that `!x[1]` means `!(x[1])`

// of how much we're waiting to get pushed to some underlying

// of nodes to see if there are block nodes that the coordinates

// of nodes. For `null`, it returns the empty fragment. For a

// of plugins, pass an object mapping property names to use in the

// of read-only spans in its range.

// of state objects (`ContentMatch` instances) with transitions

// of that type exist in the selection, or add it otherwise. If the

// of the data set.

// of the error message, and then raises a `SyntaxError` with that

// of the line, it is moved to the end of that space.

// of the node's own marks.

// of the polyfill.

// of the rest of this code, which tends to create nodes with the

// of the scroll event is removed from the scrollable element.

// of the table to their right, and either the top of the table or

// of the type given by its first argument.

// of them changes content dimensions of the observed target. Sometimes

// offers a more official way to detect when a drag ends

// offset in a string. Useful for parsing mixed-language formats

// offset starts at 0x10000, and each pair of numbers represents an

// offset to the next range, and then a size of the range. They were

// offset. `input` should be the code string that the offset refers

// offsets afterwards.

// often referred to. `finishOp` simply skips the amount of

// old hack?

// old school shim for old browsers

// old-style streams.  Note that the pipe method (the only relevant

// omit space before closing paren if

// omit space before closing paren if this is on a separate line

// on a bidi boundary.

// on a node level by specifying a tight attribute on the node.

// on error function for async loading

// on events on child elements, not the document (which we've attached this handler to).

// on our hidden textarea on reload

// on the current circle

// on the source.  This would be more elegant with a .once()

// on these below) will treat its first bound as inclusive,

// onAutosize handler: function(newWidth) {}

// onChange handler: function(event) {}

// onDragLeave can be triggered on each layout's child.

// onEnter/onLeave handler.

// once per theme for this component.

// one allocated and free to use, and we maintain at most two

// one character, and see if that moves the cursor out of the

// one new block for the 'if', no block for the 'else'.

// one of the nodes is inside shadowDOM, find which one

// one, we "replace" the validated continuation bytes we've seen so far with

// only `show` should be changing

// only additional allocation required is the completion record, which

// only done once.

// only get URL when necessary in case Blob.js hasn't overridden it yet

// only occur at the start of a textblock.

// only one row

// only scroll if the menu isn't already open

// only svg for now.

// only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.

// only to the document it was created for, since the positions

// only valid for SimpleBlock

// onto the other branch.

// onto this.

// open value on both side of the fragment.

// operation (to be applied when the operation finishes).

// operation is active, when a timeout fires.

// operations.

// operator precedence, because it is much more compact than using

// operator that has a lower precedence than the set it is parsing.

// operator, and will refer to its precedence.

// operators like `+=`.

// optimize initial layout from our loss function

// option is already selected; it breaks the flow of navigation

// option of false.

// optional / simple context binding

// optional arguments, we eagerly look for a semicolon or the

// optional starting [content match](#model.ContentMatch) as third

// options

// options has already been normalized at this point.

// options or defaults

// options. But unlike that method, which produces a whole node,

// options::- An optional set of options.

// or "arguments" and duplicate parameters.

// or "page".

// or `arguments`.

// or `{}`.

// or a finally block) gives us a place to store values thrown from

// or additional `style` / `className` settings.

// or backwards (negative number) first. Will fall back to calling

// or clipping off existing ones as needed.

// or closest to, the target character.

// or ending inside of them. Calls `onWidget` for each widget.

// or expanded due to a matching node being found in its descendants

// or has an '=' sign after the prop, followed by the given

// or if any track is ended.

// or included in a plugin. This interface lists the supported props.

// or not, return the runtime object so that we can declare the variable

// or on a later tick.  We set this to true at first, because any

// or silence since that is the content produced by the Track

// or single identifier.

// or size of training set is to small

// order based on dependencies

// order based on phase

// order of operation matters!

// order to associate old items with rebased steps.

// order.

// ordering. This finds the first part whose end is after the given

// orientate all disjoint sets, get sizes

// orientate the largest at 0,0, and get the bounds

// orientates a bunch of circles to point in orientation

// original foundation for this library.

// other branch nodes below them. The top node is always a branch

// other lines onto it.

// other methods on the editor, which might be in an inconsistent

// other platforms.

// other props.

// otherwise insert the widget as a new view desc.

// otherwise make sure the next top modal is visible to a SR

// otherwise there will be an error

// otherwise, the cursor incorrectly styled (except with role='button')

// otherwise, the node is passed to `addElement` or, if it has a

// othwerise, we use the standard `top`, `left`, `bottom` and `right` properties

// our fake cursor out of view. On webkit, when wrap=off, paste is

// out of date (or nonexistent).

// outer generator.

// output spec, it should be the only child element in its parent

// outputted bit calls the readcb, and subsequent chunks just go into

// outside the actual mode definition.

// overlapped. figure out which by examining the smallest circle

// overlaps (covers the start or end, but not both) of a new span.

// override this function in implementation classes.

// overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`

// own component's data to see the changes reflected.

// own position)

// pad the end with zeros, but make sure to not forget the extra bytes

// pad the string on the right with 0s to make the string's length a multiple of 8.

// page's first load. Thankfully, this version of Safari supports

// paragraph on the left is open, "foo" can be placed (somewhere on

// parameter will interpret undefined as `this.depth` and negative

// parameter, to determine whether to return the position at the

// parent layout transform scale

// parent node overrode rendering, there might not be one.)

// parent nodes until a valid replace is found.

// parent-relative position, its parent node, and its child index.

// parse correctly.

// parse them.

// parsed it is impossible to make these decisions at the point when the

// parser from the callback—that will corrupt its internal state.

// parser use them properly (the presence of these properties is

// parsers more succinct.

// parsers on.

// parsing contains a |GroupName|, reparse with the goal symbol

// parsing the argument patterns for a fat-arrow function before we

// part (semicolon immediately after the opening parenthesis), it

// part of a surrogate pair, since JavaScript regular expressions do

// part of the document. A LineView may correspond to multiple

// part of this class) is overridden in the Readable class.

// part that only spans one line so that the binary search in

// partial character, the character's bytes are buffered until the required

// parts split off will inherit the node type of the original node.

// pass a different state.

// pass in an optional predicate that will be called with a parent

// pass the transactions the plugin did not see before.

// passed in one, but it's not the right one.

// passed, the full `{line, column}` locations of the start and

// passing in context-specific props

// passing the tree produced by parsing the first file as

// path compression step in union find

// pattern: /^(?:[_].*(?:\r\n?|\n|(?![\s\S])))+/m

// pause() and resume() are remnants of the legacy readable stream API

// pauseType  is 'hovered'

// pdfMake uses a different order than CSS

// pedantic tests (`"use strict"; 010;` should fail).

// peek at first page and assume it's consistent over all pages

// perform more specific behavior.

// perform the change.

// performance monitoring

// persons to whom the Software is furnished to do so, subject to the

// pi/2 = PIO2 + MOREBITS

// pi/2 = PIO2 + MOREBITS.

// pick the circle whose arc has the smallest width

// place when the selection is modified).

// place where it is inserted.

// place.

// placed it we got to its end, otherwise just drop the placed

// placeholder text

// placement, which then needs to re-run all the modifiers, because the

// plugin will track undo and redo stacks, which can be used with the

// plugins in a way that makes it possible to find them, given an

// plugins to initialize the state with. `pluginFields` can be used

// plugins) along with the new state.

// plugins, since it handles mouse and arrow key events in tables

// point

// point into textblock nodes. It can be empty (a regular cursor

// point to new shared state

// point, if any.

// points before the last delimiter, or `0` if there is none, then copy

// points into a text node, only the part of that node after the

// points into a top-level paragraph, 1, and so on.

// points were copied; start at the beginning otherwise.

// polling intensively.

// polygon area updates easily ...

// port by Daniele Zannotti http://www.github.com/dzannotti <dzannotti@me.com>

// position and searching back if `dir` is negative, and forward if

// position in this fragment. The result object will be reused

// position is at the start of a non-empty node, the marks of the

// position is returned.

// position points directly into the root node, it is 0. If it

// position points into a text node, only the part of that node

// position share the same parent nodes.

// position that corresponds to them. May return null if the given

// position where the search starts. When `text` is true, only return

// position would leave that position's parent textblock. Will apply

// position).

// position.

// position. (Whenever possible, it is preferable to inspect the

// position. Note that you should **not** mutate the editor's

// position. Searches forward first by default, but if `bias` is

// position. The resulting position will have a hitSide=true

// positioned wrapper, rather than the root editable node, the

// positioning behaviour is almost identical for portalled and fixed,

// positions (relative to start of this fragment). Doesn't descend

// positions between block nodes too, we first walk up the hierarchy

// positions in the spans (so that we don't have to allocate new spans

// positive unbiased exponent

// positive. When `textOnly` is true, only consider cursor

// possibility to insert one.

// possible when it is clear that nothing happened. hasSelection

// possible.

// post-step version.

// pow(2, 53) - 1 == 9007199254740991

// pre-matches to avoid overwriting nodes that could still be used.

// pre-step version of a document and the same position in the

// precedence levels that JavaScript defines.

// prefer the async Popper#update method

// preferred one

// prefix data with mode indicator (4 bits)

// preserve a range of the replaced content by moving it into the

// preserve steps exactly as they came in, so that they can be

// pressed when the cursor is directly at the start of a textblock and

// presses in a sane way, this code checks for when that happens

// pretend that there is a semicolon at this position.

// prevent arrowElement from being placed not contiguously to its popper

// prevent global pollution for namespaces

// prevents scrolling to the end of the page

// previous circles locations. load from elements

// primary part of the selection

// primitive tool which will _not_ move the start and end of its given

// priority over other events including IO, animation, reflow, and redraw

// private WeakMap storage which may cause memory leaks in browsers that

// probably be computed with [`findWrapping`](#transform.findWrapping).

// probably want the regexp to start with `^`, so that the pattern can

// problems, please detail your unique predicament in a GitHub issue.

// produces a different name from the the keyCode. See #668,

// producing a new set. Needs access to the current document to

// properly measurable).

// properly positioned near its reference element

// properly rerenders the CalendarMonthGrid

// properties

// properties are

// properties in a schema's node and mark specs.

// properties of `sel.anchorNode` when it's in a generated CSS

// properties then it's either IE, and thus we don't need to subtract

// properties.

// property

// property assignment in contexts where both object expression

// property if it reached the end of the document.

// property in Markdown-it.

// property of a typed array.

// property, since these are the positions that were used to

// property. Note: `unicodeMatchProperty` throws on invalid properties.

// property](#state.Transaction.setMeta) of `false` on a transaction

// props that need to be used in gDSFP or static functions will be stored here

// props.

// proto

// protocol, but can be used as an escape hatch if a binding needs to

// protocols that always contain a // bit.

// protocols that can allow "unsafe" and "unwise" chars.

// protocols that never have a hostname.

// prototypally inherits from Readable, and then parasitically from

// provide FocusOut, while blur and keydown don't provide the information

// provide some affordance on touch devices

// provided DOM node is child of its popper node

// provided by the DirectionProvider component.

// provided element.

// provided, that is assumed to hold a previous, known-good state,

// proxy all the other methods.

// proxy certain important events.

// pseudo-single (20-bit) precision x

// public for test

// pull out port.

// pull#293 by @volodalexey

// purpose of keymap fallthrough.

// purposes.

// push a cloned element of the desired slide

// put cursor inside of the inserted node

// put the host back

// q < 3

// q < 6

// q >= 0.25

// quantifier range is given by the beginning of the atom.

// queue if the exception handled by Node.js’s

// r (AL):  Right-to-Left Arabic

// raise an unexpected token error.

// raise inexact

// range, and is useful in situations where you need more precise

// range.

// range/mult < RANGE+1 (no endless loop)

// ranges.

// rare.

// rather broadly, and other plugins, like the gap cursor or the

// rather than at the end of the parent node.

// ratio. Calculate the change height-first, instead of width-first

// rawAsap provides everything we need except exception management.

// re-cache custom components

// re-fire a series of drag-related events right after the drop (#1551)

// reached. Code coverage tools should ignore it.

// read ebml datasize vint without first byte

// read ebml id vint without first byte

// read it all, truncate the list

// read part of list

// readDOMChange.

// readable event, and the user called read(largeNumber) such that

// reading a dimension prop will cause the browser to recalculate,

// reading, then it's unnecessary.

// real proto method for `library`

// reallocate them all on every rebase, but also avoid problems with

// reapply original body styles, if any

// reasons

// rebased on top of the remote changes, and include the position

// rebased, whereas the origin transactions are still the old,

// rebased.

// rebuild the menu options

// recalculate the result

// recomputing them all the time, they are cached per table node. To

// reconsider as closing tag context

// record like context.tryEntries[i].completion. This interface could

// record using MediaRecorder API

// recorded audio length

// rectangle into view. Returns an object with scrollTop and

// rectangles for it (in measureChar).

// recursion and an "Out of stack space" error.

// recursively call mapInner on them and update their positions.

// red

// redo them.

// reduce the distance between that block and the one before it—if

// reducer returns their initial state. This effectively populates

// ref callback for the input element

// ref objects should be passed straight through without wrapping

// ref. https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode

// ref: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache

// reference have enough pixels in conjunction

// reference, so return the new value at the same index

// refers to the pre-change end).

// reflect the worst point past the centroid  and compute loss at reflected

// refs don't work in `react-test-renderer`

// regeneratorRuntime in the outer scope, which allows this module to be

// regexp with `^` to that it is only matched at the start of a

// register an ID for your step classes. Try to pick something

// registering a (non-DOM) handler on the editor for the event name,

// registering events on such objects more convenient.

// registering native DOM handlers.

// registers single-line changes.

// regjsparser

// regular expression literal. This is to handle cases like

// regular expression).

// relationship

// release memory

// release reference before dispatching

// reliably everywhere they are implemented.

// reliably in a browserify context because there could be multiple different

// remaining bytes to read

// remaining data should be divisible by the number of frames

// remote steps.

// remove a "name" attribute from an <img> tag that has an "id"

// remove all marks of that type. When it is null, remove all marks of

// remove all the event listeners that were added.

// remove all zeros from buffer head

// remove all.

// remove arrow

// remove cursor on desktop

// remove cursor on mobile whilst maintaining "scroll into view" behaviour

// remove doublon in classes

// remove old

// remove seek info

// remove segment tag

// remove the attribute

// remove the object from the stack

// remove the popper if user explicitly asked for the deletion on destroy

// remove the vars

// remove touch listeners

// remove whitespace-only literals, unless on a single line

// removing or adding a single mark type.

// rename columns

// rendered scroll bars nor it can be clipped.

// rendering, to prevent any unsightly resizing.

// replace all interpolations with a placeholder which is not in the code already

// replace empty paragraph node to not break pdfmake

// replace newlines with spaces

// replace the handler

// replaced by the given node.

// replacement char (U+FFFD) and advance only 1 byte

// replacement fragment.

// reported.

// represented as numbers, because tons of them will be created when

// represents.

// require a separate undo command to undo).

// required for offset[Height, Top] > keyboard scroll

// required props for a functional interactive DateRangePicker

// requires: chrome://flags/#enable-experimental-web-platform-features

// reserved words, and support for new syntax features. The default

// reset

// reset because shorthand default was used correctly

// reset bottom/top flags

// reset direction for next iteration

// reset gragEnter counter on drop

// reset move vars

// reset the scroll focus so it doesn't jump back

// reset user styles for span element

// resets the popper's position so that the document size can be calculated excluding

// resetting the set of active marks at the cursor.

// resize handles and a selection that considers the absolutely

// resolution will treat //foo/bar as host=foo,path=bar because that's

// resolved position, providing various pieces of context information,

// restores the original style properties after the offsets have been computed

// restriction by maximal depth of tree

// result of computing the existing spans with the set of spans that

// result, either by returning a { value, done } result from the

// result.

// result.protocol has already been set by now.

// resulting JSON object to plugin objects. The argument may also be

// retrieve the class from the parent

// return <CustomNodeViewComponent {...this.props} />;

// return a boolean to indicate whether a join should happen.

// return a fragment if the resulting match goes to the end of the

// return an array of marks, or null to indicate some of the styles

// return document.createElement('span');

// return in more usable form

// return it as a `Slice` object.

// return list of slides that need to be present

// return primitive with prefix

// return the list of modules as css string

// return the node so it can be chained (e.g. when within callback refs

// return true when successful.

// return valid WCAG2 parms for isReadable.

// returned incorrectly when zoomed on IE10 and below.

// returned, its `pos` property is the position nearest to the

// returning the number and optionally registering the line as

// returns an abstract syntax tree as specified by [Mozilla parser

// returns no of slides on the left of active slide

// returns no of slides on the right of active slide

// returns the bookmark for that.

// returns the new state after search

// returns the precise transactions that were applied (which might

// reverse Prism.util.encode

// reverse delta if using top or left drag handles

// right corner of the scrollbar box is the scrollbar box

// right now only the first modal of a container will have its classes applied

// right of the table.

// right position.

// right shape in one go, rather than messing with them after

// right), unit can be "char", "column" (like char, but doesn't

// right-click take effect on it.

// right-to-left text.

// rightmost point (may be greater than `nright` because of ties)

// root if the editor is inside one.

// rotate circles so that second largest is at an angle of 'orientation'

// round to nearest

// row has the same number of cells.

// row has the same width, and cells don't overlap).

// row-major

// rows and slidesPerRow logic is handled here

// rtl support

// rtrim in non quoting is handle in __onField

// rule was the last thing that the user did.

// rules.

// run the modifiers

// runs as long as the editor is focused.

// s (B):   Paragraph Separator

// safe

// safely decrement active scroll locks

// same as `p.parent`.

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// same element

// same error.

// same from parser's perspective.

// same marker that appear on both sides of the change, and cuts off

// same text, or the end of the change if the change covers it.

// same. Since this position will not be the same in both nodes, an

// sample format (raw)

// sample positions at 90 degrees for maximum aesthetics

// sample rate 

// satisfies `pred`. Supports `from` being greater than `to`.

// save all loops up to the lexical boundary in case we need

// scan index for next number in b

// schema's [node specs](#model.NodeSpec.parseDOM), reordered by

// schema, and raise error when they do not.

// scheme](/docs/guide/#doc.indexing). For text nodes, this is the

// script path function

// scroll (if it is large enough).

// scroll action is applied before the end of the operation, this

// scroll the focused option into view if necessary

// scrollLeft properties. When these are undefined, the

// scrollTop and scrollLeft props are explicitly filtered out and ignored

// scrollable area is big enough.

// scrolled into view (if we know enough to estimate it).

// scrolled out of view, this ensures that the cursor is visible.

// scrolling entirely here. It'll be slightly off from native, but

// scrolling. This problem does not impact ASAP because Safari 6.0 supports

// searching through the plugins (in order of appearance) until one of

// second as exclusive, but we want to actually address the

// second field

// second index

// second last and last

// see 9.3.

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25

// see if any block-scoped declarations are referenced

// see the pattern in prism-javascript.js

// seems like flip is trying to loop, probably there's not enough space on any of the flippable sides

// seen text (can be empty), which is stored in prevInput (we must

// select-all detection hack)

// selectable position nearby, and create a gap cursor selection for

// selectable, delete the node above and select the one below.

// selectable, delete the node below and select the one above.

// selected (unless it is huge, in which case a placeholder is

// selection [mapped](#state.Selection.map) through the steps in the

// selection in the meantime.

// selection in the wrong place. If it looks like that is

// selection into the 'done' array when it was significantly

// selection is empty, this applies to the [stored

// selection reported by the Selection object (#710, #973,

// selection that can be lifted, out of its parent node.

// selection that the editor gets when the transaction is applied.

// selection transactions directly caused by mouse or touch input, and

// selection update.

// selection was typed over with an identical value if it can't

// selection with a newline character.

// selection, also delete its content.

// selection.

// selection. On Safari, when Enter is pressed, compositionend and keydown events are

// selection:: Selection

// selections, and tries to estimate a character position even for

// selections. If so, apply it (if not, the result is left to the

// selections. Will return null when no valid selection position is

// selector

// selectors and mixins are considered the same

// selects across cells, and will be drawn by giving selected cells a

// separate step, syncs the DOM inside `this.contentDOM` to

// separate value from unit

// separator doesn't make sense without the dropdown indicator

// server yet.

// set a default direction so that a component wrapped with this HOC can be

// set all low word (less significant significand) bits to 0s

// set default styles

// set defaults

// set later on

// set of marks.

// set sample rate as desired sample rate

// set should be positioned analytically and try those too

// set the appropriate CalendarDay phrase based on focusedInput

// set touch start so we can calculate touchmove delta

// set up data events if they are asked for

// set utc offset to get correct dates in future (when timezone changes)

// setState callbacks and unmounting in testing, so always make sure that

// setimmediate attaches itself to the global object

// setting context.delegate to null, and returning the ContinueSentinel.

// setting defaults

// setting the ref's scrollLeft and scrollTop.

// setup Promise in chunk cache

// setup event listeners, they will take care of update the position in specific situations

// several variants—see the static members of this class for details.

// shadowing declarations after this expression

// shape) for the table, used by the table normalizer.

// shared position objects being unsafely updated.

// shift circles so largest circle is at (0, 0)

// shift current slide to center of the frame

// shift tasks off the queue after they have been executed.

// shift, the `Shift-` prefix is implied, and should not be added

// shim for using process in browser

// shortcut to initialize with zero

// shortest path

// shot to minimize update/measure roundtrips.

// should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized

// should be a string—the name of the DOM element, optionally prefixed

// should be recomputed.

// should be the new document to which we are mapping.

// should not directly interfere with its content.)

// should not mutate them or their content. Rather, you create new

// should we decode strings into buffers before passing to _write?

// should we provide an option to record via Whammy.js or MediaRecorder API is a better solution?

// should work with symbols and should have deterministic property order (V8 bug)

// shown.

// sibling elements or the picker itself can scroll.

// sign preserving

// signal underflow...

// signalLater looks whether there are any handlers, and schedules

// significant, in that it is used to contruct filler content when

// similar to how Writable.write() returns true if you should

// similar to x >= 256, but a lot faster (because 0x100 == 256)

// simply directly correspond to DOM attributes of the same name,

// simply exist as properties on the parser object. This is only

// simply start parsing an expression, and afterwards, if the

// simular to jQuery's test

// since _read has to be called to start processing a new chunk.  However,

// since `codePointToString` is private and only used for BMP code points.

// since it axis aligns)

// since it'd require exposing a whole slew of finnicky

// since some scripts/fonts/browsers also treat other configurations

// since the masking operation must be performed only on the encoding region.

// since there can be lot more things (var, @ directive, nesting..)

// since visual lines contain content order-consecutive chunks.

// since we can support older versions of d3 as long as we don't force this,

// single equals check for both `null` and `undefined`

// single leaf node.

// single select, by default, IS NOT clearable

// situation where clicking at the point where that

// situation, we can take this ordering to correspond to the visual

// size for the current document size. Returns true when an update

// skip BOM detect because data length < 3

// slice can be inserted. Will look at parent nodes' nearest boundary

// slice is the same for buffers and strings

// slice, or drop nodes from it, and then try again.

// slice.

// slight optimization to avoid modulo arithmetic when max+1 < idx <= 2*(max+1)

// slight optimization to avoid modulo arithmetic when |idx| <= max+1

// slow case. multiple pipe destinations.

// slower

// slowing down the queue of pending tasks, we rethrow the error in a

// small enough for non-zero weight

// smallest indentation, which tends to need the least context to

// so Buffer.isBuffer(Buffer.prototype) will be false

// so even if it's empty, it has to be present.

// so give them whatever is available below rather than the minHeight.

// so remove this pair.

// so that results are always delivered in the correct order. If

// so that the async generator function has the opportunity to do

// so that the history can be rebased.

// so that using `css` from `emotion` and passing the result to the css prop works

// so that we don't need to depend on findDOMNode() from react-dom.

// so that you can pass your own Window

// so the browser didn't dispatch the dragend event.

// so this is the same as d3.schemeCategory10, which is only defined in d3 4.0

// so we can increase and decrease count of dragEnter and

// so we don't have to add it to registered cache.

// so we have to terminate process of building tree

// so we need to check on context instead of a document root element.

// so we need to stopRecording as soon as any single track ends.

// so we use the same component. the actual portalling logic is forked

// so we'll use event.code when available (Chrome 48+, FF 38+, Safari 10.1+)

// so while this could be technically correct then it would be slower and larger

// so, return the marker for that span.

// socket or file.

// some bits pass through, and others are simply ignored.  (That would

// some key combos in Mac (#2689).

// some other error. we should definitely know about these

// some updates should toggle the state of the input visibility

// something changed.

// something in the input textarea, we poll faster, to ensure that

// something went wrong, return default state

// something with the data.  Sometimes it's called a "filter",

// sometimes text doesn't fit inside the circle, if thats the case lets wrap

// sometimes. This works around that.

// soon as possible, but if you use `rawAsap` directly, you are responsible to

// soon as possible.

// sort by size desc

// sort it to have a consistent order between iterations

// sort the points by angle from the center of the polygon, which lets

// sort them in increasing order of their numerical value

// sorts all areas in the venn diagram, so that

// source code from: http://typedarray.org/wp-content/projects/WebAudioRecorder/script.js

// source gets the 'end' or 'close' events.  Only dest.end() once.

// source: https://github.com/OpenSlides/OpenSlides/blob/f4f8b8422f9b3fbab58e35ac3f8f870d35813b7d/client/src/app/core/ui-services/html-to-pdf.service.ts

// source: https://stackoverflow.com/questions/49875255

// space

// spaces after the # character compile fine with gcc

// span.

// spans is larger (and thus includes the other). Falls back to

// spans partially within the change. Returns an array of span

// spans that aren't on the line.

// spec also contains listRef, trackRef

// spec also contains, trackRef and slideIndex

// spec::-

// spec::- These options are recognized:

// spec::- These options are supported:

// special case

// special case the `?` key so that it always triggers the appropriate callback, instead of

// special case – [ ...arguments ]

// special case – `super( ...args )`

// special case – body-less if/for/while statements. TODO others?

// special case – https://gitlab.com/Rich-Harris/buble/issues/11

// special case – https://gitlab.com/Rich-Harris/buble/issues/150

// special case – we may be able to skip the first element,

// special case...

// specific day) or it is **document.body** (IE11), the appropriate value is **event.target**.

// specific stretches of text, and is used by the measuring code.

// specific writer, then it would cause it to never start

// specifying the nodes for a schema. Adds

// specs](http://prosemirror.net/docs/ref/#model.SchemaSpec.nodes) for

// splitting training set by given 'attribute-predicate-value'

// stack (redo when undoing, and vice versa).

// stale/incorrect

// standalone expression statement

// standard built-ins

// standard global objects

// start chunk loading

// start of selection drag, start of text drag, new cursor

// start of the table, rather than the start of the document.

// start opening tag context

// start or around the replaced test. Hint may be "start" or "around".

// start or at the end of this view desc.

// start or end of that node. Returns null when no position was found.

// start out asking for a readable event once data is transformed.

// start scrolling if we need to

// start the flow if it hasn't been started already.

// start with. Many are trivial to parse, some require a bit of

// start-of-operation selection and document, since that's the one

// start/end tokens.

// startIndex that needs to be present

// started by the argument, or undefined if there are no such lines.

// starting around 5000 chars.

// starting with * are always merged, those starting with + are

// starts after the coordinates. If we run across any whose box wrap

// starts, or would start, if a cell started there.

// state at the position that the state refers to.

// state in such a way that each change won't have to update the

// state index

// state on line 1 looked ahead 2 -- so saw 3

// state or simply not expect any other events to happen.

// state where the thing the user sees differs from the

// state.

// state. Will be stored in the plugin state when the history plugin

// state](#state.StateField) accordingly.

// statement or expression, disallowing the `in` operator (see

// statements, and wraps them in a Program node.  Optionally takes a

// static

// statics

// statistic()

// stay empty anyway.

// stay inside the bounds (because we will mainly use this table for the multiplication of

// stays in view.

// step into the shadow DOM of the parent of a slotted node

// step that pulls that content into the node after the frontier.

// steps are inverted versions of earlier steps. (This comes up when

// steps can't be merged.

// steps).

// steps. This can be useful for looking up time stamps and other

// stereo (2 channels)

// stop recording

// stop scrolling if there's nothing to do

// store any styles already applied to the body

// store the computed placement inside `originalPlacement`

// stored heights to match.

// stored in it will only make sense for that document.

// storedMarks:: ?[Mark]

// stores highlight worker timeout

// stores maps added by addKeyMap

// stores not only a fragment, but also the depth up to which nodes on

// straightforward appendLeft and keep correct order...

// strange IE + webpack dev server bug - use .call(global)

// stream classes.  When you write(chunk), that calls _write(chunk,cb)

// strict mode and parsing of `import` and `export` declarations.

// strict mode using a global Function call. This could conceivably fail

// strict mode, init properties are also not allowed to be repeated.

// strict"` declarations when `allowStrict` is true (used for

// strikethrough

// string constants and placeholders

// string preceding current number in b, if any

// string, or towards the character to the right of the current

// string, return a mode config object.

// string](#ParseRule.context) matches this context.

// strings to values, with some convenient update methods.

// strings.

// strip [ and ] from the hostname

// strip out comments

// strong

// structure between the old and new data as much as possible, which a

// style as a ProseMirror node or mark.

// style strings), which is used to highlight the tokens on the

// styled-components:

// styled-jsx:

// styles to make it visible.

// sub-class may override this method.

// sub-document to a larger document, or vice-versa.

// subclass should overwrite this.

// subclass that represents a cell selection spanning part of a table.

// subscribe to future direction changes

// subsequent tasks. The higher level `asap` function ensures that if an

// subtract scrollbar size from sizes

// successful, return a fragment of inserted nodes (which may be

// successful.

// such a pathological inflating mechanism, there'd be no way to tell

// such a way that the drawing algorithm can efficiently use and

// such as it being emphasized, in code font, or a link. It has a type

// such as the repl.  Also, if the push() triggered a

// such code is executed in the same order of its modifier

// suck it, flow...

// suffice to return exp(x)-1

// sum of weights

// sums the lengths of all the frames and gets the duration

// supply a custom node view, which can influence various aspects of

// support for the old title property

// sure line objects move the way they are supposed to.

// sure the lift is valid.

// surrogate range. E.g. (0, 0xDCFF).

// surrogate range. E.g. (0xD855, 0x10FFFF).

// surrogate range. E.g. (0xD855, 0xDCFF).

// surrogate range. E.g. (0xDCFF, 0x10FFFF).

// surrogate. In that case, we need to wait for the next two bytes in order to

// surrounding strong text if the text on both sides has the same

// svg`<path fill="#fff" d="M55.37 ..."/>`

// sync guard flag.

// synchronize after every block element.

// syntactic elements, and recursively calling those, each function

// synthetic stream cases, such as passthrough streams, _read

// t (S):   Segment Separator

// t*ln2_hi is exact here

// t=1-2^-k

// t=2^-k

// table, at the position pointed at by rect.

// tag が読めなかった

// tag 識別子

// tag.length が buffer の外にある

// tags it will allow on a page

// take everything except the protocol from relative

// take popper margin in account because we don't have this info available

// takes an offset integer (into the current `input`) to indicate

// target

// target depth, starting with the preferred depths.

// target node if childIndex reaches the targetIndex

// target—you don't have a choice.)

// technically this means that the @import rules will

// tell the dest that it's being piped to

// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4

// temp disabled per https://github.com/ljharb/object.assign/issues/17

// terms of their influence on neutrals. Start-of-level-run (sor)

// test 1 + 2 < 3 should cover this

// text node after a BR node) call the observer callback

// text nodes with the same marks are joined together.

// text selections.

// text was made out of.

// text, direction 1 means to move towards the next index in the

// text:: ?string

// textarea (making it as unobtrusive as possible) to let the

// textblock (or doesn't move it at all, when at the start/end of

// textblock, try to reduce or remove the boundary between that block

// textblock. The optional `getAttrs` parameter can be used to compute

// th position of the comma as an offset, and if `locations` is

// than 0.5 will be discarded as well.

// than 50, we assume it's a mobile bottom bar and ignore scrollbars.

// than characters, and because operator parsing has been inlined

// than false negatives. strict `undefined` check allows explicit

// that Readable wants before the first _read call, so unset the

// that are non-inclusive and not present at position `$end`. This

// that are not there yet, and updating the ones that are out of

// that can be joined, with the sibling after it.

// that depth, but replacing from $from.before(-D) to $to.pos.

// that does allow the given node to be placed. When the given range

// that doesn't move when extending the selection).

// that don't correspond to the ordering in our `order` array at

// that don't match the given new parent node type. Accepts an

// that embed JavaScript expressions.

// that happened, adjust the change to cover the space instead.

// that have a dangerous default effect, even if the commands they are

// that have been explicitly cleared should not be restored.

// that is immediately returned. When `f` isn't provided, it is

// that mark to prevent parser edge cases with new lines just

// that nothing more will ever be provided

// that order of the marks for the token matches the order in

// that parent node.

// that separated only by a non-defining textblock node, is defining.

// that start, move one part back.

// that supports appending, prepending, and slicing without doing a

// that the DOM represents. If any changes came in in the meantime,

// that the Readable class should behave improperly, as streams are

// that the effect of intermediate scroll commands is not ignored.

// that the minimum number of relayouts are required.

// that they can be chained.

// that they have a clipboard API—all the objects and methods are

// that this (partially) implements.

// that this document is part of.

// that to be increased. Set to zero for unlimited.

// that user code is usually dealing with.

// that want to inspect the mode state (say, for completion).

// that was active before the first step was applied)

// that we're awaiting a 'readable' event emission.

// that you are not allowed to call the parser from the

// that's smaller than what was actually overwritten.

// that's unlikely to clash with steps from other modules.

// that's why we've to ignore rest of the code

// that, when added to an editor, enables cell-selection, handles

// that, when pasting, we know what kind of selections the copied

// the '01' should be matched.

// the 'readable' event and move on.

// the .value of the Promise<{value,done}> result for the

// the 3rd node in the 2nd paragraph on the top level, for example,

// the ? shortcut came from the input and we should return input there once it is close

// the AST node that the inner parser gave them in another node.

// the DOM around an active selection puts it into a broken

// the DOM.

// the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)

// the `console.log` function doesn't have 'apply'

// the `instanceof` check but they should be treated as of that type.

// the `loc` object, which holds line/column data. To also add a

// the `stepType` property.

// the amount of lines added or subtracted by the change. This is

// the amount of lines crosses a boundary that makes its width change)

// the amount that is being written when _write is called.

// the areas match

// the array get to dispatch first).

// the array item is different...

// the authority. Applying this transaction moves the state forward to

// the behavior of a node's in-editor representation, and need to

// the big drawback is that the css won't be editable in devtools

// the body of the statement

// the box of the documentElement, in the other cases not.

// the browser will only record black frames 

// the callback that the user supplies to write(chunk,encoding,cb)

// the callback that's passed to _write(chunk,cb)

// the caller expect this to happen before if

// the cell covering that part of the table in each slot

// the center point relative to the circles (interior) after subtracting

// the change appears on the screen quickly.

// the character value of the final character is encoded as a 6-bit binary number.

// the client width of 315px and for the width of 314.7px it may give

// the coordinates, and the coordinates aren't on the same line as

// the coordinates, store that.

// the cost of the shortest paths to any or all of those nodes as

// the current bidi part

// the current state and calling

// the current, or the origins don't allow matching. Origins

// the cursor space when adding a space before another space. When

// the default drag preview from drawing in IE is to screenshot

// the deleted content with a random BR node (issues #799, #831)

// the depth specified by `target`. You'll probably want to use

// the document at the given position. It is recommended that you

// the document structure by lifting it out of its parent or moving it

// the document).

// the dragging state in which the node itself has zero opacity

// the drain event emission and buffering.

// the editor state (which should have the collab plugin enabled).

// the embedded language isn't registered.

// the end of a selector is found when there is no rules in it ( {} or {\s}) or if there is a property (because an interpolated var

// the end of the block, and `f` is a function that renders the

// the end of the list, the existing list is closed. At sides where

// the entire buffer is not flushed immediately on write()

// the entry state and the last node is the success state.

// the final one or two digits are converted to 4 or 7 bits respectively.

// the final result produced by the iterator.

// the first `update` will call `onCreate` callback

// the first basic code points to the output.

// the first instance of /, ?, ;, or # ends the host.

// the fly, without following the level-based algorithm.

// the focused value is still in the selectValue, return it

// the focusedValue is not present in the next selectValue array by

// the functions will simply let the function(s) below them parse,

// the given content (or empty, if no content is given).

// the given document. Will return an

// the given line.

// the given node type with the given attributes.

// the given rectangle.

// the given slice. The slice must 'fit', meaning its open sides

// the given two positions that are relative to start of this node's

// the given type an attributes. If `dispatch` is null, only return a

// the host field still retains them, though

// the host is the remaining to the left of the first non-host char

// the initial state tree.

// the inserted text won't inherit the marks. So this moves it

// the key. Note that the view argument isn't part of the command

// the known shortest path from s.

// the left of the input and the end of nodes at the end.

// the left side of the replacement gap) independently from p("bar").

// the line map. Takes care to render special characters separately.

// the line pointing to the new destination

// the local part (i.e. everything up to `@`) intact.

// the location of the error, attaches the position to the end

// the lowest limit is Chrome, with 0x10000 args.

// the max length is how many rules we have per style tag, it's 65000 in speedy mode

// the menu is rendered

// the method takes exactly one argument, since that happens to be true

// the minimumTreeIndex requirement

// the modification is mapped over those before it is applied, in

// the modifiers in the next step

// the new cursor position should be scrolled into view after

// the new node's attributes, and works the same as in the

// the new position Popper has already measured it, if the place change triggers

// the new state tree with any relevant data from the old one.

// the no-half-open enforcer

// the node after this position the main reference.

// the node before that textblock, if possible. This is intended to be

// the node coming after that textblock, if possible. This is intended

// the node's content is wrapped, and return true.

// the node.

// the number of writers that are awaiting a drain event in .pipe()s

// the ones in the given array.

// the only time we could have an identifier node without a parent is

// the other circles

// the other ones will call `onUpdate` callback

// the outer generator.

// the parent editor is focused.

// the parent—text nodes are ‘flat’ in this model, and have no content.

// the parser process. These options are recognized:

// the parsing has finished, the input string is parsed a second time with

// the pending selection in the history, and pushes the old pending

// the point at which it stops calling _read() to fill the buffer

// the point at which write() starts returning false

// the position under the mouse.

// the precise beginning of the millennium (at 2001-01-01T00:00:00,000000000 UTC)

// the prependListener() method. The goal is to eventually remove this hack.

// the proper solution is to fix the accidental strict mode problem. If

// the protocol does weird things

// the read buffer, and will cause it to emit 'readable' if necessary.

// the results of the previous transformed chunk were consumed.

// the right of the character position, for example). When outside

// the same line as the arguments and there's no strange noise

// the same node. We don't want to wrap an object twice

// the same options object.

// the same textblock, for example, a range around that textblock

// the schema constraints aren't applied to the start of nodes to

// the scope early, as it pertains to both the init block and

// the scroll effect that the first few mouse wheel events have,

// the scroll position at 30fps

// the second being non-inclusive).

// the second parameter to `parseExpression`), and then check

// the selected cells' outline forms a rectangle.

// the selection changes. A selection is one or more non-overlapping

// the selection is modified).

// the set itself is returned. If any marks that are set to be

// the sibling above it.

// the size of the popper element itself

// the spec has a hole (zero) in it, `contentDOM` will point at the

// the start of next group of word or non-word-non-whitespace

// the start or end of the selected content, creating a change

// the state of the read buffer, providing enough data when

// the step was entirely deleted by the mapping.

// the structure of the object at the index has changed...

// the system to stop doing the transform.  A single 4MB write could

// the target of a node selection. In such a selection, `from` and

// the technique outlined above, which uses different, nesting

// the text here such that it fits

// the the current scroll position). viewport may contain top,

// the timeout is necessary b/c this will run before the new modal is mounted

// the token, so that the next one's `start` will point at the

// the tokens to create a ProseMirror document tree.

// the top level, not in any node.

// the top position of an element near the top of the editor, which

// the total number of capture groups set.

// the tree but if it's a string tag, we know it won't

// the way the node works.

// the widget and node descs inside of them.

// the wrapper node, if necessary. Returns null if no valid wrapping

// their MediaRecorder implementation works well!

// their parents

// them by ofset X and Y.

// them returns true. For some props, the first plugin that yields a

// them to be executed when the last operation ends, or, if no

// them, which is needed for uniquely determining an outer marker

// them.

// them. The cursor is drawn as an element with class

// then figure out the area contained by them

// then go ahead and try to read some more preemptively.

// then it must NOT get a trailing slash.

// then it should be MouseButton.Left.

// then let that catch block handle the exception normally.

// then only the zeros `0` is treated here and the `91` are ordinary

// then the slash is ignored and the number is matched later

// then those from plugins (in order), and calls `f` every time a

// then we're ok.

// there (may have been modified through other means, in which

// there are for example leaf block nodes at the start or end of the

// there will be only 2 of these for each stream

// there's a block directly before it that can be joined, join them.

// there's a bug in safari where it seems like we can't get

// there's a hostname.

// there's enough pending readable data buffered up.

// there's no meaningful way to insert the slice here, or inserting it

// there, they just don't work, and they are hard to test.

// there. The easy solution is to only fire `hover` in `dragover` on FF.

// these concepts, see https://swtch.com/~rsc/regexp/regexp1.html

// they are entirely covered by collapsed, non-widget span.

// they are marked [non-defining](#model.NodeSpec.defining), or

// they aren't text positions, find a text selection near them.

// they could add new properties to their options configuration

// they fix https://bugs.chromium.org/p/chromium/issues/detail?id=633838

// they have defaults, will be added.

// they stick out.

// they will be set as HTML attributes of the element

// things like emphasis or being part of a link) are

// things simple and return the next function itself.

// third elements aren't both expressions (since they maybe

// this (e.g. Edge 2019, IE11, Safari)

// this adds a zero-width space so that we can later check whether

// this algorithm can be implemented with matrices of different sizes.

// this and fellow methods are wrapped in setTimeout

// this boolean to detect any flip loop

// this can emit finish, and it will always happen

// this can emit finish, but finish must

// this case, we respect the columns indexes

// this code is in a hot path and we want it to be as fast as possible, we

// this contains only a few commonly used DOM variables

// this element by `x, y` pixels.

// this feels a tiny bit hacky, but we can't do a

// this file was prevaled

// this for a custom selection class, make sure to give the object a

// this ignores label

// this improves memory usage since we can avoid storing the whole style string

// this is IE 8, which has a broken gOPD

// this is a really hot path

// this is already the case.

// this is false.

// this is here so that some node-core streams can optimize string

// this is populated as and when reassignments occur

// this is the end, it is overwritten to its end.

// this is the ultrafast version, works across browsers

// this looper is used to support intervals based blobs (via timeSlice+ondataavailable)

// this map.

// this may result in notifications being blocked for the rest of observers.

// this method checks if media stream is stopped

// this method injects styles to hide IE's clear indicator, which messes

// this method just converts the selection to a text selection and

// this might be a language that Prism does not support

// this must be 0 before 'finish' can be emitted

// this object contains `position`, we want to preserve it along with

// this one returns a slice that is open at the sides, meaning that

// this one was hard to do, so please be careful if you edit this one :)

// this one.

// this pair.

// this parser. Can be useful to copy and modify to base other

// this points at the inverse's offset

// this prevents an error if you render a Popover without arrow props, like in a test

// this seems to be one of those things that should be easy but isn't

// this selection is the starting selection for the group (the one

// this shouldn't happen anymore with addMissingAreas

// this shouldn't really matter in the real world though

// this throws if `array` is not a valid ArrayBuffer

// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)

// this transaction.

// this way, you can call url_format() on strings

// this weirdness brought to you by firefox

// this.

// this._events to be assigned to a new object

// this.getProps() derives the props from the theme, stylesInterface, and direction in

// those are replaced by this one.

// those cases and it's not possible to perform a precise and performance

// those for other nodes. Returns an array whose positions correspond

// those of another. Returns `true` if both have the same markup.

// those that are new are initialized using their

// though due to backwards-compat we should probably keep it around

// three, it iterates over the range given by the first two (with

// throttle `dragHover` work to available animation frames

// through to the step class' own implementation of this method.

// through. If it does, and there's a `contentDOM` node, our logic

// throw away the existing file, and take the new path instead.

// throw the exception.

// thus doesn't get a reaction from ProseMirror. This

// tightLists:: ?bool

// tiny amounts

// title 1

// title 2

// to *event.target** when **relatedTarget** is not provided.

// to `true`.

// to a 4 milisecond delay, but once we're flushing, there's no delay

// to a document transform.

// to a search result while dragging

// to a set.

// to add our scrollbar width

// to alias them later for block-scoped declarations

// to avoid piling up things on the stack

// to avoid unpredictable jumping of a dropping placeholder

// to be bound to keys like delete, after

// to be removed.

// to be sent to the central authority. Returns null when there is

// to begin with, then we MUST have a path.

// to clean up potentially wonky urls.

// to continue to work with older versions of Node.js that do not include

// to crawl up to the hostname, as well.  This is strange.

// to create a new function object. We can even get away with assuming

// to deserialize the state of plugins, by associating plugin

// to detect a Buffer instance. It's not possible to use `instanceof Buffer`

// to display advertisement images!

// to enable drag and drop

// to ensure that only the items below a given level are compressed,

// to ensure we don't rerender with the wrong width.

// to ensure, in the case of multiple collisions, that we're getting the

// to explicitly cancel the selection rather than the user

// to find collisions faster

// to find the callsite that caused this warning to fire.

// to get stuck in a permanently paused state if that write

// to get the position after that node. If not, search forward.

// to go on)

// to indexed object, toObject with fallback for non-array-like ES3 strings

// to integrate changes made by peers into our local document. It is

// to invoke when the event fires.

// to it in a grid

// to its body instead of creating a new node.

// to its start when removeAllRanges is called and the editor still

// to know about those, so that it can adjust the steps that were

// to know when parsing a label, in order to allow or disallow

// to make it re-entrance safe in case destroy() is called within callbacks

// to make sure initialize setState has happened before

// to make the history handle it well.

// to next slide. That only goes away by click somewhere outside

// to node positions in the fragment, and whose elements are either

// to operate correctly into non-standard environments

// to prevent it from being rolled back by undo.

// to prevent self audio to be connected with speakers

// to properly transition intersection areas, we need the

// to reduce the amount of code

// to support http.request

// to support video-only recording on stable

// to the current frame's queue

// to the empty fragment) would leave the node's content valid. You

// to the found position (so xRel > 0 means the coordinates are to

// to the given transaction.

// to the last character on the line.

// to the left of the last @ sign, unless some host-ending character

// to the native rAF function

// to the only interactive element, the hide button

// to the readable side.  You may call 'push' zero or more times.

// to the result

// to the view's current state by default, but it is possible to

// to their upper/lower bounds if the value passed is out of range.

// to undone, redoing moves them in the other direction.

// to whether the word contained a '\u' escape.

// to work around IE not supporting custom drag previews.

// to.

// toJSON:: () → Object

// todo: "slice(0)" --- is it causes loop? Should be removed?

// todo: Firefox now supports webp for webm containers!

// todo: detect if it is Edge, then auto use: StereoAudioRecorder

// todo: history in wrong spot?

// todo: looks like this might be merged into d3 (

// todo: video.stream.active or video.stream.live to fix blank frames issues?

// tokExprAllowed stays unchanged

// token in a way that is very cheap for the parser to look up.

// tokenize a file, and then runs the custom rules it is given over

// too slow.

// tools and allowed by browsers to mean that the nested list is

// top | right | bottom | left ==> left | top | right | bottom

// top,left (slow)

// top-left

// top-right

// top/left side

// toplevel forms of the parsed file to the `Program` (top) node

// touch DOM only if `applyStyle` modifier is enabled

// touchmove events don't seem to work across siblings, so we unfortunately

// to} object by default. Side can be passed to get a specific side

// traces.push( { colorscale: 'YIGnBu' } );

// track and restore old selections.) The default implementation of

// trackType === 1 => video track

// trackType === 2 => audio track

// trailing commas.

// trailing edge, the system time has gone backwards and we're treating

// trailing spaces at the end of a line when rendering text (issue #1362).

// transacion represents, so that they can update their [own

// transaction that fixes them, if necessary. If `oldState` was

// transaction, but can be overwritten with

// transactions (which might move its anchor cell) come in.

// transactions as new transactions are added, making sure to only

// transform solution vector back to x/y points

// transform).

// transition

// translate rows back to (x,y,radius) coordinates

// treat as beginning of JSX expression

// treat multiple DecorationSet objects as if it were a single object

// treat the current char as a regular char

// treated as backreferences.

// treated as the identity function (the prop value is returned

// tree for every element.

// tree shape like this (without back pointers) makes easy.

// trim before proceeding.

// trim the fullVersion string at semicolon/space if present

// true  -> Array#includes

// true  -> String#at

// true and the content is inline, it inherits the marks from the

// true if something changed.

// true if something was changed.

// true indicates some spread elements

// truncation

// truncation and wrap around

// try to find the right one.

// try to replace an empty paragraph

// try to replace selected node

// tslint:disable-next-line

// tslint:disable-next-line:ban-types

// tslint:disable-next-line:variable-name

// turn it into a number

// two GF numbers, no more).

// two circle intersections that aren't defined

// two joinable nodes to end up next to each other, those are joined.

// two nodes. You can pass a join predicate, which takes a regular

// two numbers of the same type changes to that type.

// type === 'create'

// type bitmap

// type can be active in a state.

// type with the given attributes.

// type's [content expression](#model.NodeSpec.content), and can be

// type, and if yes, consumes it as a side effect.

// type](#model.MarkType) objects for the nodes and marks that may

// typed array instances can be augmented

// types are confused between node and web here IDK

// u+v = ss*(1+...):

// unary operator.

// unchanged objects.

// undefined

// undefined = chunk not loaded, null = chunk preloaded/prefetched

// undefined if nothing remains).

// undefined is handled specially as per ECMA-262 6th Edition,

// undefined on initial render

// undefined or NaN probably means a logic error in the size getter.

// under any circumstances.

// underline

// underlying component, to allow it to render size and style variants.

// underlying stream.

// undocumented cb() API, needed for core, not for public API

// undoing

// undoing brings back the span).

// uneditable [node view](#view.NodeView)).

// uneditable block element will put the cursor in that element,

// unexpected trail

// unflipped regardless of direction context. See: https://github.com/kentcdodds/rtl-css-js#usage

// unhandled rejections tracking support, NodeJS Promise without it fails @@species test

// unified ._invoke helper method.

// unified regex

// union-find clustering to get disjoint sets

// unknown size

// unless they had them to begin with.

// unmatched surrogate; only append this code unit, in case the next

// unmounting. Guarding against this prevents the following error:

// unpaired lead

// unprintable ASCII chars + non-ASCII chars

// unsorted array of marks.

// unstandardized between browsers and even browser versions, and

// until docjs supports type exports...

// until the first strong type (R, L, AL, or sor) is found. If an

// until the first strong type (R, L, or sor) is found. If an L is

// until users clicks again, dont continue if right click is used.

// unwanted swapping behavior.

// unwrap

// up a 'line map', which points at the DOM nodes that represent

// up in Node's output if this results in an unhandled exception.

// update data, joining on the set ids

// update direction using Polak–Ribiere CG method

// update existing, using pathTween if necessary

// update position.

// update state, but don't save a style array. Used for lines that

// update the buffer info.

// update the collected properties after the first render

// update the indices

// update v's predecessor in the predecessor list (it's now u).

// update, since that speeds up the operations on most browsers.

// updateDisplay_W2 will use these properties to do the actual resizing

// updates the children.

// updating the arc area is a little more involved

// upwards to parent nodes.

// url is absolute already

// url is absolute already, without protocol

// url, compassified

// us a selection change event before the DOM changes are

// us just iterate over points to get the edges

// use Context.read for the theme when it's stable

// use `filter` to obtain the same behavior of `find`

// use `find` + `indexOf` if `findIndex` isn't supported

// use a bitwise OR to cast `k` to an integer (see also asm.js type annotations: http://asmjs.org/spec/latest/#annotations)

// use a dummy input to maintain focus/blur functionality

// use after the split.

// use computed style, here to get the real padding

// use config => {timeSlice: 1000} otherwise

// use gain node to prevent echo

// use linear fit

// use native find if supported

// use native findIndex if supported

// use parent's node as drag image. Neither works in IE though.

// use this optimization.

// use treeData unaltered by the drag operation

// useCSS is true by default so it can be undefined

// used as hash-set for avoiding the checking of split by rules

// used as the content to fit into the wrapping, instead of the

// used by (legacy) mechanisms like loadmode.js to automatically

// used by NavLink to determine it's role

// used by WebAssemblyRecorder; values: usually 30; accepts any.

// used by swipeEvent. differentites between touch and swipe.

// used even without a DirectionProvider ancestor in its react tree.

// used exclusively as they provide rounded values.

// used for IE. so if the browser is not IE, this should return undefined.

// used for changes that span multiple lines, or change the way

// used for debugging, without the noise created by

// used for the onToken callback and the external tokenizer.

// used in dndManager

// used inside the mediaRecorder.onerror

// used to disable editing during key handlers when in readOnly mode

// used to find out whether further content matches here, and whether

// used to preserve spaces and line breaks

// used to represent the editor's content. They are used for:

// used to specify a starting position to count from.

// used). When nothing is selected, the cursor sits after previously

// user has component in focus

// user@server is *always* interpreted as a hostname, and url

// userland ones.  NEVER DO THIS. This is here only because this code needs

// userland will fail

// uses any instead of Window because Flow doesn't have window type

// uses, in order of precedence.

// using MediaRecorder API here

// using a global regex with .exec is stateful so lastIndex has to be reset each time

// using the current marks as styling.

// usually be the top-level `document`, but might be a [shadow

// v is greater than the new cost we just found (cost of s to u plus

// v0.12 TODO(isaacs): This is not quite how Chrome does things.

// v8 likes predictible objects

// valid lead

// valid state. If that fails, it returns the line with the

// valid surrogate pair

// validate a little.

// value at the end to obtain `delta`.

// value gets precedence.

// value to indicate whether this is possible, but don't actually

// value, and has a chance to attach a 'drain' listener.

// value, but now inputValue is a controllable prop we probably shouldn't

// value, or adding a binding to the end of the map. If `newKey` is

// value.

// values for the readable and the writable sides of the duplex stream.

// vanilla template string

// var and interpolated vars

// var distances = venn.getDistanceMatrices(circles, areas).distances;

// variable length - can't use forEach

// variable specified by delegate.resultName (see delegateYield).

// variables

// variables and parameters

// version of d3

// version of that step with its positions adjusted, or `null` if

// vertical

// vertical range.

// vertical/horizontal position does not need to be adjusted.

// very simple className utility for creating a classname string...

// very slow. So make the area wide instead.

// via #206, by Jack i.e. @Seymourr

// via DetectRTC.js

// via: @adrian-ber

// via: @pehrsons

// via: https://gist.github.com/paulirish/1579671

// via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316

// via: https://w3c.github.io/mediacapture-record/MediaRecorder.html#exception-summary

// video diff

// video or screen tracks

// video recorder (in Gif format)

// video recorder (in WebM format)

// video timecode

// video track

// view that's a child of this view

// view, so that we don't interleave reading and writing to the DOM.

// view, that getCursor returns, etc).

// view.props, props))`.

// viewport including the bottom bar, even if the bottom bar isn't visible.

// views](#view.NodeView).

// visual line. This finds the start of the visual line that the

// void setFrameRate(Number fps) 

// void setQuality(int quality) 

// void setRepeat(int iter) 

// w (WS):  Whitespace

// wait for end of processing current event handler, because event handler may be long

// waiting for more data

// waiting for the animation to complete. Similarly, if transitionDuration

// want to find the line/column position for a given character

// want to use old-fashioned +.

// warn on circular references, don't crash

// was before the step as argument.

// was enabled.

// was opened.

// was taken out of the table, add cells at the start of the row

// way `JSON.stringify` calls `toString` methods.

// way, it'll receive the node for `x[1]` already parsed, and wraps

// we also remember the colSpan for cells with both rowspan and colspan

// we apply the default style for the inline tags

// we are only interested in the actual `style` here

// we are sure there are at least 2 values, so it is safe to have no initial value

// we can adjust scroll after the component has updated and the previous current month

// we can cancel any pending setState callbacks after we unmount.

// we can't trust `scrollParent.scrollHeight` --> it may increase when

// we check the second character first because having "i"

// we clone the samples

// we default back to this kind of made-up value that generally looks good

// we did not generate a valid codePoint so insert a

// we do this before each modifier to make sure the previous one doesn't

// we do this only on HTML because it's the only element that behaves

// we don't care about invariant's own frame

// we don't need the default popper style,

// we don't want to focus on the relevant calendar day after a month transition

// we have 3 properties: width style color

// we have found an opening delimieter already.

// we have implemented the _read method, and done the other things

// we have some candidate positions for the set, examine loss

// we have to merge together the borders in two properties

// we ignore the value if the stream

// we make these non-enumerable, for sanity while debugging

// we make this check conditional for performance reasons

// we might push to the array during consolidation, so don't cache length

// we must ensure that previous needDrain will not be reset to false.

// we need this to make sure size of hostname is not

// we need to handle super() and super.method() differently

// we need to insert @import rules before anything else

// we need to recalculate. We avoid recalculating the ones we already

// we only need an auto-generated ID for stylesheet injection, which is only

// we only need to add the styles to the registered cache if the

// we replace non-ASCII char with a temporary placeholder

// we return the cached props immediately.

// we set destroyed to true before firing error callbacks in order

// we should ignore events from layout's children in Firefox

// we start at 1 since we've already handled the first arg

// we start removing slack, the element won't react to it right away until it's been

// we test again with ASCII char only

// we want drag drop operation to start

// we want to make sure there is a href attribute on the node

// we want to provide as much of the menu as possible to the user,

// we want to return focus to this button after closing the keyboard shortcuts panel

// we'll need to consider how to pull off dev-tooling

// we're already colliding (not for static items)

// we're checking on event.target here instead of event.currentTarget, because we want to assert information

// we're doing this to avoid preconstruct's dead code elimination in this one case

// we've already handled the other stuff above.

// we've indicated that there is a hostname,

// we've reached the end, extract the whole thing

// weak test

// webkitMediaStream

// webm default TimecodeScale is 1ms

// webpackBootstrap

// well, in the right position. If this mark is already in the set,

// were not matched by the parse, or if any Early Error conditions exist.

// were read, the integer value otherwise. When `len` is given, this

// what categorizes them as operators).

// what is in props.

// what's left should be selectors

// when 'finish' is emitted

// when a semicolon is automatically inserted. It will be passed

// when asked through getSelection. You'll then get a

// when end() has been called, and returned

// when fixing collisions.

// when given, and otherwise defaults to applying the transaction to

// when it'll be equal to 0 we'll remove the placeholder

// when measurement is needed for a line that's not in the viewport.

// when method name is a string or a number let's pretend it's a computed method

// when not typing and nothing is selected)

// when not using server side rendering

// when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)

// when parsing properties), it will also convert keywords into

// when querying a position directly after line-broken

// when the `isJoinable` predicate returns true for them or, if an

// when the dest drains, it reduces the awaitDrain counter

// when the line isn't visible.

// when the select value should change, we should reset focusedValue

// when the size of the content above changes.

// when they overlap (they may nest, but not partially overlap).

// when this function is called, e.g. when a React component is

// when true all writes will be buffered until .uncork() call

// when updated to the state produced by this transaction.

// when we try to consume some more bytes, simply unpause the

// when when somebody has screwed with setTimeout but no I.E. maddness

// whenever we return null, then we set a flag to say

// where `global.postMessage` means something completely different and can't be used for this purpose.

// where a node's child nodes should be inserted. If it occurs in an

// where all of the continuation bytes for a character exist in the same buffer.

// where the user has an older version of dnd-core like in

// whether `from` does.

// whether or not we can go next

// whether the next token is `in` or `of`. When there is no init

// whether the step removed its surroundings from the document.

// whether this is a problem

// which bidi section the coordinates fall into.

// which causes page_Offset and bounding client rects to use

// which gets added to `i`. The overflow checking is easier

// which is a value that can be mapped without having access to a

// which is needed when only a single month is shown for instance.

// which one is the primary selection (the one that's scrolled into

// which point we can't mess with it anymore. Context menu is

// which they appear determines their precedence (the ones early in

// which variables are declared in the init statement?

// which will be set to the property's value. These are exceptions:

// which will be used to avoid re-scanning unchanged parts of the

// which will let our animations work

// while the parents are an inline tag, we want to apply the default style and the class to the children too

// while we're at it, center the diagram too

// whitespace and comments, and.

// whitespace. Detect this situation and and kludge around it

// whole content of the nodes at that depth.

// whole node, if not given). If `sync` is passed, use it to

// widget's current document position.

// widget/mark/node.

// widgets and marker elements with the text behave more intuitive.

// width and height.

// width and height. Will clip rowspan/colspan cells at the edges when

// will abruptly end the dragging, which is not obvious.

// will be balanced after leaving the layout's container

// will be returned. If they point into different blocks, the range

// will be the case when there is a lot of text in the textarea,

// will be used to make sure the visible viewport remains stable even

// will get processed, now that we've asked for it.

// will receive the previous state. This effectively populates

// will redirect to 'http://something.com/65fc2ffcc8aea7ba65a1d1feda173540'

// will result in an all-zero data string

// will result in some false positives but that seems better

// will return `null` unless the integer has exactly `len` digits.

// will return rgba when there is transparency.

// will still happily dispatch `dragover` despite target being no longer

// will use the other one

// with (a subset of) the same interface.

// with a new width and height.

// with a scroll distance, we perform scroll on the element

// with a text node containing the given string.

// with a zero (if the do not, the previous if-branch is executed).

// with an smaller end position come first.

// with defaults, `content` may be a `Fragment`,

// with e.g. shorthand properties, key and value are

// with input size detection. the stylesheet is only injected when the

// with the added guarantee that its `nodes` and `marks`

// with the given array of view descs, recursing into mark descs

// with the same 'attribute-predicate-pivot' more than once

// with {} we create a new object with the options inside it

// within the component based on `menuPosition`

// without inline HTML, and producing a document in the basic schema.

// without it is returned. Otherwise, the input set is returned.

// without limitation the rights to use, copy, modify, merge, publish,

// without the position applied we can't guarantee correct computations

// without using extend.

// words when necessary.

// work with a list instead of a dictionary, and take a copy so we

// workaround for Safari 9/WebKit bug:

// workers, we enlist an interval handle that will try to fire

// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.

// working on progress

// works around that.

// would be a no-op (an empty slice over an empty range).

// would be consumed, and then the rest would wait (un-transformed) until

// would fit here.

// would return false, as no `_writableState` property is attached.

// wrap

// wrap an old-style stream as the async data source.

// wrap around

// wrap layouts so we do not need to pass layouts to child

// wrap naked parameter

// wrap the whole thing in Object.assign

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// wrapped line, and then do a flat search in which we discard any

// wrapped node, the rule will try to [join](#transform.Transform.join) those

// wrapper for elt, which removes the elt from the accessibility tree

// wrapping failed.

// wriggle around in a most unseemly way. When we have an

// write the PCM samples

// write() some more.

// written chunk would result in multiple output chunks, then the first

// x < -6

// x < 1/4

// x = 1-q <= 0.5

// x is now in primary range...

// xRel is the relative x position of the input coordinates compared

// xor final data with mask pattern in order to ensure that

// y < 0

// y < 0.0

// y > 0

// y-axis coordinate in destination canvas at which to place top-left corner of source image

// you call it with a domain that already is ASCII-only.

// you can either pass them directly, or pass a function that will

// you can override either this method, or the async _read(n) below.

// you press enter go away.

// you've misconfigured your bundler to force strict mode and applied a

// yourself as well.

// z + v = r + x

// z < -1075

// z <= -1075

// z > 1024

// z >= 1024

// zero-length edited chunks are a special case (overlapping replacements)

// { [name]: index }

// {...this.state.activeDrag} is pretty slow, actually

// {from, to, marker} object pointing to such marker objects, and

// {name: pxVal}, e.g. {lg: 1200, md: 996, sm: 768, xs: 480}

// {x: Number, y: Number, w: Number, h: Number, i: String}

// |               +segmentSiz(12)+                              |

// |               |        |^inf |                              |

// |     |

// |     |     |   |        |     |                              |

// |  +--+

// |  |  |

// | tag: vint | size: vint | data: Buffer(size) |

// |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*

// |x| < 0.84375

// |x| < 1/0.35 ~ 2.857143

// |x| < 28

// |x| < sqrt(3/2)

// |x| <= 0.5

// |y| > 2^31

// }

// ~10 fps

// ~strike~

// ~~strike through~~

// ‘Fit’ a slice into a given position in the document, producing a

// ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for

// “Normal” string

// → No expansion (so no “inside”).

// → `[0, 4, 21, 31]`.

// この Mastert Element は空要素か

// まだ読めない

// タグの中身の生データ

// タグ待ちモードに変更

// ポインタを進める

// 一旦 seekhead を作って自身のサイズを調べる

// 上と等価

// 即座に終了タグを追加

// 親が不定長サイズなので閉じタグは期待できない

// 親タグを捨てる

// 読みかけの(読めなかった) this._buffer と 新しい chunk を合わせて読み直す

// 読み終わったバッファを捨てて読み込んでいる部分のバッファのみ残す

// 読み込み状態変更

// 閉じタグなしでレベルが下がったら閉じタグを挿入

// 閉じタグの来るべき場所まで来たかどうか

// 閉じタグの自動挿入

// 閉じタグを挿入すべきタイミングが来た

//# sourceMappingURL=buble-browser.es.js.map

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwiT2JqZWN0Iiwia2V5cyIsImtleXNCIiwibGVuZ3RoIiwic29ydCIsImkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O3FCQUl3QkEsWTs7QUFKeEI7Ozs7QUFDQTs7Ozs7O0FBRUE7QUFDZSxTQUFTQSxZQUFULENBQXNCQyxJQUF0QixFQUE0QkMsSUFBNUIsRUFBa0M7QUFDL0MsTUFBSSwyQkFBR0QsSUFBSCxFQUFTQyxJQUFULENBQUosRUFBb0I7QUFDbEIsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsTUFBSSxDQUFDRCxJQUFELElBQVMsQ0FBQ0MsSUFBVixJQUFrQixRQUFPRCxJQUFQLHlDQUFPQSxJQUFQLE9BQWdCLFFBQWxDLElBQThDLFFBQU9DLElBQVAseUNBQU9BLElBQVAsT0FBZ0IsUUFBbEUsRUFBNEU7QUFDMUUsV0FBTyxLQUFQO0FBQ0Q7O0FBRUQsTUFBTUMsUUFBUUMsT0FBT0MsSUFBUCxDQUFZSixJQUFaLENBQWQ7QUFDQSxNQUFNSyxRQUFRRixPQUFPQyxJQUFQLENBQVlILElBQVosQ0FBZDs7QUFFQSxNQUFJQyxNQUFNSSxNQUFOLEtBQWlCRCxNQUFNQyxNQUEzQixFQUFtQztBQUNqQyxXQUFPLEtBQVA7QUFDRDs7QUFFREosUUFBTUssSUFBTjtBQUNBRixRQUFNRSxJQUFOOztBQUVBO0FBQ0EsT0FBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlOLE1BQU1JLE1BQTFCLEVBQWtDRSxLQUFLLENBQXZDLEVBQTBDO0FBQ3hDLFFBQUksQ0FBQyxzQkFBSVAsSUFBSixFQUFVQyxNQUFNTSxDQUFOLENBQVYsQ0FBRCxJQUF3QixDQUFDLDJCQUFHUixLQUFLRSxNQUFNTSxDQUFOLENBQUwsQ0FBSCxFQUFtQlAsS0FBS0MsTUFBTU0sQ0FBTixDQUFMLENBQW5CLENBQTdCLEVBQWlFO0FBQy9ELGFBQU8sS0FBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBTyxJQUFQO0FBQ0QiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaXMgZnJvbSAnb2JqZWN0LWlzJztcbmltcG9ydCBoYXMgZnJvbSAnaGFzJztcblxuLy8gYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzE0NDMyOGZlODE3MTllOTE2Yjk0NmUyMjY2MDQ3OWUzMTU2MWJiMGIvcGFja2FnZXMvc2hhcmVkL3NoYWxsb3dFcXVhbC5qcyNMMzYtTDY4XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICghb2JqQSB8fCAhb2JqQiB8fCB0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3Qga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgY29uc3Qga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBrZXlzQS5zb3J0KCk7XG4gIGtleXNCLnNvcnQoKTtcblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKCFoYXMob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG4iXX0=

//# sourceMappingURL=factory.js.map

//# sourceMappingURL=getComponentName.js.map

//# sourceMappingURL=index.es.js.map

//# sourceMappingURL=index.js.map

//# sourceMappingURL=invariant.esm.js.map

//# sourceMappingURL=main.js.map

//# sourceMappingURL=performance-now.js.map

//# sourceMappingURL=purify.js.map

//# sourceMappingURL=shallowequal.esm.js.map

//# sourceMappingURL=sourcemap-codec.es.js.map

//# sourceMappingURL=value-transformer.js.map

//$FlowFixMe

/// <reference types="node"/>

/// Returns two matrices, one of the euclidean distances between the sets

/// See 'Numerical Optimization' by Nocedal and Wright p59-60

/// and the other indicating if there are subset or disjoint set relationships

/// computes the gradient and loss simulatenously for our constrained MDS optimizer

/// current: object containing current gradient/loss

/// f : objective function

/// next: output: contains next gradient/loss

/// pk : search direction

/// returns a: step size taken

/// searches along line 'pk' for a point that satifies the wolfe conditions

/// takes the best working variant of either constrained MDS or greedy

/// use the constrained MDS variant to generate an initial layout

//Add cluster to segment

//Calls when resize starts.

//CanvasRenderingContext2D

//Split center intervals

//User friendly wrapper that makes it possible to support empty trees

//apply the old canvas to the new one

//call onWidthChange on every change of width, not only on breakpoint changes

//case "m": break;

//console.error("Cue count: " + cuesInfo.length);

//console.error("Cues size: " + cuesSize);

//console.error("Info size: " + infoSize);

//console.error("SeekHead size: " + seekHeadSize);

//console.error(`CueClusterPosition: ${CueClusterPosition}, Corrected to: ${CueClusterPosition - segmentContentStartPos}  , offset by ${sizeDifference} to become ${(CueClusterPosition - segmentContentStartPos) + sizeDifference - segmentContentStartPos}`);

//console.error(`Final metadata buffer size without header and segment: ${result.byteLength-segmentContentStartPos}`);

//console.error(`Final metadata buffer size: ${result.byteLength}`);

//console.log(elm.name, elm.type, o.trackNumber, o.timecode);

//console.log(util.inspect(ret, {showHidden: false, depth: null})); // to debug

//const o = EBML.tools.ebmlBlock(elm.value);

//const tagNum = parseInt(tagStr, 16);

//const tagStr = this._buffer.toString("hex", this._cursor, this._cursor + tag.length);

//const { whyDidYouUpdate } = require('why-did-you-update')

//do things in millisecs (num of nanosecs for duration scale)

//eslint-disable-line

//eslint-disable-line no-console

//eslint-disable-line react/destructuring-assignment

//http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef

//http://www.w3.org/TR/AERT#color-contrast

//if (process.env.NODE_ENV !== 'production') {

//if(elm.name === "SimpleBlock"){

//let setState trigger the update

//normal enviroments in sane situations

//normalise to object in an array

//opacity:0 works around a chrome bug https://code.google.com/p/chromium/issues/detail?id=286360

//printElementIds(cues);

//printElementIds(finalMetadata);

//printElementIds(info);

//printElementIds(seekHead);

//remove from array and exit each early

//return Buffer.concat.apply(Buffer, list);

//seekhead_children = seekhead_children.concat(create_seekhead(_metadata));

//set dimensions

//to support http.request

//to support request.http

//urlParse appends trailing / to urls like http://www.example.com

//var util = require("util"); // to debug

//whyDidYouUpdate(React)

//}

//}else{
