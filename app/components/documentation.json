{
  "Accordion": {
    "props": [
      {
        "name": "active",
        "type": "number",
        "description": "index of slider to be opened at the beginning",
        "defaultValue": 0
      },
      {
        "name": "headers",
        "type": "array<string>",
        "description": "array of header names",
        "defaultValue": null
      },
      {
        "name": "headerStyle",
        "type": "object",
        "description": "one may also assign a style to the header bars",
        "defaultValue": null
      },
      {
        "name": "headerClassName",
        "type": "string",
        "description": "this overrules the given class name of the headers",
        "defaultValue": "card-title"
      }
    ],
    "description": "An accordion component controlling vertical sliders."
  },
  "Animated": {
    "props": [
      {
        "name": "in",
        "type": "object",
        "description": "the style which is applied at the beginning",
        "defaultValue": {}
      },
      {
        "name": "over",
        "type": "object",
        "description": "mouseOver style",
        "defaultValue": {}
      },
      {
        "name": "out",
        "type": "object",
        "description": "mouseOut style",
        "defaultValue": {}
      },
      {
        "name": "preset",
        "type": "string",
        "description": "name of the preset",
        "defaultValue": ""
      }
    ],
    "description": "An ISLE component that allows to apply animation on components and child elements."
  },
  "Background": {
    "props": [
      {
        "name": "images",
        "type": "array<string>",
        "description": "list of image URLs to be displayed",
        "defaultValue": []
      },
      {
        "name": "time",
        "type": "number",
        "description": "duration each background image is displayed (in seconds)",
        "defaultValue": 3
      },
      {
        "name": "in",
        "type": "string",
        "description": "entrance effect name (either `fade-in`, `slide-left-in`, and `flip-hor-bottom-in`)",
        "defaultValue": "fade-in"
      },
      {
        "name": "out",
        "type": "string",
        "description": "exit effect name (either `fade-out`, `slide-right-out`, and `flip-hor-bottom-out`)",
        "defaultValue": "fade-out"
      },
      {
        "name": "parent",
        "type": "boolean",
        "description": "sets the parent element's backgroundColor to transparent, overflow to hidden",
        "defaultValue": false
      },
      {
        "name": "inTime",
        "type": "number",
        "description": "length of the enter effect (in seconds)",
        "defaultValue": 1
      },
      {
        "name": "outTime",
        "type": "number",
        "description": "length of the exit effect (in seconds)",
        "defaultValue": 1
      }
    ],
    "description": "A dynamic background component that changes a background image at a specified interval."
  },
  "BeaconTooltip": {
    "props": [
      {
        "name": "title",
        "type": "(string|node)",
        "description": "title to be displayed at the top of the tooltip",
        "defaultValue": null
      },
      {
        "name": "content",
        "type": "(string|node)",
        "description": "tooltip content",
        "defaultValue": "`content` comes here..."
      },
      {
        "name": "event",
        "type": "string",
        "description": "if set to `click`, tooltip is toggled when clicking on beacon; if set to `hover`, the tooltip is activated via hovering",
        "defaultValue": "click"
      },
      {
        "name": "placement",
        "type": "string",
        "description": "placement of the tooltip relative to `target` (either `top`, `top-start`, `top-end`, `bottom`, `bottom-end`, `left`, `left-start`, `left-end`, `right`, `right-start`, `right-end`, `auto`, or `center`)",
        "defaultValue": "left"
      },
      {
        "name": "target",
        "type": "string",
        "description": "class or ID selector for element to attach tooltip to",
        "defaultValue": ""
      },
      {
        "name": "offset",
        "type": "number",
        "description": "distance between the tooltip and `target` in pixels",
        "defaultValue": 15
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked upon state change of the tooltip. Receives two arguments: the `action` (`open` or `close`) and the passed `props`",
        "defaultValue": "function onChange() {}"
      }
    ],
    "description": "Component placing a beacon in the lesson, either independently or attached to a `target`. Upon hovering or clicking on the beacon, a tooltip is displayed."
  },
  "Bibliography": {
    "props": [
      {
        "name": "title",
        "type": "string",
        "description": "heading to be displayed in front of references",
        "defaultValue": null
      }
    ],
    "description": "Bibliography component which prints all references used in the lesson (specified via `references` field in the preamble)."
  },
  "undefined": {
    "props": [
      {
        "name": "for",
        "type": "string (required)",
        "description": "chat room identifier"
      },
      {
        "name": "subject",
        "type": "string",
        "defaultValue": null
      },
      {
        "name": "buttonLabel",
        "type": "node",
        "defaultValue": null
      },
      {
        "name": "showTooltip",
        "type": "boolean",
        "description": "controls whether to show tooltip",
        "defaultValue": true
      },
      {
        "name": "size",
        "type": "string",
        "description": "button size",
        "defaultValue": "sm"
      },
      {
        "name": "buttonVariant",
        "type": "string",
        "defaultValue": null
      },
      {
        "name": "tooltipPlacement",
        "type": "string",
        "description": "position of button tooltip",
        "defaultValue": "top"
      },
      {
        "name": "onClick",
        "type": "function",
        "defaultValue": "function onClick() {}"
      },
      {
        "name": "className",
        "type": "string",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A button for joining and leaving video chats."
  },
  "Citation": {
    "props": [
      {
        "name": "citeKey",
        "type": "string (required)",
        "description": "item reference"
      },
      {
        "name": "parens",
        "type": "boolean",
        "description": "controls whether to display citation in parentheses",
        "defaultValue": false
      },
      {
        "name": "label",
        "type": "string",
        "description": "label for citation (e.g., page or range of pages)",
        "defaultValue": ""
      }
    ],
    "description": "Citation component."
  },
  "Clock": {
    "props": [
      {
        "name": "duration",
        "type": "boolean",
        "description": "if set, the duration of the session is displayed (not the actual time)",
        "defaultValue": false
      },
      {
        "name": "format",
        "type": "string",
        "description": "time format (either `HH:MM`, `HH:MM:SS`, or `HH:MM:SSS`)",
        "defaultValue": ""
      },
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "Clock component displaying the current time."
  },
  "Collapse": {
    "props": [
      {
        "name": "header",
        "type": "(string|node)",
        "description": "header content",
        "defaultValue": "Header"
      },
      {
        "name": "headerStyle",
        "type": "object",
        "description": "one may also assign a style to the header bar",
        "defaultValue": null
      },
      {
        "name": "headerClassName",
        "type": "string",
        "description": "this overrules the given class name of the header",
        "defaultValue": null
      },
      {
        "name": "defaultVisible",
        "type": "boolean",
        "description": "if set, the body is visible right from the start",
        "defaultValue": false
      },
      {
        "name": "visible",
        "type": "boolean",
        "description": "controls whether slider is visible; turns it into a controlled component where state needs to be handled externally",
        "defaultValue": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "inline CSS styles for outer container",
        "defaultValue": {}
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "event handler invoked when header is clicked",
        "defaultValue": "function onClick() {}"
      }
    ],
    "description": "An ISLE component that allows to slideDown and slideUp - JQuery style."
  },
  "ColorPicker": {
    "props": [
      {
        "name": "color",
        "type": "(string|object)",
        "description": "`string` holding an HeX code or an `object` holding RGB or HSL values such as `{ r: 255, g: 255, b: 255 }` or `{ h: 0, s: 0, l: .10 }`, which determines the active color. Both accept an `a` property for alpha values other than one",
        "defaultValue": "#fff"
      },
      {
        "name": "disableAlpha",
        "type": "boolean",
        "description": "controls whether to remove alpha slider and options",
        "defaultValue": false
      },
      {
        "name": "presetColors",
        "type": "array<string>",
        "description": "HeX `strings` specifying the default colors at the bottom of the colorpicker",
        "defaultValue": [
          "#D0021B",
          "#F5A623",
          "#F8E71C",
          "#8B572A",
          "#7ED321",
          "#417505",
          "#BD10E0",
          "#9013FE",
          "#4A90E2",
          "#50E3C2",
          "#B8E986",
          "#000000",
          "#4A4A4A",
          "#9B9B9B",
          "#FFFFFF"
        ]
      },
      {
        "name": "width",
        "type": "number",
        "description": "width of the color picker (in px)",
        "defaultValue": 200
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked every time color is changed",
        "defaultValue": "function onChange() {}"
      },
      {
        "name": "onChangeComplete",
        "type": "function",
        "description": "callback invoked once a color change is complete",
        "defaultValue": "function onChangeComplete() {}"
      }
    ],
    "description": "A wrapper for the [react-color](https://casesandberg.github.io/react-color/) color picker."
  },
  "Container": {
    "props": [
      {
        "name": "fluid",
        "type": "boolean",
        "description": "turn any fixed-width container layout into a full-width layout",
        "defaultValue": true
      }
    ],
    "description": "Container wrapper."
  },
  "DensityPlot": {
    "props": [
      {
        "name": "bandwidth",
        "type": "number",
        "description": "smoothing parameter for the kernel density estimator",
        "defaultValue": 4
      },
      {
        "name": "histogram",
        "type": "boolean",
        "description": "show a histogram alongside the density plot",
        "defaultValue": true
      },
      {
        "name": "nBins",
        "type": "number",
        "description": "number of bins for the overlaid histogram.",
        "defaultValue": 8
      },
      {
        "name": "vline",
        "type": "object",
        "description": "if supplied, will display a vertical line at the supplied `value` with a given `label`"
      },
      {
        "name": "xlab",
        "type": "string",
        "description": "x-axis label",
        "defaultValue": "value"
      },
      {
        "name": "xmax",
        "type": "number",
        "description": "maximum value displayed on the x-axis",
        "defaultValue": 1
      },
      {
        "name": "xmin",
        "type": "number",
        "description": "minimum value displayed on the x-axis",
        "defaultValue": 0
      },
      {
        "name": "ymax",
        "type": "number",
        "description": "maximum value displayed on the y-axis",
        "defaultValue": 0.15
      }
    ],
    "description": "A d3-based density plot component."
  },
  "NetworkPlot": {
    "props": [
      {
        "name": "width",
        "type": "number",
        "description": "width of the plot (in px)",
        "defaultValue": 900
      },
      {
        "name": "height",
        "type": "number",
        "description": "height of the plot (in px)",
        "defaultValue": 600
      }
    ],
    "description": "A d3-based network plot."
  },
  "Sunburst": {
    "props": [
      {
        "name": "categories",
        "type": "array (required)"
      },
      {
        "name": "data",
        "type": "object (required)",
        "description": "data object"
      },
      {
        "name": "width",
        "type": "number",
        "description": "width of the plot (in px)",
        "defaultValue": 750
      },
      {
        "name": "height",
        "type": "number",
        "description": "height of the plot (in px)",
        "defaultValue": 600
      },
      {
        "name": "style",
        "type": "object",
        "defaultValue": {}
      },
      {
        "name": "breadcrumbs",
        "type": "{w,h,s,t}",
        "defaultValue": {
          "w": 250,
          "h": 50,
          "s": 5,
          "t": 15
        }
      }
    ],
    "description": "Adapted from: https://bl.ocks.org/kerryrodden/766f8f6d31f645c39f488a0befa1e3c8\n\nCopyright 2013 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n/\n\n// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\nimport logger from 'debug';\nimport sqrt from '@stdlib/math/base/special/sqrt';\nimport min from '@stdlib/math/base/special/min';\nimport PI from '@stdlib/constants/math/float64-pi';\nimport { CAT20 as COLORS } from 'constants/colors';\nimport randomstring from 'utils/randomstring/alphanumeric';\nimport './style.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:sunburst' );\n\n// FUNCTIONS //\n\nfunction createColorMapping( categories ) {\nconst out = {};\nfor ( let i = 0; i < categories.length; i++ ) {\nout[ categories[i] ] = COLORS[ i % 20 ];\n}\nreturn out;\n}\n\n\n// MAIN //\n\n/**\nA d3-based sunburst plot for displaying pathways."
  },
  "Dashboard": {
    "props": [
      {
        "name": "autoStart",
        "type": "boolean",
        "description": "if set to `true`, the `onGenerate` function is executed at startup with the default input values",
        "defaultValue": true
      },
      {
        "name": "autoUpdate",
        "type": "boolean",
        "description": "controls whether the `onGenerate` function should be invoked automatically when one of the child input fields changes",
        "defaultValue": false
      },
      {
        "name": "description",
        "type": "string",
        "description": "dashboard description",
        "defaultValue": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "controls whether the dashboard shall be disabled",
        "defaultValue": false
      },
      {
        "name": "label",
        "type": "string",
        "description": "button label",
        "defaultValue": null
      },
      {
        "name": "maxWidth",
        "type": "number",
        "description": "maximum width of dashboard",
        "defaultValue": 600
      },
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onGenerate",
        "type": "function",
        "description": "function invoked when the button is clicked or one of the dashboard input values changes (if `autoUpdate` is set to `true`). The function is called with the values of the input fields, in the order in which they are placed in the dashboard",
        "defaultValue": "function onGenerate() {}"
      },
      {
        "name": "title",
        "type": "(string|node)",
        "description": "card title",
        "defaultValue": ""
      }
    ],
    "description": "A dashboard for combining the handling of multiple child input fields."
  },
  "DataExplorer": {
    "props": [
      {
        "name": "categorical",
        "type": "array",
        "description": "array of strings indicating the name of each categorical variable",
        "defaultValue": []
      },
      {
        "name": "quantitative",
        "type": "array",
        "description": "array of strings indicating the name of each quantitative variable",
        "defaultValue": []
      },
      {
        "name": "data",
        "type": "object",
        "description": "data object or array to be viewed. If it is an object, the keys correspond to column values while an array will expect an array of objects with a named field corresponding to each column. If you wish to allow students the ability to import a `.csv` file, set the `data` option to be `false`",
        "defaultValue": {}
      },
      {
        "name": "dataInfo",
        "type": "object",
        "description": "object containing the keys \\'name\\', whose value is a string, \\'info\\', whose value is an array of strings in which each element in the array is a new line and \\'variables\\', an object with keys as variable names and values as variable descriptions",
        "defaultValue": {
          "info": "",
          "name": "",
          "variables": null,
          "showOnStartup": false
        }
      },
      {
        "name": "editor",
        "type": "boolean",
        "description": "boolean indicating whether to show the editor to the user",
        "defaultValue": true
      },
      {
        "name": "editorProps",
        "type": "object",
        "description": "object to be passed to `TextEditor` indicating properties to be used",
        "defaultValue": null
      },
      {
        "name": "editorTitle",
        "type": "string",
        "description": "string indicating the title of the explorer to be displayed",
        "defaultValue": "Report"
      },
      {
        "name": "dataTable",
        "type": "boolean",
        "description": "boolean value indicating whether to hide the data table from view",
        "defaultValue": true
      },
      {
        "name": "reportMode",
        "type": "string",
        "description": "controls whether to sync editor changes for everyone (`collaborative`), across users in groups (`group`), or not (`individual`)",
        "defaultValue": "individual"
      },
      {
        "name": "histogramDensities",
        "type": "boolean",
        "description": "boolean value indicating whether to display histogram densities",
        "defaultValue": true
      },
      {
        "name": "models",
        "type": "array",
        "description": "array of strings indicating models that may be fit on the data",
        "defaultValue": [
          "Simple Linear Regression",
          "Multiple Linear Regression",
          "LASSO",
          "Decision Tree",
          "Random Forest",
          "Logistic Regression",
          "Naive Bayes",
          "PCA",
          "Hierarchical Clustering",
          "kmeans"
        ]
      },
      {
        "name": "opened",
        "type": "string",
        "description": "page opened at startup",
        "defaultValue": null
      },
      {
        "name": "plots",
        "type": "array",
        "description": "array of strings indicating which plots to show to the user",
        "defaultValue": [
          "Bar Chart",
          "Pie Chart",
          "Mosaic Plot",
          "Histogram",
          "Box Plot",
          "Line Plot",
          "Scatterplot",
          "Heat Map",
          "Contour Chart",
          "QQ Plot"
        ]
      },
      {
        "name": "questions",
        "type": "array",
        "description": "array of nodes indicating surrounding text and question components to be displayed in a tabbed window",
        "defaultValue": []
      },
      {
        "name": "showTestDecisions",
        "type": "boolean",
        "description": "boolean indicating whether to show the decisions made for each test based on the calculated p-values",
        "defaultValue": true
      },
      {
        "name": "statistics",
        "type": "array",
        "description": "array of strings indicating which summary statistics may be calculated",
        "defaultValue": [
          "Mean",
          "Median",
          "Min",
          "Max",
          "Range",
          "Interquartile Range",
          "Standard Deviation",
          "Variance",
          "Correlation",
          "Skewness",
          "Excess Kurtosis"
        ]
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles for main container",
        "defaultValue": {}
      },
      {
        "name": "tables",
        "type": "array",
        "description": "array of strings indicating which tables may be created from the data",
        "defaultValue": [
          "Frequency Table",
          "Contingency Table"
        ]
      },
      {
        "name": "tabs",
        "type": "array",
        "description": "array of objects and keys indicating any custom tabs to add",
        "defaultValue": []
      },
      {
        "name": "tests",
        "type": "array",
        "description": "array of strings indicating which hypothesis tests to include",
        "defaultValue": [
          "One-Sample Mean Test",
          "Two-Sample Mean Test",
          "One-Way ANOVA",
          "One-Sample Proportion Test",
          "Two-Sample Proportion Test",
          "Correlation Test",
          "Chi-squared Independence Test",
          "Kruskal-Wallis Test"
        ]
      },
      {
        "name": "transformer",
        "type": "boolean",
        "description": "boolean indicating whether one wants to display a variable transformer",
        "defaultValue": true
      },
      {
        "name": "onTutorialCompletion",
        "type": "function",
        "description": "function invoked when user has completed the data explorer tutorial",
        "defaultValue": "function onTutorialCompletion() {}"
      },
      {
        "name": "onTutorialStart",
        "type": "function",
        "description": "function invoked when user starts the data explorer tutorial",
        "defaultValue": "function onTutorialStart() {}"
      }
    ],
    "description": "This component is used by students to briefly summarize data as it is presented and perform various statistical tests."
  },
  "DataSampler": {
    "props": [
      {
        "name": "data",
        "type": "object (required)"
      },
      {
        "name": "sampleSize",
        "type": "number",
        "defaultValue": 50
      },
      {
        "name": "minSampleSize",
        "type": "number",
        "defaultValue": 1
      },
      {
        "name": "maxSampleSize",
        "type": "number",
        "defaultValue": null
      }
    ],
    "description": "Component to sample observations from a dataset and pass it to child components."
  },
  "DataTable": {
    "props": [
      {
        "name": "data",
        "type": "(array|object) (required)",
        "description": "A data object or array to be viewed. If it is an object, the keys correspond to column values while an array will expect an array of objects with a named field corresponding to each column"
      },
      {
        "name": "dataInfo",
        "type": "object",
        "description": "object with `info` string array describing the data set, the `name` of the dataset, an `object` of `variables` with keys corresponding to variable names and values to variable descriptions, an a `showOnStartup` boolean controlling whether to display the info modal on startup",
        "defaultValue": {
          "info": [],
          "name": "",
          "variables": null,
          "showOnStartup": false
        }
      },
      {
        "name": "deletable",
        "type": "boolean",
        "description": "controls whether columns for which no `info` exist have a button which when clicked calls the `onColumnDelete` callback function",
        "defaultValue": false
      },
      {
        "name": "undeletableVars",
        "type": "array<string>",
        "description": "array of variable names of columns which may not be deleted",
        "defaultValue": []
      },
      {
        "name": "filterable",
        "type": "boolean",
        "description": "controls whether columns are filterable",
        "defaultValue": true
      },
      {
        "name": "editable",
        "type": "array",
        "description": "array of names for columns that shall be editable",
        "defaultValue": []
      },
      {
        "name": "getTrProps",
        "type": "function",
        "description": "callback function executed for each row to customize its styling (passed table state, row info,\ncolumn, and the table instance)"
      },
      {
        "name": "onColumnDrag",
        "type": "function",
        "description": "function invoked when a column has been dragged to a different position",
        "defaultValue": "function onColumnDrag() {}"
      },
      {
        "name": "onColumnDelete",
        "type": "function",
        "description": "function invoked with the name of a column when the respective delete button for a column is clicked",
        "defaultValue": "function onColumnDelete() {}"
      },
      {
        "name": "onColumnNameChange",
        "type": "function",
        "description": "function invoked when a column has been renamed (called with the old name as first and new name as second argument)",
        "defaultValue": "function onColumnNameChange() {}"
      },
      {
        "name": "onClickRemove",
        "type": "function",
        "description": "function specifying an action to take for rows removed from the data (defaults to an empty function)",
        "defaultValue": "function onClickRemove() {}"
      },
      {
        "name": "onEdit",
        "type": "function",
        "description": "function invoked with the updated data set after the value of a cell was changed by the user (only applies when table is `editable`)",
        "defaultValue": "function onEdit() {}"
      },
      {
        "name": "onTutorialCompletion",
        "type": "function",
        "description": "function invoked when user has completed the data table tutorial",
        "defaultValue": "function onTutorialCompletion() {}"
      },
      {
        "name": "filters",
        "type": "array",
        "defaultValue": []
      },
      {
        "name": "onFilteredChange",
        "type": "function",
        "description": "function invoked with the current filters after data has been filtered by user",
        "defaultValue": "function onFilteredChange() {}"
      },
      {
        "name": "showRemove",
        "type": "boolean",
        "description": "indicates whether to display checkboxes for rows to be removed",
        "defaultValue": false
      },
      {
        "name": "showIdColumn",
        "type": "boolean",
        "description": "controls whether to show an ID column",
        "defaultValue": true
      },
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "An object allowing for custom css styling. Defaults to an empty object",
        "defaultValue": {}
      }
    ],
    "description": "A component rendering data in a tabular display. Built on top of [react-table](https://react-table.js.org/)."
  },
  "DateDisplay": {
    "props": [],
    "description": "Description is missing."
  },
  "DraggableGrid": {
    "props": [
      {
        "name": "isDraggable",
        "type": "boolean",
        "description": "controls whether grid elements are draggable",
        "defaultValue": false
      },
      {
        "name": "isResizable",
        "type": "boolean",
        "description": "controls whether grid elements are resizable",
        "defaultValue": false
      },
      {
        "name": "rowHeight",
        "type": "number",
        "description": "height of a single row (in px)",
        "defaultValue": 60
      }
    ],
    "description": "A responsive draggable grid layout."
  },
  "DraggableList": {
    "props": [
      {
        "name": "data",
        "type": "array (required)",
        "description": "array of objects with `id` and `text` keys"
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked with newly ordered data array on each change",
        "defaultValue": "function onChange(){}"
      },
      {
        "name": "onInit",
        "type": "function",
        "description": "callback function invoked after mounting of component",
        "defaultValue": "function onInit(){}"
      },
      {
        "name": "shuffle",
        "type": "boolean",
        "description": "controls whether data elements should be shuffled in initial display",
        "defaultValue": false
      },
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A list of draggable elements that can be re-ordered by the students."
  },
  "EnlargeableGrid": {
    "props": [
      {
        "name": "enlargeable",
        "type": "boolean",
        "description": "controls whether items can be enlarged",
        "defaultValue": true
      },
      {
        "name": "enlargedHeight",
        "type": "number",
        "description": "height of item after enlarging it",
        "defaultValue": 18
      },
      {
        "name": "isDraggable",
        "type": "boolean",
        "description": "controls whether the grid elements are draggable",
        "defaultValue": false
      },
      {
        "name": "isResizable",
        "type": "boolean",
        "description": "controls whether the grid elements are resizable",
        "defaultValue": false
      },
      {
        "name": "itemHeight",
        "type": "number",
        "description": "height of items (in px)",
        "defaultValue": 9
      }
    ],
    "description": "An enlargeable grid."
  },
  "Expire": {
    "props": [
      {
        "name": "active",
        "type": "boolean",
        "description": "controls whether the counter should be active",
        "defaultValue": false
      },
      {
        "name": "delay",
        "type": "number",
        "description": "number of milliseconds before component disappears",
        "defaultValue": 1000
      }
    ],
    "description": "The expire component will cause all of its children to become invisible after a specified amount of time."
  },
  "FeedbackButtons": {
    "props": [
      {
        "name": "confusedMsg",
        "type": "string",
        "description": "message to be displayed in tooltip for confused button",
        "defaultValue": null
      },
      {
        "name": "feedbackMsg",
        "type": "string",
        "description": "message to be displayed in tooltip for detailed feedback button",
        "defaultValue": null
      },
      {
        "name": "understoodMsg",
        "type": "string",
        "description": "message to be displayed in tooltip for understood button",
        "defaultValue": null
      },
      {
        "name": "customFeedback",
        "type": "boolean",
        "description": "controls whether the component accepts custom feedback",
        "defaultValue": true
      },
      {
        "name": "vertical",
        "type": "boolean",
        "description": "buttons are displayed vertically if set to `true`",
        "defaultValue": false
      },
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "Buttons to collect user feedback."
  },
  "FlippableCard": {
    "props": [
      {
        "name": "button",
        "type": "string",
        "description": "button label",
        "defaultValue": null
      },
      {
        "name": "cardStyles",
        "type": "{container,front,back}",
        "description": "allows to override the given styles",
        "defaultValue": {
          "container": {},
          "front": {},
          "back": {}
        }
      },
      {
        "name": "draggable",
        "type": "boolean",
        "description": "controls whether the card may be dragged around",
        "defaultValue": false
      },
      {
        "name": "flipSpeedBackToFront",
        "type": "number",
        "description": "the speed by which the card turns from background to foreground, in seconds",
        "defaultValue": 1
      },
      {
        "name": "flipSpeedFrontToBack",
        "type": "number",
        "description": "{number} the speed by which the card turns from foreground to background, in seconds",
        "defaultValue": 1
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked once the card is flipped; receives the current flipped status as its sole argument",
        "defaultValue": "function onChange() {}"
      },
      {
        "name": "oneTime",
        "type": "boolean",
        "description": "indicates whether the flip process may be executed just once",
        "defaultValue": false
      },
      {
        "name": "perspective",
        "type": "number",
        "description": "CSS property value to give 3d-positioned element a perspective",
        "defaultValue": 1000
      },
      {
        "name": "value",
        "type": "boolean",
        "description": "flip state of the card (for controlled component)"
      },
      {
        "name": "defaultValue",
        "type": "boolean",
        "description": "initial flip state of the card",
        "defaultValue": false
      }
    ],
    "description": "An ISLE component that allows two render two-sides."
  },
  "FreeTextQuestion": {
    "props": [
      {
        "name": "question",
        "type": "(string|node)",
        "description": "the question displayed at the top of the free text question component",
        "defaultValue": ""
      },
      {
        "name": "hints",
        "type": "array<(string|node)>",
        "description": "hints providing guidance on how to answer the question",
        "defaultValue": []
      },
      {
        "name": "hintPlacement",
        "type": "string",
        "description": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
        "defaultValue": "top"
      },
      {
        "name": "feedback",
        "type": "boolean",
        "description": "controls whether to display feedback buttons",
        "defaultValue": true
      },
      {
        "name": "solution",
        "type": "(string|node)",
        "description": "a model answer to the problem",
        "defaultValue": ""
      },
      {
        "name": "instantSolution",
        "type": "boolean",
        "description": "whether one can toggle the display of the model answer immediately",
        "defaultValue": false
      },
      {
        "name": "rows",
        "type": "number",
        "description": "number of rows of the text field for students to type their answers",
        "defaultValue": 5
      },
      {
        "name": "chat",
        "type": "boolean",
        "description": "controls whether to enable group chat should for the question",
        "defaultValue": false
      },
      {
        "name": "resizable",
        "type": "boolean",
        "description": "controls whether the text area should be resizable",
        "defaultValue": false
      },
      {
        "name": "placeholder",
        "type": "string",
        "description": "placeholder text displayed before user has entered any text",
        "defaultValue": "Enter your answer here..."
      },
      {
        "name": "disableSubmitNotification",
        "type": "boolean",
        "description": "controls whether to disable submission notifications",
        "defaultValue": false
      },
      {
        "name": "submissionMsg",
        "type": "string",
        "description": "notification displayed when the learner first submits his answer",
        "defaultValue": ""
      },
      {
        "name": "resubmissionMsg",
        "type": "string",
        "description": "notification displayed for all submissions after the first one",
        "defaultValue": "You have successfully re-submitted your answer."
      },
      {
        "name": "provideFeedback",
        "type": "boolean",
        "description": "indicates whether feedback including the correct answer should be displayed after learners submit their answers",
        "defaultValue": true
      },
      {
        "name": "maxlength",
        "type": "number",
        "description": "maximum allowed number of characters",
        "defaultValue": 2500
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "defaultValue": null
      },
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked every time the text area value changes; receives the current text as its sole argument",
        "defaultValue": "function onChange() {}"
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback invoked when user submits an answer; receives the submitted text as its sole argument",
        "defaultValue": "function onSubmit() {}"
      }
    ],
    "description": "An ISLE component for questions where answers by students should be supplied in the form of free text."
  },
  "FreeTextSurvey": {
    "props": [
      {
        "name": "question",
        "type": "string",
        "description": "the question to ask the students",
        "defaultValue": ""
      },
      {
        "name": "allowMultipleAnswers",
        "type": "boolean",
        "description": "controls whether one wishes to allow students to answer the survey multiple times",
        "defaultValue": false
      },
      {
        "name": "anonymous",
        "type": "boolean",
        "description": "controls whether student answers are anonymously collected",
        "defaultValue": false
      },
      {
        "name": "rows",
        "type": "number",
        "description": "number of text rows in the input field",
        "defaultValue": 4
      },
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback function called when an answer is submitted",
        "defaultValue": "function onSubmit() {}"
      }
    ],
    "description": "An ISLE component for questions where the answers by the students should be supplied in the form of free text. What differentiates this component from the **FreeTextQuestion** is the fact that the aggregated group data is displayed to everyone in real-time."
  },
  "Gate": {
    "props": [
      {
        "name": "user",
        "type": "boolean",
        "description": "when set the gated content is displayed to subscribed users",
        "defaultValue": false
      },
      {
        "name": "notUser",
        "type": "boolean",
        "description": "when set the gated content is **not** displayed to subscribed users",
        "defaultValue": false
      },
      {
        "name": "enrolled",
        "type": "boolean",
        "description": "when set the gated content is displayed to the students enrolled in the course",
        "defaultValue": false
      },
      {
        "name": "notEnrolled",
        "type": "boolean",
        "description": "when set the gated content is **not** displayed to the students enrolled in the course",
        "defaultValue": false
      },
      {
        "name": "owner",
        "type": "boolean",
        "description": "when set the gated content is displayed to the owner of the course (usually the instructor)",
        "defaultValue": false
      },
      {
        "name": "notOwner",
        "type": "boolean",
        "description": "when set the gated content is **not** displayed to the owner of the course (usually the instructor)",
        "defaultValue": false
      },
      {
        "name": "banner",
        "type": "node",
        "description": "a message which is visible to the visitors lacking the gate privilege",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "if a gate is disabled, the banner will be displayed no matter what",
        "defaultValue": false
      },
      {
        "name": "check",
        "type": "function",
        "description": "callback function returning a `boolean` indicating whether gate should display child components; the function is invoked whenever session actions arrive",
        "defaultValue": null
      }
    ],
    "description": "An ISLE component that allows to display its children only to reserved audiences."
  },
  "Generator": {
    "props": [
      {
        "name": "buttonLabel",
        "type": "(string|node)",
        "description": "label for button",
        "defaultValue": "Generate"
      },
      {
        "name": "onGenerate",
        "type": "function (required)",
        "description": "function invoked that should return a new component to be rendered in the lesson"
      }
    ],
    "description": "A component for generating other components (e.g., automatically generated questions)."
  },
  "blockquote": {
    "props": [
      {
        "name": "cite",
        "type": "string",
        "description": "source for the quote",
        "defaultValue": null
      },
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "Component displaying an extended quotation."
  },
  "div": {
    "props": [
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "Generic container element."
  },
  "h1": {
    "props": [
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "Level 1 Section Heading."
  },
  "h2": {
    "props": [
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "Level 2 Section Heading."
  },
  "h3": {
    "props": [
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "Level 3 Section Heading."
  },
  "h4": {
    "props": [
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "Level 4 Section Heading."
  },
  "h5": {
    "props": [
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "Level 3 Section Heading."
  },
  "h6": {
    "props": [
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "Level 3 Section Heading."
  },
  "hr": {
    "props": [
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "Horizontal rule defining a thematic break in the document."
  },
  "p": {
    "props": [
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "Paragraph element."
  },
  "pre": {
    "props": [
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "Element displaying preformatted text."
  },
  "span": {
    "props": [
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "Generic inline container element."
  },
  "IFrame": {
    "props": [
      {
        "name": "src",
        "type": "string (required)",
        "description": "source URL"
      },
      {
        "name": "fullscreen",
        "type": "boolean",
        "description": "controls whether to display the iFrame in fullscreen mode",
        "defaultValue": false
      },
      {
        "name": "title",
        "type": "string",
        "description": "iFrame title",
        "defaultValue": "An iFrame"
      },
      {
        "name": "width",
        "type": "number",
        "description": "iFrame width (in px)",
        "defaultValue": 900
      },
      {
        "name": "height",
        "type": "number",
        "description": "iFrame height (in px)",
        "defaultValue": 600
      },
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "An iFrame component."
  },
  "ImageQuestion": {
    "props": [
      {
        "name": "question",
        "type": "string",
        "description": "question for which the student has to bring the available `options` into the correct order",
        "defaultValue": ""
      },
      {
        "name": "hintPlacement",
        "type": "string",
        "description": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
        "defaultValue": "bottom"
      },
      {
        "name": "hints",
        "type": "array<(string|node)>",
        "description": "hints providing guidance on how to answer the question",
        "defaultValue": []
      },
      {
        "name": "feedback",
        "type": "boolean",
        "description": "controls whether to display feedback buttons",
        "defaultValue": true
      },
      {
        "name": "chat",
        "type": "boolean",
        "description": "controls whether the element should have an integrated chat",
        "defaultValue": false
      },
      {
        "name": "disableSubmitNotification",
        "type": "boolean",
        "defaultValue": false
      },
      {
        "name": "className",
        "type": "string",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback invoked when answer is submitted; has as a sole parameter a `boolean` indicating whether the elements were placed in the correct order",
        "defaultValue": "function onSubmit() {}"
      }
    ],
    "description": "A question that asks the user to upload an image."
  },
  "Image": {
    "props": [
      {
        "name": "src",
        "type": "string (required)",
        "description": "image source location"
      },
      {
        "name": "alt",
        "type": "string",
        "description": "image description",
        "defaultValue": ""
      },
      {
        "name": "body",
        "type": "string",
        "description": "base64 encoded data of image",
        "defaultValue": null
      },
      {
        "name": "height",
        "type": "(number|string)",
        "description": "image height (in px)",
        "defaultValue": null
      },
      {
        "name": "width",
        "type": "(number|string)",
        "description": "image width (in px)",
        "defaultValue": null
      },
      {
        "name": "id",
        "type": "string",
        "description": "component identifier",
        "defaultValue": null
      },
      {
        "name": "showModal",
        "type": "boolean",
        "description": "controls whether to display fullscreen modal view",
        "defaultValue": true
      },
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onShare",
        "type": "function",
        "description": "callback invoked with the image if the \"share\" button is clicked",
        "defaultValue": null
      }
    ],
    "description": "Component to display an image."
  },
  "CheckboxInput": {
    "props": [
      {
        "name": "bind",
        "type": "string",
        "description": "name of global variable for the checkbox value to be assigned to",
        "defaultValue": ""
      },
      {
        "name": "defaultValue",
        "type": "boolean",
        "description": "boolean value indicating the default value of the checkbox",
        "defaultValue": false
      },
      {
        "name": "value",
        "type": "boolean",
        "description": "checkbox value (for controlled component)",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "indicates whether the input is active or not",
        "defaultValue": false
      },
      {
        "name": "inline",
        "type": "boolean",
        "description": "indicates whether the checkbox is displayed inline",
        "defaultValue": false
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value",
        "defaultValue": "function onChange() {}"
      },
      {
        "name": "legend",
        "type": "(string|node)",
        "description": "text displayed next to the checkbox",
        "defaultValue": ""
      },
      {
        "name": "tooltip",
        "type": "string",
        "description": "text displayed when hovering over checkbox",
        "defaultValue": ""
      },
      {
        "name": "tooltipPlacement",
        "type": "string",
        "description": "position of button tooltip",
        "defaultValue": "right"
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute."
  },
  "Input": {
    "props": [],
    "description": "Description is missing."
  },
  "NumberInput": {
    "props": [
      {
        "name": "bind",
        "type": "string",
        "description": "name of global variable for the number to be assigned to",
        "defaultValue": ""
      },
      {
        "name": "defaultValue",
        "type": "number",
        "description": "value indicating the default value of the input at startup",
        "defaultValue": 0
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "boolean indicating whether the input is active or not",
        "defaultValue": false
      },
      {
        "name": "inline",
        "type": "boolean",
        "description": "indicates whether the input is displayed inline",
        "defaultValue": false
      },
      {
        "name": "legend",
        "type": "(string|node)",
        "description": "string indicating the text displayed next to the number input",
        "defaultValue": null
      },
      {
        "name": "max",
        "type": "number",
        "description": "number indicating the maximum value that may be inserted",
        "defaultValue": null
      },
      {
        "name": "min",
        "type": "number",
        "description": "number indicating the smallest possible value that may be inserted",
        "defaultValue": null
      },
      {
        "name": "numbersOnly",
        "type": "boolean",
        "description": "controls whether only numbers are accepted",
        "defaultValue": true
      },
      {
        "name": "onBlur",
        "type": "function",
        "description": "callback function to be invoked when using a blur method",
        "defaultValue": "function onBlur() {}"
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback function to be invoked when number input is changed",
        "defaultValue": "function onChange() {}"
      },
      {
        "name": "onKeyDown",
        "type": "function",
        "description": "callback function to be invoked when any key is pressed down",
        "defaultValue": "function onKeyDown() {}"
      },
      {
        "name": "onKeyPress",
        "type": "function",
        "description": "callback function to be invoked when any key is entered",
        "defaultValue": "function onKeyPress() {}"
      },
      {
        "name": "onKeyUp",
        "type": "function",
        "description": "callback function to be invoked when key is released",
        "defaultValue": "function onKeyUp() {}"
      },
      {
        "name": "step",
        "type": "(number|string)",
        "description": "number indicating the incremental changes when using the increment arrows",
        "defaultValue": 1
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "inputStyle",
        "type": "object",
        "description": "CSS inline styles for input element",
        "defaultValue": {}
      },
      {
        "name": "value",
        "type": "number",
        "description": "number value (for controlled component)",
        "defaultValue": null
      },
      {
        "name": "tooltip",
        "type": "string",
        "description": "tooltip string (if not set, the tooltip is automatically generated)",
        "defaultValue": null
      },
      {
        "name": "tooltipPlacement",
        "type": "string",
        "description": "direction of the tooltip",
        "defaultValue": "right"
      }
    ],
    "description": "A number input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute."
  },
  "ProportionsInput": {
    "props": [
      {
        "name": "disabled",
        "type": "boolean",
        "description": "controls whether the input field is deactivated",
        "defaultValue": false
      },
      {
        "name": "height",
        "type": "number",
        "description": "proportions input height (in px)",
        "defaultValue": 200
      },
      {
        "name": "innerRadius",
        "type": "number",
        "description": "inner radius of proportions pie chart (in px)",
        "defaultValue": 75
      },
      {
        "name": "legends",
        "type": "array",
        "description": "group labels",
        "defaultValue": null
      },
      {
        "name": "margin",
        "type": "string",
        "description": "proportion input margin (in px)"
      },
      {
        "name": "nElements",
        "type": "number",
        "description": "number of elements",
        "defaultValue": 6
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback function to be invoked when a choice is made",
        "defaultValue": "function onChange(){}"
      },
      {
        "name": "precision",
        "type": "number",
        "description": "displayed precision of proportion values",
        "defaultValue": 1
      },
      {
        "name": "step",
        "type": "number",
        "description": "the step of the arrows seen when hovering the cursor above the input box",
        "defaultValue": 0.1
      }
    ],
    "description": "A proportions input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute."
  },
  "SelectInput": {
    "props": [
      {
        "name": "bind",
        "type": "string",
        "description": "name of global variable for the number to be assigned to",
        "defaultValue": ""
      },
      {
        "name": "clearable",
        "type": "boolean",
        "description": "boolean value indicating whether one may clear choice(s) made"
      },
      {
        "name": "defaultValue",
        "type": "(number|string|array|object)",
        "description": "default value of the input at startup",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "controls whether the input is active or not",
        "defaultValue": false
      },
      {
        "name": "inline",
        "type": "boolean",
        "description": "indicates whether the input is displayed inline",
        "defaultValue": false
      },
      {
        "name": "legend",
        "type": "(string|node)",
        "description": "text displayed next to the input",
        "defaultValue": ""
      },
      {
        "name": "menuPlacement",
        "type": "string",
        "description": "placement of the menu in relation to the control (either `auto`, `top`, or `bottom`)",
        "defaultValue": "auto"
      },
      {
        "name": "multi",
        "type": "boolean",
        "description": "controls whether one may select multiple answers",
        "defaultValue": false
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback function to be invoked when a choice is made",
        "defaultValue": "function onChange() {}"
      },
      {
        "name": "options",
        "type": "array",
        "description": "array of indicating the choices available the user",
        "defaultValue": []
      },
      {
        "name": "placeholder",
        "type": "string",
        "description": "value to be displayed before an initial choice is made",
        "defaultValue": "Select..."
      },
      {
        "name": "tooltip",
        "type": "string",
        "description": "text displayed when hovering over legend",
        "defaultValue": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A select input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute."
  },
  "SliderInput": {
    "props": [
      {
        "name": "defaultValue",
        "type": "number",
        "description": "The starting value of the slider",
        "defaultValue": 10
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "controls whether the slider input is active or not. If set to true, the slider will be present on the screen, albeit grayed-out",
        "defaultValue": false
      },
      {
        "name": "inline",
        "type": "boolean",
        "description": "controls whether to place the slider inline with text or outside",
        "defaultValue": false
      },
      {
        "name": "legend",
        "type": "(string|node)",
        "description": "caption of the input",
        "defaultValue": null
      },
      {
        "name": "max",
        "type": "number",
        "description": "The maximum value of the slider",
        "defaultValue": 100
      },
      {
        "name": "min",
        "type": "number",
        "description": "The minimum value of the slider",
        "defaultValue": 0
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked with the new value when the slider value changes",
        "defaultValue": "function onChange() {}"
      },
      {
        "name": "precision",
        "type": "number",
        "description": "rounding of the input. The value will be rounded to have no more significant digits than the precision. For example, if one wishes to only use integers, a precision of 10 would be used, while if one wishes to round to the hundreds place, one would use a precision of 0.001",
        "defaultValue": 10
      },
      {
        "name": "step",
        "type": "(number|string)",
        "description": "step size of the slider",
        "defaultValue": 1
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "numberInputStyle",
        "type": "object",
        "description": "CSS inline styles for number input component",
        "defaultValue": {}
      },
      {
        "name": "rangeInputStyle",
        "type": "object",
        "description": "CSS inline style for range input component",
        "defaultValue": {}
      }
    ],
    "description": "A slider input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute."
  },
  "TextArea": {
    "props": [
      {
        "name": "defaultValue",
        "type": "string",
        "description": "default value of the text area",
        "defaultValue": ""
      },
      {
        "name": "value",
        "type": "string",
        "description": "text value (for controlled component)",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "controls whether the text area shall be disabled",
        "defaultValue": false
      },
      {
        "name": "legend",
        "type": "(string|node)",
        "description": "legend text",
        "defaultValue": ""
      },
      {
        "name": "onBlur",
        "type": "function",
        "description": "callback function invoked when the text area loses focus",
        "defaultValue": "function onBlur() {}"
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback function invoked with the new text when the area text changes",
        "defaultValue": "function onChange() {}"
      },
      {
        "name": "placeholder",
        "type": "string",
        "description": "placeholder text",
        "defaultValue": "Enter text"
      },
      {
        "name": "resizable",
        "type": "boolean",
        "description": "controls whether the text area shall be resizable",
        "defaultValue": false
      },
      {
        "name": "rows",
        "type": "number",
        "description": "number of rows",
        "defaultValue": 5
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A text area component. Used as a stand-alone component, changes should be handled via the `onChange` attribute."
  },
  "TextInput": {
    "props": [
      {
        "name": "bind",
        "type": "string",
        "description": "name of global variable for the number to be assigned to",
        "defaultValue": null
      },
      {
        "name": "defaultValue",
        "type": "string",
        "description": "A value indicating the default value of the input at start",
        "defaultValue": ""
      },
      {
        "name": "value",
        "type": "string",
        "description": "text value (for controlled component)",
        "defaultValue": null
      },
      {
        "name": "legend",
        "type": "(string|node)",
        "description": "A string indicating the text displayed next to the number input",
        "defaultValue": ""
      },
      {
        "name": "inline",
        "type": "boolean",
        "description": "Indicates whether the input is displayed inline",
        "defaultValue": false
      },
      {
        "name": "onBlur",
        "type": "function",
        "description": "callback function invoked when the text area loses focus",
        "defaultValue": "function onBlur() {}"
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "A function to be called when a text value is changed",
        "defaultValue": "function onChange() {}"
      },
      {
        "name": "onKeyDown",
        "type": "function",
        "description": "callback function to be invoked when any key is pressed down",
        "defaultValue": "function onKeyDown() {}"
      },
      {
        "name": "onKeyPress",
        "type": "function",
        "description": "callback function to be invoked when any key is entered",
        "defaultValue": "function onKeyPress() {}"
      },
      {
        "name": "onKeyUp",
        "type": "function",
        "description": "callback function to be invoked when key is released",
        "defaultValue": "function onKeyUp() {}"
      },
      {
        "name": "placeholder",
        "type": "string",
        "description": "A string indicating the value to be displayed before an initial choice is made",
        "defaultValue": "Enter text"
      },
      {
        "name": "width",
        "type": "number",
        "description": "A number indicating the width of the input in pixels",
        "defaultValue": 80
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A text input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute."
  },
  "VoiceInput": {
    "props": [
      {
        "name": "autorecord",
        "type": "boolean",
        "description": "controls whether to automatically start recording",
        "defaultValue": false
      },
      {
        "name": "defaultValue",
        "type": "string",
        "description": "default text value",
        "defaultValue": ""
      },
      {
        "name": "grammars",
        "type": "array",
        "description": "speech grammar list (unsupported)",
        "defaultValue": []
      },
      {
        "name": "language",
        "type": "string",
        "description": "language identifier",
        "defaultValue": "en-US"
      },
      {
        "name": "legend",
        "type": "(string|node)",
        "description": "legend displayed in front of input field",
        "defaultValue": ""
      },
      {
        "name": "mode",
        "type": "string",
        "description": "set to `full` to display a text input field alongside the microphone, `status` to only display a statusbar with the transcribed texts, `microphone` to show just a button to toggle recording, or `none` when the voice input should be invisible and purely controlled via hotkeys / voice commands",
        "defaultValue": "full"
      },
      {
        "name": "maxAlternatives",
        "type": "number",
        "description": "maximum number of alternatives provided per speech recognition result",
        "defaultValue": 1
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback function invoked when text input value is updated",
        "defaultValue": "function onChange() {}"
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "callback function invoked when clicking on the microphone button",
        "defaultValue": "function onClick() {}"
      },
      {
        "name": "onFinalText",
        "type": "function",
        "description": "callback function invoked once final text is received",
        "defaultValue": "function onFinalText() {}"
      },
      {
        "name": "onRecordingStart",
        "type": "function",
        "description": "callback function invoked when recording is started",
        "defaultValue": "function onRecordingStart() {}"
      },
      {
        "name": "onRecordingStop",
        "type": "function",
        "description": "callback function invoked once recording is stopped",
        "defaultValue": "function onRecordingStop() {}"
      },
      {
        "name": "onSegment",
        "type": "function",
        "description": "callback function invoked with text segments",
        "defaultValue": "function onSegment() {}"
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback function when submitting text input value by hitting \"Enter\"",
        "defaultValue": "function onSubmit() {}"
      },
      {
        "name": "placeholder",
        "type": "string",
        "description": "text input placeholder",
        "defaultValue": "Enter text"
      },
      {
        "name": "remote",
        "type": "object",
        "description": "object with `start`, `stop`, and `toggle` and associated hotkeys",
        "defaultValue": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "timeout",
        "type": "number",
        "description": "number of milliseconds after which to timeout the recording",
        "defaultValue": null
      },
      {
        "name": "stopTooltip",
        "type": "string",
        "description": "tooltip message displayed while recording",
        "defaultValue": "Click to stop recording"
      },
      {
        "name": "startTooltip",
        "type": "string",
        "description": "tooltip message displayed while not recording",
        "defaultValue": "Click to start recording"
      },
      {
        "name": "tooltipPlacement",
        "type": "string",
        "description": "direction of the tooltip",
        "defaultValue": "left"
      },
      {
        "name": "width",
        "type": "number",
        "description": "voice input width (in px)",
        "defaultValue": 500
      },
      {
        "name": "height",
        "type": "number",
        "description": "voice input height (in px)",
        "defaultValue": 36
      }
    ],
    "description": "A voice input component."
  },
  "StatusBar": {
    "props": [],
    "description": "Description is missing."
  },
  "Toolbar": {
    "props": [
      {
        "name": "elements",
        "type": "array",
        "description": "array of elements with `name`, `icon` (a font-awesome icon name), and `component` (React node to be rendered) keys",
        "defaultValue": []
      }
    ],
    "description": "Toolbar of widgets for students to use during the course of a lesson."
  },
  "VoiceControl": {
    "props": [
      {
        "name": "id",
        "type": "string",
        "description": "unique identifier",
        "defaultValue": null
      },
      {
        "name": "commands",
        "type": "array (required)",
        "description": "array of voice commands"
      },
      {
        "name": "hide",
        "type": "boolean",
        "description": "controls whether to hide control elements for toggling on/off voice control and display a list of available commands",
        "defaultValue": false
      },
      {
        "name": "reference",
        "type": "object (required)",
        "description": "reference object"
      }
    ],
    "description": "Component to register a reference with the speech control interface."
  },
  "Joyride": {
    "props": [
      {
        "name": "run",
        "type": "boolean",
        "description": "controls whether the guide is active",
        "defaultValue": false
      },
      {
        "name": "scrollToSteps",
        "type": "boolean",
        "description": "controls whether the window should scroll to the current step",
        "defaultValue": true
      },
      {
        "name": "steps",
        "type": "array (required)",
        "description": "array of step `objects`"
      }
    ],
    "description": "Wrapper around [react-joyride](https://github.com/gilbarbara/react-joyride) to create walkthroughs and guided tours."
  },
  "JSShell": {
    "props": [
      {
        "name": "code",
        "type": "string",
        "description": "JavaScript code to be evaluated",
        "defaultValue": ""
      },
      {
        "name": "solution",
        "type": "string",
        "description": "for programming questions, code `string` representing the official solution for the problem",
        "defaultValue": ""
      },
      {
        "name": "hints",
        "type": "array<(string|node)>",
        "description": "for programming questions, an array of hints providing guidance on how to approach the problem",
        "defaultValue": []
      },
      {
        "name": "precompute",
        "type": "boolean",
        "description": "controls whether the default code should be executed once the component has mounted",
        "defaultValue": false
      },
      {
        "name": "chat",
        "type": "boolean",
        "description": "controls whether group chat functionality should be enabled",
        "defaultValue": false
      },
      {
        "name": "check",
        "type": "string",
        "description": "appended JavaScript code to check the `code` to be evaluated",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "controls whether to disable all user inputs and make the code block static",
        "defaultValue": false
      },
      {
        "name": "lines",
        "type": "number",
        "description": "number of lines to display",
        "defaultValue": 5
      },
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked whenever the text field input changes",
        "defaultValue": "function onChange() {}"
      },
      {
        "name": "onEvaluate",
        "type": "function",
        "description": "callback invoked whenever the `Evaluate` button is clicked",
        "defaultValue": "function onEvaluate() {}"
      },
      {
        "name": "vars",
        "type": "object",
        "description": "scope object with variables that should be made available to evaluated `code`",
        "defaultValue": null
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "defaultValue": null
      }
    ],
    "description": "An interactive Javascript shell that can be used to execute JavaScript commands. The shell contains a console that displays error messages, warnings etc."
  },
  "KeyControls": {
    "props": [
      {
        "name": "actions",
        "type": "object<function>",
        "description": "object mapping key codes to events",
        "defaultValue": {}
      },
      {
        "name": "container",
        "type": "(object|element)",
        "description": "DOM node for which to attach event listeners",
        "defaultValue": null
      }
    ],
    "description": "Keyboard controls."
  },
  "LearnContinuousCLT": {
    "props": [
      {
        "name": "distributions",
        "type": "array<string>",
        "description": "statistical distributions to choose from ('uniform', 'exponential', and/or 'normal')",
        "defaultValue": [
          "uniform",
          "exponential",
          "normal"
        ]
      },
      {
        "name": "hideFormulas",
        "type": "boolean",
        "description": "controls whether to hide formulas in the component text",
        "defaultValue": false
      }
    ],
    "description": "A learning component illustrating the Central Limit Theorem (CLT) for a chosen continuous distribution."
  },
  "LearnDiscreteCLT": {
    "props": [
      {
        "name": "showPopStdev",
        "type": "boolean",
        "description": "controls whether to display the population standard deviation",
        "defaultValue": true
      }
    ],
    "description": "A learning component illustrating the Central Limit Theorem (CLT) for a canonical discrete distribution, the binomial distribution."
  },
  "LearnSampleCLT": {
    "props": [
      {
        "name": "data",
        "type": "array (required)",
        "description": "data object with keys correspond to variable names and values holding the values of respective variables"
      },
      {
        "name": "hidePopulationStdev",
        "type": "boolean",
        "description": "hide display of population standard deviation",
        "defaultValue": false
      },
      {
        "name": "samples",
        "type": "(array<number>|number)",
        "description": "array of numbers or a single numbers denoting the sample sizes that can be drawn",
        "defaultValue": 25
      },
      {
        "name": "populationProbabilities",
        "type": "boolean",
        "defaultValue": false
      },
      {
        "name": "variables",
        "type": "array (required)",
        "description": "names of variables that can be sampled from"
      }
    ],
    "description": "A learning component illustrating the Central Limit Theorem (CLT) when sampling from a supplied data set."
  },
  "LearnConditionalProbability": {
    "props": [],
    "description": "A learning component illustrating conditional probability for two dependent binary variables."
  },
  "LearnConfidenceCoverageBinomial": {
    "props": [
      {
        "name": "intro",
        "type": "(node|string)",
        "description": "overrides default (interactive) intro text",
        "defaultValue": null
      },
      {
        "name": "quartileNotation",
        "type": "boolean",
        "description": "controls whether to use quartile notation in intro text",
        "defaultValue": true
      },
      {
        "name": "sampleStats",
        "type": "boolean",
        "description": "controls whether one should be able to switch between using the sample proportion or the known population success probability when calculating the standard error",
        "defaultValue": true
      }
    ],
    "description": "A learning component illustrating coverage of confidence intervals for the mean of a binomial distribution."
  },
  "LearnConfidenceCoverageNormal": {
    "props": [
      {
        "name": "intro",
        "type": "(node|string)",
        "description": "overrides default (interactive) intro text",
        "defaultValue": null
      },
      {
        "name": "quartileNotation",
        "type": "boolean",
        "description": "controls whether to use `alpha/2` as the subscript for the critical value or just `critical`",
        "defaultValue": true
      },
      {
        "name": "sampleStats",
        "type": "boolean",
        "description": "controls whether one should be able to switch between using the sample standard deviation or the known population standard deviation when calculating the standard error",
        "defaultValue": true
      }
    ],
    "description": "A learning component illustrating coverage of confidence intervals for the mean of a normal distribution."
  },
  "LearnConfidenceCoverageSample": {
    "props": [
      {
        "name": "data",
        "type": "array (required)",
        "description": "data object with keys correspond to variable names and values holding the values of respective variables"
      },
      {
        "name": "samples",
        "type": "(array<number>|number)",
        "description": "array of numbers or a single numbers denoting the sample sizes that can be drawn",
        "defaultValue": 25
      },
      {
        "name": "variables",
        "type": "array (required)",
        "description": "names of variables that can be sampled from"
      }
    ],
    "description": "A learning component illustrating the Central Limit Theorem (CLT) when sampling from a supplied data set."
  },
  "LearnContinuousDistribution": {
    "props": [],
    "description": "A learning component for exploring user-defined continuous probability distributions."
  },
  "LearnCrossValidation": {
    "props": [],
    "description": "A visualization explaining cross-validation."
  },
  "LearnDiceThrowing": {
    "props": [],
    "description": "A learning component illustrating the law of large numbers using dice throwing."
  },
  "LearnDiscreteDistribution": {
    "props": [
      {
        "name": "numValues",
        "type": "number",
        "description": "initial number of distinct values",
        "defaultValue": 4
      }
    ],
    "description": "A learning component for visualizing any discrete distribution and evaluating its CDF."
  },
  "LearnBetaDistribution": {
    "props": [
      {
        "name": "domain",
        "type": "object",
        "description": "object of `x` and `y` arrays with the starting and end points for the respective axis",
        "defaultValue": null
      },
      {
        "name": "step",
        "type": "(number|string)",
        "description": "step size of the scroll input",
        "defaultValue": 0.01
      },
      {
        "name": "tabs",
        "type": "array<string>",
        "description": "which tabs to display (either `smaller`, `greater`, or `range`)",
        "defaultValue": [
          "smaller",
          "greater",
          "range"
        ]
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A learning component for calculating probabilities of a beta distribution."
  },
  "LearnBinomialDistribution": {
    "props": [
      {
        "name": "hideCDF",
        "type": "boolean",
        "description": "controls whether to hide the CDF display",
        "defaultValue": "boolean"
      },
      {
        "name": "step",
        "type": "(number|string)",
        "description": "step size of the scroll input",
        "defaultValue": 0.01
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A learning component for calculating probabilities of a binomial distribution."
  },
  "LearnChisquareDistribution": {
    "props": [
      {
        "name": "step",
        "type": "(number|string)",
        "description": "step size of the scroll input",
        "defaultValue": 0.01
      },
      {
        "name": "maxDF",
        "type": "number",
        "description": "maximum degrees of freedom that can be chosen in input field",
        "defaultValue": 50
      },
      {
        "name": "minDF",
        "type": "number",
        "description": "minimum degrees of freedom that can be chosen in input field",
        "defaultValue": 1
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A learning component for calculating probabilities of a chi-squared distribution."
  },
  "LearnExponentialDistribution": {
    "props": [
      {
        "name": "hideCDF",
        "type": "boolean",
        "description": "controls whether to hide the CDF plots",
        "defaultValue": false
      },
      {
        "name": "step",
        "type": "(number|string)",
        "description": "step size of the scroll input",
        "defaultValue": 0.01
      },
      {
        "name": "maxRate",
        "type": "number",
        "description": "maximum rate parameter that can be chosen in input field",
        "defaultValue": 10
      },
      {
        "name": "minRate",
        "type": "number",
        "description": "minimum rate parameter that can be chosen in input field",
        "defaultValue": 0.001
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A learning component for calculating probabilities of a exponential distribution."
  },
  "LearnFDistribution": {
    "props": [
      {
        "name": "domain",
        "type": "object",
        "description": "object of `x` and `y` arrays with the starting and end points for the respective axis",
        "defaultValue": null
      },
      {
        "name": "step",
        "type": "(number|string)",
        "description": "step size of the scroll input",
        "defaultValue": 0.01
      },
      {
        "name": "tabs",
        "type": "array<string>",
        "description": "which tabs to display (either `smaller`, `greater`, or `range`)",
        "defaultValue": [
          "smaller",
          "greater",
          "range"
        ]
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A learning component for calculating probabilities of an F distribution."
  },
  "LearnGammaDistribution": {
    "props": [
      {
        "name": "domain",
        "type": "object",
        "description": "object of `x` and `y` arrays with the starting and end points for the respective axis",
        "defaultValue": null
      },
      {
        "name": "scaleParameterization",
        "type": "boolean",
        "description": "controls whether to use the parameterization involving a shape and scale parameter instead of shape and rate",
        "defaultValue": false
      },
      {
        "name": "step",
        "type": "(number|string)",
        "description": "step size of the scroll input",
        "defaultValue": 0.01
      },
      {
        "name": "symbols",
        "type": "boolean",
        "description": "whether to display Greek symbols for parameters",
        "defaultValue": true
      },
      {
        "name": "tabs",
        "type": "array<string>",
        "description": "which tabs to display (either `smaller`, `greater`, or `range`)",
        "defaultValue": [
          "smaller",
          "greater",
          "range"
        ]
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A learning component for calculating probabilities of a gamma distribution."
  },
  "LearnGeometricDistribution": {
    "props": [
      {
        "name": "countTrials",
        "type": "boolean",
        "description": "set to true if instead of counting the number of failures until the first success, a random variable from a geometric distribution should be defined as the number of trials until the first success",
        "defaultValue": false
      },
      {
        "name": "step",
        "type": "(number|string)",
        "description": "step size of the scroll input",
        "defaultValue": 0.01
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A learning component for calculating probabilities of a geometric distribution."
  },
  "LearnHypergeometricDistribution": {
    "props": [
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A learning component for calculating probabilities of a hypergeometric distribution."
  },
  "LearnNegativeBinomialDistribution": {
    "props": [
      {
        "name": "countTrials",
        "type": "boolean",
        "description": "set to true if instead of counting the number of failures until the r-th success, a random variable from a negative binomial distribution should be defined as the number of trials until the r-th success",
        "defaultValue": false
      },
      {
        "name": "step",
        "type": "(number|string)",
        "description": "step size of the scroll input",
        "defaultValue": 0.01
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A learning component for calculating probabilities of a negative binomial distribution."
  },
  "LearnNormalDistribution": {
    "props": [
      {
        "name": "domain",
        "type": "object",
        "description": "object of `x` and `y` arrays with the starting and end points for the respective axis",
        "defaultValue": null
      },
      {
        "name": "hideCDF",
        "type": "boolean",
        "description": "controls whether to hide the CDF plots",
        "defaultValue": false
      },
      {
        "name": "minStDev",
        "type": "number",
        "description": "minimum standard deviation",
        "defaultValue": 1
      },
      {
        "name": "step",
        "type": "(number|string)",
        "description": "step size of the scroll input",
        "defaultValue": 0.01
      },
      {
        "name": "tabs",
        "type": "array<string>",
        "description": "which tabs to display (either `smaller`, `greater`, or `range`)",
        "defaultValue": [
          "smaller",
          "greater",
          "range"
        ]
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A learning component for calculating probabilities of a normal distribution."
  },
  "LearnPoissonDistribution": {
    "props": [
      {
        "name": "step",
        "type": "(number|string)",
        "description": "step size of the scroll input",
        "defaultValue": 0.1
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A learning component for calculating probabilities of a Poisson distribution."
  },
  "LearnTDistribution": {
    "props": [
      {
        "name": "step",
        "type": "(number|string)",
        "description": "step size of the scroll input",
        "defaultValue": 0.01
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A learning component for calculating probabilities of a Student's t distribution."
  },
  "LearnUniformDistribution": {
    "props": [
      {
        "name": "hideCDF",
        "type": "boolean",
        "description": "controls whether to hide the CDF plots",
        "defaultValue": false
      },
      {
        "name": "step",
        "type": "(number|string)",
        "description": "step size of the scroll input",
        "defaultValue": 0.01
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A learning component for calculating probabilities of a uniform distribution."
  },
  "LearnMeanTest": {
    "props": [
      {
        "name": "types",
        "type": "array<string>",
        "description": "the type(s) of test (`One-Sample`, `Two-Sample`) the widget should expose",
        "defaultValue": [
          "One-Sample",
          "Two-Sample"
        ]
      },
      {
        "name": "tests",
        "type": "array<string>",
        "description": "the test(s) exposed by the widget",
        "defaultValue": [
          "Z-Test",
          "T-Test"
        ]
      },
      {
        "name": "nullHypothesisAsValue",
        "type": "boolean",
        "description": "always display the null hypothesis as a single value",
        "defaultValue": false
      },
      {
        "name": "feedback",
        "type": "boolean",
        "description": "controls whether to display feedback buttons",
        "defaultValue": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A learning component on hypothesis tests for a population mean."
  },
  "LearnProportionTest": {
    "props": [
      {
        "name": "types",
        "type": "array<string>",
        "description": "the type(s) of test (`One-Sample`, `Two-Sample`) the widget should expose",
        "defaultValue": [
          "One-Sample",
          "Two-Sample"
        ]
      },
      {
        "name": "feedback",
        "type": "boolean",
        "description": "controls whether to display feedback buttons",
        "defaultValue": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A learning component on hypothesis tests for a population proportion."
  },
  "LearnImagePixelPicker": {
    "props": [],
    "description": "A pixel color picker explaining RGB colors using example images."
  },
  "LearnMeanVSMedian": {
    "props": [
      {
        "name": "feedback",
        "type": "boolean",
        "description": "controls whether to display feedback buttons",
        "defaultValue": false
      },
      {
        "name": "header",
        "type": "string",
        "description": "title of the panel in which the mean and the median will be generated",
        "defaultValue": "Measures of Location: Mean vs. Median"
      },
      {
        "name": "id",
        "type": "string",
        "description": "component identifier",
        "defaultValue": "mean_vs_median"
      },
      {
        "name": "intro",
        "type": "node",
        "description": "any introductory material that may be needed",
        "defaultValue": null
      },
      {
        "name": "seed",
        "type": "number",
        "description": "seed to initialize pseudorandom number generator",
        "defaultValue": null
      },
      {
        "name": "showStatistics",
        "type": "boolean",
        "description": "controls whether to display student and group performance statistics",
        "defaultValue": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "An interactive game testing student's ability in detecting the median and mean of a given distribution."
  },
  "LearnNetworks": {
    "props": [
      {
        "name": "maxNumNodes",
        "type": "number",
        "defaultValue": 30
      },
      {
        "name": "showEdgeChart",
        "type": "boolean",
        "description": "controls whether to display a chart displaying the number of edges in each generated network (reset when number of nodes is changed)",
        "defaultValue": false
      },
      {
        "name": "showTransitivities",
        "type": "boolean",
        "description": "whether to tally transitivities / global clustering coefficients for generated networks",
        "defaultValue": false
      }
    ],
    "description": "Generate networks from a Erdős-Rényi model."
  },
  "LearnSOTU": {
    "props": [
      {
        "name": "questions",
        "type": "array<(node|element)>",
        "description": "array of questions",
        "defaultValue": null
      }
    ],
    "description": "Learning component to explore the State of the Union speeches of US presidents."
  },
  "LearnStandardize": {
    "props": [
      {
        "name": "showProbabilities",
        "type": "boolean",
        "description": "controls whether to display the probabilities",
        "defaultValue": false
      },
      {
        "name": "step",
        "type": "object",
        "description": "step size of the scroll input",
        "defaultValue": "any"
      }
    ],
    "description": "Learning component explaining the process of standardizing data."
  },
  "LearnStatisticalModels": {
    "props": [
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "Component to browse descriptions of various statistical models."
  },
  "LearnVennDiagramBuilder": {
    "props": [
      {
        "name": "nobs",
        "type": "number",
        "description": "total number of observations",
        "defaultValue": null
      },
      {
        "name": "three",
        "type": "boolean",
        "description": "controls whether to display three circles",
        "defaultValue": false
      }
    ],
    "description": "A Venn diagram builder."
  },
  "LearnWordVennDiagram": {
    "props": [
      {
        "name": "height",
        "type": "number",
        "description": "height of the Venn diagram in pixels",
        "defaultValue": 350
      },
      {
        "name": "nTexts",
        "type": "number (required)",
        "description": "number of sources from which text was gathered"
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "callback for what is to be done when \"Draw Venn Diagram\" is clicked",
        "defaultValue": "function onClick() {}"
      },
      {
        "name": "tdm",
        "type": "array (required)",
        "description": "`array` that is to represent a [term document matrix](https://en.wikipedia.org/wiki/Document-term_matrix)"
      },
      {
        "name": "vocabulary",
        "type": "array (required)",
        "description": "`array` in the order of the `tdm` array passed so that the indices may be matches to their words"
      },
      {
        "name": "width",
        "type": "number",
        "description": "width of the Venn diagram in pixels",
        "defaultValue": 600
      }
    ],
    "description": "A venn diagram visualizing co-occurrence of words in documents of a supplied term-document matrix."
  },
  "LessonSubmit": {
    "props": [
      {
        "name": "label",
        "type": "string",
        "description": "label of submit button",
        "defaultValue": "Finish lesson"
      },
      {
        "name": "message",
        "type": "string",
        "description": "message for confirmation email",
        "defaultValue": ""
      },
      {
        "name": "requireLogin",
        "type": "boolean",
        "description": "controls whether to require user to be signed in for button to be active (for anonymous users, no email confirmation is sent out)",
        "defaultValue": true
      },
      {
        "name": "sendConfirmationEmail",
        "type": "boolean",
        "description": "controls whether to send confirmation email upon lesson submission",
        "defaultValue": true
      },
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "callback invoked when clicking on the submission button",
        "defaultValue": "function onClick() {}"
      }
    ],
    "description": "A button to be displayed at the end of a lesson for students to click on. By default, a message confirming completion of the lesson is sent to their email address."
  },
  "LikertScale": {
    "props": [
      {
        "name": "question",
        "type": "string",
        "description": "question to be printed",
        "defaultValue": ""
      },
      {
        "name": "options",
        "type": "array",
        "description": "an array of five elements holding the labels for the different scale levels",
        "defaultValue": [
          "Strongly disagree",
          "Disagree",
          "Neither agree nor disagree",
          "Agree",
          "Strongly agree"
        ]
      },
      {
        "name": "noMultipleResponses",
        "type": "boolean",
        "description": "disallow multiple submissions from a single student",
        "defaultValue": false
      },
      {
        "name": "disableSubmitNotification",
        "type": "boolean",
        "description": "controls whether to disable submission notifications",
        "defaultValue": false
      },
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A component showing a question and a five-point scale for students to answer."
  },
  "Link": {
    "props": [
      {
        "name": "href",
        "type": "string (required)",
        "description": "URL of website to link to"
      },
      {
        "name": "target",
        "type": "string",
        "description": "defines where link is opened: set to `_blank` for new window, `_self` own frame, `_parent` for parent, `_top` for full body of window, or the name of the frame",
        "defaultValue": "_blank"
      },
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A component for displaying a link."
  },
  "MatchListQuestion": {
    "props": [
      {
        "name": "question",
        "type": "(string|node)",
        "description": "question to be displayed at the top of the match list question component",
        "defaultValue": ""
      },
      {
        "name": "elements",
        "type": "array<{a,b}>",
        "description": "an `array` holding the correct pairs displayed at the top of the free text question component. Each `array` element must be an `object` with `a` and `b` properties",
        "defaultValue": []
      },
      {
        "name": "hintPlacement",
        "type": "string",
        "description": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
        "defaultValue": "bottom"
      },
      {
        "name": "hints",
        "type": "array<(string|node)>",
        "description": "hints providing guidance on how to answer the question",
        "defaultValue": []
      },
      {
        "name": "provideFeedback",
        "type": "boolean",
        "description": "indicates whether the solution should be accessible after learners submit their answers",
        "defaultValue": true
      },
      {
        "name": "feedback",
        "type": "boolean",
        "description": "controls whether to display feedback buttons",
        "defaultValue": true
      },
      {
        "name": "chat",
        "type": "boolean",
        "description": "controls whether the element should have an integrated chat",
        "defaultValue": false
      },
      {
        "name": "colorScale",
        "type": "array",
        "description": "if set, the supplied colors are used for the tiles",
        "defaultValue": null
      },
      {
        "name": "shuffle",
        "type": "string",
        "description": "specifies whether to shuffle the `left`, `right`, or `both` columns whose elements have to be matched",
        "defaultValue": "both"
      },
      {
        "name": "disableSubmitNotification",
        "type": "boolean",
        "description": "controls whether to disable submission notifications",
        "defaultValue": false
      },
      {
        "name": "submissionMsg",
        "type": "string",
        "description": "notification displayed when the learner first submits his answer",
        "defaultValue": "You have successfully submitted your answer."
      },
      {
        "name": "resubmissionMsg",
        "type": "string",
        "description": "notification displayed for all submissions after the first one",
        "defaultValue": "You have successfully re-submitted your answer."
      },
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback invoked when students submits an answer",
        "defaultValue": "function onSubmit() {}"
      }
    ],
    "description": "An ISLE component that renders a question in which the learner has to match elements from two lists with each other in the correct way."
  },
  "MetricsContingencyTable": {
    "props": [
      {
        "name": "row",
        "type": "string (required)"
      },
      {
        "name": "rowValues",
        "type": "array (required)"
      },
      {
        "name": "rowAccessor",
        "type": "function",
        "defaultValue": "function d => d.value"
      },
      {
        "name": "col",
        "type": "string (required)"
      },
      {
        "name": "colAccessor",
        "type": "function",
        "defaultValue": "function d => d.value"
      },
      {
        "name": "colValues",
        "type": "array (required)"
      },
      {
        "name": "style",
        "type": "object",
        "defaultValue": {}
      }
    ],
    "description": "Description is missing."
  },
  "Metrics": {
    "props": [
      {
        "name": "for",
        "type": "string (required)",
        "description": "ID of component whose actions should be retrieved"
      },
      {
        "name": "interval",
        "type": "number",
        "description": "interval at which to call the database; if falsy, retrievals have to be manually triggered by clicking on the displayed button",
        "defaultValue": null
      },
      {
        "name": "onData",
        "type": "function",
        "description": "callback function called with an array of all actions",
        "defaultValue": "function onData() {}"
      }
    ],
    "description": "Component allowing retrieval of member actions corresponding to a specified component ID from the database."
  },
  "RealTimeMetrics": {
    "props": [
      {
        "name": "for",
        "type": "array (required)",
        "description": "ID of component whose actions should trigger callback(s)"
      },
      {
        "name": "onData",
        "type": "function",
        "description": "callback function called with an array of all actions when a new member action arrives",
        "defaultValue": "function onData() {}"
      },
      {
        "name": "onDatum",
        "type": "function",
        "description": "callback function invoked with every individual incoming member action",
        "defaultValue": "function onDatum() {}"
      },
      {
        "name": "returnFullObject",
        "type": "boolean",
        "description": "controls whether to invoke the supplied callback(s) with the full action object or only its value",
        "defaultValue": false
      }
    ],
    "description": "Invisible component listening to incoming member actions and invoking a given callback."
  },
  "MultiCards": {
    "props": [
      {
        "name": "animation",
        "type": "object",
        "description": "if set the component uses an entry animation; the object contains a name (like `anim-scale-up`) and a duration (like `1.7s` = 1.7 seconds)",
        "defaultValue": {}
      },
      {
        "name": "cardStyles",
        "type": "{container,front,back}",
        "description": "allows to override the given styles. Handles objects with  `container`, `front` and `back` keys",
        "defaultValue": {
          "container": {},
          "front": {},
          "back": {}
        }
      },
      {
        "name": "game",
        "type": "string",
        "description": "multi-card games. Can be either `memory` or `bingo`.",
        "defaultValue": null
      },
      {
        "name": "language",
        "type": "string",
        "description": "voice recognition language identifier",
        "defaultValue": "en-US"
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "a function that receives the matrix of the flippable cards",
        "defaultValue": "function onChange() {}"
      },
      {
        "name": "oneTime",
        "type": "boolean",
        "description": "indicates whether the flip process may be executed just once",
        "defaultValue": false
      },
      {
        "name": "values",
        "type": "array<object>",
        "description": "the values for the respective cards, input in an array that has entry fields for a `front` and `back` value. Such a value could be a string, but also a full fledged ISLE component",
        "defaultValue": []
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "An ISLE component that allows you to create and control multiple flippable cards (e.g. in a game of Memory)."
  },
  "MultipleChoiceMatrix": {
    "props": [
      {
        "name": "questions",
        "type": "array (required)",
        "description": "an array of questions"
      },
      {
        "name": "answers",
        "type": "array (required)",
        "description": "an array of answers"
      },
      {
        "name": "title",
        "type": "(string|node)",
        "description": "title to be displayed on top of the question matrix",
        "defaultValue": null
      },
      {
        "name": "solution",
        "type": "array<array>",
        "description": "boolean matrix the element of which indicate whether the respective radio button or checkbox should be ticked",
        "defaultValue": null
      },
      {
        "name": "type",
        "type": "string",
        "description": "question type (`radio` corresponds to \"Select one\", `checkbox` to \"Select all that apply\")",
        "defaultValue": "radio"
      },
      {
        "name": "disableSubmitNotification",
        "type": "boolean",
        "description": "controls whether to disable submission notifications",
        "defaultValue": false
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked when the value of a checkbox / radio button changes; invoked with the two-dimensional boolean array of the active status for each answer option",
        "defaultValue": "function onChange() {}"
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback invoked when user clicks the \"Submit\" button; invoked with the two-dimensional boolean array of the active status for each answer option",
        "defaultValue": "function onSubmit() {}"
      }
    ],
    "description": "An ISLE component that renders a matrix of multiple choice questions with the same answers."
  },
  "MultipleChoiceQuestion": {
    "props": [
      {
        "name": "question",
        "type": "(string|node)",
        "description": "the question displayed at the top of the multiple choice component",
        "defaultValue": ""
      },
      {
        "name": "solution",
        "type": "(number|array)",
        "description": "number denoting which answer is correct or an `array` of the correct answer numbers in case the learner should be able to select multiple answers",
        "defaultValue": null
      },
      {
        "name": "answers",
        "type": "array (required)",
        "description": "an `array` of answer objects. Each answer should be an object with `content` and `explanation` fields, which denote the displayed answer option and an explanation visible after the question has been submitted to explain why the answer is correct or incorrect"
      },
      {
        "name": "hintPlacement",
        "type": "string",
        "description": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
        "defaultValue": "bottom"
      },
      {
        "name": "hints",
        "type": "array<(string|node)>",
        "description": "hints providing guidance on how to answer the question",
        "defaultValue": []
      },
      {
        "name": "feedback",
        "type": "boolean",
        "description": "controls whether to display feedback buttons",
        "defaultValue": true
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "controls whether the question is disabled",
        "defaultValue": false
      },
      {
        "name": "chat",
        "type": "boolean",
        "description": "controls whether the element should have an integrated chat",
        "defaultValue": false
      },
      {
        "name": "provideFeedback",
        "type": "string",
        "description": "either `full`, `incremental`, or `none`. If `full`, feedback including the correct answer is displayed after learners submit their answers; if `incremental`, feedback is only displayed for the selected answer; if `none`, no feedback is returned",
        "defaultValue": "incremental"
      },
      {
        "name": "disableSubmitNotification",
        "type": "boolean",
        "description": "controls whether to disable submission notifications",
        "defaultValue": false
      },
      {
        "name": "displaySolution",
        "type": "boolean",
        "description": "controls whether the solution is displayed upfront",
        "defaultValue": false
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "defaultValue": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked every time the selected answer changes; receives the index of the selected question as its sole argument (or an array in case the question is of type \"Choose all that apply\")",
        "defaultValue": "function onChange(){}"
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback invoked after an answer is submitted",
        "defaultValue": "function onSubmit(){}"
      }
    ],
    "description": "An ISLE component that renders a multiple choice question. It supports the case where the learner has to select a single answer and when there might be multiple correct answers and all correct ones must be picked."
  },
  "MultipleChoiceSurvey": {
    "props": [
      {
        "name": "question",
        "type": "string",
        "description": "string indicating the question to ask the students",
        "defaultValue": ""
      },
      {
        "name": "allowMultipleAnswers",
        "type": "boolean",
        "description": "controls whether one wishes to allow students to answer the survey multiple times",
        "defaultValue": false
      },
      {
        "name": "anonymous",
        "type": "boolean",
        "description": "controls whether student answers are anonymized",
        "defaultValue": false
      },
      {
        "name": "answers",
        "type": "array",
        "description": "array indicating answer choices for the students",
        "defaultValue": []
      },
      {
        "name": "multipleAnswers",
        "type": "boolean",
        "description": "indicates whether students may select more than one answer. Note that this differs from allowMultipleAnswers in that allow makes students able to submit the question multiple times",
        "defaultValue": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "function to be called when an answer is submitted",
        "defaultValue": "function onSubmit() {}"
      }
    ],
    "description": "A survey component in which the instructor may collect multiple-choice survey data from students in real-time."
  },
  "News": {
    "props": [
      {
        "name": "invisible",
        "type": "boolean",
        "description": "indicates whether to show the input fields or rely solely on voice control to be triggered",
        "defaultValue": false
      },
      {
        "name": "key",
        "type": "string",
        "description": "authentication key for the News API",
        "defaultValue": "2987fd19bd374249979c4e38e40ef8b8"
      },
      {
        "name": "language",
        "type": "string",
        "description": "language identifier",
        "defaultValue": "en-US"
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "defaultValue": null
      },
      {
        "name": "onArticles",
        "type": "function",
        "description": "callback function invoked with an array of article objects once they are received",
        "defaultValue": "function onArticles() {}"
      }
    ],
    "description": "The **News** component scans the public **News API** (consisting of 71 international  newspapers) and displays the latest 10 articles of the given newspaper. There are two ways to enter a source: one by typing into the search field and submitting via the ENTER button, the second via voice."
  },
  "NumberQuestion": {
    "props": [
      {
        "name": "question",
        "type": "(string|node)",
        "description": "number question",
        "defaultValue": ""
      },
      {
        "name": "hintPlacement",
        "type": "string",
        "description": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
        "defaultValue": "top"
      },
      {
        "name": "hints",
        "type": "array<(string|node)>",
        "description": "hints providing guidance on how to answer the question",
        "defaultValue": []
      },
      {
        "name": "feedback",
        "type": "boolean",
        "description": "controls whether to display feedback buttons",
        "defaultValue": true
      },
      {
        "name": "solution",
        "type": "(number|array<number>)",
        "description": "a numeric answer to the problem (or multiple correct answers if an array is supplied)",
        "defaultValue": null
      },
      {
        "name": "digits",
        "type": "number",
        "description": "number of digits for which the answer supplied by the student must match the solution to be considered correct. Set to 0 to match as an integer. If set to null it will search for an exact match.",
        "defaultValue": 3
      },
      {
        "name": "max",
        "type": "number",
        "description": "maximum allowed input value",
        "defaultValue": null
      },
      {
        "name": "min",
        "type": "number",
        "description": "minimum allowed input value",
        "defaultValue": null
      },
      {
        "name": "defaultValue",
        "type": "number",
        "description": "pre-selected value of number input",
        "defaultValue": 0
      },
      {
        "name": "provideFeedback",
        "type": "boolean",
        "description": "indicates whether feedback including the correct answer should be displayed after learners submit their answers",
        "defaultValue": true
      },
      {
        "name": "disableSubmitNotification",
        "type": "boolean",
        "description": "controls whether to disable submission notifications",
        "defaultValue": false
      },
      {
        "name": "chat",
        "type": "boolean",
        "description": "controls whether the element should have an integrated chat",
        "defaultValue": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback  which is triggered after the value of the number field changes; receives the current value as its sole argument",
        "defaultValue": "function onChange() {}"
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback invoked when answer is submitted; has as first parameter a `boolean` indicating whether the answer was correctly answered (if applicable, `null` otherwise) and the supplied answer as the second parameter",
        "defaultValue": "function onSubmit() {}"
      }
    ],
    "description": "A number question component."
  },
  "NumberSurvey": {
    "props": [
      {
        "name": "question",
        "type": "string",
        "description": "the question to be displayed",
        "defaultValue": ""
      },
      {
        "name": "allowMultipleAnswers",
        "type": "boolean",
        "description": "controls whether the same user (or session if anonymous) may submit multiple answers)",
        "defaultValue": false
      },
      {
        "name": "anonymous",
        "type": "boolean",
        "description": "Allows for the students to submit data anonymously. Note that if this option is set to \"true\", then the instructors will be unable to see the ID of the submitting student",
        "defaultValue": false
      },
      {
        "name": "step",
        "type": "(number|string)",
        "description": "A `string` or `numeric` value indicating the step of the arrows seen when hovering the cursor above the input box. If `'any'`, the step will be set to `1`",
        "defaultValue": "any"
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback function invoked once students submits an answer",
        "defaultValue": "function onSubmit() {}"
      }
    ],
    "description": "A survey component in which the instructor may collect numeric survey data from students in real-time."
  },
  "OrderQuestion": {
    "props": [
      {
        "name": "question",
        "type": "string",
        "description": "question for which the student has to bring the available `options` into the correct order",
        "defaultValue": ""
      },
      {
        "name": "options",
        "type": "array (required)",
        "description": "an array of texts which the student has to bring into the correct ordering (assumed to be the supplied order)"
      },
      {
        "name": "provideFeedback",
        "type": "boolean",
        "description": "controls whether to show a notification displaying whether the submitted answer is correct or not",
        "defaultValue": true
      },
      {
        "name": "hintPlacement",
        "type": "string",
        "description": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
        "defaultValue": "bottom"
      },
      {
        "name": "hints",
        "type": "array<(string|node)>",
        "description": "hints providing guidance on how to answer the question",
        "defaultValue": []
      },
      {
        "name": "feedback",
        "type": "boolean",
        "description": "controls whether to display feedback buttons",
        "defaultValue": true
      },
      {
        "name": "chat",
        "type": "boolean",
        "description": "controls whether the element should have an integrated chat",
        "defaultValue": false
      },
      {
        "name": "failureMsg",
        "type": "string",
        "description": "message to be displayed when student submits a wrong answer",
        "defaultValue": null
      },
      {
        "name": "successMsg",
        "type": "string",
        "description": "message to be displayed when student submits the correct answer",
        "defaultValue": null
      },
      {
        "name": "disableSubmitNotification",
        "type": "boolean",
        "description": "controls whether to disable submission notifications",
        "defaultValue": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback  which is triggered after dragging an element; has two parameters: a `boolean` indicating whether the elements were placed in the correct order and and `array` with the current ordering",
        "defaultValue": "function onChange() {}"
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback invoked when answer is submitted; has as a sole parameter a `boolean` indicating whether the elements were placed in the correct order",
        "defaultValue": "function onSubmit() {}"
      }
    ],
    "description": "An order question component that asks student to bring a collection of elements into the correct order."
  },
  "Pages": {
    "props": [
      {
        "name": "activePage",
        "type": "number",
        "description": "active page",
        "defaultValue": 1
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "controls whether the navigation bar is active or not",
        "defaultValue": false
      },
      {
        "name": "title",
        "type": "string",
        "description": "displayed title of the pages container",
        "defaultValue": ""
      },
      {
        "name": "size",
        "type": "string",
        "description": "size of the pagination buttons (one of `default`, `lg`, `large`, `sm`, `small`, `xs`, or `xsmall`)",
        "defaultValue": "default"
      },
      {
        "name": "height",
        "type": "(number|string)",
        "description": "the maximum height of the container. If an embedded page is taller, a vertical scrollbar is added",
        "defaultValue": null
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "defaultValue": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onSelect",
        "type": "function",
        "description": "Function invoked when active change is changed. Receives the new active page index as a sole parameter",
        "defaultValue": "function onSelect() {}"
      }
    ],
    "description": "An ISLE pagination component that allows the user to step through a sequence of pages."
  },
  "Panel": {
    "props": [
      {
        "name": "className",
        "type": "string",
        "description": "CSS class name",
        "defaultValue": ""
      },
      {
        "name": "header",
        "type": "(string|node)",
        "description": "panel heading (h3)",
        "defaultValue": null
      },
      {
        "name": "footer",
        "type": "(string|node)",
        "description": "panel footer",
        "defaultValue": null
      },
      {
        "name": "minimizable",
        "type": "boolean",
        "description": "whether the panel can be minimized",
        "defaultValue": false
      },
      {
        "name": "fullscreen",
        "type": "boolean",
        "description": "whether the panel can be made fullscreen (only for instructors)",
        "defaultValue": false
      },
      {
        "name": "hideTooltip",
        "type": "string",
        "description": "tooltip displayed over the hide button",
        "defaultValue": null
      },
      {
        "name": "bodyStyle",
        "type": "object",
        "description": "CSS inline styles for body",
        "defaultValue": {}
      },
      {
        "name": "footerStyle",
        "type": "object",
        "description": "CSS inline styles for footer",
        "defaultValue": {}
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles for container",
        "defaultValue": {}
      },
      {
        "name": "onHide",
        "type": "function",
        "description": "callback invoked when the close button is clicked",
        "defaultValue": null
      }
    ],
    "description": "Card component."
  },
  "Plotly": {
    "props": [
      {
        "name": "data",
        "type": "array (required)",
        "description": "data array"
      },
      {
        "name": "draggable",
        "type": "boolean",
        "description": "controls whether the plot should be draggable",
        "defaultValue": false
      },
      {
        "name": "editable",
        "type": "boolean",
        "description": "controls whether labels of the created plot are editable",
        "defaultValue": false
      },
      {
        "name": "id",
        "type": "string",
        "description": "component identifier",
        "defaultValue": null
      },
      {
        "name": "layout",
        "type": "object",
        "description": "Plotly layout object",
        "defaultValue": {}
      },
      {
        "name": "config",
        "type": "object",
        "defaultValue": {}
      },
      {
        "name": "legendButtons",
        "type": "boolean",
        "description": "controls whether to display buttons for changing the legend",
        "defaultValue": true
      },
      {
        "name": "meta",
        "type": "object",
        "description": "plot meta-information",
        "defaultValue": null
      },
      {
        "name": "revision",
        "type": "number",
        "description": "when provided, causes the plot to update when the revision value is incremented",
        "defaultValue": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onAfterPlot",
        "type": "function",
        "description": "callback function invoked each time a chart is plotted",
        "defaultValue": "function onAfterPlot() {}"
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "callback function invoked when any element is clicked",
        "defaultValue": "function onClick() {}"
      },
      {
        "name": "onLegendClick",
        "type": "function",
        "description": "callback function invoked when legend item is clicked",
        "defaultValue": "function onLegendClick() {}"
      },
      {
        "name": "onLegendDoubleClick",
        "type": "function",
        "description": "callback function invoked when legend item is double-clicked",
        "defaultValue": "function onLegendDoubleClick() {}"
      },
      {
        "name": "onRelayout",
        "type": "function",
        "description": "callback function invoked when relayout is triggered",
        "defaultValue": "function onRelayout() {}"
      },
      {
        "name": "onSelected",
        "type": "function",
        "description": "callback function invoked when elements are selected",
        "defaultValue": "function onSelected() {}"
      },
      {
        "name": "onShare",
        "type": "function",
        "description": "callback function invoked when clicking on the \"Share\" button",
        "defaultValue": null
      },
      {
        "name": "removeButtons",
        "type": "boolean",
        "description": "controls whether to remove all buttons (aside from fullscreen button if enabled)",
        "defaultValue": false
      },
      {
        "name": "toggleFullscreen",
        "type": "boolean",
        "description": "controls whether to allow displaying the plot in fullscreen mode",
        "defaultValue": true
      }
    ],
    "description": "Plotly visualization."
  },
  "Polaroid": {
    "props": [
      {
        "name": "image",
        "type": "string",
        "description": "the URL of the image to be displayed in the polaroid frame",
        "defaultValue": null
      },
      {
        "name": "draggable",
        "type": "boolean",
        "description": "controls whether one can drag the polaroid around the screen",
        "defaultValue": false
      },
      {
        "name": "showPin",
        "type": "boolean",
        "description": "shows a pin",
        "defaultValue": false
      },
      {
        "name": "width",
        "type": "number",
        "description": "polaroid width (in px)",
        "defaultValue": 350
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "event handler invoked when image is clicked (receives the id of the Polaroid as parameter)",
        "defaultValue": "function function noop() {\n\t// Empty function...\n}"
      }
    ],
    "description": "A component displaying an image in the style of a polaroid."
  },
  "Preload": {
    "props": [
      {
        "name": "image",
        "type": "(string|array)",
        "description": "the image or the array of images that should be preloaded",
        "defaultValue": null
      }
    ],
    "description": "Preload resources to avoid stuttering loading times."
  },
  "ProportionsSurvey": {
    "props": [
      {
        "name": "allowMultipleAnswers",
        "type": "boolean",
        "description": "controls whether one wishes to allow students to answer the survey multiple times",
        "defaultValue": false
      },
      {
        "name": "anonymous",
        "type": "boolean",
        "description": "controls whether student answers are anonymized",
        "defaultValue": false
      },
      {
        "name": "colors",
        "type": "array",
        "description": "array of colors for the pie chart components. If not defined, a custom color scale will be used",
        "defaultValue": [
          "tomato",
          "orange",
          "gold",
          "darkcyan",
          "salmon",
          "lightgreen",
          "gainsboro",
          "lightpurple",
          "darkkhaki",
          "darkseagreen"
        ]
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "controls whether the survey is deactivated",
        "defaultValue": false
      },
      {
        "name": "group",
        "type": "string",
        "description": "group display heading",
        "defaultValue": "group results"
      },
      {
        "name": "groupHeight",
        "type": "number",
        "description": "proportions input height for group display (in px)",
        "defaultValue": 100
      },
      {
        "name": "groupInnerRadius",
        "type": "number",
        "description": "inner radius of proportions pie chart for group display (in px)",
        "defaultValue": 40
      },
      {
        "name": "legends",
        "type": "array",
        "description": "legend labels that describe the options to be weighed",
        "defaultValue": null
      },
      {
        "name": "margin",
        "type": "string",
        "description": "proportion input margin (in px)",
        "defaultValue": "40px"
      },
      {
        "name": "nElements",
        "type": "number",
        "description": "number of elements that shall be weighed",
        "defaultValue": 6
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback function invoked once students submits an answer",
        "defaultValue": "function onSubmit() {}"
      },
      {
        "name": "personalHeight",
        "type": "number",
        "description": "proportions input height for individual student (in px)",
        "defaultValue": 200
      },
      {
        "name": "personalInnerRadius",
        "type": "number",
        "description": "inner radius of proportions pie chart for individual student (in px)",
        "defaultValue": 60
      },
      {
        "name": "precision",
        "type": "number",
        "description": "displayed precision of proportion values",
        "defaultValue": 2
      },
      {
        "name": "question",
        "type": "string",
        "description": "the question to be displayed",
        "defaultValue": ""
      },
      {
        "name": "step",
        "type": "number",
        "description": "the step of the arrows seen when hovering the cursor above the input box",
        "defaultValue": 0.25
      }
    ],
    "description": "Component that allows a group of people to vote on the weights and importance of given options."
  },
  "QRCode": {
    "props": [
      {
        "name": "text",
        "type": "string",
        "description": "text to encode in QR code (defaults to lesson URL if not set)",
        "defaultValue": null
      },
      {
        "name": "scale",
        "type": "number",
        "description": "number of pixels per modules (black dots)",
        "defaultValue": 8
      },
      {
        "name": "center",
        "type": "boolean",
        "description": "boolean controlling whether to center the QR code",
        "defaultValue": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "QR Code."
  },
  "QuestionForm": {
    "props": [
      {
        "name": "buttonLabel",
        "type": "string",
        "description": "label of the submit button",
        "defaultValue": null
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback invoked when the submit button is clicked",
        "defaultValue": "function onSubmit() {}"
      }
    ],
    "description": "A form component combining different question components together with a single submission button."
  },
  "Quiz": {
    "props": [
      {
        "name": "confidence",
        "type": "boolean",
        "description": "whether to display a Likert scale asking for the confidence of the user's answer",
        "defaultValue": false
      },
      {
        "name": "forceConfidence",
        "type": "boolean",
        "description": "controls whether a user has to supply a confidence level before moving to the next question",
        "defaultValue": false
      },
      {
        "name": "count",
        "type": "number",
        "description": "number of questions to include in the quiz",
        "defaultValue": null
      },
      {
        "name": "questions",
        "type": "array (required)",
        "description": "array of questions from which questions will be randomly selected"
      },
      {
        "name": "active",
        "type": "boolean",
        "description": "controls whether the timer for the quiz is active",
        "defaultValue": true
      },
      {
        "name": "duration",
        "type": "number",
        "description": "duration of the quiz (in minutes); once time is up, the summary page will be displayed",
        "defaultValue": null
      },
      {
        "name": "skippable",
        "type": "boolean",
        "description": "controls whether questions in  the quiz are skippable",
        "defaultValue": true
      },
      {
        "name": "footerNodes",
        "type": "array",
        "description": "array of nodes to be displayed in the footer of each question",
        "defaultValue": []
      },
      {
        "name": "nextLabel",
        "type": "string",
        "description": "label of button to advance to next question",
        "defaultValue": null
      },
      {
        "name": "provideFeedback",
        "type": "boolean",
        "description": "controls whether to show students feedback on correctness of their answers after quiz completion",
        "defaultValue": true
      },
      {
        "name": "showFinishButton",
        "type": "boolean",
        "description": "controls whether to display button to finish quiz and jump directly to results page",
        "defaultValue": false
      },
      {
        "name": "finishLabel",
        "type": "string",
        "description": "label of button to finish quiz",
        "defaultValue": null
      },
      {
        "name": "onFinished",
        "type": "function",
        "description": "callback invoked when the quiz is finished and the results page is displayed",
        "defaultValue": "function onFinished() {}"
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback invoked when user submits an answer",
        "defaultValue": "function onSubmit() {}"
      }
    ],
    "description": "A quiz component displaying a sequence of question components."
  },
  "RHelp": {
    "props": [
      {
        "name": "func",
        "type": "string",
        "description": "name of the `R function` for which to open the documentation. If not supplied, the content of the `RHelp` tag is assumed to be equal to the name of the function",
        "defaultValue": ""
      },
      {
        "name": "library",
        "type": "string",
        "description": "name of the R package in which the function resides",
        "defaultValue": "base"
      },
      {
        "name": "visible",
        "type": "boolean",
        "description": "controls whether the help modal window should be opened at startup",
        "defaultValue": false
      }
    ],
    "description": "Make words pull up R documentation in a modal window when clicked."
  },
  "ROutput": {
    "props": [
      {
        "name": "code",
        "type": "string",
        "description": "R code used to evaluate",
        "defaultValue": ""
      },
      {
        "name": "libraries",
        "type": "array",
        "description": "R libraries that should be loaded automatically when the input `code` is executed",
        "defaultValue": []
      },
      {
        "name": "prependCode",
        "type": "(string|array)",
        "description": "R code (or `array` of code blocks) to be prepended to the code stored in `code` when evaluating",
        "defaultValue": ""
      }
    ],
    "description": "Component for rendering R output inside an ISLE lesson."
  },
  "RPlot": {
    "props": [
      {
        "name": "code",
        "type": "string",
        "description": "R code to generate the plot",
        "defaultValue": ""
      },
      {
        "name": "width",
        "type": "(number|string)",
        "description": "width of the plot (in px)",
        "defaultValue": 600
      },
      {
        "name": "height",
        "type": "(number|string)",
        "description": "height of the plot (in px)",
        "defaultValue": "auto"
      },
      {
        "name": "draggable",
        "type": "boolean",
        "description": "controls whether the plot should be draggable",
        "defaultValue": false
      },
      {
        "name": "fileType",
        "type": "string",
        "description": "file type of the plot (`png` or `svg`)",
        "defaultValue": "png"
      },
      {
        "name": "libraries",
        "type": "array",
        "description": "R libraries that should be loaded automatically when the input `code` is executed",
        "defaultValue": []
      },
      {
        "name": "prependCode",
        "type": "(string|array)",
        "description": "`string` or an `array` of R code snippets to be prepended to the code stored in `code` when evaluating",
        "defaultValue": ""
      },
      {
        "name": "meta",
        "type": "object",
        "description": "plot meta-information",
        "defaultValue": null
      },
      {
        "name": "className",
        "type": "string",
        "description": "class name",
        "defaultValue": ""
      },
      {
        "name": "onDone",
        "type": "function",
        "description": "callback invoked with `err`, `img` and `body` arguments once a plot is created",
        "defaultValue": "function onDone() {}"
      }
    ],
    "description": "Component for rendering an R plot inside an ISLE lesson."
  },
  "RShell": {
    "props": [
      {
        "name": "code",
        "type": "string",
        "description": "R code to be evaluated",
        "defaultValue": ""
      },
      {
        "name": "solution",
        "type": "string",
        "description": "for programming questions, R code `string` representing the official solution for the problem",
        "defaultValue": ""
      },
      {
        "name": "hints",
        "type": "array<(string|node)>",
        "description": "for programming questions, an array of hints providing guidance on how to approach the problem",
        "defaultValue": []
      },
      {
        "name": "addPreceding",
        "type": "boolean",
        "description": "if set to true, the shell will evaluate all the code from the current component and all previous ones occurring in the lesson",
        "defaultValue": false
      },
      {
        "name": "libraries",
        "type": "array",
        "description": "R libraries that should be loaded automatically when the input `code` is executed",
        "defaultValue": []
      },
      {
        "name": "precompute",
        "type": "boolean",
        "description": "controls whether the default code should be executed once the component has mounted",
        "defaultValue": false
      },
      {
        "name": "prependCode",
        "type": "(string|array)",
        "description": "R code `string` (or `array` of R code blocks) to be prepended to the code stored in `code` when evaluating",
        "defaultValue": ""
      },
      {
        "name": "chat",
        "type": "boolean",
        "description": "controls whether group chat functionality should be enabled",
        "defaultValue": false
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "controls whether to disable all user inputs and make the code block static",
        "defaultValue": false
      },
      {
        "name": "lines",
        "type": "number",
        "description": "number of lines to display",
        "defaultValue": 5
      },
      {
        "name": "resettable",
        "type": "boolean",
        "description": "controls whether to display a reset button for restoring the default code input",
        "defaultValue": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked whenever the text field input changes",
        "defaultValue": "function onChange() {}"
      },
      {
        "name": "onEvaluate",
        "type": "function",
        "description": "callback invoked whenever the `Evaluate` button is clicked",
        "defaultValue": "function onEvaluate(){}"
      },
      {
        "name": "onResult",
        "type": "function",
        "description": "callback invoked whenever the result of a code execution is obtained from the cloud. The result `string` is passed as the only argument to the callback function",
        "defaultValue": "function onResult() {}"
      }
    ],
    "description": "An interactive R Shell that can be used to execute R commands in the cloud using [OpenCPU](https://www.opencpu.org/)."
  },
  "RTable": {
    "props": [
      {
        "name": "code",
        "type": "string",
        "description": "R code returning a data.frame containing the data to be displayed in the table",
        "defaultValue": ""
      },
      {
        "name": "libraries",
        "type": "array",
        "description": "R libraries that should be loaded automatically when the input `code` is executed",
        "defaultValue": []
      },
      {
        "name": "prependCode",
        "type": "(string|array)",
        "description": "R code `string` (or `array` of R code blocks) to be prepended to the code stored in `code` when evaluating",
        "defaultValue": ""
      },
      {
        "name": "width",
        "type": "number",
        "description": "width (between 0 and 1)",
        "defaultValue": 0.5
      }
    ],
    "description": "Component for rendering a R data frame or matrix in a tabular display."
  },
  "RandomVideo": {
    "props": [
      {
        "name": "videos",
        "type": "array<string>",
        "description": "video URLs",
        "defaultValue": []
      }
    ],
    "description": "Displays a random video from a list of videos."
  },
  "RangeQuestion": {
    "props": [
      {
        "name": "question",
        "type": "string",
        "description": "displayed question",
        "defaultValue": ""
      },
      {
        "name": "solution",
        "type": "array<number>",
        "description": "two-element array containing the endpoints of the correct range",
        "defaultValue": null
      },
      {
        "name": "hintPlacement",
        "type": "string",
        "description": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
        "defaultValue": "top"
      },
      {
        "name": "hints",
        "type": "array<(string|node)>",
        "description": "hints providing guidance on how to answer the question",
        "defaultValue": []
      },
      {
        "name": "feedback",
        "type": "boolean",
        "description": "controls whether to display feedback buttons",
        "defaultValue": true
      },
      {
        "name": "chat",
        "type": "boolean",
        "description": "controls whether the element should have an integrated chat",
        "defaultValue": false
      },
      {
        "name": "digits",
        "type": "number",
        "description": "number of digits that have to match between solution and user-supplied answer. If not given or set to null, the component checks for strict equality. If set to 0, checks for integer equality",
        "defaultValue": 3
      },
      {
        "name": "max",
        "type": "number",
        "description": "maximum input value",
        "defaultValue": null
      },
      {
        "name": "min",
        "type": "number",
        "description": "minimum input value",
        "defaultValue": null
      },
      {
        "name": "provideFeedback",
        "type": "boolean",
        "description": "indicates whether feedback including the correct answer should be displayed after learners submit their answers",
        "defaultValue": true
      },
      {
        "name": "allowMultipleAnswers",
        "type": "boolean",
        "description": "controls whether one can submit multiple answers",
        "defaultValue": false
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "defaultValue": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onChangeLower",
        "type": "function",
        "description": "callback triggered after the lower bound is changed by the user",
        "defaultValue": "function onChangeLower() {}"
      },
      {
        "name": "onChangeUpper",
        "type": "function",
        "description": "callback triggered after the upper bound is changed by the user",
        "defaultValue": "function onChangeUpper() {}"
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback invoked when answer is submitted; has as first parameter a `boolean` indicating whether the answer was correctly answered (if applicable, `null` otherwise) and the supplied answer as the second parameter",
        "defaultValue": "function onSubmit() {}"
      }
    ],
    "description": "A range question component that asks students to supply a lower and upper end point."
  },
  "Reaction": {
    "props": [
      {
        "name": "actionID",
        "type": "string (required)",
        "description": "ID of component to watch"
      },
      {
        "name": "show",
        "type": "(object|function)",
        "description": "hash table of components to display given the different responses or function that returns a component to display (sole argument of function is the latest result)",
        "defaultValue": {}
      }
    ],
    "description": "Shows different components depending on user actions."
  },
  "Recorder": {
    "props": [
      {
        "name": "audio",
        "type": "boolean",
        "description": "indicates whether audio should be recorded",
        "defaultValue": false
      },
      {
        "name": "camera",
        "type": "boolean",
        "description": "indicates whether webcam should be recorded",
        "defaultValue": false
      },
      {
        "name": "screen",
        "type": "boolean",
        "description": "indicates whether the screen should be captured",
        "defaultValue": false
      },
      {
        "name": "autostart",
        "type": "boolean",
        "description": "indicates whether recording should start immediately",
        "defaultValue": false
      },
      {
        "name": "downloadable",
        "type": "boolean",
        "description": "indicates whether users should be able to download the recording",
        "defaultValue": false
      },
      {
        "name": "uploadable",
        "type": "boolean",
        "description": "indicates whether users should be able to upload the recording to the server",
        "defaultValue": false
      },
      {
        "name": "bitsPerSecond",
        "type": "number",
        "description": "bits per second",
        "defaultValue": 1280000
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "defaultValue": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "An ISLE component for recording audio, screen and video."
  },
  "Revealer": {
    "props": [
      {
        "name": "message",
        "type": "string",
        "description": "message to be displayed when content is hidden",
        "defaultValue": null
      },
      {
        "name": "show",
        "type": "boolean",
        "description": "controls whether to initially display child elements",
        "defaultValue": false
      }
    ],
    "description": "An ISLE component that instructors may use to selectively reveal or hide children content to all users."
  },
  "Runner": {
    "props": [
      {
        "name": "active",
        "type": "boolean",
        "description": "controls whether the runner should be active. Upon activation, the `onEvaluate` function is called in the given interval (or once)",
        "defaultValue": true
      },
      {
        "name": "interval",
        "type": "number",
        "description": "number of milliseconds between invocations of `onEvaluate`. If no interval is set, the function is only invoked once",
        "defaultValue": null
      },
      {
        "name": "onEvaluate",
        "type": "function",
        "description": "function to be invoked",
        "defaultValue": "function onEvaluate() {}"
      }
    ],
    "description": "The runner component will execute a supplied function either once or at a given interval."
  },
  "ScrollingText": {
    "props": [
      {
        "name": "list",
        "type": "array<string>",
        "description": "list of image URLs to be displayed",
        "defaultValue": []
      },
      {
        "name": "loop",
        "type": "boolean",
        "description": "indicates whether the process shall be displayed infinitely",
        "defaultValue": false
      },
      {
        "name": "direction",
        "type": "string",
        "description": "the direction of the text flow (either `left`, `right`, `up`, `down`, `tracking`, `focus`, or `swirl`)",
        "defaultValue": "right"
      },
      {
        "name": "still",
        "type": "number",
        "description": "the time the text remains still (in seconds)",
        "defaultValue": 3
      },
      {
        "name": "interval",
        "type": "number",
        "description": "the interval between the calls (in seconds)",
        "defaultValue": 15
      },
      {
        "name": "inTime",
        "type": "number",
        "description": "time of the entrance effect (in seconds)",
        "defaultValue": 0.6
      },
      {
        "name": "outTime",
        "type": "number",
        "description": "time of the exit effect (in seconds)",
        "defaultValue": 1
      },
      {
        "name": "style",
        "type": "object",
        "description": "style definition of the text",
        "defaultValue": {}
      }
    ],
    "description": "A dynamic background component that changes a background image at a specified interval."
  },
  "Seal": {
    "props": [
      {
        "name": "active",
        "type": "boolean",
        "description": "controls whether seal is active or grayed out",
        "defaultValue": true
      },
      {
        "name": "onActivate",
        "type": "function",
        "defaultValue": "function onActivate() {}"
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "callback function invoked when the note is clicked",
        "defaultValue": "function onClick() {}"
      },
      {
        "name": "scale",
        "type": "number",
        "description": "object size (if not explicitly set, the seal is not rescaled)",
        "defaultValue": null
      },
      {
        "name": "innerStyle",
        "type": "object",
        "description": "the style for the inner circle",
        "defaultValue": {}
      },
      {
        "name": "lower",
        "type": "string",
        "description": "the lower text",
        "defaultValue": "The lower text"
      },
      {
        "name": "lowerArc",
        "type": "number",
        "description": "the arc for the lower text",
        "defaultValue": 150
      },
      {
        "name": "noOrnaments",
        "type": "boolean",
        "description": "prevents rendering of the ornaments",
        "defaultValue": false
      },
      {
        "name": "removable",
        "type": "boolean",
        "description": "controls whether the note is removed when clicked",
        "defaultValue": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "the style for the element",
        "defaultValue": null
      },
      {
        "name": "title",
        "type": "string",
        "description": "seal title",
        "defaultValue": "Enter a title"
      },
      {
        "name": "upper",
        "type": "string",
        "description": "the upper text",
        "defaultValue": "The upper text"
      },
      {
        "name": "upperArc",
        "type": "number",
        "description": "the arc for the upper text",
        "defaultValue": 150
      }
    ],
    "description": "An approval seal."
  },
  "SelectQuestionMatrix": {
    "props": [
      {
        "name": "question",
        "type": "(string|node)",
        "defaultValue": ""
      },
      {
        "name": "rows",
        "type": "array",
        "defaultValue": []
      },
      {
        "name": "cols",
        "type": "array",
        "defaultValue": []
      },
      {
        "name": "options",
        "type": "object",
        "defaultValue": {}
      },
      {
        "name": "solution",
        "type": "object",
        "defaultValue": {}
      },
      {
        "name": "hints",
        "type": "array<(string|node)>",
        "defaultValue": []
      },
      {
        "name": "hintPlacement",
        "type": "string",
        "defaultValue": "bottom"
      },
      {
        "name": "feedback",
        "type": "boolean",
        "defaultValue": true
      },
      {
        "name": "provideFeedback",
        "type": "string",
        "defaultValue": "individual"
      },
      {
        "name": "failureMsg",
        "type": "string",
        "defaultValue": null
      },
      {
        "name": "successMsg",
        "type": "string",
        "defaultValue": null
      },
      {
        "name": "chat",
        "type": "boolean",
        "defaultValue": false
      },
      {
        "name": "style",
        "type": "object",
        "defaultValue": {}
      },
      {
        "name": "onSubmit",
        "type": "function",
        "defaultValue": "function onSubmit() {}"
      }
    ],
    "description": "A question with an answer consisting of multiple select boxes."
  },
  "SelectQuestion": {
    "props": [
      {
        "name": "question",
        "type": "string",
        "description": "question for which the student has to select one of the available answer options",
        "defaultValue": ""
      },
      {
        "name": "options",
        "type": "array (required)",
        "description": "available answer options from which the student can select"
      },
      {
        "name": "solution",
        "type": "number (required)",
        "description": "index of solution element in `options`"
      },
      {
        "name": "preselected",
        "type": "number",
        "description": "index of preselected answer option",
        "defaultValue": 0
      },
      {
        "name": "inline",
        "type": "boolean",
        "description": "controls whether the component is rendered inline or not",
        "defaultValue": false
      },
      {
        "name": "hintPlacement",
        "type": "string",
        "description": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
        "defaultValue": "top"
      },
      {
        "name": "hints",
        "type": "array<(string|node)>",
        "description": "hints providing guidance on how to answer the question",
        "defaultValue": []
      },
      {
        "name": "feedback",
        "type": "boolean",
        "description": "controls whether to display feedback buttons",
        "defaultValue": true
      },
      {
        "name": "chat",
        "type": "boolean",
        "description": "controls whether the element should have an integrated chat",
        "defaultValue": false
      },
      {
        "name": "provideFeedback",
        "type": "boolean",
        "description": "indicates whether feedback including the correct answer should be displayed after learners submit their answers",
        "defaultValue": true
      },
      {
        "name": "failureMsg",
        "type": "string",
        "description": "message to be displayed when student selects a wrong answer",
        "defaultValue": "Not quite, try again!"
      },
      {
        "name": "successMsg",
        "type": "string",
        "description": "message to be displayed when student selects the correct answer",
        "defaultValue": "That's the correct answer!"
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback  which is triggered after the submit action",
        "defaultValue": "function onChange() {}"
      },
      {
        "name": "onSubmit",
        "type": "function",
        "description": "callback invoked when answer is submitted; has as first parameter a `boolean` indicating whether the answer was correctly answered (if applicable, `null` otherwise) and the supplied answer as the second parameter",
        "defaultValue": "function onSubmit() {}"
      }
    ],
    "description": "A select question component."
  },
  "ShapedForm": {
    "props": [
      {
        "name": "margin",
        "type": "number",
        "description": "the margin in regards to the floating text, in pixels. Default: 10",
        "defaultValue": 10
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "event handler invoked when image is clicked",
        "defaultValue": null
      },
      {
        "name": "image",
        "type": "string",
        "description": "the background image url",
        "defaultValue": null
      },
      {
        "name": "svg",
        "type": "string",
        "description": "the svg background image url",
        "defaultValue": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "the style of the object, it can hold any css including animations",
        "defaultValue": {}
      }
    ],
    "description": "A component that allows the display of shapes, triggered by images with alpha channel."
  },
  "ShapedImage": {
    "props": [
      {
        "name": "alt",
        "type": "string",
        "defaultValue": ""
      },
      {
        "name": "background",
        "type": "boolean",
        "description": "if set the component can hold and display child elements",
        "defaultValue": false
      },
      {
        "name": "margin",
        "type": "number",
        "description": "the margin in regards to the floating text, in pixels. Default: 10",
        "defaultValue": 10
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "event handler invoked when image is clicked",
        "defaultValue": null
      },
      {
        "name": "src",
        "type": "string",
        "description": "the image url",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "the style of the object, it can hold any css including animations",
        "defaultValue": {}
      },
      {
        "name": "threshold",
        "type": "number",
        "description": "alpha threshold, number between 0 and 1",
        "defaultValue": 1
      }
    ],
    "description": "A component that allows the display of shapes, triggered by images with alpha channel."
  },
  "Sketchpad": {
    "props": [
      {
        "name": "autoSave",
        "type": "boolean",
        "description": "controls whether the editor should save the current text to the local storage of the browser at a given time interval",
        "defaultValue": true
      },
      {
        "name": "feedbackButtons",
        "type": "boolean",
        "description": "controls whether to display feedback buttons on each slide",
        "defaultValue": false
      },
      {
        "name": "intervalTime",
        "type": "number",
        "description": "time between auto saves",
        "defaultValue": 10000
      },
      {
        "name": "hideInputButtons",
        "type": "boolean",
        "description": "controls whether to hide drawing and text input buttons",
        "defaultValue": false
      },
      {
        "name": "hideNavigationButtons",
        "type": "boolean",
        "description": "controls whether to hide buttons for navigating between pages",
        "defaultValue": false
      },
      {
        "name": "hideSaveButtons",
        "type": "boolean",
        "description": "controls whether to hide the save buttons",
        "defaultValue": false
      },
      {
        "name": "hideTransmitButtons",
        "type": "boolean",
        "description": "controls whether to hide buttons for transmitting user actions",
        "defaultValue": false
      },
      {
        "name": "brushSize",
        "type": "number",
        "description": "size of the brush to paint with",
        "defaultValue": 4
      },
      {
        "name": "color",
        "type": "string",
        "description": "color of the brush and texts",
        "defaultValue": "#444444"
      },
      {
        "name": "canvasWidth",
        "type": "number",
        "description": "width of the canvas element (in px)",
        "defaultValue": 1200
      },
      {
        "name": "canvasHeight",
        "type": "number",
        "description": "height of the canvas element (in px)",
        "defaultValue": 700
      },
      {
        "name": "fullscreen",
        "type": "boolean",
        "description": "controls whether to automatically resize the canvas to the width and height of the browser window",
        "defaultValue": false
      },
      {
        "name": "fill",
        "type": "string",
        "description": "if `horizontal`, fill all available horizontal space when drawing a PDF; if `vertical`, all vertical space is used to prevent y-axis overflow",
        "defaultValue": "vertical"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "whether to make the component read-only and forbid drawing on the sketchpad",
        "defaultValue": false
      },
      {
        "name": "fontFamily",
        "type": "string",
        "description": "font family",
        "defaultValue": "Arial"
      },
      {
        "name": "fontSize",
        "type": "number",
        "description": "font size",
        "defaultValue": 24
      },
      {
        "name": "nodes",
        "type": "object",
        "description": "components to be rendered on top of specified slides; `keys` should correspond to page numbers, `values` to the components",
        "defaultValue": {}
      },
      {
        "name": "noPages",
        "type": "number",
        "description": "initial number of pages",
        "defaultValue": 1
      },
      {
        "name": "pdf",
        "type": "string",
        "description": "Link to PDF file for baked-in page backgrounds",
        "defaultValue": null
      },
      {
        "name": "showTutorial",
        "type": "boolean",
        "description": "show a tutorial for the sketchpad",
        "defaultValue": false
      },
      {
        "name": "dynamicallyHideButtons",
        "type": "boolean",
        "description": "controls whether to start hiding buttons when toolbar width is not sufficient (otherwise a new line will be started)",
        "defaultValue": false
      },
      {
        "name": "transmitOwner",
        "type": "boolean",
        "description": "whether owner actions should be transmitted to other users in real-time",
        "defaultValue": true
      },
      {
        "name": "groupMode",
        "type": "boolean",
        "description": "controls whether all user's actions are transmitted to everyone else",
        "defaultValue": false
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "defaultValue": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked whenever a new line element is drawn",
        "defaultValue": "function onChange() {}"
      }
    ],
    "description": "A drawing sketchpad for note taking on lecture slides or empty pages."
  },
  "Slider": {
    "props": [
      {
        "name": "title",
        "type": "string",
        "description": "title for the slideshow / carousel to be displayed at its top",
        "defaultValue": ""
      },
      {
        "name": "dots",
        "type": "boolean",
        "description": "display dots at the bottom for quickly navigating to any slide",
        "defaultValue": true
      },
      {
        "name": "fade",
        "type": "boolean",
        "description": "controls whether fading is used for transitioning between the slides",
        "defaultValue": false
      },
      {
        "name": "draggable",
        "type": "boolean",
        "description": "controls whether users can drag the slides to navigate between them",
        "defaultValue": true
      },
      {
        "name": "goto",
        "type": "number",
        "description": "If property is changed, the component jumps to the slide with the selected index",
        "defaultValue": 0
      },
      {
        "name": "infinite",
        "type": "boolean",
        "description": "controls whether the slideshow wraps around it's contents",
        "defaultValue": false
      },
      {
        "name": "interval",
        "type": "number",
        "description": "sets a time interval for an automatic slide change",
        "defaultValue": null
      },
      {
        "name": "swipe",
        "type": "boolean",
        "description": "enables drag/swipe behavior",
        "defaultValue": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "callback invoked when clicking on the next/previous buttons",
        "defaultValue": "function onClick() {}"
      }
    ],
    "description": "A component which displays its children in a slideshow or carousel."
  },
  "SortableTree": {
    "props": [
      {
        "name": "title",
        "type": "string",
        "description": "header title",
        "defaultValue": null
      }
    ],
    "description": "A thin wrapper around [react-sortable-tree](https://www.npmjs.com/package/react-sortable-tree) that supports all properties of said component."
  },
  "Appear": {
    "props": [
      {
        "name": "easing",
        "type": "string",
        "defaultValue": "quadInOut"
      },
      {
        "name": "endValue",
        "type": "object",
        "defaultValue": {
          "opacity": 1,
          "pointerEvents": "auto"
        }
      },
      {
        "name": "fragment",
        "type": "object"
      },
      {
        "name": "order",
        "type": "number"
      },
      {
        "name": "startValue",
        "type": "object",
        "defaultValue": {
          "opacity": 0,
          "pointerEvents": "none"
        }
      },
      {
        "name": "style",
        "type": "object"
      },
      {
        "name": "transitionDuration",
        "type": "number",
        "defaultValue": 300
      }
    ],
    "description": "Description is missing."
  },
  "Deck": {
    "props": [],
    "description": "Description is missing."
  },
  "Notes": {
    "props": [],
    "description": "Description is missing."
  },
  "Slide": {
    "props": [
      {
        "name": "align",
        "type": "string",
        "defaultValue": "center center"
      },
      {
        "name": "className",
        "type": "string"
      },
      {
        "name": "contentStyles",
        "type": "object"
      },
      {
        "name": "export",
        "type": "boolean"
      },
      {
        "name": "getAnimStep",
        "type": "function"
      },
      {
        "name": "hash",
        "type": "(number|string)"
      },
      {
        "name": "lastSlideIndex",
        "type": "number"
      },
      {
        "name": "margin",
        "type": "number"
      },
      {
        "name": "notes"
      },
      {
        "name": "onActive",
        "type": "function"
      },
      {
        "name": "presenterStyle",
        "type": "object",
        "defaultValue": {}
      },
      {
        "name": "slideIndex",
        "type": "number"
      },
      {
        "name": "slideReference",
        "type": "array"
      },
      {
        "name": "state",
        "type": "string"
      },
      {
        "name": "style",
        "type": "object",
        "defaultValue": {}
      },
      {
        "name": "transition",
        "type": "array"
      },
      {
        "name": "transitionDuration",
        "type": "number"
      },
      {
        "name": "transitionIn",
        "type": "array"
      },
      {
        "name": "transitionOut",
        "type": "array"
      },
      {
        "name": "viewerScaleMode",
        "type": "boolean",
        "defaultValue": false
      }
    ],
    "description": "Description is missing."
  },
  "StickyNote": {
    "props": [
      {
        "name": "title",
        "type": "(string|node)",
        "description": "note title",
        "defaultValue": "Enter a title"
      },
      {
        "name": "body",
        "type": "(string|node)",
        "description": "text of the note",
        "defaultValue": "Body of the note"
      },
      {
        "name": "color",
        "type": "string",
        "description": "available options: red, green, blue, pink, orange",
        "defaultValue": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "date",
        "type": "string",
        "description": "a date displayed for the note",
        "defaultValue": ""
      },
      {
        "name": "draggable",
        "type": "(boolean|object)",
        "defaultValue": false
      },
      {
        "name": "editable",
        "type": "boolean",
        "description": "controls whether the component is editable",
        "defaultValue": false
      },
      {
        "name": "minimizable",
        "type": "boolean",
        "description": "controls whether the component is minimizable",
        "defaultValue": false
      },
      {
        "name": "minimized",
        "type": "boolean",
        "description": "if set, the component is minimized at the start",
        "defaultValue": false
      },
      {
        "name": "stain",
        "type": "boolean",
        "description": "controls whether to show a coffee stain",
        "defaultValue": false
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "callback function invoked when the note is clicked",
        "defaultValue": "function function noop() {\n\t// Empty function...\n}"
      },
      {
        "name": "removable",
        "type": "boolean",
        "description": "controls whether the note is removed when clicked",
        "defaultValue": false
      }
    ],
    "description": "A sticky note rendering some text."
  },
  "Switch": {
    "props": [
      {
        "name": "active",
        "type": "boolean",
        "description": "controls whether the switch is active or not",
        "defaultValue": true
      },
      {
        "name": "tooltip",
        "type": "string",
        "description": "tooltip displayed when hovering over the switch element",
        "defaultValue": "Click to cycle through available options."
      },
      {
        "name": "tooltipPos",
        "type": "string",
        "description": "placement of the tooltip (either `top`, `left`, `right`, or `bottom`)",
        "defaultValue": "top"
      },
      {
        "name": "className",
        "type": "string",
        "description": "class name for the enclosing span element",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onChange",
        "type": "function",
        "description": "callback invoked when elements are switched. Receives as its first argument the index of the currently displayed child",
        "defaultValue": "function onChange() {}"
      }
    ],
    "description": "The Switch component allows the display of one element out of a list of several elements. Users can cycle through the different children of the Switch tag by clicking on the currently displayed one."
  },
  "Table": {
    "props": [
      {
        "name": "bordered",
        "type": "boolean",
        "description": "adds borders on all sides of the table and cells",
        "defaultValue": false
      },
      {
        "name": "borderless",
        "type": "boolean",
        "description": "removes all borders on the table and cells, including table header",
        "defaultValue": false
      },
      {
        "name": "hover",
        "type": "boolean",
        "description": "enable a hover state on table rows within a <tbody>",
        "defaultValue": false
      },
      {
        "name": "responsive",
        "type": "(string|boolean)",
        "description": "responsive tables allow tables to be scrolled horizontally with ease. Across every breakpoint, use responsive for horizontally scrolling tables. Responsive tables are wrapped automatically in a div. Use responsive=\"sm\", responsive=\"md\", responsive=\"lg\", or responsive=\"xl\" as needed to create responsive tables up to a particular breakpoint. From that breakpoint and up, the table will behave normally and not scroll horizontally",
        "defaultValue": null
      },
      {
        "name": "size",
        "type": "string",
        "description": "make tables more compact by cutting cell padding in half by setting size as `sm`",
        "defaultValue": null
      },
      {
        "name": "striped",
        "type": "boolean",
        "description": "adds zebra-striping to any table row within the <tbody>",
        "defaultValue": false
      },
      {
        "name": "variant",
        "type": "string",
        "description": "invert the colors of the table — with light text on dark backgrounds by setting variant as dark",
        "defaultValue": null
      }
    ],
    "description": "A basic bootstrap table."
  },
  "TeX": {
    "props": [
      {
        "name": "raw",
        "type": "(string|number) (required)",
        "description": "The literal LaTeX `string` to render. Also accepts `numbers`"
      },
      {
        "name": "displayMode",
        "type": "boolean",
        "description": "`boolean` indicating whether to display the equation inline or in display mode",
        "defaultValue": false
      },
      {
        "name": "numbered",
        "type": "boolean",
        "description": "controls whether to display an equation number for display mode equations",
        "defaultValue": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "`object` with CSS key-value pairs to be applied to the equation container",
        "defaultValue": {}
      },
      {
        "name": "tag",
        "type": "string",
        "description": "Custom characters displayed for display equations at the right side. Defaults to the number of the equation inside the lesson",
        "defaultValue": null
      },
      {
        "name": "elems",
        "type": "object",
        "description": "`object` with `keys` denoting LaTeX characters and their corresponding values being configuration `objects` to make them interactive. Setting a `tooltip` option will show a tooltip when hovering over the LaTeX characters. Setting a `variable` property will display an input slider to change the respective state variable; in this case, additional properties `legend`, `min`, `max`, and `step` are supported",
        "defaultValue": {}
      },
      {
        "name": "popoverPlacement",
        "type": "string",
        "description": "popover position for the specified `elems`",
        "defaultValue": "top"
      },
      {
        "name": "onPopover",
        "type": "function",
        "description": "callback `function` when a control popover is toggled on or off; receives the display status as a boolean as its sole argument",
        "defaultValue": "function onPopover() {}"
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "callback `function` invoked whenever a user clicks on the equation",
        "defaultValue": "function onClick() {}"
      }
    ],
    "description": "`TeX` is an ISLE element that can be used to display LaTeX equations. Under the hood, the component uses [KaTeX](https://github.com/Khan/KaTeX) for blazingly fast rendering."
  },
  "TextEditor": {
    "props": [
      {
        "name": "autoSave",
        "type": "boolean",
        "description": "controls whether the editor should save the current text to the local storage of the browser at a given time interval",
        "defaultValue": true
      },
      {
        "name": "allowSubmissions",
        "type": "boolean",
        "description": "controls whether students may submit their reports to the server",
        "defaultValue": true
      },
      {
        "name": "canLoadHTML",
        "type": "boolean",
        "defaultValue": true
      },
      {
        "name": "defaultValue",
        "type": "string",
        "description": "default text of the editor",
        "defaultValue": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
      },
      {
        "name": "mode",
        "type": "string",
        "description": "controls whether to enable text editing for groups (when set to `group`) or for everyone (when set to `collaborative`)",
        "defaultValue": "individual"
      },
      {
        "name": "intervalTime",
        "type": "number",
        "description": "time between auto saves",
        "defaultValue": 10000
      },
      {
        "name": "peerReview",
        "type": "{submitButtonLabel,reviewButtonLabel,finalButtonLabel,filterOwners}",
        "description": "if not null, enables peer review mode in which each submission is sent to another randomly chosen student and vice versa",
        "defaultValue": null
      },
      {
        "name": "resetModal",
        "type": "{title,body,buttonLabel,notificationTitle,notification,tooltip}",
        "defaultValue": null
      },
      {
        "name": "voiceTimeout",
        "type": "number",
        "description": "time in milliseconds after a chunk of recorded voice input is inserted",
        "defaultValue": 5000
      },
      {
        "name": "language",
        "type": "string",
        "description": "language identifier",
        "defaultValue": "en-US"
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A text editor for writing notes or reports. Supports exporting of notes as HTML or PDF files, as well as automatic submission to the ISLE server."
  },
  "Text": {
    "props": [
      {
        "name": "raw",
        "type": "string",
        "description": "text to be rendered",
        "defaultValue": ""
      },
      {
        "name": "className",
        "type": "string",
        "description": "class names",
        "defaultValue": ""
      },
      {
        "name": "inline",
        "type": "boolean",
        "description": "controls whether to render the Markdown as inline text",
        "defaultValue": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "defaultValue": null
      }
    ],
    "description": "Text component, which allows rendering of raw text as Markdown and enables voice control."
  },
  "TimedButton": {
    "props": [
      {
        "name": "block",
        "type": "boolean",
        "description": "display bottom in full width",
        "defaultValue": false
      },
      {
        "name": "duration",
        "type": "number",
        "description": "the time (in seconds) it takes until the button gets reactivated",
        "defaultValue": 3
      },
      {
        "name": "className",
        "type": "string",
        "defaultValue": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": "if disabled the button will be inactive, but the countdown starts",
        "defaultValue": false
      },
      {
        "name": "href",
        "type": "string",
        "defaultValue": null
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "callback invoked when clicking the button",
        "defaultValue": "function onClick() {}"
      },
      {
        "name": "size",
        "type": "string",
        "description": "button size (passed to the react-bootstrap button component)",
        "defaultValue": null
      },
      {
        "name": "type",
        "type": "string",
        "description": "button type (passed to the react-bootstrap button component)",
        "defaultValue": null
      },
      {
        "name": "variant",
        "type": "string",
        "description": "button variant (passed to the react-bootstrap button component)",
        "defaultValue": null
      },
      {
        "name": "autoActivate",
        "type": "boolean",
        "description": "controls whether to always timeout the button when clicked; if `false`, the timeout is only applied when the callback passed to the `onClick` event handler is invoked with `true`",
        "defaultValue": true
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A button component that becomes deactivated for a specified duration upon clicking."
  },
  "Timer": {
    "props": [
      {
        "name": "id",
        "type": "string",
        "description": "the unique `string` ID for the timer. If an ID is set, the timer component is persistent over page refreshes",
        "defaultValue": null
      },
      {
        "name": "active",
        "type": "boolean (required)",
        "description": "flag that can be toggled to start or pause the timer"
      },
      {
        "name": "duration",
        "type": "number (required)",
        "description": "duration in seconds for the timer"
      },
      {
        "name": "invisible",
        "type": "boolean",
        "description": "controls whether the timer should be hidden",
        "defaultValue": false
      },
      {
        "name": "legend",
        "type": "string",
        "description": "text displayed in front of the timer",
        "defaultValue": ""
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onTimeUp",
        "type": "function",
        "description": "callback invoked when the timer runs out",
        "defaultValue": "function onTimeUp() {}"
      }
    ],
    "description": "Formats time in the format `minutes:seconds`."
  },
  "Tooltip": {
    "props": [
      {
        "name": "id",
        "type": "string",
        "defaultValue": "tooltip"
      },
      {
        "name": "show",
        "type": "boolean",
        "description": "controls whether the tooltip shall be displayed",
        "defaultValue": true
      },
      {
        "name": "tooltip",
        "type": "(string|node)",
        "description": "tooltip content",
        "defaultValue": null
      },
      {
        "name": "placement",
        "type": "string",
        "description": "direction of the tooltip",
        "defaultValue": "right"
      }
    ],
    "description": "A tooltip overlay."
  },
  "Typewriter": {
    "props": [
      {
        "name": "deviation",
        "type": "number",
        "description": "allows you to specify the randomness",
        "defaultValue": 30
      },
      {
        "name": "delay",
        "type": "number",
        "description": "initial delay before typewriter starts (in milliseconds)",
        "defaultValue": null
      },
      {
        "name": "hold",
        "type": "number",
        "description": "if text is an array of strings, hold specified the duration the full will be displayed before it passes over to the next item in the array",
        "defaultValue": 2000
      },
      {
        "name": "interval",
        "type": "number",
        "description": "the interval of the typewriter (in milliseconds)",
        "defaultValue": 100
      },
      {
        "name": "random",
        "type": "boolean",
        "description": "if random is set, the keystrokes will be performed with a certain, \"humane\" randomness",
        "defaultValue": false
      },
      {
        "name": "sound",
        "type": "boolean",
        "description": "the typed keystroke will be also heard",
        "defaultValue": false
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "text",
        "type": "string",
        "description": "the full text to be displayed",
        "defaultValue": ""
      }
    ],
    "description": "An ISLE component that allows you to create a typewriter effect."
  },
  "Unveil": {
    "props": [
      {
        "name": "active",
        "type": "boolean",
        "description": "controls whether the counter should be active",
        "defaultValue": false
      },
      {
        "name": "delay",
        "type": "number",
        "description": "number of milliseconds before component appears",
        "defaultValue": 1000
      }
    ],
    "description": "The appear component will cause all of its children to become visible after a specified amount of time."
  },
  "VictoryAnimation": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryArea": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryAxis": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryBar": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryBoxPlot": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryBrushContainer": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryCandlestick": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryChart": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryCursorContainer": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryErrorBar": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryGroup": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryLabel": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryLegend": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryLine": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryPie": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryPolarAxis": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryScatter": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryStack": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryTheme": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryTooltip": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryVoronoiContainer": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryVoronoi": {
    "props": [],
    "description": "Description is missing."
  },
  "VictoryWrapper": {
    "props": [
      {
        "name": "height",
        "type": "number",
        "defaultValue": null
      },
      {
        "name": "width",
        "type": "number",
        "defaultValue": null
      }
    ],
    "description": "Description is missing."
  },
  "VictoryZoomContainer": {
    "props": [],
    "description": "Description is missing."
  },
  "VideoLecture": {
    "props": [
      {
        "name": "controls",
        "type": "boolean",
        "description": "indicates whether to display control elements of the video players",
        "defaultValue": true
      },
      {
        "name": "instructorView",
        "type": "boolean",
        "description": "controls whether to include instructor view",
        "defaultValue": true
      },
      {
        "name": "linkToDashboard",
        "type": "boolean",
        "description": "controls whether to display a link to the dashboard once completing the video lecture",
        "defaultValue": false
      },
      {
        "name": "steps",
        "type": "array (required)",
        "description": "array of video URLs and components to be displayed in-between"
      },
      {
        "name": "videoWidth",
        "type": "(string|number)",
        "description": "video width",
        "defaultValue": "100%"
      },
      {
        "name": "videoHeight",
        "type": "(string|number)",
        "description": "video height",
        "defaultValue": "98vh"
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline style",
        "defaultValue": {}
      }
    ],
    "description": "A video lecture component that displays videos interspersed with interactive elements."
  },
  "VideoPlayer": {
    "props": [
      {
        "name": "url",
        "type": "string",
        "description": "URL of the video",
        "defaultValue": ""
      },
      {
        "name": "controls",
        "type": "boolean",
        "description": "indicates whether to display control elements of the video player",
        "defaultValue": false
      },
      {
        "name": "playing",
        "type": "boolean",
        "description": "indicates whether to automatically start playing the video",
        "defaultValue": false
      },
      {
        "name": "volume",
        "type": "number",
        "description": "volume of the player",
        "defaultValue": 0.8
      },
      {
        "name": "center",
        "type": "boolean",
        "description": "controls whether to center the video player",
        "defaultValue": true
      },
      {
        "name": "height",
        "type": "(string|number)",
        "description": "height of the player",
        "defaultValue": 360
      },
      {
        "name": "width",
        "type": "(string|number)",
        "description": "width of the player",
        "defaultValue": 640
      },
      {
        "name": "loop",
        "type": "boolean",
        "description": "controls whether to start the video anew after it was played",
        "defaultValue": false
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "defaultValue": null
      },
      {
        "name": "startTime",
        "type": "number",
        "description": "number of seconds at which to start the video, or fraction if value is between 0 and 1",
        "defaultValue": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "onEnded",
        "type": "function",
        "description": "callback invoked once the video ends",
        "defaultValue": "function onEnded() {}"
      },
      {
        "name": "onPause",
        "type": "function",
        "description": "callback invoked once the video pauses",
        "defaultValue": "function onPause() {}"
      },
      {
        "name": "onPlay",
        "type": "function",
        "description": "callback invoked once the video starts or resumes playing after pausing",
        "defaultValue": "function onPlay() {}"
      }
    ],
    "description": "A component for playing media files and content from YouTube, SoundCloud, and Vimeo."
  },
  "Weather": {
    "props": [
      {
        "name": "key",
        "type": "string",
        "description": "APIXU key",
        "defaultValue": "<number>"
      },
      {
        "name": "language",
        "type": "string",
        "description": "language identifier",
        "defaultValue": "en-US"
      },
      {
        "name": "location",
        "type": "string",
        "description": "location name",
        "defaultValue": null
      },
      {
        "name": "voiceID",
        "type": "string",
        "description": "voice control identifier",
        "defaultValue": null
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      }
    ],
    "description": "A component for displaying the current weather at a designated location."
  },
  "Wikipedia": {
    "props": [
      {
        "name": "invisible",
        "type": "boolean",
        "description": "controls whether to display a text input field to search for Wikipedia articles",
        "defaultValue": false
      },
      {
        "name": "language",
        "type": "string",
        "description": "language identifier",
        "defaultValue": "en-US"
      }
    ],
    "description": "The **Wikipedia** component scans the **Wikipedia** and returns an article - if anything valid is found under the entered search term."
  },
  "WordCloud": {
    "props": [
      {
        "name": "data",
        "type": "array",
        "description": "either an array of texts from which to generate the word cloud or, if `precalculated` is set to `true`, and array of word count objects (with `text` and `value` keys)",
        "defaultValue": []
      },
      {
        "name": "font",
        "type": "(string|function)",
        "description": "accessor function specifying the font face for each word. Also accepts a constant instead of a function",
        "defaultValue": "serif"
      },
      {
        "name": "fontSizeMapper",
        "type": "function",
        "description": "accessor function indicating the font size for each word. Defaults to `( count - min + 1 ) / ( max - min + 6 ) * 30.0 + 12.0`, where `min` and `max` denote the minimum and maximum word `counts`, respectively",
        "defaultValue": null
      },
      {
        "name": "height",
        "type": "number",
        "description": "height of the word cloud (in px)",
        "defaultValue": 600
      },
      {
        "name": "language",
        "type": "string",
        "description": "language identifier (determines the stopwords to be removed)",
        "defaultValue": "en"
      },
      {
        "name": "minCount",
        "type": "number",
        "description": "if set, only include words that appear more than `minCount` times in the given data",
        "defaultValue": null
      },
      {
        "name": "saveButton",
        "type": "boolean",
        "description": "controls whether to display a button for saving the word cloud as an image",
        "defaultValue": true
      },
      {
        "name": "onClick",
        "type": "function",
        "description": "callback function invoked when a word on the word cloud is clicked",
        "defaultValue": "function onClick() {}"
      },
      {
        "name": "padding",
        "type": "(function|number)",
        "description": "accessor function or constant indicating the numerical padding for each word",
        "defaultValue": 5
      },
      {
        "name": "precalculated",
        "type": "boolean",
        "description": "controls whether the word cloud expects an array of precalculated word counts or will generate them for given texts",
        "defaultValue": false
      },
      {
        "name": "rotate",
        "type": "(function|number)",
        "description": "accessor function indicating the rotation angle (in degrees) for each word. Also accepts a constant instead of a function",
        "defaultValue": "function word => word.value % 360"
      },
      {
        "name": "updateThreshold",
        "type": "number",
        "description": "batch size of new documents in `data` before the word cloud is re-rendered",
        "defaultValue": 5
      },
      {
        "name": "stopwords",
        "type": "array",
        "description": "additional stopwords to remove before rendering the word cloud",
        "defaultValue": []
      },
      {
        "name": "triggerRender",
        "type": "boolean",
        "description": "rerender when the data set is exchanged",
        "defaultValue": true
      },
      {
        "name": "style",
        "type": "object",
        "description": "CSS inline styles",
        "defaultValue": {}
      },
      {
        "name": "width",
        "type": "number",
        "description": "width of the word cloud (in px)",
        "defaultValue": 700
      }
    ],
    "description": "A word cloud component built on top of [d3-cloud](https://github.com/jasondavies/d3-cloud)."
  }
}