/* WEBPACK VAR INJECTION */

/* eslint-env browser */

/* harmony default export */

/* harmony import */

/*#__PURE__*/

/**
	* Active `debug` instances.
	*/

/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/

/**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/

/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/

/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/

/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/

/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/

/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/

/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/

/**
	* The currently active debug mode names, and names to skip.
	*/

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

/**
 * Colors.
 */

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

/**
 * Helpers.
 */

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

/**
 * Pluralization helper.
 */

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

/**
 * This is the web browser implementation of `debug()`.
 */

/***/

// (the user may have provided their own)

// Anything else let's inspect with %O

// Apply any `formatters` transformations

// Apply env-specific formatting (colors, etc.)

// Debug.formatArgs = formatArgs;

// Disabled?

// Double check webkit in userAgent just in case we are in a worker

// EXPORTS //

// Exports

// If debug isn't set in LS, and we're in Electron, try to load $DEBUG

// If we encounter an escaped % then don't increase the array index

// Internet Explorer and Edge do not support colors.

// Is firebug? http://stackoverflow.com/a/398120/376773

// Is firefox >= v31?

// Is webkit? http://stackoverflow.com/a/16459606/376773

// MODULES //

// Module

// NB: In an Electron preload script, document will be defined but not fully

// Now we need to remove `args[index]` since it's inlined in the `format`

// PROPERTIES //

// Set `diff` timestamp

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// Swallow

// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context

// The Browser also has localStorage in the global context.

// The final "%c" is somewhat tricky, because there could be other

// This hackery is required for IE8/9, where

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// This works in non-strict mode

// VARIABLES //

// We only are interested in the *last* %c

// We return undefined, instead of nothing here, so it's

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// XXX (@Qix-) should we be logging these?

// arguments passed either before or after the %c, so we need to

// cached from whatever global is present so that test runners that stub it

// debug.rawLog = rawLog;

// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632

// don't break things.  But we need to wrap it in a try catch in case it is

// easier to handle this case. if(!global) { ...}

// empty string to avoid regexp issues

// env-specific initialization logic for debug instances

// eslint-disable-next-line complexity

// explicitly

// figure out the correct index to insert the CSS into

// function because try/catches deoptimize in certain engines.

// g can still be undefined, but nothing to do about it...

// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages

// if clearTimeout wasn't available but was latter defined

// if setTimeout wasn't available but was latter defined

// initialized. Since we know we're in Chrome, we'll just detect this case

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25

// shim for using process in browser

// the `console.log` function doesn't have 'apply'

// v8 likes predictible objects

// we are sure there are at least 2 values, so it is safe to have no initial value

// when when somebody has screwed with setTimeout but no I.E. maddness

// wrapped in strict mode code which doesn't define any globals.  It's inside a

//normal enviroments in sane situations
