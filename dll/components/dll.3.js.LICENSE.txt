/* WEBPACK VAR INJECTION */

/* eslint-disable no-use-before-define, react/no-multi-comp */

/* eslint-enable no-use-before-define */

/* eslint-env browser */

/* harmony default export */

/* harmony export (binding) */

/* harmony import */

/* ie throws if no active element */

/* should never change: */

/*#__PURE__*/

/**
	* Active `debug` instances.
	*/

/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/

/**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/

/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/

/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/

/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/

/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/

/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/

/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/

/**
	* The currently active debug mode names, and names to skip.
	*/

/**
   * A DOM element, a `ref` to an element, or function that returns either. The Modal is appended to it's `container` element.
   *
   * For the sake of assistive technologies, the container should usually be the document body, so that the rest of the
   * page content can be placed behind a virtual backdrop as well as a visual one.
   */

/**
   * A ModalManager instance used to track and manage the state of open
   * Modals. Useful when customizing how modals interact within a container
   */

/**
   * A `react-transition-group@2.0.0` `<Transition/>` component used
   * to control animations for the backdrop components.
   */

/**
   * A `react-transition-group@2.0.0` `<Transition/>` component used
   * to control animations for the dialog component.
   */

/**
   * A callback fired when either the backdrop is clicked, or the escape key is pressed.
   *
   * The `onHide` callback only signals intent from the Modal,
   * you must actually set the `show` prop to `false` for the Modal to close.
   */

/**
   * A callback fired when the Modal is opening.
   */

/**
   * A callback fired when the backdrop, if specified, is clicked.
   */

/**
   * A callback fired when the escape key, if specified in `keyboard`, is pressed.
   *
   * If preventDefault() is called on the keyboard event, closing the modal will be cancelled.
   */

/**
   * A css class or set of classes applied to the modal container when the modal is open,
   * and removed when it is closed.
   */

/**
   * A function that returns a backdrop component. Useful for custom
   * backdrop rendering.
   *
   * ```js
   *  renderBackdrop={props => <MyBackdrop {...props} />}
   * ```
   */

/**
   * A function that returns the dialog component. Useful for custom
   * rendering. **Note:** the component should make sure to apply the provided ref.
   *
   * ```js static
   * renderDialog={props => <MyDialog {...props} />}
   * ```
   */

/**
   * Callback fired after the Modal finishes transitioning in
   */

/**
   * Callback fired after the Modal finishes transitioning out
   */

/**
   * Callback fired as the Modal begins to transition in
   */

/**
   * Callback fired as the Modal begins to transition out
   */

/**
   * Callback fired before the Modal transitions in
   */

/**
   * Callback fired right before the Modal transitions out
   */

/**
   * Close the modal when escape key is pressed
   */

/**
   * Include a backdrop component.
   */

/**
   * Options passed to focus function when `restoreFocus` is set to `true`
   *
   * @link  https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#Parameters
   */

/**
   * Set the visibility of the Modal
   */

/**
   * Specify whether the feedback is for valid or invalid fields
   *
   * @type {('valid'|'invalid')}
   */

/**
   * When `true` The modal will automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes. This also
   * works correctly with any Modal children that have the `autoFocus` prop.
   *
   * Generally this should never be set to `false` as it makes the Modal less
   * accessible to assistive technologies, like screen readers.
   */

/**
   * When `true` The modal will prevent focus from leaving the Modal while open.
   *
   * Generally this should never be set to `false` as it makes the Modal less
   * accessible to assistive technologies, like screen readers.
   */

/**
   * When `true` The modal will restore focus to previously focused element once
   * modal is hidden
   */

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

/**
 * Colors.
 */

/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

/**
 * Helpers.
 */

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

/**
 * Pluralization helper.
 */

/**
 * Proper state management for containers and the modals in those containers.
 *
 * @internal Used by the Modal to ensure proper styling of containers.
 */

/**
 * Return the actively focused element safely.
 *
 * @param doc the document to checl
 */

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

/**
 * Store the last of some value. Tracked via a `Ref` only updating it
 * after the component renders.
 *
 * Helpful if you need to compare a prop value to it's previous value during render.
 *
 * ```ts
 * function Component(props) {
 *   const lastProps = usePrevious(props)
 *
 *   if (lastProps.foo !== props.foo)
 *     resetValueFromProps(props.foo)
 * }
 * ```
 *
 * @param value the value to track
 */

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

/**
 * This is the web browser implementation of `debug()`.
 */

/***/

//  - `exited` switches to true

//  - component unmounts;

//  - show is `true` _and_ `container` has resolved

// (the user may have provided their own)

// --------------------------------

// Anything else let's inspect with %O

// Apply any `formatters` transformations

// Apply env-specific formatting (colors, etc.)

// Clean up the listener if we need to.

// Debug.formatArgs = formatArgs;

// Disabled?

// Double check webkit in userAgent just in case we are in a worker

// FIXME: This should work even when animation is disabled.

// Hide cleanup logic when:

// IE11 returns a seemingly empty object in some cases when accessing

// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>

// If debug isn't set in LS, and we're in Electron, try to load $DEBUG

// If we encounter an escaped % then don't increase the array index

// Internet Explorer and Edge do not support colors.

// Is firebug? http://stackoverflow.com/a/398120/376773

// Is firefox >= v31?

// Is webkit? http://stackoverflow.com/a/16459606/376773

// Mostly taken from ReactPropTypes.

// NB: In an Electron preload script, document will be defined but not fully

// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595

// Now we need to remove `args[index]` since it's inlined in the `format`

// RHL removes it sometimes

// Set `diff` timestamp

// Sets `display` always block when `animation` is false

// Show logic when:

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// Support: <=IE11 doesn't support `focus()` on svg elements (RB: #917)

// Support: IE 9 only

// Swallow

// TODO: try and combine these effects: https://github.com/react-bootstrap/react-overlays/pull/794#discussion_r409954120

// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context

// The Browser also has localStorage in the global context.

// The final "%c" is somewhat tricky, because there could be other

// This hackery is required for IE8/9, where

// We only are interested in the *last* %c

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// XXX (@Qix-) should we be logging these?

// and so steals focus from it

// apparently only works on the dialog role element

// arguments passed either before or after the %c, so we need to

// autofocus after onShow to not trigger a focus event for previous

// because we will override it

// cached from whatever global is present so that test runners that stub it

// clean up the container

// debug.rawLog = rawLog;

// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632

// document.activeElement from an <iframe>

// don't break things.  But we need to wrap it in a try catch in case it is

// empty string to avoid regexp issues

// env-specific initialization logic for debug instances

// eslint-disable-next-line complexity

// eslint-disable-next-line jsx-a11y/label-has-for, jsx-a11y/label-has-associated-control

// eslint-disable-next-line react/prop-types

// explicitly

// figure out the correct index to insert the CSS into

// function because try/catches deoptimize in certain engines.

// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages

// if clearTimeout wasn't available but was latter defined

// if setTimeout wasn't available but was latter defined

// if that was the last modal in a container,

// initialized. Since we know we're in Chrome, we'll just detect this case

// modals before this one is shown.

// otherwise make sure the next top modal is visible to a SR

// right now only the first modal of a container will have its classes applied

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// shim for using process in browser

// the `console.log` function doesn't have 'apply'

// the timeout is necessary b/c this will run before the new modal is mounted

// this prevents an error if you render a Popover without arrow props, like in a test

// to add our scrollbar width

// use computed style, here to get the real padding

// v8 likes predictible objects

// we are only interested in the actual `style` here

// when when somebody has screwed with setTimeout but no I.E. maddness

// wrapped in strict mode code which doesn't define any globals.  It's inside a

//normal enviroments in sane situations
