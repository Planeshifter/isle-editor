/*
		* In the original C implementation (see `init_by_array()`),
		*
		* ```c
		* mt[i] = (mt[i]^((mt[i-1]^(mt[i-1]>>30))*1566083941UL)) - i;
		* ```
		*
		* In order to replicate this in JavaScript, we must emulate C-like multiplication of unsigned 32-bit integers.
		*/

/*
		* In the original C implementation (see `init_by_array()`),
		*
		* ```c
		* mt[i] = (mt[i]^((mt[i-1]^(mt[i-1]>>30))*1664525UL)) + seed[j] + j;
		* ```
		*
		* In order to replicate this in JavaScript, we must emulate C-like multiplication of unsigned 32-bit integers.
		*/

/*
		* In the original C implementation (see `init_genrand()`),
		*
		* ```c
		* mt[i] = (KNUTH_MULTIPLIER * (mt[i-1] ^ (mt[i-1] >> 30)) + i)
		* ```
		*
		* In order to replicate this in JavaScript, we must emulate C-like multiplication of unsigned 32-bit integers.
		*/

/*
	* Create the index input arguments along with the value to set...
	* > function set( i0, i1, ..., v ) {
	*/

/*
	* Create the index input arguments...
	* > function get( i0, i1, ...) {
	*/

/*
	* Create the index input arguments...
	* > function set( i0, i1,..., v ) {
	*/

/*
	* Index into the array according to the offset and strides...
	* > data[offset+strides[0]*i0+strides[1]*i1+...] = v;
	*/

/*
	* Index into the array according to the offset and strides...
	* > return data[offset+strides[0]*i0+strides[1]*i1+...];
	*/

/*
	* Resolve indices based on the index mode.
	* > i0 = getIndex( i0, shape[0]-1, mode );
	*/

/*
	* Set the uint16 view to a value having distinguishable lower and higher order words.
	*
	* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	*/

/*
	* Type check each index.
	* > if ( !isInteger( i0 ) ) { throw new TypeError( ... ) }
	*/

/*
	* e.g.,
	*
	*   function flattenArray( x ) {
	*       var o = [];
	*       var i0, i1;
	*       for ( i0 = 0; i0 < 2; i0++ ) {
	*           for ( i1 = 0; i1 < 2; i1++ ) {
	*               o.push( x[i0][i1] );
	*           }
	*       }
	*       return o;
	*   }
	*/

/*
	* e.g.,
	*     function get( i0, i1, i2 ) {
	*         if ( !isInteger( i0 ) ) {
	*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 0. Value: `'+i0+'`.' );
	*         }
	*         if ( !isInteger( i1 ) ) {
	*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 1. Value: `'+i1+'`.' );
	*         }
	*         if ( !isInteger( i2 ) ) {
	*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 2. Value: `'+i2+'`.' );
	*         }
	*         i0 = getIndex( i0, this._shape[0]-1, 'throw' );
	*         i1 = getIndex( i1, this._shape[1]-1, 'throw' );
	*         i2 = getIndex( i2, this._shape[2]-1, 'throw' );
	*         return this._buffer[ this._offset + this._strides[0]*i0 + this._strides[1]*i1 + this._strides[2]*i2 ];
	*     }
	*/

/*
	* e.g.,
	*     function get( i0, i1, i2 ) {
	*         return this._buffer[ this._offset + this._strides[0]*i0 + this._strides[1]*i1 + this._strides[2]*i2 ];
	*     }
	*/

/*
	* e.g.,
	*     function set( i0, i1, i2, v ) {
	*         if ( !isInteger( i0 ) ) {
	*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 0. Value: `'+i0+'`.' );
	*         }
	*         if ( !isInteger( i1 ) ) {
	*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 1. Value: `'+i1+'`.' );
	*         }
	*         if ( !isInteger( i2 ) ) {
	*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 2. Value: `'+i2+'`.' );
	*         }
	*         i0 = getIndex( i0, this._shape[0]-1, 'throw' );
	*         i1 = getIndex( i1, this._shape[1]-1, 'throw' );
	*         i2 = getIndex( i2, this._shape[2]-1, 'throw' );
	*         this._buffer[ this._offset + this._strides[0]*i0 + this._strides[1]*i1 + this._strides[2]*i2 ] = v;
	*         return this;
	*     }
	*/

/*
	* e.g.,
	*     function set( i0, i1, i2, v ) {
	*         this._buffer[ this._offset + this._strides[0]*i0 + this._strides[1]*i1 + this._strides[2]*i2 ] = v;
	*         return this;
	*     }
	*/

/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/

/*
       * Div
       * ------------------------------
       * blocks scrolling on non-body elements behind the menu
        * NodeResolver
       * ------------------------------
       * we need a reference to the scrollable element to "unlock" scroll on
       * mobile devices
        * ScrollLock
       * ------------------------------
       * actually does the scroll locking
       */

/*
    * React component render method.
    */

/*
 * Export kMaxLength after typed array support is determined.
 */

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */

/*
* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).
*/

/*
* Adapted from https://raw.githubusercontent.com/chanzuckerberg/czi-prosemirror/master/src/isTextStyleMarkCommandEnabled.js
*
* MIT License
*
* Copyright (c) 2018 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from:
*
* FileSaver.js
* A saveAs() FileSaver implementation.
* 1.3.8
* 2018-03-22 14:03:47
*
* By Eli Grey, https://eligrey.com
* License: MIT
*   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
*
* @source http://purl.eligrey.com/github/FileSaver.js/blob/master/src/FileSaver.js
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/CursorPlaceholderPlugin.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ImageFromURLCommand.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ImageNodeSpec.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ImageSourceCommand.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ImageUploadCommand.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ImageUploadPlaceholderPlugin.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/LinkSetURLCommand.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/LinkTooltipPlugin.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/SelectionPlaceholderPlugin.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/TableCellMenuPlugin.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/TextAlignCommand.js
*
* MIT License
*
* Copyright (c) 2018 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/applyMark.js
*
* MIT License
*
* Copyright (c) 2018 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/findActiveMark.js
*
* MIT License
*
* Copyright (c) 2018 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/findNodesWithSameMark.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/lookUpElement.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/sanitizeURL.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/CustomButton.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/CustomNodeView.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/EditorFrameset.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/ImageInlineEditor.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/ImageNodeView.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/ImageResizeBox.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/ImageURLEditor.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/ImageUploadEditor.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/LinkTooltip.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/LinkURLEditor.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/PointerSurface.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/PopUp.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/PopUpManager.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/PopUpPosition.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/TooltipSurface.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/bindScrollHandler.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/isElementFullyVisible.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/rects.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://github.com/chanzuckerberg/czi-prosemirror/blob/master/src/ui/resolveImage.js
*
* MIT License
*
* Copyright (c) 2019 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://raw.githubusercontent.com/chanzuckerberg/czi-prosemirror/master/src/HeadingNodeSpec.js
*
* MIT License
*
* Copyright (c) 2018 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Adapted from: https://raw.githubusercontent.com/chanzuckerberg/czi-prosemirror/master/src/ListItemNodeSpec.js
*
* MIT License
*
* Copyright (c) 2018 Chan Zuckerberg Initiative
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/*
* Sorting functionality adapted from MIT-licensed code:
*
* Copyright (C) 2013 Adam Schwartz, http://adamschwartz.co
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
*/

/* #__PURE__ */

/* . */

/* 0 */

/* 1 */

/* 10 */

/* 100 */

/* 1000 */

/* 1001 */

/* 1002 */

/* 1003 */

/* 1004 */

/* 1005 */

/* 1006 */

/* 1007 */

/* 1008 */

/* 1009 */

/* 101 */

/* 1010 */

/* 1011 */

/* 1012 */

/* 1013 */

/* 1014 */

/* 1015 */

/* 1016 */

/* 1017 */

/* 1018 */

/* 1019 */

/* 102 */

/* 1020 */

/* 1021 */

/* 1022 */

/* 1023 */

/* 1024 */

/* 1025 */

/* 1026 */

/* 1027 */

/* 1028 */

/* 1029 */

/* 103 */

/* 1030 */

/* 1031 */

/* 1032 */

/* 1033 */

/* 1034 */

/* 1035 */

/* 1036 */

/* 1037 */

/* 1038 */

/* 1039 */

/* 104 */

/* 1040 */

/* 1041 */

/* 1042 */

/* 1043 */

/* 1044 */

/* 1045 */

/* 1046 */

/* 1047 */

/* 1048 */

/* 1049 */

/* 105 */

/* 1050 */

/* 1051 */

/* 1052 */

/* 1053 */

/* 1054 */

/* 1055 */

/* 1056 */

/* 1057 */

/* 1058 */

/* 1059 */

/* 106 */

/* 1060 */

/* 1061 */

/* 1062 */

/* 1063 */

/* 1064 */

/* 1065 */

/* 1066 */

/* 1067 */

/* 1068 */

/* 1069 */

/* 107 */

/* 1070 */

/* 1071 */

/* 1072 */

/* 1073 */

/* 1074 */

/* 1075 */

/* 1076 */

/* 1077 */

/* 1078 */

/* 1079 */

/* 108 */

/* 1080 */

/* 1081 */

/* 1082 */

/* 1083 */

/* 1084 */

/* 1085 */

/* 1086 */

/* 1087 */

/* 1088 */

/* 1089 */

/* 109 */

/* 1090 */

/* 1091 */

/* 1092 */

/* 1093 */

/* 1094 */

/* 1095 */

/* 1096 */

/* 1097 */

/* 1098 */

/* 1099 */

/* 11 */

/* 110 */

/* 1100 */

/* 1101 */

/* 1102 */

/* 1103 */

/* 1104 */

/* 1105 */

/* 1106 */

/* 1107 */

/* 1108 */

/* 1109 */

/* 111 */

/* 1110 */

/* 1111 */

/* 1112 */

/* 1113 */

/* 1114 */

/* 1115 */

/* 1116 */

/* 1117 */

/* 1118 */

/* 1119 */

/* 112 */

/* 1120 */

/* 1121 */

/* 1122 */

/* 1123 */

/* 1124 */

/* 1125 */

/* 1126 */

/* 1127 */

/* 1128 */

/* 1129 */

/* 113 */

/* 1130 */

/* 1131 */

/* 1132 */

/* 1133 */

/* 1134 */

/* 1135 */

/* 1136 */

/* 1137 */

/* 1138 */

/* 1139 */

/* 114 */

/* 1140 */

/* 1141 */

/* 1142 */

/* 1143 */

/* 1144 */

/* 1145 */

/* 1146 */

/* 1147 */

/* 1148 */

/* 1149 */

/* 115 */

/* 1150 */

/* 1151 */

/* 1152 */

/* 1153 */

/* 1154 */

/* 1155 */

/* 1156 */

/* 1157 */

/* 1158 */

/* 1159 */

/* 116 */

/* 1160 */

/* 1161 */

/* 1162 */

/* 1163 */

/* 1164 */

/* 1165 */

/* 1166 */

/* 1167 */

/* 1168 */

/* 1169 */

/* 117 */

/* 1170 */

/* 1171 */

/* 1172 */

/* 1173 */

/* 1174 */

/* 1175 */

/* 1176 */

/* 1177 */

/* 1178 */

/* 1179 */

/* 118 */

/* 1180 */

/* 1181 */

/* 1182 */

/* 1183 */

/* 1184 */

/* 1185 */

/* 1186 */

/* 1187 */

/* 1188 */

/* 1189 */

/* 119 */

/* 1190 */

/* 1191 */

/* 1192 */

/* 1193 */

/* 1194 */

/* 1195 */

/* 1196 */

/* 1197 */

/* 1198 */

/* 1199 */

/* 12 */

/* 120 */

/* 1200 */

/* 1201 */

/* 1202 */

/* 1203 */

/* 1204 */

/* 1205 */

/* 1206 */

/* 1207 */

/* 1208 */

/* 1209 */

/* 121 */

/* 1210 */

/* 1211 */

/* 1212 */

/* 1213 */

/* 1214 */

/* 1215 */

/* 1216 */

/* 1217 */

/* 1218 */

/* 1219 */

/* 122 */

/* 1220 */

/* 1221 */

/* 1222 */

/* 1223 */

/* 1224 */

/* 1225 */

/* 1226 */

/* 1227 */

/* 1228 */

/* 1229 */

/* 123 */

/* 1230 */

/* 1231 */

/* 1232 */

/* 1233 */

/* 1234 */

/* 1235 */

/* 1236 */

/* 1237 */

/* 1238 */

/* 1239 */

/* 124 */

/* 1240 */

/* 1241 */

/* 1242 */

/* 1243 */

/* 1244 */

/* 1245 */

/* 1246 */

/* 1247 */

/* 1248 */

/* 1249 */

/* 125 */

/* 1250 */

/* 1251 */

/* 1252 */

/* 1253 */

/* 1254 */

/* 1255 */

/* 1256 */

/* 1257 */

/* 1258 */

/* 1259 */

/* 126 */

/* 1260 */

/* 1261 */

/* 1262 */

/* 1263 */

/* 1264 */

/* 1265 */

/* 1266 */

/* 1267 */

/* 1268 */

/* 1269 */

/* 127 */

/* 1270 */

/* 1271 */

/* 1272 */

/* 1273 */

/* 1274 */

/* 1275 */

/* 1276 */

/* 1277 */

/* 1278 */

/* 1279 */

/* 128 */

/* 1280 */

/* 1281 */

/* 1282 */

/* 1283 */

/* 1284 */

/* 1285 */

/* 1286 */

/* 1287 */

/* 1288 */

/* 1289 */

/* 129 */

/* 1290 */

/* 1291 */

/* 1292 */

/* 1293 */

/* 1294 */

/* 1295 */

/* 1296 */

/* 1297 */

/* 1298 */

/* 1299 */

/* 13 */

/* 130 */

/* 1300 */

/* 1301 */

/* 1302 */

/* 1303 */

/* 1304 */

/* 1305 */

/* 1306 */

/* 1307 */

/* 1308 */

/* 1309 */

/* 131 */

/* 1310 */

/* 1311 */

/* 1312 */

/* 1313 */

/* 1314 */

/* 1315 */

/* 1316 */

/* 1317 */

/* 1318 */

/* 1319 */

/* 132 */

/* 1320 */

/* 1321 */

/* 1322 */

/* 1323 */

/* 1324 */

/* 1325 */

/* 1326 */

/* 1327 */

/* 1328 */

/* 1329 */

/* 133 */

/* 1330 */

/* 1331 */

/* 1332 */

/* 1333 */

/* 1334 */

/* 1335 */

/* 1336 */

/* 1337 */

/* 1338 */

/* 1339 */

/* 134 */

/* 1340 */

/* 1341 */

/* 1342 */

/* 1343 */

/* 1344 */

/* 1345 */

/* 1346 */

/* 1347 */

/* 1348 */

/* 1349 */

/* 135 */

/* 1350 */

/* 1351 */

/* 1352 */

/* 1353 */

/* 1354 */

/* 1355 */

/* 1356 */

/* 1357 */

/* 1358 */

/* 1359 */

/* 136 */

/* 1360 */

/* 1361 */

/* 1362 */

/* 1363 */

/* 1364 */

/* 1365 */

/* 1366 */

/* 1367 */

/* 1368 */

/* 1369 */

/* 137 */

/* 1370 */

/* 1371 */

/* 1372 */

/* 1373 */

/* 1374 */

/* 1375 */

/* 1376 */

/* 1377 */

/* 1378 */

/* 1379 */

/* 138 */

/* 1380 */

/* 1381 */

/* 1382 */

/* 1383 */

/* 1384 */

/* 1385 */

/* 1386 */

/* 1387 */

/* 1388 */

/* 1389 */

/* 139 */

/* 1390 */

/* 1391 */

/* 1392 */

/* 1393 */

/* 1394 */

/* 1395 */

/* 1396 */

/* 1397 */

/* 1398 */

/* 1399 */

/* 14 */

/* 140 */

/* 1400 */

/* 1401 */

/* 1402 */

/* 1403 */

/* 1404 */

/* 1405 */

/* 1406 */

/* 1407 */

/* 1408 */

/* 1409 */

/* 141 */

/* 1410 */

/* 1411 */

/* 1412 */

/* 1413 */

/* 1414 */

/* 1415 */

/* 1416 */

/* 1417 */

/* 1418 */

/* 1419 */

/* 142 */

/* 1420 */

/* 1421 */

/* 1422 */

/* 1423 */

/* 1424 */

/* 1425 */

/* 1426 */

/* 1427 */

/* 1428 */

/* 1429 */

/* 143 */

/* 1430 */

/* 1431 */

/* 1432 */

/* 1433 */

/* 1434 */

/* 1435 */

/* 1436 */

/* 1437 */

/* 1438 */

/* 1439 */

/* 144 */

/* 1440 */

/* 1441 */

/* 1442 */

/* 1443 */

/* 1444 */

/* 1445 */

/* 1446 */

/* 1447 */

/* 1448 */

/* 1449 */

/* 145 */

/* 1450 */

/* 1451 */

/* 1452 */

/* 1453 */

/* 1454 */

/* 1455 */

/* 1456 */

/* 1457 */

/* 1458 */

/* 1459 */

/* 146 */

/* 1460 */

/* 1461 */

/* 1462 */

/* 1463 */

/* 1464 */

/* 1465 */

/* 1466 */

/* 1467 */

/* 1468 */

/* 1469 */

/* 147 */

/* 1470 */

/* 1471 */

/* 1472 */

/* 1473 */

/* 1474 */

/* 1475 */

/* 1476 */

/* 1477 */

/* 1478 */

/* 1479 */

/* 148 */

/* 1480 */

/* 1481 */

/* 1482 */

/* 1483 */

/* 1484 */

/* 1485 */

/* 1486 */

/* 1487 */

/* 1488 */

/* 1489 */

/* 149 */

/* 1490 */

/* 1491 */

/* 1492 */

/* 1493 */

/* 1494 */

/* 1495 */

/* 1496 */

/* 1497 */

/* 1498 */

/* 1499 */

/* 15 */

/* 150 */

/* 1500 */

/* 1501 */

/* 1502 */

/* 1503 */

/* 1504 */

/* 1505 */

/* 1506 */

/* 1507 */

/* 1508 */

/* 1509 */

/* 151 */

/* 1510 */

/* 1511 */

/* 1512 */

/* 1513 */

/* 1514 */

/* 1515 */

/* 1516 */

/* 1517 */

/* 1518 */

/* 1519 */

/* 152 */

/* 1520 */

/* 1521 */

/* 1522 */

/* 1523 */

/* 1524 */

/* 1525 */

/* 1526 */

/* 1527 */

/* 1528 */

/* 1529 */

/* 153 */

/* 1530 */

/* 1531 */

/* 1532 */

/* 1533 */

/* 1534 */

/* 1535 */

/* 1536 */

/* 1537 */

/* 1538 */

/* 1539 */

/* 154 */

/* 1540 */

/* 1541 */

/* 1542 */

/* 1543 */

/* 1544 */

/* 1545 */

/* 1546 */

/* 1547 */

/* 1548 */

/* 1549 */

/* 155 */

/* 1550 */

/* 1551 */

/* 1552 */

/* 1553 */

/* 1554 */

/* 1555 */

/* 1556 */

/* 1557 */

/* 1558 */

/* 1559 */

/* 156 */

/* 1560 */

/* 1561 */

/* 1562 */

/* 1563 */

/* 1564 */

/* 1565 */

/* 1566 */

/* 1567 */

/* 1568 */

/* 1569 */

/* 157 */

/* 1570 */

/* 1571 */

/* 1572 */

/* 1573 */

/* 1574 */

/* 1575 */

/* 1576 */

/* 1577 */

/* 1578 */

/* 1579 */

/* 158 */

/* 1580 */

/* 1581 */

/* 1582 */

/* 1583 */

/* 1584 */

/* 1585 */

/* 1586 */

/* 1587 */

/* 1588 */

/* 1589 */

/* 159 */

/* 1590 */

/* 1591 */

/* 1592 */

/* 1593 */

/* 1594 */

/* 1595 */

/* 1596 */

/* 1597 */

/* 1598 */

/* 1599 */

/* 160 */

/* 1600 */

/* 1601 */

/* 1602 */

/* 1603 */

/* 1604 */

/* 161 */

/* 162 */

/* 163 */

/* 164 */

/* 165 */

/* 166 */

/* 167 */

/* 168 */

/* 169 */

/* 170 */

/* 171 */

/* 172 */

/* 173 */

/* 174 */

/* 175 */

/* 176 */

/* 177 */

/* 178 */

/* 179 */

/* 180 */

/* 181 */

/* 182 */

/* 183 */

/* 184 */

/* 185 */

/* 186 */

/* 187 */

/* 188 */

/* 189 */

/* 190 */

/* 191 */

/* 192 */

/* 193 */

/* 194 */

/* 195 */

/* 196 */

/* 197 */

/* 198 */

/* 199 */

/* 2 */

/* 200 */

/* 201 */

/* 202 */

/* 203 */

/* 204 */

/* 205 */

/* 206 */

/* 207 */

/* 208 */

/* 209 */

/* 210 */

/* 211 */

/* 212 */

/* 213 */

/* 214 */

/* 215 */

/* 216 */

/* 217 */

/* 218 */

/* 219 */

/* 220 */

/* 221 */

/* 222 */

/* 223 */

/* 224 */

/* 225 */

/* 226 */

/* 227 */

/* 228 */

/* 229 */

/* 230 */

/* 231 */

/* 232 */

/* 233 */

/* 234 */

/* 235 */

/* 236 */

/* 237 */

/* 238 */

/* 239 */

/* 240 */

/* 241 */

/* 242 */

/* 243 */

/* 244 */

/* 245 */

/* 246 */

/* 247 */

/* 248 */

/* 249 */

/* 250 */

/* 251 */

/* 252 */

/* 253 */

/* 254 */

/* 255 */

/* 256 */

/* 257 */

/* 258 */

/* 259 */

/* 260 */

/* 261 */

/* 262 */

/* 263 */

/* 264 */

/* 265 */

/* 266 */

/* 267 */

/* 268 */

/* 269 */

/* 270 */

/* 271 */

/* 272 */

/* 273 */

/* 274 */

/* 275 */

/* 276 */

/* 277 */

/* 278 */

/* 279 */

/* 280 */

/* 281 */

/* 282 */

/* 283 */

/* 284 */

/* 285 */

/* 286 */

/* 287 */

/* 288 */

/* 289 */

/* 290 */

/* 291 */

/* 292 */

/* 293 */

/* 294 */

/* 295 */

/* 296 */

/* 297 */

/* 298 */

/* 299 */

/* 3 */

/* 300 */

/* 301 */

/* 302 */

/* 303 */

/* 304 */

/* 305 */

/* 306 */

/* 307 */

/* 308 */

/* 309 */

/* 310 */

/* 311 */

/* 312 */

/* 313 */

/* 314 */

/* 315 */

/* 316 */

/* 317 */

/* 318 */

/* 319 */

/* 320 */

/* 321 */

/* 322 */

/* 323 */

/* 324 */

/* 325 */

/* 326 */

/* 327 */

/* 328 */

/* 329 */

/* 330 */

/* 331 */

/* 332 */

/* 333 */

/* 334 */

/* 335 */

/* 336 */

/* 337 */

/* 338 */

/* 339 */

/* 340 */

/* 341 */

/* 342 */

/* 343 */

/* 344 */

/* 345 */

/* 346 */

/* 347 */

/* 348 */

/* 349 */

/* 350 */

/* 351 */

/* 352 */

/* 353 */

/* 354 */

/* 355 */

/* 356 */

/* 357 */

/* 358 */

/* 359 */

/* 360 */

/* 361 */

/* 362 */

/* 363 */

/* 364 */

/* 365 */

/* 366 */

/* 367 */

/* 368 */

/* 369 */

/* 370 */

/* 371 */

/* 372 */

/* 373 */

/* 374 */

/* 375 */

/* 376 */

/* 377 */

/* 378 */

/* 379 */

/* 380 */

/* 381 */

/* 382 */

/* 383 */

/* 384 */

/* 385 */

/* 386 */

/* 387 */

/* 388 */

/* 389 */

/* 390 */

/* 391 */

/* 392 */

/* 393 */

/* 394 */

/* 395 */

/* 396 */

/* 397 */

/* 398 */

/* 399 */

/* 4 */

/* 400 */

/* 401 */

/* 402 */

/* 403 */

/* 404 */

/* 405 */

/* 406 */

/* 407 */

/* 408 */

/* 409 */

/* 410 */

/* 411 */

/* 412 */

/* 413 */

/* 414 */

/* 415 */

/* 416 */

/* 417 */

/* 418 */

/* 419 */

/* 420 */

/* 421 */

/* 422 */

/* 423 */

/* 424 */

/* 425 */

/* 426 */

/* 427 */

/* 428 */

/* 429 */

/* 430 */

/* 431 */

/* 432 */

/* 433 */

/* 434 */

/* 435 */

/* 436 */

/* 437 */

/* 438 */

/* 439 */

/* 440 */

/* 441 */

/* 442 */

/* 443 */

/* 444 */

/* 445 */

/* 446 */

/* 447 */

/* 448 */

/* 449 */

/* 450 */

/* 451 */

/* 452 */

/* 453 */

/* 454 */

/* 455 */

/* 456 */

/* 457 */

/* 458 */

/* 459 */

/* 460 */

/* 461 */

/* 462 */

/* 463 */

/* 464 */

/* 465 */

/* 466 */

/* 467 */

/* 468 */

/* 469 */

/* 470 */

/* 471 */

/* 472 */

/* 473 */

/* 474 */

/* 475 */

/* 476 */

/* 477 */

/* 478 */

/* 479 */

/* 480 */

/* 481 */

/* 482 */

/* 483 */

/* 484 */

/* 485 */

/* 486 */

/* 487 */

/* 488 */

/* 489 */

/* 490 */

/* 491 */

/* 492 */

/* 493 */

/* 494 */

/* 495 */

/* 496 */

/* 497 */

/* 498 */

/* 499 */

/* 5 */

/* 500 */

/* 501 */

/* 502 */

/* 503 */

/* 504 */

/* 505 */

/* 506 */

/* 507 */

/* 508 */

/* 509 */

/* 510 */

/* 511 */

/* 512 */

/* 513 */

/* 514 */

/* 515 */

/* 516 */

/* 517 */

/* 518 */

/* 519 */

/* 520 */

/* 521 */

/* 522 */

/* 523 */

/* 524 */

/* 525 */

/* 526 */

/* 527 */

/* 528 */

/* 529 */

/* 530 */

/* 531 */

/* 532 */

/* 533 */

/* 534 */

/* 535 */

/* 536 */

/* 537 */

/* 538 */

/* 539 */

/* 540 */

/* 541 */

/* 542 */

/* 543 */

/* 544 */

/* 545 */

/* 546 */

/* 547 */

/* 548 */

/* 549 */

/* 550 */

/* 551 */

/* 552 */

/* 553 */

/* 554 */

/* 555 */

/* 556 */

/* 557 */

/* 558 */

/* 559 */

/* 560 */

/* 561 */

/* 562 */

/* 563 */

/* 564 */

/* 565 */

/* 566 */

/* 567 */

/* 568 */

/* 569 */

/* 570 */

/* 571 */

/* 572 */

/* 573 */

/* 574 */

/* 575 */

/* 576 */

/* 577 */

/* 578 */

/* 579 */

/* 580 */

/* 581 */

/* 582 */

/* 583 */

/* 584 */

/* 585 */

/* 586 */

/* 587 */

/* 588 */

/* 589 */

/* 590 */

/* 591 */

/* 592 */

/* 593 */

/* 594 */

/* 595 */

/* 596 */

/* 597 */

/* 598 */

/* 599 */

/* 6 */

/* 600 */

/* 601 */

/* 602 */

/* 603 */

/* 604 */

/* 605 */

/* 606 */

/* 607 */

/* 608 */

/* 609 */

/* 610 */

/* 611 */

/* 612 */

/* 613 */

/* 614 */

/* 615 */

/* 616 */

/* 617 */

/* 618 */

/* 619 */

/* 620 */

/* 621 */

/* 622 */

/* 623 */

/* 624 */

/* 625 */

/* 626 */

/* 627 */

/* 628 */

/* 629 */

/* 630 */

/* 631 */

/* 632 */

/* 633 */

/* 634 */

/* 635 */

/* 636 */

/* 637 */

/* 638 */

/* 639 */

/* 640 */

/* 641 */

/* 642 */

/* 643 */

/* 644 */

/* 645 */

/* 646 */

/* 647 */

/* 648 */

/* 649 */

/* 650 */

/* 651 */

/* 652 */

/* 653 */

/* 654 */

/* 655 */

/* 656 */

/* 657 */

/* 658 */

/* 659 */

/* 66 */

/* 660 */

/* 661 */

/* 662 */

/* 663 */

/* 664 */

/* 665 */

/* 666 */

/* 667 */

/* 668 */

/* 669 */

/* 67 */

/* 670 */

/* 671 */

/* 672 */

/* 673 */

/* 674 */

/* 675 */

/* 676 */

/* 677 */

/* 678 */

/* 679 */

/* 68 */

/* 680 */

/* 681 */

/* 682 */

/* 683 */

/* 684 */

/* 685 */

/* 686 */

/* 687 */

/* 688 */

/* 689 */

/* 69 */

/* 690 */

/* 691 */

/* 692 */

/* 693 */

/* 694 */

/* 695 */

/* 696 */

/* 697 */

/* 698 */

/* 699 */

/* 7 */

/* 70 */

/* 700 */

/* 701 */

/* 702 */

/* 703 */

/* 704 */

/* 705 */

/* 706 */

/* 707 */

/* 708 */

/* 709 */

/* 71 */

/* 710 */

/* 711 */

/* 712 */

/* 713 */

/* 714 */

/* 715 */

/* 716 */

/* 717 */

/* 718 */

/* 719 */

/* 72 */

/* 720 */

/* 721 */

/* 722 */

/* 723 */

/* 724 */

/* 725 */

/* 726 */

/* 727 */

/* 728 */

/* 729 */

/* 73 */

/* 730 */

/* 731 */

/* 732 */

/* 733 */

/* 734 */

/* 735 */

/* 736 */

/* 737 */

/* 738 */

/* 739 */

/* 74 */

/* 740 */

/* 741 */

/* 742 */

/* 743 */

/* 744 */

/* 745 */

/* 746 */

/* 747 */

/* 748 */

/* 749 */

/* 75 */

/* 750 */

/* 751 */

/* 752 */

/* 753 */

/* 754 */

/* 755 */

/* 756 */

/* 757 */

/* 758 */

/* 759 */

/* 76 */

/* 760 */

/* 761 */

/* 762 */

/* 763 */

/* 764 */

/* 765 */

/* 766 */

/* 767 */

/* 768 */

/* 769 */

/* 77 */

/* 770 */

/* 771 */

/* 772 */

/* 773 */

/* 774 */

/* 775 */

/* 776 */

/* 777 */

/* 778 */

/* 779 */

/* 78 */

/* 780 */

/* 781 */

/* 782 */

/* 783 */

/* 784 */

/* 785 */

/* 786 */

/* 787 */

/* 788 */

/* 789 */

/* 79 */

/* 790 */

/* 791 */

/* 792 */

/* 793 */

/* 794 */

/* 795 */

/* 796 */

/* 797 */

/* 798 */

/* 799 */

/* 8 */

/* 80 */

/* 800 */

/* 801 */

/* 802 */

/* 803 */

/* 804 */

/* 805 */

/* 806 */

/* 807 */

/* 808 */

/* 809 */

/* 81 */

/* 810 */

/* 811 */

/* 812 */

/* 813 */

/* 814 */

/* 815 */

/* 816 */

/* 817 */

/* 818 */

/* 819 */

/* 82 */

/* 820 */

/* 821 */

/* 822 */

/* 823 */

/* 824 */

/* 825 */

/* 826 */

/* 827 */

/* 828 */

/* 829 */

/* 83 */

/* 830 */

/* 831 */

/* 832 */

/* 833 */

/* 834 */

/* 835 */

/* 836 */

/* 837 */

/* 838 */

/* 839 */

/* 84 */

/* 840 */

/* 841 */

/* 842 */

/* 843 */

/* 844 */

/* 845 */

/* 846 */

/* 847 */

/* 848 */

/* 849 */

/* 85 */

/* 850 */

/* 851 */

/* 852 */

/* 853 */

/* 854 */

/* 855 */

/* 856 */

/* 857 */

/* 858 */

/* 859 */

/* 86 */

/* 860 */

/* 861 */

/* 862 */

/* 863 */

/* 864 */

/* 865 */

/* 866 */

/* 867 */

/* 868 */

/* 869 */

/* 87 */

/* 870 */

/* 871 */

/* 872 */

/* 873 */

/* 874 */

/* 875 */

/* 876 */

/* 877 */

/* 878 */

/* 879 */

/* 88 */

/* 880 */

/* 881 */

/* 882 */

/* 883 */

/* 884 */

/* 885 */

/* 886 */

/* 887 */

/* 888 */

/* 889 */

/* 89 */

/* 890 */

/* 891 */

/* 892 */

/* 893 */

/* 894 */

/* 895 */

/* 896 */

/* 897 */

/* 898 */

/* 899 */

/* 9 */

/* 90 */

/* 900 */

/* 901 */

/* 902 */

/* 903 */

/* 904 */

/* 905 */

/* 906 */

/* 907 */

/* 908 */

/* 909 */

/* 91 */

/* 910 */

/* 911 */

/* 912 */

/* 913 */

/* 914 */

/* 915 */

/* 916 */

/* 917 */

/* 918 */

/* 919 */

/* 92 */

/* 920 */

/* 921 */

/* 922 */

/* 923 */

/* 924 */

/* 925 */

/* 926 */

/* 927 */

/* 928 */

/* 929 */

/* 93 */

/* 930 */

/* 931 */

/* 932 */

/* 933 */

/* 934 */

/* 935 */

/* 936 */

/* 937 */

/* 938 */

/* 939 */

/* 94 */

/* 940 */

/* 941 */

/* 942 */

/* 943 */

/* 944 */

/* 945 */

/* 946 */

/* 947 */

/* 948 */

/* 949 */

/* 95 */

/* 950 */

/* 951 */

/* 952 */

/* 953 */

/* 954 */

/* 955 */

/* 956 */

/* 957 */

/* 958 */

/* 959 */

/* 96 */

/* 960 */

/* 961 */

/* 962 */

/* 963 */

/* 964 */

/* 965 */

/* 966 */

/* 967 */

/* 968 */

/* 969 */

/* 97 */

/* 970 */

/* 971 */

/* 972 */

/* 973 */

/* 974 */

/* 975 */

/* 976 */

/* 977 */

/* 978 */

/* 979 */

/* 98 */

/* 980 */

/* 981 */

/* 982 */

/* 983 */

/* 984 */

/* 985 */

/* 986 */

/* 987 */

/* 988 */

/* 989 */

/* 99 */

/* 990 */

/* 991 */

/* 992 */

/* 993 */

/* 994 */

/* 995 */

/* 996 */

/* 997 */

/* 998 */

/* 999 */

/* Built-in method references for those with the same name as other `lodash` methods. */

/* Built-in method references that are verified to be native. */

/* Inspired by snippet shared by Jeremy Crane at: https://github.com/mzabriskie/react-draggable/issues/402 */

/* Math.imul(h, m): */

/* Math.imul(k, m): */

/* Node.js helper references. */

/* This is a generated file. Do not edit directly. */

/* WEBPACK VAR INJECTION */

/* eslint complexity: [2, 18], max-statements: [2, 33] */

/* eslint no-invalid-this: 1 */

/* eslint react/destructuring-assignment: 1 */

/* eslint react/no-array-index-key: 0 */

/* eslint-disable */

/* eslint-disable array-element-newline */

/* eslint-disable camelcase */

/* eslint-disable class-methods-use-this */

/* eslint-disable jsx-a11y/click-events-have-key-events */

/* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions, jsx-a11y/no-static-element-interactions */

/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */

/* eslint-disable jsx-a11y/no-static-element-interactions */

/* eslint-disable max-lines, max-len */

/* eslint-disable no-bitwise */

/* eslint-disable no-invalid-this */

/* eslint-disable no-proto */

/* eslint-disable no-restricted-syntax */

/* eslint-disable no-unused-vars */

/* eslint-disable react/forbid-foreign-prop-types */

/* eslint-disable react/no-danger */

/* eslint-disable react/no-unused-state, react/no-unused-prop-types */

/* eslint-disable require-jsdoc, valid-jsdoc */

/* eslint-disable-next-line */

/* eslint-enable */

/* eslint-enable jsx-a11y/click-events-have-key-events */

/* eslint-enable jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions, jsx-a11y/no-static-element-interactions */

/* eslint-enable jsx-a11y/no-static-element-interactions */

/* eslint-enable no-invalid-this */

/* eslint-enable react/no-danger */

/* global Symbol */

/* global window */

/* globals
	Atomics,
	SharedArrayBuffer,
*/

/* harmony default export */

/* harmony export (binding) */

/* harmony import */

/* harmony reexport (safe) */

/* import() */

/* istanbul ignore else  */

/* istanbul ignore next */

/* k >>> r: */

/* non-linear */

/* this is IE 8. */

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */

/*! https://mths.be/punycode v1.4.1 by @mathias */

/*#__PURE__*/

/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */

/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */

/**
		 * Creates an array of chunk objects representing both higlightable and non highlightable pieces of text that match each search word.
		 * @return Array of "chunks" (where a Chunk is { start:number, end:number, highlight:boolean })
		 */

/**
		 * Given a set of chunks to highlight, create an additional set of chunks
		 * to represent the bits of text between the highlighted text.
		 * @param chunksToHighlight {start:number, end:number}[]
		 * @param totalLength number
		 * @return {start:number, end:number, highlight:boolean}[]
		 */

/**
		 * Takes an array of {start:number, end:number} objects and combines chunks that overlap into single chunks.
		 * @return {start:number, end:number}[]
		 */

/**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

/**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */

/**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */

/**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */

/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */

/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */

/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */

/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */

/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */

/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */

/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */

/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */

/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */

/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */

/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */

/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */

/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */

/**
	 * Highlights all occurrences of search terms (searchText) within a string (textToHighlight).
	 * This function returns an array of strings and <span>s (wrapping highlighted words).
	 */

/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */

/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */

/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

/**
	* Array order.
	*
	* ## Notes
	*
	* -   The array order is either row-major (C-style) or column-major (Fortran-style).
	*
	*
	* @private
	* @name order
	* @memberof ndarray.prototype
	* @type {string}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var order = x.order;
	* // returns 'row-major'
	*/

/**
	* Flattens an array and deep copies array elements.
	*
	* @private
	* @param {Array} arr - array to flatten
	* @throws {TypeError} must provide an array
	* @returns {Array} flattened array
	*/

/**
	* Flattens an array.
	*
	* @private
	* @param {Array} arr - array to flatten
	* @throws {TypeError} must provide an array
	* @returns {Array} flattened array
	*/

/**
	* Generates a pseudorandom integer on the interval \\( [1,2^{32}-1) \\).
	*
	* @private
	* @returns {uinteger32} pseudorandom integer
	*
	* @example
	* var r = mt19937();
	* // returns <number>
	*/

/**
	* Generates a pseudorandom number on the interval \\( [0,1) \\).
	*
	* ## Notes
	*
	* -   The original C implementation credits Isaku Wada for this algorithm (2002/01/09).
	*
	* @private
	* @returns {number} pseudorandom number
	*
	* @example
	* var r = normalized();
	* // returns <number>
	*/

/**
	* Index offset which specifies the buffer index at which to start iterating over array elements.
	*
	* @private
	* @name offset
	* @memberof ndarray.prototype
	* @type {NonNegativeInteger}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var o = x.offset;
	* // returns 0
	*/

/**
	* Index strides which specify how to access data along corresponding array dimensions.
	*
	* @private
	* @name strides
	* @memberof ndarray.prototype
	* @type {IntegerArray}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var s = x.strides;
	* // returns [ 2, 1 ]
	*/

/**
	* Information about the memory layout of the array.
	*
	* @private
	* @name flags
	* @memberof ndarray.prototype
	* @type {Object}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var flgs = x.flags;
	* // returns <Object>
	*/

/**
	* Length of the array.
	*
	* @private
	* @name length
	* @memberof ndarray.prototype
	* @type {NonNegativeInteger}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var len = x.length;
	* // returns 6
	*/

/**
	* Number of dimensions.
	*
	* @private
	* @name ndims
	* @memberof ndarray
	* @type {PositiveInteger}
	*
	* @example
	* var ndims = ndarray.ndims;
	* // returns <number>
	*/

/**
	* Number of dimensions.
	*
	* @private
	* @name ndims
	* @memberof ndarray.prototype
	* @type {PositiveInteger}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var ndims = x.ndims;
	* // returns <number>
	*/

/**
	* Pointer to the underlying data buffer.
	*
	* @private
	* @name data
	* @memberof ndarray.prototype
	* @type {(Array|TypedArray|Buffer)}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var data = x.data;
	* // returns [ 1, 2, 3, 4, 5, 6 ]
	*/

/**
	* Returns a random permutation of elements in `arr`.
	*
	* @private
	* @param {ArrayLike} arr - array-like object to shuffle
	* @param {Options} [options] - function options
	* @param {string} [options.copy] - string indicating whether to return a copy (`deep`,`shallow` or `none`)
	* @throws {TypeError} first argument must be array-like
	* @throws {TypeError} `options` must be an object
	* @throws {TypeError} must provide valid options
	* @returns {ArrayLike} the shuffled array-like object
	*
	* @example
	* var data = [ 1, 2, 3 ];
	* var out = shuffle( data );
	* // e.g., returns [ 3, 1, 2 ]
	*
	* @example
	* var data = [ 1, 2, 3 ];
	* var out = shuffle( data, {
	*     'copy': 'none'
	* });
	* var bool = ( data === out );
	* // returns true
	*/

/**
	* Returns an array element located at a specified linear index.
	*
	* @private
	* @name iget
	* @memberof ndarray.prototype
	* @type {Function}
	* @param {integer} idx - linear index
	* @returns {*} array element
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var v = x.iget( 3 );
	* // returns 4
	*/

/**
	* Returns an array element located at a specified linear index.
	*
	* @private
	* @param {integer} idx - linear view index
	* @throws {TypeError} index must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {*} array element
	*/

/**
	* Returns an array element.
	*
	* @private
	* @name get
	* @memberof ndarray.prototype
	* @type {Function}
	* @param {...integer} idx - indices
	* @returns {*} array element
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var v = x.get( 1, 1 );
	* // returns 4
	*/

/**
	* Returns an array element.
	*
	* @private
	* @param {...integer} idx - indices
	* @throws {TypeError} provided indices must be integer valued
	* @throws {RangeError} index exceeds array dimensions
	* @returns {*} array element
	*/

/**
	* Returns an array element.
	*
	* @private
	* @param {integer} i - index
	* @throws {TypeError} index must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {*} array element
	*/

/**
	* Returns an array element.
	*
	* @private
	* @param {integer} i - index for first dimension
	* @param {integer} j - index for second dimension
	* @param {integer} k - index for third dimension
	* @param {integer} l - index for fourth dimension
	* @throws {TypeError} index for first dimension must be an integer value
	* @throws {TypeError} index for second dimension must be an integer value
	* @throws {TypeError} index for third dimension must be an integer value
	* @throws {TypeError} index for fourth dimension must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {*} array element
	*/

/**
	* Returns an array element.
	*
	* @private
	* @param {integer} i - index for first dimension
	* @param {integer} j - index for second dimension
	* @param {integer} k - index for third dimension
	* @throws {TypeError} index for first dimension must be an integer value
	* @throws {TypeError} index for second dimension must be an integer value
	* @throws {TypeError} index for third dimension must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {*} array element
	*/

/**
	* Returns an array element.
	*
	* @private
	* @param {integer} i - index for first dimension
	* @param {integer} j - index for second dimension
	* @throws {TypeError} index for first dimension must be an integer value
	* @throws {TypeError} index for second dimension must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {*} array element
	*/

/**
	* Returns the PRNG seed length.
	*
	* @private
	* @returns {PositiveInteger} seed length
	*/

/**
	* Returns the PRNG seed.
	*
	* @private
	* @returns {PRNGSeedMT19937} seed
	*/

/**
	* Returns the PRNG state length.
	*
	* @private
	* @returns {PositiveInteger} state length
	*/

/**
	* Returns the PRNG state size (in bytes).
	*
	* @private
	* @returns {PositiveInteger} state size (in bytes)
	*/

/**
	* Returns the current PRNG state.
	*
	* ## Notes
	*
	* -   The PRNG state array is comprised of a preamble followed by `3` sections:
	*
	*     0.  preamble (version + number of sections)
	*     1.  internal PRNG state
	*     2.  auxiliary state information
	*     3.  PRNG seed
	*
	* -   The first element of the PRNG state array preamble is the state array schema version.
	*
	* -   The second element of the PRNG state array preamble is the number of state array sections (i.e., `3`).
	*
	* -   The first element of each section following the preamble specifies the section length. The remaining section elements comprise the section contents.
	*
	* @private
	* @returns {PRNGStateMT19937} current state
	*/

/**
	* Samples elements from a population.
	*
	* @private
	* @param {Options} [options] - function options
	* @param {NonNegativeInteger} [options.size] - sample size
	* @param {boolean} [options.replace=true] - boolean indicating whether to sample with replacement
	* @param {boolean} [options.mutate=false] - boolean indicating whether to mutate the `pool` when sampling without replacement
	* @throws {TypeError} options argument must be an object
	* @throws {TypeError} must provide valid options
	* @throws {RangeError} `size` option must be less than or equal to the population when the `replace` option is `false`
	* @returns {Array} sample
	*/

/**
	* Samples elements from an array-like object.
	*
	* @private
	* @param {ArrayLike} x - array-like object from which to sample elements
	* @param {Options} [options] - function options
	* @param {NonNegativeInteger} [options.size] - sample size
	* @param {ProbabilityArray} [options.probs] - element probabilities
	* @param {boolean} [options.replace=true] - boolean indicating whether to sample with replacement
	* @throws {TypeError} first argument must be array-like
	* @throws {TypeError} options argument must be an object
	* @throws {TypeError} must provide valid options
	* @throws {RangeError} `size` option must be less than or equal to the length of `x` when the `replace` option is `false`
	* @returns {Array} sample
	*/

/**
	* Serializes an ndarray as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying an `ndarray` instance.
	* -   The method does **not** serialize data outside of the buffer region defined by the array configuration.
	*
	*
	* @private
	* @name toJSON
	* @memberof ndarray.prototype
	* @type {Function}
	* @returns {Object} serialized ndarray
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6, 7, 8 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 2;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var o = x.toJSON();
	* // e.g., returns { 'type': 'ndarray', 'dtype': '<dtype>', 'flags': {...}, 'offset': 0, 'order': 'row-major', 'shape': [ 3, 2 ], 'strides': [ 2, 1 ], 'data': [ 3, 4, 5, 6, 7, 8 ] }
	*/

/**
	* Serializes an ndarray as a string.
	*
	* ## Notes
	*
	* -   The method does **not** serialize data outside of the buffer region defined by the array configuration.
	*
	*
	* @private
	* @name toString
	* @memberof ndarray.prototype
	* @type {Function}
	* @returns {string} serialized ndarray
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6, 7, 8 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 2;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var str = x.toString();
	* // e.g., returns 'ndarray( [ 3, 4, 5, 6, 7, 8 ], [ 3, 2 ], [ 2, 1 ], 0, "row-major" )'
	*/

/**
	* Serializes the pseudorandom number generator as a JSON object.
	*
	* ## Notes
	*
	* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.
	*
	* @private
	* @returns {Object} JSON representation
	*/

/**
	* Sets an array element located at a specified linear index.
	*
	* @private
	* @name iset
	* @memberof ndarray.prototype
	* @type {Function}
	* @param {integer} idx - linear index
	* @param {*} v - value to set
	* @returns {ndarray} ndarray instance
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var v = x.iget( 3 );
	* // returns 4
	*
	* x.iset( 3, 10 );
	*
	* var b = x.data;
	* // returns [ 1, 2, 3, 10, 5, 6 ]
	*
	* v = x.iget( 3 );
	* // returns 10
	*/

/**
	* Sets an array element located at a specified linear index.
	*
	* @private
	* @param {integer} idx - linear view index
	* @param {*} v - value to set
	* @throws {TypeError} index must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {ndarray} ndarray instance
	*/

/**
	* Sets an array element.
	*
	* @private
	* @name set
	* @memberof ndarray.prototype
	* @type {Function}
	* @param {...integer} idx - indices
	* @param {*} v - value to set
	* @returns {ndarray} ndarray instance
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var v = x.get( 1, 1 );
	* // returns 4
	*
	* x.set( 1, 1, 10 );
	*
	* var b = x.data;
	* // returns [ 1, 2, 3, 10, 5, 6 ]
	*
	* v = x.get( 1, 1 );
	* // returns 10
	*/

/**
	* Sets an array element.
	*
	* @private
	* @param {...integer} idx - indices
	* @param {*} v - value to set
	* @throws {TypeError} provided indices must be integer valued
	* @throws {RangeError} index exceeds array dimensions
	* @returns {ndarray} ndarray instance
	*/

/**
	* Sets an array element.
	*
	* @private
	* @param {integer} i - index
	* @param {*} v - value to set
	* @throws {TypeError} index must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {ndarray} ndarray instance
	*/

/**
	* Sets an array element.
	*
	* @private
	* @param {integer} i - index for first dimension
	* @param {integer} j - index for second dimension
	* @param {*} v - value to set
	* @throws {TypeError} index for first dimension must be an integer value
	* @throws {TypeError} index for second dimension must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {ndarray} ndarray instance
	*/

/**
	* Sets an array element.
	*
	* @private
	* @param {integer} i - index for first dimension
	* @param {integer} j - index for second dimension
	* @param {integer} k - index for third dimension
	* @param {*} v - value to set
	* @throws {TypeError} index for first dimension must be an integer value
	* @throws {TypeError} index for second dimension must be an integer value
	* @throws {TypeError} index for third dimension must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {ndarray} ndarray instance
	*/

/**
	* Sets an array element.
	*
	* @private
	* @param {integer} i - index for first dimension
	* @param {integer} j - index for second dimension
	* @param {integer} k - index for third dimension
	* @param {integer} l - index for fourth dimension
	* @param {*} v - value to set
	* @throws {TypeError} index for first dimension must be an integer value
	* @throws {TypeError} index for second dimension must be an integer value
	* @throws {TypeError} index for third dimension must be an integer value
	* @throws {TypeError} index for fourth dimension must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {ndarray} ndarray instance
	*/

/**
	* Sets the PRNG state.
	*
	* ## Notes
	*
	* -   If PRNG state is "shared" (meaning a state array was provided during PRNG creation and **not** copied) and one sets the generator state to a state array having a different length, the PRNG does **not** update the existing shared state and, instead, points to the newly provided state array. In order to synchronize PRNG output according to the new shared state array, the state array for **each** relevant PRNG must be **explicitly** set.
	* -   If PRNG state is "shared" and one sets the generator state to a state array of the same length, the PRNG state is updated (along with the state of all other PRNGs sharing the PRNG's state array).
	*
	* @private
	* @param {PRNGStateMT19937} s - generator state
	* @throws {TypeError} must provide a `Uint32Array`
	* @throws {Error} must provide a valid state
	*/

/**
	* Shape of the array.
	*
	* @private
	* @name shape
	* @memberof ndarray.prototype
	* @type {NonNegativeIntegerArray}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var s = x.shape;
	* // returns [ 3, 2 ]
	*/

/**
	* Size (in bytes) of each array element (if known).
	*
	* @private
	* @name BYTES_PER_ELEMENT
	* @memberof ndarray
	* @type {(PositiveInteger|null)}
	*
	* @example
	* var nbytes = ndarray.BYTES_PER_ELEMENT;
	* // returns <number>
	*/

/**
	* Size (in bytes) of each array element (if known).
	*
	* @private
	* @name BYTES_PER_ELEMENT
	* @memberof ndarray.prototype
	* @type {(PositiveInteger|null)}
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	*
	* var buffer = new Float64Array( [ 1, 2, 3, 4, 5, 6 ] );
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var nbytes = x.BYTES_PER_ELEMENT;
	* // returns 8
	*/

/**
	* Size (in bytes) of the array (if known).
	*
	* @private
	* @name byteLength
	* @memberof ndarray.prototype
	* @type {(NonNegativeInteger|null)}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var byteLength = x.byteLength;
	* // returns <number>
	*/

/**
	* Tests if every element in an array-like object passes a test condition.
	*
	* @private
	* @param {*} value - value to test
	* @returns {boolean} boolean indicating whether a value is an array-like object for which all elements pass a test condition
	*/

/**
	* Underlying data type.
	*
	* @private
	* @name dtype
	* @memberof ndarray
	* @type {string}
	*
	* @example
	* var dtype = ndarray.dtype;
	* // returns <string>
	*/

/**
	* Underlying data type.
	*
	* @private
	* @name dtype
	* @memberof ndarray.prototype
	* @type {string}
	*
	* @example
	* var buffer = [ 1, 2, 3, 4, 5, 6 ];
	* var shape = [ 3, 2 ];
	* var strides = [ 2, 1 ];
	* var offset = 0;
	*
	* var x = ndarray( buffer, shape, strides, offset, 'row-major' );
	*
	* var dtype = x.dtype;
	* // returns <string>
	*/

/**
	* ndarray constructor.
	*
	* @private
	* @constructor
	* @param {(ArrayLikeObject|TypedArray|Buffer)} buffer - data buffer
	* @param {NonNegativeIntegerArray} shape - array shape
	* @param {IntegerArray} strides - array strides
	* @param {NonNegativeInteger} offset - index offset
	* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)
	* @returns {ndarray} ndarray instance
	*/

/**
	* ndarray constructor.
	*
	* @private
	* @constructor
	* @param {(ArrayLikeObject|TypedArray|Buffer)} buffer - data buffer
	* @param {NonNegativeIntegerArray} shape - array shape
	* @param {IntegerArray} strides - array strides
	* @param {NonNegativeInteger} offset - index offset
	* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)
	* @throws {TypeError} `buffer` argument must be an array-like object, typed-array-like, or a Buffer
	* @throws {TypeError} `shape` argument must be an array-like object containing nonnegative integers
	* @throws {Error} `shape` argument length must equal the number of dimensions
	* @throws {TypeError} `strides` argument must be an array-like object containing integers
	* @throws {Error} `strides` argument length must equal the number of dimensions
	* @throws {TypeError} `offset` argument must be a nonnegative integer
	* @throws {TypeError} `order` argument must be a supported ndarray order
	* @throws {Error} `buffer` argument must be compatible with specified meta data
	* @returns {ndarray} ndarray instance
	*/

/**
             * @returns {boolean}
             */

/**
         * @param {*} key
         * @param {*} value
         * @returns {void}
         */

/**
         * @param {*} key
         * @returns {*}
         */

/**
         * @param {*} key
         * @returns {void}
         */

/**
         * @param {Function} callback
         * @param {*} [ctx=null]
         * @returns {void}
         */

/**
         * @returns {void}
         */

/**
         * A list of connected observers.
         *
         * @private {Array<ResizeObserverSPI>}
         */

/**
         * Broadcasted height of content rectangle.
         *
         * @type {number}
         */

/**
         * Broadcasted width of content rectangle.
         *
         * @type {number}
         */

/**
         * Collection of resize observations that have detected changes in dimensions
         * of elements.
         *
         * @private {Array<ResizeObservation>}
         */

/**
         * If a prop switches from controlled to Uncontrolled
         * reset its value to the defaultValue
         */

/**
         * Indicates whether DOM listeners have been added.
         *
         * @private {boolean}
         */

/**
         * Keeps reference to the instance of MutationObserver.
         *
         * @private {MutationObserver}
         */

/**
         * Reference to the last observed content rectangle.
         *
         * @private {DOMRectInit}
         */

/**
         * Registry of the ResizeObservation instances.
         *
         * @private {Map<Element, ResizeObservation>}
         */

/**
         * Tells that controller has subscribed for Mutation Events.
         *
         * @private {boolean}
         */

/**
     * "Transitionend" event handler.
     *
     * @private
     * @param {TransitionEvent} event
     * @returns {void}
     */

/**
     * Adds observer to observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be added.
     * @returns {void}
     */

/**
     * Callback invoked after the specified delay. It will further postpone
     * invocation of the original function delegating it to the
     * requestAnimationFrame.
     *
     * @returns {void}
     */

/**
     * Clears the collection of active observations.
     *
     * @returns {void}
     */

/**
     * Collects observation instances the associated element of which has changed
     * it's content rectangle.
     *
     * @returns {void}
     */

/**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback function that is invoked
     *      when one of the observed elements changes it's content dimensions.
     * @param {ResizeObserverController} controller - Controller instance which
     *      is responsible for the updates of observer.
     * @param {ResizeObserver} callbackCtx - Reference to the public
     *      ResizeObserver instance which will be passed to callback function.
     */

/**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback that is invoked when
     *      dimensions of the observed elements change.
     */

/**
     * Creates a new instance of ResizeObserverController.
     *
     * @private
     */

/**
     * Creates an instance of ResizeObservation.
     *
     * @param {Element} target - Element to be observed.
     */

/**
     * Creates an instance of ResizeObserverEntry.
     *
     * @param {Element} target - Element that is being observed.
     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
     */

/**
     * Holds reference to the controller's instance.
     *
     * @private {ResizeObserverController}
     */

/**
     * Initializes DOM listeners.
     *
     * @private
     * @returns {void}
     */

/**
     * Invokes initial callback function with a list of ResizeObserverEntry
     * instances collected from active resize observations.
     *
     * @returns {void}
     */

/**
     * Invokes the original callback function and schedules new invocation if
     * the "proxy" was called during current request.
     *
     * @returns {void}
     */

/**
     * Invokes the update of observers. It will continue running updates insofar
     * it detects changes.
     *
     * @returns {void}
     */

/**
     * Removes DOM listeners.
     *
     * @private
     * @returns {void}
     */

/**
     * Removes observer from observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be removed.
     * @returns {void}
     */

/**
     * Returns index in provided array that matches the specified key.
     *
     * @param {Array<Array>} arr
     * @param {*} key
     * @returns {number}
     */

/**
     * Returns instance of the ResizeObserverController.
     *
     * @returns {ResizeObserverController}
     */

/**
     * Schedules invocation of the original function.
     *
     * @returns {void}
     */

/**
     * Starts observing provided element.
     *
     * @param {Element} target - Element to be observed.
     * @returns {void}
     */

/**
     * Stops observing all elements.
     *
     * @returns {void}
     */

/**
     * Stops observing provided element.
     *
     * @param {Element} target - Element to stop observing.
     * @returns {void}
     */

/**
     * Tells whether observer has active observations.
     *
     * @returns {boolean}
     */

/**
     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
     * from the corresponding properties of the last observed content rectangle.
     *
     * @returns {DOMRectInit} Last observed content rectangle.
     */

/**
     * Updates content rectangle and tells whether it's width or height properties
     * have changed since the last broadcast.
     *
     * @returns {boolean}
     */

/**
     * Updates every observer from observers list and notifies them of queued
     * entries.
     *
     * @private
     * @returns {boolean} Returns "true" if any observer has detected changes in
     *      dimensions of it's elements.
     */

/**
    * Event handler invoked once the checkbox is clicked by the user. Changes the
    * `isChecked` property and then invokes the user-supplied `onChange` callback function.
    */

/**
   *  Which event when fired outside the component will cause it to be closed.
   *
   * _see [DropdownMenu](#menu-props) for more details_
   */

/**
   * A callback fired when the Dropdown wishes to change visibility. Called with the requested
   * `show` value, the DOM event, and the source that fired it: `'click'`,`'keydown'`,`'rootClose'`, or `'select'`.
   *
   * ```ts static
   * function(
   *   isOpen: boolean,
   *   event: SyntheticEvent,
   * ): void
   * ```
   *
   * @controllable show
   */

/**
   * A css slector string that will return __focusable__ menu items.
   * Selectors should be relative to the menu component:
   * e.g. ` > li:not('.disabled')`
   */

/**
   * A render prop that returns a Menu element. The `props`
   * argument should spread through to **a component that can accept a ref**.
   *
   * @type {Function ({
   *   show: boolean,
   *   alignEnd: boolean,
   *   close: (?SyntheticEvent) => void,
   *   placement: Placement,
   *   outOfBoundaries: ?boolean,
   *   scheduleUpdate: () => void,
   *   props: {
   *     ref: (?HTMLElement) => void,
   *     style: { [string]: string | number },
   *     aria-labelledby: ?string
   *   },
   *   arrowProps: {
   *     ref: (?HTMLElement) => void,
   *     style: { [string]: string | number },
   *   },
   * }) => React.Element}
   */

/**
   * A render prop that returns a Toggle element. The `props`
   * argument should spread through to **a component that can accept a ref**. Use
   * the `onToggle` argument to toggle the menu open or closed
   *
   * @type {Function ({
   *   show: boolean,
   *   toggle: (show: boolean) => void,
   *   props: {
   *     ref: (?HTMLElement) => void,
   *     aria-haspopup: true
   *     aria-expanded: boolean
   *   },
   * }) => React.Element}
   */

/**
   * A render prop that returns the root dropdown element. The `props`
   * argument should spread through to an element containing _both_ the
   * menu and toggle in order to handle keyboard events for focus management.
   *
   * @type {Function ({
   *   props: {
   *     onKeyDown: (SyntheticEvent) => void,
   *   },
   * }) => React.Element}
   */

/**
   * A set of popper options and props passed directly to react-popper's Popper component.
   */

/**
   * Align the menu to the 'end' side of the placement side of the Dropdown toggle. The default placement is `top-start` or `bottom-start`.
   */

/**
   * Aligns the dropdown menu to the 'end' of it's placement position.
   * Generally this is provided by the parent `Dropdown` component,
   * but may also be specified as a prop directly.
   */

/**
   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.
   * @type {string|number}
   * @required
   */

/**
   * Cache for storing the results of computations:
   * `WeakMap<Theme, WeakMap<typeof WithStyles, { ltr: {}, rtl: {} }>>`
   * Falling back to `Map` whenever `WeakMap` is not supported
   */

/**
   * Controls the focus behavior for when the Dropdown is opened. Set to
   * `true` to always focus the first menu item, `keyboard` to focus only when
   * navigating via the keyboard, or `false` to disable completely
   *
   * The Default behavior is `false` **unless** the Menu has a `role="menu"`
   * where it will default to `keyboard` to match the recommended [ARIA Authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton).
   */

/**
   * Controls the visible state of the menu, generally this is
   * provided by the parent `Dropdown` component,
   * but may also be specified as a prop directly.
   */

/**
   * Converts a single HTML element to pdfmake, calls itself recursively for child html elements
   *
   * @param element can be an HTML element (<p>) or plain text ("Hello World")
   * @param parentNode the parent node for the current element
   * @param parents Array of node names of all the parents for the element
   * @returns the doc def to the given element in consideration to the given paragraph and styles
   */

/**
   * Determines the direction and location of the Menu in relation to it's Toggle.
   */

/**
   * Enables the Popper.js `flip` modifier, allowing the Dropdown to
   * automatically adjust it's placement in case of overlap with the viewport or toggle.
   * Refer to the [flip docs](https://popper.js.org/popper-documentation.html#modifiers..flip.enabled) for more info
   */

/**
   * Go throught the CSS styles for the element and apply them
   * @param {Object} ret Our pdfmake object
   * @param {DOMElement} element The DOM elemnet
   */

/**
   * If a prop switches from controlled to Uncontrolled
   * reset its value to the defaultValue
   */

/**
   * Override the default event used by RootCloseWrapper.
   */

/**
   * Permit to change the default styles based on the options
   * @return {[type]} [description]
   */

/**
   * Returns the color in a hex format (e.g. #12ff00).
   * Also tries to convert RGB colors into hex values
   *
   * @param color color as string representation
   * @returns color as hex values for pdfmake
   */

/**
   * Sets the initial show position of the Dropdown.
   */

/**
   * Takes an HTML string, converts to HTML using a DOM parser and recursivly parses
   * the content into pdfmake compatible doc definition
   *
   * @param htmlText the html text to translate as string
   * @returns pdfmake doc definition as object
   */

/**
   * Transform a CSS expression (e.g. 'margin:10px') in the PDFMake version
   *
   * @param {String} style The CSS expression to transform
   * @param {DOMElement} element
   * @returns {Array} array of {key, value}
   */

/**
   * Whether or not the Dropdown is visible.
   *
   * @controllable onToggle
   */

/**
   * useful when wrapping a Component and you want to control
   * everything
   */

/**
  * Create a select input field.
  *
  * @param {Object} props - component properties (`onChange` callback and `defaultValue`)
  */

/**
  @param t: time (elapsed)
  @param b: initial value
  @param c: amount of change
  @param d: duration
*/

/**
  To use it:
  import htmlToPdfMake from 'html-to-pdfmake.js'
  htmlToPdfMake('<b>my bold text</b>');
*/

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */

/**
 * @displayName Dropdown
 */

/**
 * @memberOf Dropdown
 * @param {object}  options
 * @param {boolean} options.flip Automatically adjust the menu `drop` position based on viewport edge detection
 * @param {boolean} options.show Display the menu manually, ignored in the context of a `Dropdown`
 * @param {boolean} options.usePopper opt in/out of using PopperJS to position menus. When disabled you must position it yourself.
 * @param {string}  options.rootCloseEvent The pointer event to listen for when determining "clicks outside" the menu for triggering a close.
 * @param {object}  options.popperConfig Options passed to the [`usePopper`](/api/usePopper) hook.
 */

/**
 * A collection of shims that provide minimal functionality of the ES6 collections.
 *
 * These implementations are not meant to be used outside of the ResizeObserver
 * modules as they cover only a limited range of use cases.
 */

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */

/**
 * A higher order function that returns a higher order class component that injects
 * CSS-in-JS props derived from the react-with-styles theme, interface, and
 * direction provided through the WithStylesContext provider.
 *
 * The function should be used as follows:
 * `withStyles((theme) => styles, options)(Component)`
 *
 * Options can be used to rename the injected props, memoize the component, and flush
 * the styles to the styles tag (or whatever the interface implements as flush) before
 * rendering.
 *
 * @export
 * @param {Function|null|undefined} [stylesFn=EMPTY_STYLES_FN]
 * @param {Object} [{
 *     stylesPropName = 'styles',
 *     themePropName = 'theme',
 *     cssPropName = 'css',
 *     flushBefore = false,
 *     pureComponent = false,
 *   }={}]
 * @returns a higher order component that wraps the provided component and injects
 * the react-with-styles css, styles, and theme props.
 */

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */

/**
 * Also exported as `<Dropdown.Menu>` from `Dropdown`.
 *
 * @displayName DropdownMenu
 * @memberOf Dropdown
 */

/**
 * Also exported as `<Dropdown.Toggle>` from `Dropdown`.
 *
 * @displayName DropdownToggle
 * @memberOf Dropdown
 */

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

/**
 * Calculate and return a CSS transform style to position a detached element
 * next to a reference element. The open and anchor direction indicate wether
 * it should be positioned above/below and/or to the left/right of the
 * reference element.
 *
 * Assuming r(0,0), r(1,1), d(0,0), d(1,1) for the bottom-left and top-right
 * corners of the reference and detached elements, respectively:
 *  - openDirection = DOWN, anchorDirection = LEFT => d(0,1) == r(0,1)
 *  - openDirection = UP, anchorDirection = LEFT => d(0,0) == r(0,0)
 *  - openDirection = DOWN, anchorDirection = RIGHT => d(1,1) == r(1,1)
 *  - openDirection = UP, anchorDirection = RIGHT => d(1,0) == r(1,0)
 *
 * By using a CSS transform, we allow to further position it using
 * top/bottom CSS properties for the anchor gutter.
 *
 * @param {string} openDirection The vertical positioning of the popup
 * @param {string} anchorDirection The horizontal position of the popup
 * @param {HTMLElement} referenceEl The reference element
 */

/**
 * Calculates an appropriate content rectangle for provided html or svg element.
 *
 * @param {Element} target - Element content rectangle of which needs to be calculated.
 * @returns {DOMRectInit}
 */

/**
 * Calculates content rectangle of provided HTMLElement.
 *
 * @param {HTMLElement} target - Element for which to calculate the content rectangle.
 * @returns {DOMRectInit}
 */

/**
 * Calculates content rectangle of provided SVG element.
 *
 * @param {SVGGraphicsElement} target - Element content rectangle of which needs
 *      to be calculated.
 * @returns {DOMRectInit}
 */

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */

/**
 * Checks whether provided element is a document element (<html>).
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */

/**
 * Checks whether provided element is an instance of the SVGGraphicsElement.
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */

/**
 * Class that is responsible for computations of the content rectangle of
 * provided DOM element and for keeping track of it's changes.
 */

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */

/**
 * Converts provided string to a number.
 *
 * @param {number|string} value
 * @returns {number}
 */

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
 * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
 *
 * @param {number} x - X coordinate.
 * @param {number} y - Y coordinate.
 * @param {number} width - Rectangle's width.
 * @param {number} height - Rectangle's height.
 * @returns {DOMRectInit}
 */

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */

/**
 * Creates a wrapper function which ensures that provided callback will be
 * invoked only once during the specified delay period.
 *
 * @param {Function} callback - Function to be invoked after the delay period.
 * @param {number} delay - Delay after which to invoke callback.
 * @returns {Function}
 */

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates rectangle with an interface of the DOMRectReadOnly.
 * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
 *
 * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
 * @returns {DOMRectReadOnly}
 */

/**
 * Deprecated: Do not use directly. Please wrap your component in `withStyles` and use the `css`
 * prop injected via props instead.
 */

/**
 * Detects whether window and document objects are available in current environment.
 */

/**
 * Disabling the scroll on a node involves finding all the scrollable ancestors
 * and set their 'overflow-y' CSS property to 'hidden'. When all ancestors have
 * 'overflow-y: hidden' (up to the document element) there is no scroll
 * container, thus all the scroll outside of the node is disabled. In order to
 * enable scroll again, we store the previous value of the 'overflow-y' for
 * every ancestor in a closure and reset it back.
 *
 * @param {HTMLElement} node Any DOM element.
 */

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */

/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */

/**
 * Extracts borders size from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @param {...string} positions - Borders positions (top, right, ...)
 * @returns {number}
 */

/**
 * Extracts paddings sizes from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @returns {Object} Paddings box.
 */

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/

/**
 * Generate a unique key for any set of event options
 */

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */

/**
 * Iterates over elements of `collection` and invokes `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length"
 * property are iterated like arrays. To avoid this behavior use `_.forIn`
 * or `_.forOwn` for object iteration.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEachRight
 * @example
 *
 * _.forEach([1, 2], function(value) {
 *   console.log(value);
 * });
 * // => Logs `1` then `2`.
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */

/**
 * Iterates over own enumerable string keyed properties of an object and
 * invokes `iteratee` for each property. The iteratee is invoked with three
 * arguments: (value, key, object). Iteratee functions may exit iteration
 * early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 0.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns `object`.
 * @see _.forOwnRight
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.forOwn(new Foo, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */

/**
 * Iterates through children that are "valid elements".
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child with the index reflecting the position relative to "valid components".
 */

/**
 * Iterates through children that are typically specified as `props.children`,
 * but only maps over children that are "valid elements".
 *
 * The mapFunction provided index will be normalised to the components mapped,
 * so an invalid component would not increase the index.
 *
 */

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */

/**
 * Recursively finds the scroll parent of a node. The scroll parrent of a node
 * is the closest node that is scrollable. A node is scrollable if:
 *  - it is allowed to scroll via CSS ('overflow-y' not visible or hidden);
 *  - and its children/content are "bigger" than the node's box height.
 *
 * The root of the document always scrolls by default.
 *
 * @param {HTMLElement} node Any DOM element.
 * @return {HTMLElement} The scroll parent element.
 */

/**
 * Recursively traverses the tree upwards from the given node, capturing all
 * ancestor nodes that scroll along with their current 'overflow-y' CSS
 * property.
 *
 * @param {HTMLElement} node Any DOM element.
 * @param {Map<HTMLElement,string>} [acc] Accumulator map.
 * @return {Map<HTMLElement,string>} Map of ancestors with their 'overflow-y' value.
 */

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */

/**
 * Returns a controller object for setting a timeout that is properly cleaned up
 * once the component unmounts. New timeouts cancel and replace existing ones.
 */

/**
 * Returns a function that triggers a component update. the hook equivalent to
 * `this.forceUpdate()` in a class component. In most cases using a state value directly
 * is preferable but may be required in some advanced usages of refs for interop or
 * when direct DOM manipulation is required.
 *
 * ```ts
 * const forceUpdate = useForceUpdate();
 *
 * const updateOnClick = useCallback(() => {
 *  forceUpdate()
 * }, [forceUpdate])
 *
 * return <button type="button" onClick={updateOnClick}>Hi there</button>
 * ```
 */

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */

/**
 * Transform HTML code to a PdfMake object
 * @param  {String} htmlText The HTML code to transform
 * @param  {Object} [options]
 *   @param  {Object} [defaultStyles] An object with the default styles for each elements
 *   @param  {Object} [window] The `window` object (only used for the tests)
 * @return {Object} it returns a PdfMake object
 *
 * @example
 * // Some styles are applied by defaults for the supported HTML elements
 * // but you can pass your own styles if you prefer
 * htmlToPdfMake('<div><h1>My Title</h1><p>My paragraph</p></div>');
 *
 * // If you want to overwrite the default styles, e.g. you want <li> to not have a margin-left, and links to be 'purple' and not 'blue', and links without 'underline'
 * htmlToPdfMake('<ul><li>this is <a href="...">a link</a></li><li>another item</li></ul>', {
 *   defaultStyles:{
 *     a:{
 *       color:'purple',
 *       decoration:null
 *     },
 *     li:null
 *   }
 * });
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

/**
 * Wires up Dropdown toggle functionality, returning a set a props to attach
 * to the element that functions as the dropdown toggle (generally a button).
 *
 * @memberOf Dropdown
 */

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/**
 String representation of component state for styling with class names.

 Expects an array of strings OR a string/object pair:
 - className(['comp', 'comp-arg', 'comp-arg-2'])
   @returns 'react-select__comp react-select__comp-arg react-select__comp-arg-2'
 - className('comp', { some: true, state: false })
   @returns 'react-select__comp react-select__comp--some'
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
*
* Optimized by Bruce D. Evans.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cos.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_sin.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code and copyright notice are from the [source implementation]{@link http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/CODES/mt19937ar.c}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
*   1. Redistributions of source code must retain the above copyright
*      notice, this list of conditions and the following disclaimer.
*
*   2. Redistributions in binary form must reproduce the above copyright
*      notice, this list of conditions and the following disclaimer in the
*      documentation and/or other materials provided with the distribution.
*
*   3. The names of its contributors may not be used to endorse or promote
*      products derived from this software without specific prior written
*      permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
* ```
*/

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/**
* A 32-bit Mersenne Twister pseudorandom number generator.
*
* @module @stdlib/random/base/mt19937
*
* @example
* var mt19937 = require( '@stdlib/random/base/mt19937' );
*
* var v = mt19937();
* // returns <number>
*
* @example
* var factory = require( '@stdlib/random/base/mt19937' ).factory;
*
* var mt19937 = factory({
*     'seed': 1234
* });
*
* var v = mt19937();
* // returns 822569775
*/

/**
* A basic bootstrap table.
*
* @property {boolean} bordered - adds borders on all sides of the table and cells
* @property {boolean} borderless - removes all borders on the table and cells, including table header
* @property {boolean} hover - enable a hover state on table rows within a <tbody>
* @property {(boolean|string)} responsive - responsive tables allow tables to be scrolled horizontally with ease. Across every breakpoint, use responsive for horizontally scrolling tables. Responsive tables are wrapped automatically in a div. Use responsive="sm", responsive="md", responsive="lg", or responsive="xl" as needed to create responsive tables up to a particular breakpoint. From that breakpoint and up, the table will behave normally and not scroll horizontally
* @property {string} size - make tables more compact by cutting cell padding in half by setting size as `sm`
* @property {boolean} striped - adds zebra-striping to any table row within the <tbody>
* @property {string} variant - invert the colors of the table — with light text on dark backgrounds by setting variant as dark
*/

/**
* A button for joining and leaving chat rooms.
*
* @property {string} for - chat room identifier
* @property {boolean} showTooltip - controls whether to show tooltip
* @property {string} size - button size
* @property {string} tooltipPlacement - position of button tooltip
* @property {Object} style - CSS inline styles
*/

/**
* A button for joining and leaving video chats.
*
* @property {string} for - chat room identifier
* @property {boolean} showTooltip - controls whether to show tooltip
* @property {string} size - button size
* @property {string} tooltipPlacement - position of button tooltip
* @property {Object} style - CSS inline styles
*/

/**
* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.
*
* @property {string} bind - name of global variable for the checkbox value to be assigned to
* @property {boolean} defaultValue - A boolean value indicating the default value of the checkbox
* @property {boolean} disabled - indicates whether the input is active or not
* @property {boolean} inline - indicates whether the checkbox is displayed inline
* @property {string} legend - text displayed next to the checkbox
* @property {string} tooltip - text displayed when hovering over checkbox
* @property {Object} style - CSS inline styles
* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value
*/

/**
* A component for making a child component draggable and optionally resizable.
*
* @property {boolean} resizable - whether resize handlers should be attached to the edges of the child element
* @property {Function} onStop - event handler called when dragging is stopped
* @property {Function} onEscape - event handler called when the escape key is pressed
* @property {Object} style - CSS inline styles
*/

/**
* A number input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.
*
* @property {string} bind - name of global variable for the number to be assigned to
* @property {number} value - number value (for controlled component)
* @property {number} defaultValue - value indicating the default value of the input at startup
* @property {boolean} disabled - boolean indicating whether the input is active or not
* @property {number} min - number indicating the smallest possible value that may be inserted
* @property {number} max - number indicating the maximum value that may be inserted
* @property {(number|string)} step - number indicating the incremental changes when using the increment arrows
* @property {boolean} inline - indicates whether the input is displayed inline
* @property {string} legend - string indicating the text displayed next to the number input
* @property {boolean} numbersOnly - controls whether only numbers are accepted
* @property {string} tooltip - tooltip string (if not set, the tooltip is automatically generated)
* @property {string} tooltipPlacement - direction of the tooltip
* @property {Object} style - CSS inline styles
* @property {Object} inputStyle - CSS inline styles for input element
* @property {Function} onBlur - callback function to be invoked when using a blur method
* @property {Function} onChange - callback function to be invoked when number input is changed
* @property {Function} onKeyPress - callback function to be invoked when any key is entered
* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down
* @property {Function} onKeyUp - callback function to be invoked when key is released
*/

/**
* A tooltip overlay.
*
* @property {string} tooltip - tooltip content
* @property {string} placement - direction of the tooltip
* @property {boolean} show - controls whether the tooltip shall be displayed
*/

/**
* A voice input component.
*
* @property {boolean} autorecord - controls whether to automatically start recording
* @property {string} defaultValue - default text value
* @property {Array} grammars - speech grammar list (unsupported)
* @property {string} language - language identifier
* @property {string} legend - legend displayed in front of input field
* @property {string} mode - set to `full` to display a text input field alongside the microphone, `status` to only display a statusbar with the transcribed texts, `microphone` to show just a button to toggle recording, or `none` when the voice input should be invisible and purely controlled via hotkeys / voice commands
* @property {number} maxAlternatives - maximum number of alternatives provided per speech recognition result
* @property {Function} onChange - callback function invoked when text input value is updated
* @property {Function} onClick - callback function invoked when clicking on the microphone button
* @property {Function} onFinalText - callback function invoked once final text is received
* @property {Function} onSegment - callback function invoked with text segments
* @property {Function} onRecordingStart - callback function invoked when recording is started
* @property {Function} onRecordingStop - callback function invoked once recording is stopped
* @property {Function} onSubmit - callback function when submitting text input value by hitting "Enter"
* @property {string} placeholder - text input placeholder
* @property {Object} remote - object with `start`, `stop`, and `toggle` and associated hotkeys
* @property {Function} timeout - number of milliseconds after which to timeout the recording
* @property {Function} stopTooltip - tooltip message displayed while recording
* @property {Function} startTooltip - tooltip message displayed while not recording
* @property {string} tooltipPlacement - direction of the tooltip
* @property {number} width - voice input width (in px)
* @property {number} height - voice input height (in px)
* @property {Object} style - CSS inline styles
*/

/**
* A word cloud component built on top of [d3-cloud](https://github.com/jasondavies/d3-cloud).
*
* @property {Array} data - either an array of texts from which to generate the word cloud or, if `precalculated` is set to `true`, and array of word count objects (with `text` and `value` keys)
* @property {Function} font - accessor function specifying the font face for each word. Also accepts a constant instead of a function
* @property {Function} fontSizeMapper - accessor function indicating the font size for each word. Defaults to `( count - min + 1 ) / ( max - min + 6 ) * 30.0 + 12.0`, where `min` and `max` denote the minimum and maximum word `counts`, respectively
* @property {boolean} precalculated - controls whether the word cloud expects an array of precalculated word counts or will generate them for given texts
* @property {(Function|number)} rotate - accessor function indicating the rotation angle (in degrees) for each word. Also accepts a constant instead of a function
* @property {number} width - width of the word cloud (in px)
* @property {number} height - height of the word clloud (in px)
* @property {string} language - language identifier (determines the stopwords to be removed)
* @property {number} minCount - if set, only include words that appear more than `minCount` times in the given data
* @property {boolean} saveButton - controls whether to display a button for saving the word cloud as an image
* @property {(Function|number)} padding - accessor function or constant indicating the numerical padding for each word
* @property {number} updateThreshold - batch size of new documents in `data` before the word cloud is re-rendered
* @property {boolean} triggerRender - rerender when the data set is exchanged
* @property {Array} stopwords - additional stopwords to remove before rendering the word cloud
* @property {Object} style - CSS inline styles
* @property {Function} onClick - callback function invoked when a word on the word cloud is clicked
*/

/**
* Adapted from:
*
* simplemde v1.11.2
* Copyright Next Step Webs, Inc.
* @link https://github.com/NextStepWebs/simplemde-markdown-editor
* @license MIT
*/

/**
* Allocate a buffer having a specified number of bytes.
*
* @module @stdlib/buffer/alloc-unsafe
*
* @example
* var allocUnsafe = require( '@stdlib/buffer/alloc-unsafe' );
*
* var buf = allocUnsafe( 10 );
* // returns <Buffer>
*/

/**
* Allocates a buffer having a specified number of bytes.
*
* ## Notes
*
* -   The underlying memory of returned `Buffer` instances is not initialized. Memory contents are unknown and may contain sensitive data.
* -   When the size is less than half the pool size (specified on the `Buffer` constructor), memory is allocated from the `Buffer` pool for faster allocation of new `Buffer` instances.
*
*
* @param {NonNegativeInteger} size - number of bytes to allocate
* @throws {TypeError} must provide a nonnegative integer
* @returns {Buffer} new `Buffer` instance
*
* @example
* var buf = allocUnsafe( 10 );
* // returns <Buffer>
*/

/**
* An `Object.create` shim for older JavaScript engines.
*
* @private
* @param {Object} proto - prototype
* @returns {Object} created object
*
* @example
* var obj = createObject( Object.prototype );
* // returns {}
*/

/**
* An approval seal.
*
* @property {boolean} active - controls whether seal is active or grayed out
* @property {number} scale - object size (if not explicitly set, the seal is not rescaled)
* @property {string} title - seal title
* @property {string} lower - the lower text
* @property {number} lowerArc - the arc for the lower text
* @property {string} upper - the upper text
* @property {number} upperArc - the arc for the upper text
* @property {Object} style - the style for the element
* @property {Object} innerStyle - the style for the inner circle
* @property {boolean} noOrnaments - prevents rendering of the ornaments
* @property {boolean} removable - controls whether the note is removed when clicked
* @property {Function} onClick - callback function invoked when the note is clicked
*/

/**
* Animates a position property of a specified DOM element.
*
* @param {Node} element - DOM node
* @param {string} prop - property name
* @param {number} to - target value for property
* @param {integer} duration - number of milliseconds for the animation to complete
*/

/**
* Attempts to call a `Date` method.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if able to call a `Date` method
*/

/**
* Attempts to call a `RegExp` method.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if able to call a `RegExp` method
*/

/**
* Bias of a double-precision floating-point number's exponent.
*
* ## Notes
*
* The bias can be computed via
*
* ```tex
* \mathrm{bias} = 2^{k-1} - 1
* ```
*
* where \\(k\\) is the number of bits in the exponent; here, \\(k = 11\\).
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* Blas level 1 routine to copy values from `x` into `y`.
*
* @module @stdlib/blas/base/gcopy
*
* @example
* var gcopy = require( '@stdlib/blas/base/gcopy' );
*
* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];
* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];
*
* gcopy( x.length, x, 1, y, 1 );
* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]
*
* @example
* // Use the `ndarray` interface...
* var gcopy = require( '@stdlib/blas/base/gcopy' ).ndarray;
*
* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];
* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];
*
* gcopy( x.length, x, 1, 0, y, 1, 0 );
* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]
*/

/**
* Buffer constructor.
*
* @module @stdlib/buffer/ctor
*
* @example
* var ctor = require( '@stdlib/buffer/ctor' );
*
* var b = new ctor( [ 1, 2, 3, 4 ] );
* // returns <Buffer>
*/

/**
* Buffer constructor.
*
* @throws {Error} not implemented
*/

/**
* Card component.
*
* @property {string} className - CSS class name
* @property {(string|node)} header - panel heading (h3)
* @property {(string|node)} footer - panel footer
* @property {boolean} minimizable - whether the panel can be minimized
* @property {boolean} fullscreen - whether the panel can be made fullscreen
* @property {Function} onHide - callback invoked when the close button is clicked
* @property {Object} style - CSS inline styles
*/

/**
* Casts a pixel string to a number.
*
* @private
* @param {(string|number)} x - input value
* @param {number} cast number (in px)
*/

/**
* Casts buffer elements by copying those elements to a buffer of another data type.
*
* @private
* @param {(Array|TypedArray|Buffer)} buffer - input buffer
* @param {NonNegativeInteger} len - number of elements to cast
* @param {string} dtype - data type
* @returns {(Array|TypedArray|Buffer)} output buffer
*
* @example
* var b = castBuffer( [ 1.0, 2.0, 3.0 ], 3, 'float64' );
* // returns <Float64Array>[ 1.0, 2.0, 3.0 ]
*/

/**
* Clones a class instance.
*
* ## Notes
*
* -   This should **only** be used for simple cases. Any instances with privileged access to variables (e.g., within closures) cannot be cloned. This approach should be considered **fragile**.
* -   The function is greedy, disregarding the notion of a `level`. Instead, the function deep copies all properties, as we assume the concept of `level` applies only to the class instance reference but not to its internal state. This prevents, in theory, two instances from sharing state.
*
*
* @private
* @param {Object} val - class instance
* @returns {Object} new instance
*/

/**
* Code adapted from Nikita Rokotyan. MIT licensed. Source: http://bl.ocks.org/Rokotyan/0556f8facbaf344507cdc45dc3622177
*/

/**
* Compute `x - nπ/2 = r`.
*
* @module @stdlib/math/base/special/rempio2
*
* @example
* var rempio2 = require( '@stdlib/math/base/special/rempio2' );
*
* var y = new Array( 2 );
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*/

/**
* Compute an absolute value.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

/**
* Compute the absolute difference.
*
* @module @stdlib/math/base/utils/absolute-difference
*
* @example
* var diff = require( '@stdlib/math/base/utils/absolute-difference' );
*
* var d = diff( 2.0, 5.0 );
* // returns 3.0
*
* d = diff( -1.0, 3.14 );
* // returns ~4.14
*
* d = diff( 10.1, -2.05 );
* // returns ~12.15
*
* d = diff( -0.0, 0.0 );
* // returns +0.0
*
* d = diff( NaN, 5.0 );
* // returns NaN
*
* d = diff( Infinity, -Infinity  );
* // returns Infinity
*
* d = diff( Infinity, Infinity  );
* // returns NaN
*/

/**
* Compute the cosine of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-cos
*
* @example
* var kernelCos = require( '@stdlib/math/base/special/kernel-cos' );
*
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* v = kernelCos( 3.141592653589793/6.0, 0.0 );
* // returns ~0.866
*
* v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* v = kernelCos( NaN, 0.0 );
* // returns NaN
*/

/**
* Compute the cosine of a number.
*
* @module @stdlib/math/base/special/cos
*
* @example
* var cos = require( '@stdlib/math/base/special/cos' );
*
* var v = cos( 0.0 );
* // returns 1.0
*
* v = cos( 3.141592653589793/4.0 );
* // returns ~0.707
*
* v = cos( -3.141592653589793/6.0 );
* // returns ~0.866
*/

/**
* Compute the minimum and maximum linear indices in an underlying data buffer which are accessible to an array view.
*
* @module @stdlib/ndarray/base/minmax-view-buffer-index
*
* @example
* var minmaxViewBufferIndex = require( '@stdlib/ndarray/base/minmax-view-buffer-index' );
*
* var shape = [ 10, 10 ];
* var strides = [ 10, 1 ];
* var offset = 10;
*
* var idx = minmaxViewBufferIndex( shape, strides, offset );
* // returns [ 10, 109 ]
*
* @example
* var minmaxViewBufferIndex = require( '@stdlib/ndarray/base/minmax-view-buffer-index' );
*
* var shape = [ 10, 10 ];
* var strides = [ -10, -1 ];
* var offset = 99;
*
* var idx = minmaxViewBufferIndex( shape, strides, offset );
* // returns [ 0, 99 ]
*
* @example
* var minmaxViewBufferIndex = require( '@stdlib/ndarray/base/minmax-view-buffer-index' );
*
* var shape = [ 10, 10 ];
* var strides = [ 1, 10 ];
* var offset = 10;
*
* var idx = minmaxViewBufferIndex( shape, strides, offset );
* // returns [ 10, 109 ]
*
* @example
* var minmaxViewBufferIndex = require( '@stdlib/ndarray/base/minmax-view-buffer-index' );
*
* var shape = [ 10, 10 ];
* var strides = [ -1, -10 ];
* var offset = 99;
*
* var idx = minmaxViewBufferIndex( shape, strides, offset );
* // returns [ 0, 99 ]
*/

/**
* Compute the sine of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-sin
*
* @example
* var kernelSin = require( '@stdlib/math/base/special/kernel-sin' );
*
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* v = kernelSin( 3.141592653589793/6.0, 0.0 );
* // returns ~0.5
*
* v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.581
*
* v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* v = kernelSin( 3.0, NaN );
* // returns NaN
*
* v = kernelSin( NaN, NaN );
* // returns NaN
*/

/**
* Compute the sine of a number.
*
* @module @stdlib/math/base/special/sin
*
* @example
* var sin = require( '@stdlib/math/base/special/sin' );
*
* var v = sin( 0.0 );
* // returns ~0.0
*
* v = sin( 3.141592653589793/2.0 );
* // returns ~1.0
*
* v = sin( -3.141592653589793/6.0 );
* // returns ~-0.5
*
* v = sin( NaN );
* // returns NaN
*/

/**
* Computes `x - nπ/2 = r` for medium-sized inputs.
*
* @private
* @param {number} x - input value
* @param {uint32} ix - high word of `x`
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*/

/**
* Computes `x - nπ/2 = r`.
*
* ## Notes
*
* -   Returns `n` and stores the remainder `r` as two numbers `y[0]` and `y[1]`, such that `y[0]+y[1] = r`.
*
*
* @param {number} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*
* @example
* var y = new Array( 2 );
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*
* @example
* var y = new Array( 2 );
* var n = rempio2( NaN, y );
* // returns 0
*
* var y1 = y[ 0 ];
* // returns NaN
*
* var y2 = y[ 1 ];
* // returns NaN
*/

/**
* Computes the absolute difference.
*
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} absolute difference
*
* @example
* var d = absoluteDifference( 2.0, 5.0 );
* // returns 3.0
*
* @example
* var d = absoluteDifference( -1.0, 3.14 );
* // returns ~4.14
*
* @example
* var d = absoluteDifference( 10.1, -2.05 );
* // returns ~12.15
*
* @example
* var d = absoluteDifference( -0.0, 0.0 );
* // returns +0.0
*
* @example
* var d = absoluteDifference( NaN, 5.0 );
* // returns NaN
*
* @example
* var d = absoluteDifference( Infinity, -Infinity  );
* // returns Infinity
*
* @example
* var d = absoluteDifference( Infinity, Infinity  );
* // returns NaN
*/

/**
* Computes the absolute value of `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/

/**
* Computes the cosine of a number.
*
* @param {number} x - input value (in radians)
* @returns {number} cosine
*
* @example
* var v = cos( 0.0 );
* // returns 1.0
*
* @example
* var v = cos( 3.141592653589793/4.0 );
* // returns ~0.707
*
* @example
* var v = cos( -3.141592653589793/6.0 );
* // returns ~0.866
*
* @example
* var v = cos( NaN );
* // returns NaN
*/

/**
* Computes the cosine on \\( \[-\pi/4, \pi/4] \\), where \\( \pi/4 \approx 0.785398164 \\).
*
* ## Method
*
* -   Since \\( \cos(-x) = \cos(x) \\), we need only to consider positive \\(x\\).
*
* -   If \\( x < 2^{-27} \\), return \\(1\\) which is inexact if \\( x \ne 0 \\).
*
* -   \\( cos(x) \\) is approximated by a polynomial of degree \\(14\\) on \\( \[0,\pi/4] \\).
*
*     ```tex
*     \cos(x) \approx 1 - \frac{x \cdot x}{2} + C_1 \cdot x^4 + \ldots + C_6 \cdot x^{14}
*     ```
*
*     where the Remez error is
*
*     ```tex
*     \left| \cos(x) - \left( 1 - \frac{x^2}{2} + C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{15} \right) \right| \le 2^{-58}
*     ```
*
* -   Let \\( C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{14} \\), then
*
*     ```tex
*     \cos(x) \approx 1 - \frac{x \cdot x}{2} + r
*     ```
*
*     Since
*
*     ```tex
*     \cos(x+y) \approx \cos(x) - \sin(x) \cdot y \approx \cos(x) - x \cdot y
*     ```
*
*     a correction term is necessary in \\( \cos(x) \\). Hence,
*
*     ```tex
*     \cos(x+y) = 1 - \left( \frac{x \cdot x}{2} - (r - x \cdot y) \right)
*     ```
*
*     For better accuracy, rearrange to
*
*     ```tex
*     \cos(x+y) \approx w + \left( t + ( r - x \cdot y ) \right)
*     ```
*
*     where \\( w = 1 - \frac{x \cdot x}{2} \\) and \\( t \\) is a tiny correction term (\\( 1 - \frac{x \cdot x}{2} = w + t \\) exactly in infinite precision). The exactness of \\(w + t\\) in infinite precision depends on \\(w\\) and \\(t\\) having the same precision as \\(x\\).
*
*
* @param {number} x - input value (in radians, assumed to be bounded by ~pi/4 in magnitude)
* @param {number} y - tail of `x`
* @returns {number} cosine
*
* @example
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* @example
* var v = kernelCos( 3.141592653589793/6.0, 0.0 );
* // returns ~0.866
*
* @example
* var v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* @example
* var v = kernelCos( NaN, 0.0 );
* // returns NaN
*/

/**
* Computes the minimum and maximum linear indices in an underlying data buffer which are accessible to an array view.
*
* @param {(Array|TypedArray|Object)} [out] - output object
* @param {NonNegativeIntegerArray} shape - array shape
* @param {IntegerArray} strides - stride array
* @param {NonNegativeInteger} offset - index offset
* @returns {(Array|TypedArray|Object)} linear indices
*
* @example
* var shape = [ 10, 10 ];
* var strides = [ 10, 1 ];
* var offset = 10;
*
* var idx = minmaxViewBufferIndex( shape, strides, offset );
* // returns [ 10, 109 ]
*
* @example
* var shape = [ 10, 10 ];
* var strides = [ -10, -1 ];
* var offset = 99;
*
* var idx = minmaxViewBufferIndex( shape, strides, offset );
* // returns [ 0, 99 ]
*
* @example
* var shape = [ 10, 10 ];
* var strides = [ 1, 10 ];
* var offset = 10;
*
* var idx = minmaxViewBufferIndex( shape, strides, offset );
* // returns [ 10, 109 ]
*
* @example
* var shape = [ 10, 10 ];
* var strides = [ -1, -10 ];
* var offset = 99;
*
* var idx = minmaxViewBufferIndex( shape, strides, offset );
* // returns [ 0, 99 ]
*
* @example
* var shape = [ 10, 10 ];
* var strides = [ -1, -10 ];
* var offset = 99;
*
* var out = new Array( 2 );
* var idx = minmaxViewBufferIndex( out, shape, strides, offset );
* // returns [ 0, 99 ]
*
* var bool = ( idx === out );
* // returns true
*/

/**
* Computes the minimum and maximum linear indices in an underlying data buffer which are accessible to an array view.
*
* @private
* @param {(Array|TypedArray|Object)} out - output object
* @param {NonNegativeIntegerArray} shape - array shape
* @param {IntegerArray} strides - stride array
* @param {NonNegativeInteger} offset - index offset
* @returns {(Array|TypedArray|Object)} linear indices
*
* @example
* var shape = [ 10, 10 ];
* var strides = [ 10, 1 ];
* var offset = 10;
*
* var out = new Array( 2 );
* var idx = minmaxViewBufferIndex( out, shape, strides, offset );
* // returns [ 10, 109 ]
*
* var bool = ( idx === out );
* // returns true
*
* @example
* var shape = [ 10, 10 ];
* var strides = [ -10, -1 ];
* var offset = 99;
*
* var out = new Array( 2 );
* var idx = minmaxViewBufferIndex( out, shape, strides, offset );
* // returns [ 0, 99 ]
*
* var bool = ( idx === out );
* // returns true
*
* @example
* var shape = [ 10, 10 ];
* var strides = [ 1, 10 ];
* var offset = 10;
*
* var out = new Array( 2 );
* var idx = minmaxViewBufferIndex( out, shape, strides, offset );
* // returns [ 10, 109 ]
*
* var bool = ( idx === out );
* // returns true
*
* @example
* var shape = [ 10, 10 ];
* var strides = [ -1, -10 ];
* var offset = 99;
*
* var out = new Array( 2 );
* var idx = minmaxViewBufferIndex( out, shape, strides, offset );
* // returns [ 0, 99 ]
*
* var bool = ( idx === out );
* // returns true
*/

/**
* Computes the sine of a number.
*
* ## Method
*
* -   Let \\(S\\), \\(C\\), and \\(T\\) denote the \\(\sin\\), \\(\cos\\), and \\(\tan\\), respectively, on \\(\[-\pi/4, +\pi/4\]\\).
*
* -   Reduce the argument \\(x\\) to \\(y1+y2 = x-k\pi/2\\) in \\(\[-\pi/4, +\pi/4\]\\), and let \\(n = k \mod 4\\).
*
* -   We have
*
*     | n | sin(x) | cos(x) | tan(x) |
*     | - | ------ | ------ | ------ |
*     | 0 |   S    |   C    |    T   |
*     | 1 |   C    |  -S    |  -1/T  |
*     | 2 |  -S    |  -C    |    T   |
*     | 3 |  -C    |   S    |  -1/T  |
*
*
* @param {number} x - input value (in radians)
* @returns {number} sine
*
* @example
* var v = sin( 0.0 );
* // returns ~0.0
*
* @example
* var v = sin( 3.141592653589793/2.0 );
* // returns ~1.0
*
* @example
* var v = sin( -3.141592653589793/6.0 );
* // returns ~-0.5
*
* @example
* var v = sin( NaN );
* // returns NaN
*/

/**
* Computes the sine on \\( \approx \[-\pi/4, \pi/4] \\) (except on \\(-0\\)), where \\( \pi/4 \approx 0.7854 \\).
*
* ## Method
*
* -   Since \\( \sin(-x) = -\sin(x) \\), we need only to consider positive \\(x\\).
*
* -   Callers must return \\( \sin(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\(-0\\). Callers may do the optimization \\( \sin(x) \approx x \\) for tiny \\(x\\).
*
* -   \\( \sin(x) \\) is approximated by a polynomial of degree \\(13\\) on \\( \left\[0,\tfrac{pi}{4}\right] \\)
*
*     ```tex
*     \sin(x) \approx x + S_1 \cdot x^3 + \ldots + S_6 \cdot x^{13}
*     ```
*
*     where
*
*     ```tex
*     \left| \frac{\sin(x)}{x} \left( 1 + S_1 \cdot x + S_2 \cdot x + S_3 \cdot x + S_4 \cdot x + S_5 \cdot x + S_6 \cdot x \right) \right| \le 2^{-58}
*     ```
*
* -   We have
*
*     ```tex
*     \sin(x+y) = \sin(x) + \sin'(x') \cdot y \approx \sin(x) + (1-x*x/2) \cdot y
*     ```
*
*     For better accuracy, let
*
*     ```tex
*     r = x^3 * \left( S_2 + x^2 \cdot \left( S_3 + x^2 * \left( S_4 + x^2 \cdot ( S_5+x^2 \cdot S_6 ) \right) \right) \right)
*     ```
*
*     then
*
*     ```tex
*     \sin(x) = x + \left( S_1 \cdot x + ( x \cdot (r-y/2) + y ) \right)
*     ```
*
*
* @param {number} x - input value (in radians, assumed to be bounded by `~pi/4` in magnitude)
* @param {number} y - tail of `x`
* @returns {number} sine
*
* @example
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* @example
* var v = kernelSin( 3.141592653589793/6.0, 0.0 );
* // returns ~0.5
*
* @example
* var v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.58
*
* @example
* var v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* @example
* var v = kernelSin( 3.0, NaN );
* // returns NaN
*
* @example
* var v = kernelSin( NaN, NaN );
* // returns NaN
*/

/**
* Convert a string to lowercase.
*
* @module @stdlib/string/lowercase
*
* @example
* var lowercase = require( '@stdlib/string/lowercase' );
*
* var str = lowercase( 'bEEp' );
* // returns 'beep'
*/

/**
* Converts a base-64 encoded string to a blob.
*
* @param {string} b64Data - base-64 encoded string
* @param {string} [contentType=''] - content type
* @param {integer} [sliceSize=512] - slice size
* @returns {Blob} created blob
*/

/**
* Converts a string to lowercase.
*
* @param {string} str - string to convert
* @throws {TypeError} must provide a primitive string
* @returns {string} lowercase string
*
* @example
* var str = lowercase( 'bEEp' );
* // returns 'beep'
*/

/**
* Copies a `Float32Array`.
*
* @private
* @param {Float32Array} arr - array to copy
* @returns {Float32Array} new array
*/

/**
* Copies a `Float64Array`.
*
* @private
* @param {Float64Array} arr - array to copy
* @returns {Float64Array} new array
*/

/**
* Copies a `Uint16Array`.
*
* @private
* @param {Uint16Array} arr - array to copy
* @returns {Uint16Array} new array
*/

/**
* Copies a `Uint32Array`.
*
* @private
* @param {Uint32Array} arr - array to copy
* @returns {Uint32Array} new array
*/

/**
* Copies a `Uint8Array`.
*
* @private
* @param {Uint8Array} arr - array to copy
* @returns {Uint8Array} new array
*/

/**
* Copies a `Uint8ClampedArray`.
*
* @private
* @param {Uint8ClampedArray} arr - array to copy
* @returns {Uint8ClampedArray} new array
*/

/**
* Copies an `Int16Array`.
*
* @private
* @param {Int16Array} arr - array to copy
* @returns {Int16Array} new array
*/

/**
* Copies an `Int32Array`.
*
* @private
* @param {Int32Array} arr - array to copy
* @returns {Int32Array} new array
*/

/**
* Copies an `Int8Array`.
*
* @private
* @param {Int8Array} arr - array to copy
* @returns {Int8Array} new array
*/

/**
* Copies an error object.
*
* @private
* @param {(Error|TypeError|SyntaxError|URIError|ReferenceError|RangeError|EvalError)} error - error to copy
* @returns {(Error|TypeError|SyntaxError|URIError|ReferenceError|RangeError|EvalError)} error copy
*
* @example
* var err1 = new TypeError( 'beep' );
*
* var err2 = copyError( err1 );
* // returns <TypeError>
*/

/**
* Copies an ndarray view to a data buffer.
*
* @private
* @param {ndarray} arr - input ndarray
* @param {string} dtype - data type
* @returns {(Array|TypedArray|Buffer)} output data buffer
*
* @example
* var ndarray = require( '@stdlib/ndarray/ctor' );
*
* var vector = ndarray( 'generic', 1 );
*
* var buffer = [ 1.0, 2.0, 3.0 ];
* var shape = [ 3 ];
* var strides = [ -1 ];
* var vec = vector( buffer, shape, strides, 2, 'row-major' );
*
* var b = copyView( vec, 'float64' );
* // returns <Float64Array>[ 3.0, 2.0, 1.0 ]
*/

/**
* Copies buffer data to a new `Buffer` instance.
*
* @param {Buffer} buffer - buffer from which to copy
* @throws {TypeError} must provide a `Buffer` instance
* @returns {Buffer} new `Buffer` instance
*
* @example
* var fromArray = require( '@stdlib/buffer/from-array' );
*
* var b1 = fromArray( [ 1, 2, 3, 4 ] );
* // returns <Buffer>
*
* var b2 = fromBuffer( b1 );
* // returns <Buffer>
*/

/**
* Copies ndarray flags.
*
* @private
* @param {Object} flags - flags
* @returns {Object} copy of input object
*/

/**
* Copies or deep clones a value to an arbitrary depth.
*
* @param {*} value - value to copy
* @param {NonNegativeInteger} [level=+infinity] - copy depth
* @throws {TypeError} `level` must be a nonnegative integer
* @returns {*} value copy
*
* @example
* var out = copy( 'beep' );
* // returns 'beep'
*
* @example
* var value = [
*     {
*         'a': 1,
*         'b': true,
*         'c': [ 1, 2, 3 ]
*     }
* ];
* var out = copy( value );
* // returns [ { 'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ]
*
* var bool = ( value[0].c === out[0].c );
* // returns false
*/

/**
* Copies the contents of array-like object to a new array.
*
*
* @private
* @param {ArrayLike} arr - input array
* @param {NonNegativeInteger} len - array length
* @returns {Array} output array
*
* @example
* var arr = [ 1.0, 2.0, 3.0 ];
*
* var out = copy( arr, arr.length );
* // returns [ 1.0, 2.0, 3.0 ]
*
* var bool = ( arr === out );
* // returns false
*/

/**
* Copies values from `x` into `y`.
*
* @param {PositiveInteger} N - number of values to copy
* @param {(Array|TypedArray)} x - input array
* @param {integer} strideX - `x` stride length
* @param {(Array|TypedArray)} y - destination array
* @param {integer} strideY - `y` stride length
* @returns {(Array|TypedArray)} `y`
*
* @example
* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];
* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];
*
* gcopy( x.length, x, 1, y, 1 );
* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]
*/

/**
* Copies values from `x` into `y`.
*
* @param {PositiveInteger} N - number of values to copy
* @param {(Array|TypedArray)} x - input array
* @param {integer} strideX - `x` stride length
* @param {NonNegativeInteger} offsetX - starting `x` index
* @param {(Array|TypedArray)} y - destination array
* @param {integer} strideY - `y` stride length
* @param {NonNegativeInteger} offsetY - starting `y` index
* @returns {(Array|TypedArray)} `y`
*
* @example
* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];
* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];
*
* gcopy( x.length, x, 1, 0, y, 1, 0 );
* // y => [ 1.0, 2.0, 3.0, 4.0, 5.0 ]
*/

/**
* Copy buffer data to a new `Buffer` instance.
*
* @module @stdlib/buffer/from-buffer
*
* @example
* var fromArray = require( '@stdlib/buffer/from-array' );
* var copyBuffer = require( '@stdlib/buffer/from-buffer' );
*
* var b1 = fromArray( [ 1, 2, 3, 4 ] );
* // returns <Buffer>
*
* var b2 = copyBuffer( b1 );
* // returns <Buffer>
*/

/**
* Copy or deep clone a value to an arbitrary depth.
*
* @module @stdlib/utils/copy
*
* @example
* var copy = require( '@stdlib/utils/copy' );
*
* var out = copy( 'beep' );
* // returns 'beep'
*
* @example
* var copy = require( '@stdlib/utils/copy' );
*
* var value = [
*     {
*         'a': 1,
*         'b': true,
*         'c': [ 1, 2, 3 ]
*     }
* ];
* var out = copy( value );
* // returns [ {'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ]
*
* var bool = ( value[0].c === out[0].c );
* // returns false
*/

/**
* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/from-words
*
* @example
* var fromWords = require( '@stdlib/number/float64/base/from-words' );
*
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* v = fromWords( 3221823995, 1413754136 );
* // returns -3.141592653589793
*
* v = fromWords( 0, 0 );
* // returns 0.0
*
* v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* v = fromWords( 2146959360, 0 );
* // returns NaN
*
* v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/

/**
* Create a memoized ndarray constructor.
*
* @module @stdlib/ndarray/base/memoized-ctor
*
* @example
* var ctor = require( '@stdlib/ndarray/base/memoized-ctor' );
*
* var f1 = ctor( 'float64', 3 );
* // returns <Function>
*
* var f2 = ctor( 'float64', 3 );
* // returns <Function>
*
* var bool = ( f1 === f2 );
* // returns true
*
* var buffer = [ 1, 2, 3, 4, 5, 6 ];
* var shape = [ 3, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var out = f1( buffer, shape, strides, offset, 'row-major' );
*/

/**
* Create a memoized ndarray constructor.
*
* @module @stdlib/ndarray/memoized-ctor
*
* @example
* var ctor = require( '@stdlib/ndarray/memoized-ctor' );
*
* var f1 = ctor( 'float64', 3 );
* // returns <Function>
*
* var f2 = ctor( 'float64', 3 );
* // returns <Function>
*
* var bool = ( f1 === f2 );
* // returns true
*
* var buffer = [ 1, 2, 3, 4, 5, 6 ];
* var shape = [ 3, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var out = f1( buffer, shape, strides, offset, 'row-major' );
*/

/**
* Create a regular expression from a regular expression string.
*
* @module @stdlib/utils/regexp-from-string
*
* @example
* var reFromString = require( '@stdlib/utils/regexp-from-string' );
*
* var re = reFromString( '/beep/' );
* // returns /beep/
*/

/**
* Create a zero-filled contiguous linear ndarray data buffer.
*
* @module @stdlib/ndarray/base/buffer
*
* @example
* var buffer = require( '@stdlib/ndarray/base/buffer' );
*
* var buf = buffer( 'float64', 3 );
* // returns <Float64Array>[ 0.0, 0.0, 0.0 ]
*/

/**
* Create an ndarray constructor.
*
* @module @stdlib/ndarray/base/ctor
*
* @example
* var ctor = require( '@stdlib/ndarray/base/ctor' );
*
* var ndarray = ctor( 'float64', 3 );
* // returns <Function>
*
* var buffer = [ 1, 2, 3, 4, 5, 6 ];
* var shape = [ 3, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var out = ndarray( buffer, shape, strides, offset, 'row-major' );
*/

/**
* Create an ndarray constructor.
*
* @module @stdlib/ndarray/ctor
*
* @example
* var ctor = require( '@stdlib/ndarray/ctor' );
*
* var ndarray = ctor( 'generic', 3 );
* // returns <Function>
*
* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];
* var shape = [ 3, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var out = ndarray( buffer, shape, strides, offset, 'row-major' );
*/

/**
* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
*
* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
* @returns {number} floating-point number
*
* @example
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* @example
* var v = fromWords( 3221823995, 1413754136 );
* // returns -3.141592653589793
*
* @example
* var v = fromWords( 0, 0 );
* // returns 0.0
*
* @example
* var v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* @example
* var v = fromWords( 2146959360, 0 );
* // returns NaN
*
* @example
* var v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* @example
* var v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/

/**
* Data range picker.
*
* @property {string} size - button size
* @property {Object} style - CSS inline styles
* @property {Function} onChange - callback invoked when the data selection is changed; called with the current period (object with `from` and `to` properties)
*/

/**
* Define a non-enumerable read-only accessor.
*
* @module @stdlib/utils/define-nonenumerable-read-only-accessor
*
* @example
* var setNonEnumerableReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );
*
* function getter() {
*     return 'bar';
* }
*
* var obj = {};
*
* setNonEnumerableReadOnlyAccessor( obj, 'foo', getter );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

/**
* Define a non-enumerable read-write accessor.
*
* @module @stdlib/utils/define-nonenumerable-read-write-accessor
*
* @example
* var setNonEnumerableReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );
*
* function getter() {
*     return name + ' foo';
* }
*
* function setter( v ) {
*     name = v;
* }
*
* var name = 'bar';
* var obj = {};
*
* setNonEnumerableReadWriteAccessor( obj, 'foo', getter, setter );
*
* var v = obj.foo;
* // returns 'bar foo'
*
* obj.foo = 'beep';
*
* v = obj.foo;
* // returns 'beep foo'
*/

/**
* Define a read-only property.
*
* @module @stdlib/utils/define-read-only-property
*
* @example
* var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
*
* var obj = {};
*
* setReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

/**
* Defines a non-enumerable read-only accessor.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {Function} getter - accessor
*
* @example
* function getter() {
*     return 'bar';
* }
*
* var obj = {};
*
* setNonEnumerableReadOnlyAccessor( obj, 'foo', getter );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

/**
* Defines a non-enumerable read-write accessor.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {Function} getter - get accessor
* @param {Function} setter - set accessor
*
* @example
* function getter() {
*     return name + ' foo';
* }
*
* function setter( v ) {
*     name = v;
* }
*
* var name = 'bar';
* var obj = {};
*
* setNonEnumerableReadWriteAccessor( obj, 'foo', getter, setter );
*
* var v = obj.foo;
* // returns 'bar foo'
*
* obj.foo = 'beep';
*
* v = obj.foo;
* // returns 'beep foo'
*/

/**
* Defines a read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
*
* setReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

/**
* Detects a JSON string.
*
* Regular expression: `/^\{[\s\S]*\}$|^\[[\s\S]*\]$/`
*
* -   `^\{`
*
*     -   match a `{` literal which is the first character
*
* -   `[\s\S]*`
*
*     -   match any whitespace and non-whitespace characters which occur `0` or more times
*
* -   `\}$`
*
*     -   match a `}` literal which is the last character
*
* -   `|`
*
*     -   alternatively
*
* -   `^\[`
*
*     -   match a `[` literal which is the first character
*
* -   `[\s\S]*`
*
*     -   match any whitespace and non-whitespace characters which occur `0` or more times
*
* -   `\]$`
*
*     -   match a `]` literal which is the last character
*
*
* Example matching strings:
*
* -   `'{}'`
* -   `'[]'`
* -   `'{adjlkfaj3743.,><\n\t\rdf}'`
* -   `'[adjlkfaj3743.,><\n\t\rdf]'`
* -   `'{"a":5}'`
*
* @constant
* @type {RegExp}
* @default /^\{[\s\S]*\}$|^\[[\s\S]*\]$/
*/

/**
* Determine (nested) array dimensions.
*
* @module @stdlib/array/shape
*
* @example
* var arrayShape = require( '@stdlib/array/shape' );
*
* var arr = [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ];
*
* var shape = arrayShape( arr );
* // returns [ 3, 3 ]
*
* @example
* var arrayShape = require( '@stdlib/array/shape' );
*
* var arr = [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8 ] ];
*
* var shape = arrayShape( arr );
* // returns [ 3 ]
*
* @example
* var arrayShape = require( '@stdlib/array/shape' );
*
* var arr = [ [ 1, 2, 3 ], [ 4, 5, 6 ], null ];
*
* var shape = arrayShape( arr );
* // returns [ 3 ]
*/

/**
* Determine if an array data type can be cast to another array data type according to a specified casting rule.
*
* @module @stdlib/ndarray/base/assert/is-allowed-data-type-cast
*
* @example
* var isAllowedCast = require( '@stdlib/ndarray/base/assert/is-allowed-data-type-cast' );
*
* var bool = isAllowedCast( 'float32', 'float64', 'safe' );
* // returns true
*
* bool = isAllowedCast( 'float64', 'int32', 'safe' );
* // returns false
*/

/**
* Determine if an ndarray data type can be safely cast to another ndarray data type.
*
* @module @stdlib/ndarray/base/assert/is-safe-data-type-cast
*
* @example
* var isSafeCast = require( '@stdlib/ndarray/base/assert/is-safe-data-type-cast' );
*
* var bool = isSafeCast( 'float32', 'float64' );
* // returns true
*
* bool = isSafeCast( 'float64', 'int32' );
* // returns false
*/

/**
* Determine if an ndarray data type can be safely cast to, or is of the same "kind" as, another ndarray data type.
*
* @module @stdlib/ndarray/base/assert/is-same-kind-data-type-cast
*
* @example
* var isSameKindCast = require( '@stdlib/ndarray/base/assert/is-same-kind-data-type-cast' );
*
* var bool = isSameKindCast( 'float32', 'float64' );
* // returns true
*
* bool = isSameKindCast( 'uint16', 'int16' );
* // returns false
*/

/**
* Determine the index offset which specifies the location of the first indexed value in a multidimensional array based on a stride array.
*
* @module @stdlib/ndarray/strides2offset
*
* @example
* var strides2offset = require( '@stdlib/ndarray/base/strides2offset' );
*
* var shape = [ 2, 3, 10 ];
* var strides = [ 30, -10, 1 ];
*
* var offset = strides2offset( shape, strides );
* // returns 20
*/

/**
* Determine the order of a multidimensional array based on a provided stride array.
*
* @module @stdlib/ndarray/base/strides2order
*
* @example
* var strides2order = require( '@stdlib/ndarray/base/strides2order' );
*
* var order = strides2order( [ 2, 1 ] );
* // returns 'row-major'
*
* order = strides2order( [ 1, 2 ] );
* // returns 'column-major'
*
* order = strides2order( [ 1, 1, 1 ] );
* // returns 'both'
*
* order = strides2order( [ 2, 3, 1 ] );
* // returns 'none'
*/

/**
* Determines (nested) array dimensions.
*
* @param {Array} arr - array
* @throws {TypeError} must provide an array
* @returns {Array} array shape
*
* @example
* var arr = [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ];
*
* var shape = arrayShape( arr );
* // returns [ 3, 3 ]
*
* @example
* var arr = [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8 ] ];
*
* var shape = arrayShape( arr );
* // returns [ 3 ]
*
* @example
* var arr = [ [ 1, 2, 3 ], [ 4, 5, 6 ], null ];
*
* var shape = arrayShape( arr );
* // returns [ 3 ]
*/

/**
* Determines if an array is column-major contiguous.
*
* @private
* @param {string} order - **inferred** array order
* @param {boolean} contiguous - boolean indicating is an array is contiguous
* @returns {boolean} boolean indicating if an array is column-major contiguous
*/

/**
* Determines if an array is contiguous.
*
* @private
* @param {NonNegativeInteger} len - array length
* @param {NonNegativeIntegerArray} shape - array shape
* @param {IntegerArray} strides - stride array
* @param {NonNegativeInteger} offset - index offset
* @param {integer} iterationOrder - iteration order
* @returns {boolean} boolean indicating if an array is contiguous
*/

/**
* Determines if an array is row-major contiguous.
*
* @private
* @param {string} order - **inferred** array order
* @param {boolean} contiguous - boolean indicating is an array is contiguous
* @returns {boolean} boolean indicating if an array is row-major contiguous
*/

/**
* Determines the order of a multidimensional array based on a provided stride array.
*
* @param {IntegerArray} strides - stride array
* @returns {string} order
*
* @example
* var strides2order = require( '@stdlib/ndarray/base/strides2order' );
*
* var order = strides2order( [ 2, 1 ] );
* // returns 'row-major'
*
* order = strides2order( [ 1, 2 ] );
* // returns 'column-major'
*
* order = strides2order( [ 1, 1, 1 ] );
* // returns 'both'
*
* order = strides2order( [ 2, 3, 1 ] );
* // returns 'none'
*/

/**
* Displays a timer that will trigger a predefined callback when the time is up. An example use case is the timing of quizzes.
*
* @property {boolean} active - flag that can be toggled to start or pause the timer
* @property {number} duration - duration in seconds for the timer
* @property {boolean} invisible - controls whether the timer should be hidden
* @property {string} id - the unique `string` ID for the timer. If an ID is set, the timer component is persistent over page refreshes
* @property {string} legend - text displayed in front of the timer
* @property {Object} style - CSS inline styles
* @property {Function} onTimeUp - callback invoked when the timer runs out
*/

/**
* Dummy constructor.
*
* @private
*/

/**
* Dummy function.
*
* @private
*/

/**
* Escape a regular expression string or pattern.
*
* @module @stdlib/utils/escape-regexp-string
*
* @example
* var rescape = require( '@stdlib/utils/escape-regexp-string' );
*
* var str = rescape( '[A-Z]*' );
* // returns '\\[A\\-Z\\]\\*'
*/

/**
* Escapes a regular expression string.
*
* @param {string} str - regular expression string
* @throws {TypeError} first argument must be a string primitive
* @returns {string} escaped string
*
* @example
* var str = rescape( '[A-Z]*' );
* // returns '\\[A\\-Z\\]\\*'
*/

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/

/**
* Expands a strides array to accommodate an expanded array shape (i.e., an array shape with prepended singleton dimensions).
*
* @private
* @param {NonNegativeInteger} ndims - number of dimensions
* @param {Array} shape - expanded array shape
* @param {Array} strides - strides array
* @param {string} order - memory layout order
* @returns {Array} output strides array
*
* @example
* var out = expandStrides( 4, [ 1, 1, 2, 2 ], [ 1, 2 ], 'column-major' );
* // returns [ 1, 1, 1, 2 ]
*
* @example
* var out = expandStrides( 4, [ 1, 1, 2, 2 ], [ 2, 1 ], 'row-major' );
* // returns [ 4, 4, 2, 1 ]
*/

/**
* Extends an array by the elements of another array.
*
* @private
* @param {Array} arr - input array
* @param {Array} ext - array to extend `arr` with
* @returns {Array} mutated input array
*
* @example
* var arr = [ 1, 2, 3 ];
* var out = extend( arr, [ 4, 5 ] );
* // returns [ 1, 2, 3, 4, 5 ]
*/

/**
* Extracts the second to last word of an action type, as these should be most informative about the nature of the action (recall that project convention is to use `_` to separate words in action types)
*
* @private
* @param {string} str - action type
* @returns {string} substring of action type
*/

/**
* Fills an array-like object with zeros.
*
* @private
* @param {(Array|TypedArray|Buffer)} v - array-like object to fill
* @returns {(Array|TypedArray|Buffer)} input value
*
* @example
* var arr = zeros( new Array( 2 ) );
* // returns [ 0, 0 ]
*/

/**
* Flatten an array.
*
* @module @stdlib/utils/flatten-array
*
* @example
* var flattenArray = require( '@stdlib/utils/flatten-array' );
*
* var arr = [ 1, [2, [3, [4, [ 5 ], 6], 7], 8], 9 ];
*
* var out = flattenArray( arr );
* // returns [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
*
* @example
* var flattenArray = require( '@stdlib/utils/flatten-array' );
*
* var flatten = flattenArray.factory( [2,2], {
*     'copy': false
* });
*
* var out = flatten( [[1,2],[3,4]] );
* // returns [ 1, 2, 3, 4 ]
*
* out = flatten( [[5,6],[7,8]] );
* // returns [ 5, 6, 7, 8 ]
*/

/**
* Flattens an array.
*
* @param {Array} arr - input array
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.depth] - maximum depth to flatten
* @param {boolean} [options.copy=false] - boolean indicating whether to deep copy array elements
* @throws {TypeError} first argument must be an array
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Array} flattened array
*
* @example
* var arr = [ 1, [2, [3, [4, [ 5 ], 6], 7], 8], 9 ];
*
* var out = flattenArray( arr );
* // returns [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
*/

/**
* Formats time in the format `minutes:seconds`.
*
* @private
* @param {number} time - time in minutes
* @returns {string} formatted time string of the format `minutes:seconds`
*/

/**
* Generate a frequency table.
*
* @module @stdlib/utils/tabulate
*
* @example
* var tabulate = require( '@stdlib/utils/tabulate' );
*
* var arr = [ 'beep', 'boop', 'foo', 'beep' ];
*
* var out = tabulate( arr );
* // returns [ [ 'beep', 2, 0.5 ], [ 'boop', 1, 0.25 ], [ 'foo', 1, 0.25 ] ]
*/

/**
* Generate a stride array from an array shape.
*
* @module @stdlib/ndarray/base/shape2strides
*
* @example
* var shape2strides = require( '@stdlib/ndarray/base/shape2strides' );
*
* var strides = shape2strides( [ 3, 2 ], 'row-major' );
* // returns [ 2, 1 ]
*
* strides = shape2strides( [ 3, 2 ], 'column-major' );
* // returns [ 1, 3 ]
*/

/**
* Generates a frequency table.
*
* ## Notes
*
* -   The output is an array of arrays. Each sub-array corresponds to a unique value in the input collection and is structured as follows:
*
*     -   0: unique value
*     -   1: value count
*     -   2: frequency percentage
*
*
* @param {Collection} collection - input collection
* @throws {TypeError} first argument must be a collection
* @returns {(Array<Array>|Array)} frequency table
*
* @example
* var arr = [ 'beep', 'boop', 'foo', 'beep' ];
*
* var out = tabulate( arr );
* // returns [ [ 'beep', 2, 0.5 ], [ 'boop', 1, 0.25 ], [ 'foo', 1, 0.25 ] ]
*/

/**
* Generates a full table of safe casts for each ndarray data type.
*
* @private
* @returns {Object} table
*/

/**
* Generates a full table of same "kind" casts for each ndarray data type.
*
* @private
* @returns {Object} table
*/

/**
* Generates a stride array from an array shape.
*
* @param {(Array|TypedArray|Object)} [out] - output object
* @param {NonNegativeIntegerArray} shape - array shape
* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)
* @returns {(Array|TypedArray|Object)} array strides
*
* @example
* var strides = shape2strides( [ 3, 2 ], 'row-major' );
* // returns [ 2, 1 ]
*
* strides = shape2strides( [ 3, 2 ], 'column-major' );
* // returns [ 1, 3 ]
*/

/**
* Generates a stride array from an array shape.
*
* @private
* @param {(Array|TypedArray|Object)} out - output object
* @param {NonNegativeIntegerArray} shape - array shape
* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)
* @returns {(Array|TypedArray|Object)} array strides
*
* @example
* var strides = new Array( 2 );
*
* var out = shape2strides( strides, [ 3, 2 ], 'row-major' );
* // returns [ 2, 1 ]
*
* var bool = ( out === strides );
* // returns true
*
* out = shape2strides( strides, [ 3, 2 ], 'column-major' );
* // returns [ 1, 3 ]
*/

/**
* Generates a table of safe casts for each ndarray data type.
*
* @private
* @returns {Object} table
*/

/**
* Generates a table of same "kind" casts for each ndarray data type.
*
* @private
* @returns {Object} table
*/

/**
* Given a stride array, determine array iteration order.
*
* @module @stdlib/ndarray/base/iteration-order
*
* @example
* var iterationOrder = require( '@stdlib/ndarray/base/iteration-order' );
*
* var o = iterationOrder( [ 2, 1 ] );
* // returns 1
*
* o = iterationOrder( [ -2, 1 ] );
* // returns 0
*
* o = iterationOrder( [ -2, -1 ] );
* // returns -1
*/

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* ## Notes
*
* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2146435072 \\), which corresponds to the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000
* ```
*
* @constant
* @type {uinteger32}
* @default 0x7ff00000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-high-word-exponent-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/constants/math/float64-high-word-exponent-mask' );
* // returns 2146435072
*/

/**
* Implement prototypical inheritance by replacing the prototype of one constructor with the prototype of another constructor.
*
* @module @stdlib/utils/inherit
*
* @example
* var inherit = require( '@stdlib/utils/inherit' );
*
* function Foo() {
*     return this;
* }
* Foo.prototype.beep = function beep() {
*     return 'boop';
* };
*
* function Bar() {
*     Foo.call( this );
*     return this;
* }
* inherit( Bar, Foo );
*
* var bar = new Bar();
* var v = bar.beep();
* // returns 'boop'
*/

/**
* Implements prototypical inheritance by replacing the prototype of one constructor with the prototype of another constructor.
*
* ## Notes
*
* -   This implementation is not designed to work with ES2015/ES6 classes. For ES2015/ES6 classes, use `class` with `extends`.
* -   For reference, see [node#3455](https://github.com/nodejs/node/pull/3455), [node#4179](https://github.com/nodejs/node/issues/4179), [node#3452](https://github.com/nodejs/node/issues/3452), and [node commit](https://github.com/nodejs/node/commit/29da8cf8d7ab8f66b9091ab22664067d4468461e#diff-3deb3f32958bb937ae05c6f3e4abbdf5).
*
*
* @param {(Object|Function)} ctor - constructor which will inherit
* @param {(Object|Function)} superCtor - super (parent) constructor
* @throws {TypeError} first argument must be either an object or a function which can inherit
* @throws {TypeError} second argument must be either an object or a function from which a constructor can inherit
* @throws {TypeError} second argument must have an inheritable prototype
* @returns {(Object|Function)} child constructor
*
* @example
* function Foo() {
*     return this;
* }
* Foo.prototype.beep = function beep() {
*     return 'boop';
* };
*
* function Bar() {
*     Foo.call( this );
*     return this;
* }
* inherit( Bar, Foo );
*
* var bar = new Bar();
* var v = bar.beep();
* // returns 'boop'
*/

/**
* Initializes a PRNG state array according to a seed array.
*
* @private
* @param {Uint32Array} state - state array
* @param {NonNegativeInteger} N - state array length
* @param {ArrayLikeObject} seed - seed array
* @param {NonNegativeInteger} M - seed array length
* @returns {Uint32Array} state array
*/

/**
* Keyboard controls.
*
* @property {Object} actions - object mapping key codes to events
* @property {Node} container - DOM node for which to attach event listeners
*/

/**
* Matches parts of a regular expression string.
*
* Regular expression: `/^\/((?:\\\/|[^\/])+)\/([imgy]*)$/`
*
* -   `/^\/`
*     -   match a string that begins with a `/`
*
* -   `()`
*     -   capture
*
* -   `(?:)+`
*     -   capture, but do not remember, a group of characters which occur one or more times
*
* -   `\\\/`
*     -   match the literal `\/`
*
* -   `|`
*     -   OR
*
* -   `[^\/]`
*     -   anything which is not the literal `\/`
*
* -   `\/`
*     -   match the literal `/`
*
* -   `([imgy]*)`
*     -   capture any characters matching `imgy` occurring zero or more times
*
* -   `$/`
*     -   string end
*
*
* @constant
* @type {RegExp}
* @default /^\/((?:\\\/|[^\/])+)\/([imgy]*)$/
*/

/**
* Maximum double-precision floating-point number.
*
* ## Notes
*
* The maximum is given by
*
* ```tex
* 2^{1023} (2 - 2^{-52})
* ```
*
* @constant
* @type {number}
* @default 1.7976931348623157e+308
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* Maximum double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max
* @type {number}
*
* @example
* var FLOAT64_MAX = require( '@stdlib/constants/math/float64-max' );
* // returns 1.7976931348623157e+308
*/

/**
* Maximum length of a generic array.
*
* @module @stdlib/constants/array/max-array-length
*
* @example
* var MAX_ARRAY_LENGTH = require( '@stdlib/constants/array/max-array-length' );
* // returns 4294967295
*/

/**
* Maximum length of a generic array.
*
* ```tex
* 2^{32} - 1
* ```
*
* @constant
* @type {uinteger32}
* @default 4294967295
*/

/**
* Maximum safe double-precision floating-point integer.
*
* ## Notes
*
* The integer has the value
*
* ```tex
* 2^{53} - 1
* ```
*
* @constant
* @type {number}
* @default 9007199254740991
* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* Maximum safe double-precision floating-point integer.
*
* @module @stdlib/constants/math/float64-max-safe-integer
* @type {number}
*
* @example
* var FLOAT64_MAX_SAFE_INTEGER = require( '@stdlib/constants/math/float64-max-safe-integer' );
* // returns 9007199254740991
*/

/**
* Maximum signed 16-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{15} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 32767
*/

/**
* Maximum signed 16-bit integer.
*
* @module @stdlib/constants/math/int16-max
* @type {integer32}
*
* @example
* var INT16_MAX = require( '@stdlib/constants/math/int16-max' );
* // returns 32767
*/

/**
* Maximum signed 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{31} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 01111111111111111111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 2147483647
*/

/**
* Maximum signed 32-bit integer.
*
* @module @stdlib/constants/math/int32-max
* @type {integer32}
*
* @example
* var INT32_MAX = require( '@stdlib/constants/math/int32-max' );
* // returns 2147483647
*/

/**
* Maximum signed 8-bit integer.
*
* ## Notes
*
* The number is given by
*
* ```tex
* 2^{7} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 01111111
* ```
*
* @constant
* @type {integer32}
* @default 127
*/

/**
* Maximum signed 8-bit integer.
*
* @module @stdlib/constants/math/int8-max
* @type {integer32}
*
* @example
* var INT8_MAX = require( '@stdlib/constants/math/int8-max' );
* // returns 127
*/

/**
* Maximum unsigned 16-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{16} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 1111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 65535
*/

/**
* Maximum unsigned 16-bit integer.
*
* @module @stdlib/constants/math/uint16-max
* @type {integer32}
*
* @example
* var UINT16_MAX = require( '@stdlib/constants/math/uint16-max' );
* // returns 65535
*/

/**
* Maximum unsigned 8-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{8} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111
* ```
*
* @constant
* @type {integer32}
* @default 255
*/

/**
* Maximum unsigned 8-bit integer.
*
* @module @stdlib/constants/math/uint8-max
* @type {integer32}
*
* @example
* var UINT8_MAX = require( '@stdlib/constants/math/uint8-max' );
* // returns 255
*/

/**
* Minimum signed 16-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* -(2^{15})
* ```
*
* which corresponds to the two's complement bit sequence
*
* ```binarystring
* 1000000000000000
* ```
*
* @constant
* @type {integer32}
* @default -32768
*/

/**
* Minimum signed 16-bit integer.
*
* @module @stdlib/constants/math/int16-min
* @type {integer32}
*
* @example
* var INT16_MIN = require( '@stdlib/constants/math/int16-min' );
* // returns -32768
*/

/**
* Minimum signed 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* -(2^{31})
* ```
*
* which corresponds to the two's complement bit sequence
*
* ```binarystring
* 10000000000000000000000000000000
* ```
*
* @constant
* @type {integer32}
* @default -2147483648
*/

/**
* Minimum signed 32-bit integer.
*
* @module @stdlib/constants/math/int32-min
* @type {integer32}
*
* @example
* var INT32_MIN = require( '@stdlib/constants/math/int32-min' );
* // returns -2147483648
*/

/**
* Minimum signed 8-bit integer.
*
* ## Notes
*
* The number is given by
*
* ```tex
* -(2^{7})
* ```
*
* which corresponds to the two's complement bit sequence
*
* ```binarystring
* 10000000
* ```
*
* @constant
* @type {integer32}
* @default -128
*/

/**
* Minimum signed 8-bit integer.
*
* @module @stdlib/constants/math/int8-min
* @type {integer32}
*
* @example
* var INT8_MIN = require( '@stdlib/constants/math/int8-min' );
* // returns -128
*/

/**
* Multidimensional array.
*
* @module @stdlib/ndarray/array
*
* @example
* var array = require( '@stdlib/ndarray/array' );
*
* var arr = array( [ [ 1, 2 ], [ 3, 4 ] ] );
* // returns <ndarray>
*
* var v = arr.get( 0, 0 );
* // returns 1
*
* @example
* var array = require( '@stdlib/ndarray/array' );
*
* var opts = {
*     'dtype': 'generic',
*     'flatten': false
* };
*
* var arr = array( [ [ 1, 2 ], [ 3, 4 ] ], opts );
* // returns <ndarray>
*
* var v = arr.get( 0 );
* // returns [ 1, 2 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var array = require( '@stdlib/ndarray/array' );
*
* var opts = {
*     'shape': [ 2, 2 ]
* };
*
* var arr = array( new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] ), opts );
* // returns <ndarray>
*
* var v = arr.get( 0, 0 );
* // returns 1.0
*/

/**
* Multiplies a double-precision floating-point number by an integer power of two.
*
* @param {number} frac - fraction
* @param {integer} exp - exponent
* @returns {number} double-precision floating-point number
*
* @example
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* @example
* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* @example
* var x = ldexp( 0.0, 20 );
* // returns 0.0
*
* @example
* var x = ldexp( -0.0, 39 );
* // returns -0.0
*
* @example
* var x = ldexp( NaN, -101 );
* // returns NaN
*
* @example
* var x = ldexp( Infinity, 11 );
* // returns Infinity
*
* @example
* var x = ldexp( -Infinity, -118 );
* // returns -Infinity
*/

/**
* Multiply a double-precision floating-point number by an integer power of two.
*
* @module @stdlib/math/base/special/ldexp
*
* @example
* var ldexp = require( '@stdlib/math/base/special/ldexp' );
*
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* x = ldexp( 0.0, 20 );
* // returns 0.0
*
* x = ldexp( -0.0, 39 );
* // returns -0.0
*
* x = ldexp( NaN, -101 );
* // returns NaN
*
* x = ldexp( Infinity, 11 );
* // returns Infinity
*
* x = ldexp( -Infinity, -118 );
* // returns -Infinity
*/

/**
* Parses a regular expression string and returns a new regular expression.
*
* @param {string} str - regular expression string
* @throws {TypeError} must provide a regular expression string
* @returns {(RegExp|null)} regular expression or null
*
* @example
* var re = reFromString( '/beep/' );
* // returns /beep/
*/

/**
* Perform C-like multiplication of two unsigned 32-bit integers.
*
* @module @stdlib/math/base/special/uimul
*
* @example
* var uimul = require( '@stdlib/math/base/special/uimul' );
*
* var v = uimul( 10>>>0, 4>>>0 );
* // returns 40
*/

/**
* Performs C-like multiplication of two unsigned 32-bit integers.
*
* ## Method
*
* -   To emulate C-like multiplication without the aid of 64-bit integers, we recognize that a 32-bit integer can be split into two 16-bit words
*
*     ```tex
*     a = w_h*2^{16} + w_l
*     ```
*
*     where \\( w_h \\) is the most significant 16 bits and \\( w_l \\) is the least significant 16 bits. For example, consider the maximum unsigned 32-bit integer \\( 2^{32}-1 \\)
*
*     ```binarystring
*     11111111111111111111111111111111
*     ```
*
*     The 16-bit high word is then
*
*     ```binarystring
*     1111111111111111
*     ```
*
*     and the 16-bit low word
*
*     ```binarystring
*     1111111111111111
*     ```
*
*     If we cast the high word to 32-bit precision and multiply by \\( 2^{16} \\) (equivalent to a 16-bit left shift), then the bit sequence is
*
*     ```binarystring
*     11111111111111110000000000000000
*     ```
*
*     Similarly, upon casting the low word to 32-bit precision, the bit sequence is
*
*     ```binarystring
*     00000000000000001111111111111111
*     ```
*
*     From the rules of binary addition, we recognize that adding the two 32-bit values for the high and low words will return our original value \\( 2^{32}-1 \\).
*
* -   Accordingly, the multiplication of two 32-bit integers can be expressed
*
*     ```tex
*     \begin{align*}
*     a \cdot b &= ( a_h \cdot 2^{16} + a_l) \cdot ( b_h \cdot 2^{16} + b_l) \\
*           &= a_l \cdot b_l + a_h \cdot b_l \cdot 2^{16} + a_l \cdot b_h \cdot 2^{16} + (a_h \cdot b_h) \cdot 2^{32} \\
*           &= a_l \cdot b_l + (a_h \cdot b_l + a_l \cdot b_h) \cdot 2^{16} + (a_h \cdot b_h) \cdot 2^{32}
*     \end{align*}
*     ```
*
* -   We note that multiplying (dividing) an integer by \\( 2^n \\) is equivalent to performing a left (right) shift of \\( n \\) bits.
*
* -   Further, as we want to return an integer of the same precision, for a 32-bit integer, the return value will be modulo \\( 2^{32} \\). Stated another way, we only care about the low word of a 64-bit result.
*
* -   Accordingly, the last term, being evenly divisible by \\( 2^{32} \\), drops from the equation leaving the remaining two terms as the remainder.
*
*     ```tex
*     a \cdot b = a_l \cdot b_l + (a_h \cdot b_l + a_l \cdot b_h) << 16
*     ```
*
* -   Lastly, the second term in the above equation contributes to the middle bits and may cause the product to "overflow". However, we can disregard (`>>>0`) overflow bits due modulo arithmetic, as discussed earlier with regard to the term involving the partial product of high words.
*
*
* @param {uinteger32} a - integer
* @param {uinteger32} b - integer
* @returns {uinteger32} product
*
* @example
* var v = uimul( 10>>>0, 4>>>0 );
* // returns 40
*/

/**
* Performs the computation for `kernelRempio2()`.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - output object for storing double precision numbers
* @param {integer} jz - number of terms of `ipio2[]` used
* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/π`
* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)
* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation
* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation
* @param {integer} jx - `nx - 1`
* @param {Array<number>} f - `IPIO2[]` in floating point
* @returns {number} last three binary digits of `N`
*/

/**
* Plotly visualization.
*
* @property {Array} data - data array
* @property {boolean} editable - controls whether labels of the created plot are editable
* @property {boolean} draggable - controls whether the plot should be draggable
* @property {string} id - component identifier
* @property {Object} layout - Plotly layout object
* @property {boolean} legendButtons - controls whether to display buttons for changing the legend
* @property {boolean} toggleFullscreen - controls whether to allow displaying the plot in fullscreen mode
* @property {boolean} removeButtons - controls whether to remove all buttons (aside from fullscreen button if enabled)
* @property {Object} meta - plot meta-information
* @property {number} revision - when provided, causes the plot to update when the revision value is incremented
* @property {Object} style - CSS inline styles
* @property {Function} onAfterPlot - callback function invoked each time a chart is plotted
* @property {Function} onClick - callback function invoked when any element is clicked
* @property {Function} onRelayout - callback function invoked when relayout is triggered
* @property {Function} onLegendClick - callback function invoked when legend item is clicked
* @property {Function} onLegendDoubleClick - callback function invoked when legend item is double-clicked
* @property {Function} onSelected - callback function invoked when elements are selected
* @property {Function} onShare - callback function invoked when clicking on the "Share" button
*/

/**
* Prepends singleton dimensions in order to satisfy a minimum number of dimensions.
*
* @private
* @param {NonNegativeInteger} ndims - number of dimensions
* @param {Array} shape - array dimensions
* @param {NonNegativeInteger} ndmin - minimum number of dimensions
* @returns {Array} output shape array
*/

/**
* Recursively (and eagerly) attempts to resolve nested array dimensions.
*
* @private
* @param {Array} shape - output array
* @param {Array} arr - array
* @returns {Array} shape array
*/

/**
* Recursively flattens an array.
*
* @private
* @param {Array} out - output array
* @param {Array} arr - input array
* @param {NonNegativeInteger} depth - recursion depth
* @returns {Array} output array
*/

/**
* Recursively performs a deep copy of an input object.
*
* @private
* @param {*} val - value to copy
* @param {(Array|Object)} copy - copy
* @param {Array} cache - an array of visited objects
* @param {Array} refs - an array of object references
* @param {NonNegativeInteger} level - copy depth
* @returns {*} deep copy
*/

/**
* Recursively verifies that all nested arrays have consistent dimensions.
*
* @private
* @param {PositiveInteger} ndims - number of dimensions
* @param {Array} shape - shape array
* @param {NonNegativeInteger} d - dimension
* @param {Array} arr - array element to verify
* @param {boolean} flg - boolean indicating whether to continue recursing
* @returns {NonNegativeInteger} number of consistent dimensions
*/

/**
* Regular expression to parse a regular expression string.
*
* @module @stdlib/regexp/regexp
* @type {RegExp}
*
* @example
* var RE_REGEXP = require( '@stdlib/regexp/regexp' );
*
* var bool = RE_REGEXP.test( '/^beep$/' );
* // returns true
*
* bool = RE_REGEXP.test( '' );
* // returns false
*
* @example
* var RE_REGEXP = require( '@stdlib/regexp/regexp' );
*
* var parts = RE_REGEXP.exec( '/^.*$/ig' );
* // returns [ '/^.*$/ig', '^.*$', 'ig', 'index': 0, 'input': '/^.*$/ig' ]
*/

/**
* Remove punctuation characters from a string.
*
* @module @stdlib/string/remove-punctuation
*
* @example
* var removePunctuation = require( '@stdlib/string/remove-punctuation' );
*
* var out = removePunctuation( 'Sun Tzu said: "A leader leads by example not by force."' );
* // returns 'Sun Tzu said A leader leads by example not by force'
*
* out = removePunctuation( 'Double, double, toil and trouble; Fire burn, and cauldron bubble!' ) );
* // returns 'Double double toil and trouble Fire burn and cauldron bubble'
*/

/**
* Remove the last character of a string.
*
* @module @stdlib/string/remove-last
*
* @example
* var removeLast = require( '@stdlib/string/remove-last' );
*
* var out = removeLast( 'last man standing' );
* // returns 'last man standin'
*
* out = removeLast( 'Hidden Treasures' );
* // returns 'Hidden Treasure';
*/

/**
* Removes punctuation characters from a string.
*
* @param {string} str - input string
* @throws {TypeError} must provide a string primitive
* @returns {string} output string
*
* @example
* var str = 'Sun Tzu said: "A leader leads by example not by force."';
* var out = removePunctuation( str );
* // returns 'Sun Tzu said A leader leads by example not by force'
*
* @example
* var str = 'Double, double, toil and trouble; Fire burn, and cauldron bubble!';
* var out = removePunctuation( str );
* // returns 'Double double toil and trouble Fire burn and cauldron bubble'
*
* @example
* var str = 'This module removes these characters: `{}[]:,!/<>().;~|?\'"';
* var out = removePunctuation( str );
* // returns 'This module removes these characters '
*/

/**
* Removes the last character of a string.
*
* @param {string} str - input string
* @throws {TypeError} must provide a string primitive
* @returns {string} updated string
*
* @example
* var out = removeLast( 'last man standing' );
* // returns 'last man standin'
*
* @example
* var out = removeLast( 'presidential election' );
* // returns 'presidential electio'
*
* @example
* var out = removeLast( 'javaScript' );
* // returns 'javaScrip'
*
* @example
* var out = removeLast( 'Hidden Treasures' );
* // returns 'Hidden Treasure'
*/

/**
* Repeat a string a specified number of times and return the concatenated result.
*
* @module @stdlib/string/repeat
*
* @example
* var replace = require( '@stdlib/string/repeat' );
*
* var str = repeat( 'a', 5 );
* // returns 'aaaaa'
*
* str = repeat( '', 100 );
* // returns ''
*
* str = repeat( 'beep', 0 );
* // returns ''
*/

/**
* Repeats a string a specified number of times and returns the concatenated result.
*
* ## Methods
*
* The algorithmic trick used in the implementation is to treat string concatenation the same as binary addition (i.e., any natural number (nonnegative integer) can be expressed as a sum of powers of two).
*
* For example,
*
* ```text
* n = 10 => 1010 => 2^3 + 2^0 + 2^1 + 2^0
* ```
*
* We can produce a 10-repeat string by "adding" the results of a 8-repeat string and a 2-repeat string.
*
* The implementation is then as follows:
*
* 1.  Let `s` be the string to be repeated and `o` be an output string.
*
* 2.  Initialize an output string `o`.
*
* 3.  Check the least significant bit to determine if the current `s` string should be "added" to the output "total".
*
*     -   if the bit is a one, add
*     -   otherwise, move on
*
* 4.  Double the string `s` by adding `s` to `s`.
*
* 5.  Right-shift the bits of `n`.
*
* 6.  Check if we have shifted off all bits.
*
*     -   if yes, done.
*     -   otherwise, move on
*
* 7.  Repeat 3-6.
*
* The result is that, as the string is repeated, we continually check to see if the doubled string is one which we want to add to our "total".
*
* The algorithm runs in `O(log_2(n))` compared to `O(n)`.
*
*
* @param {string} str - string to repeat
* @param {NonNegativeInteger} n - number of times to repeat the string
* @throws {TypeError} first argument must be a string primitive
* @throws {TypeError} second argument must be a nonnegative integer
* @throws {RangeError} output string length must not exceed maximum allowed string length
* @returns {string} repeated string
*
* @example
* var str = repeat( 'a', 5 );
* // returns 'aaaaa'
*
* @example
* var str = repeat( '', 100 );
* // returns ''
*
* @example
* var str = repeat( 'beep', 0 );
* // returns ''
*/

/**
* Replace search occurrences with a replacement string.
*
* @module @stdlib/string/replace
*
* @example
* var replace = require( '@stdlib/string/replace' );
*
* var str = 'beep';
* var out = replace( str, 'e', 'o' );
* // returns 'boop'
*
* str = 'Hello World';
* out = replace( str, /world/i, 'Mr. President' );
* // returns 'Hello Mr. President'
*/

/**
* Replace search occurrences with a replacement string.
*
* @param {string} str - input string
* @param {(string|RegExp)} search - search expression
* @param {(string|Function)} newval - replacement value or function
* @throws {TypeError} first argument must be a string primitive
* @throws {TypeError} second argument argument must be a string primitive or regular expression
* @throws {TypeError} third argument must be a string primitive or function
* @returns {string} new string containing replacement(s)
*
* @example
* var str = 'beep';
* var out = replace( str, 'e', 'o' );
* // returns 'boop'
*
* @example
* var str = 'Hello World';
* var out = replace( str, /world/i, 'Mr. President' );
* // returns 'Hello Mr. President'
*
* @example
* var capitalize = require( '@stdlib/string/capitalize' );
*
* var str = 'Oranges and lemons say the bells of St. Clement\'s';
*
* function replacer( match, p1 ) {
*     return capitalize( p1 );
* }
*
* var out = replace( str, /([^\s]*)/gi, replacer);
* // returns 'Oranges And Lemons Say The Bells Of St. Clement\'s'
*/

/**
* Restrict a value to a specified range.
*
* @module @stdlib/math/base/special/clamp
*
* @example
* var clamp = require( '@stdlib/math/base/special/clamp' );
*
* var v = clamp( 3.14, 0.0, 5.0 );
* // returns 3.14
*
* v = clamp( -3.14, 0.0, 5.0 );
* // returns 0.0
*
* v = clamp( 10.0, 0.0, 5.0 );
* // returns 5.0
*
* v = clamp( -0.0, 0.0, 5.0 );
* // returns 0.0
*
* v = clamp( 0.0, -0.0, 5.0 );
* // returns 0.0
*
* v = clamp( NaN, 0.0, 5.0 );
* // returns NaN
*
* v = clamp( 0.0, NaN, 5.0 );
* // returns NaN
*
* v = clamp( 3.14, 0.0, NaN );
* // returns NaN
*/

/**
* Restrict an index to the interval `[0,max]`.
*
* @module @stdlib/ndarray/base/clamp-index
*
* @example
* var clampIndex = require( '@stdlib/ndarray/base/clamp-index' );
*
* var idx = clampIndex( -1, 10 );
* // returns 0
*
* idx = clampIndex( 15, 10 );
* // returns 10
*
* idx = clampIndex( 5, 10 );
* // returns 5
*/

/**
* Restricts a value to a specified range.
*
* @param {number} v - input value
* @param {number} min - minimum value
* @param {number} max - maximum value
* @returns {number} value restricted to a specified range
*
* @example
* var v = clamp( 3.14, 0.0, 5.0 );
* // returns 3.14
*
* v = clamp( -3.14, 0.0, 5.0 );
* // returns 0.0
*
* v = clamp( 10.0, 0.0, 5.0 );
* // returns 5.0
*
* v = clamp( -0.0, 0.0, 5.0 );
* // returns 0.0
*
* v = clamp( 0.0, -0.0, 5.0 );
* // returns 0.0
*
* v = clamp( NaN, 0.0, 5.0 );
* // returns NaN
*
* v = clamp( 0.0, NaN, 5.0 );
* // returns NaN
*
* v = clamp( 3.14, 0.0, NaN );
* // returns NaN
*/

/**
* Restricts an index to the interval `[0,max]`.
*
* @param {integer} idx - index
* @param {NonNegativeInteger} max - maximum index
* @returns {NonNegativeInteger} index
*
* @example
* var idx = clampIndex( -1, 10 );
* // returns 0
*
* idx = clampIndex( 15, 10 );
* // returns 10
*
* idx = clampIndex( 5, 10 );
* // returns 5
*/

/**
* Return a JSON representation of a typed array.
*
* @module @stdlib/array/to-json
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var toJSON = require( '@stdlib/array/to-json' );
*
* var arr = new Float64Array( [ 5.0, 3.0 ] );
* var json = toJSON( arr );
* // returns { 'type': 'Float64Array', 'data': [ 5.0, 3.0 ] }
*/

/**
* Return a boolean indicating if a buffer length is compatible with provided ndarray meta data.
*
* @module @stdlib/ndarray/base/assert/is-stride-offset-buffer-compatible
*
* @example
* var isBufferLengthCompatible = require( '@stdlib/ndarray/base/assert/is-buffer-length-compatible' );
*
* var shape = [ 2, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var bool = isBufferLengthCompatible( 4, shape, strides, offset );
* // returns true
*
* @example
* var isBufferLengthCompatible = require( '@stdlib/ndarray/base/assert/is-buffer-length-compatible' );
*
* var shape = [ 2, 2 ];
* var strides = [ 2, 1 ];
* var offset = 2;
*
* var bool = isBufferLengthCompatible( 4, shape, strides, offset );
* // returns false
*/

/**
* Return a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

/**
* Return a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @module @stdlib/math/base/special/copysign
*
* @example
* var copysign = require( '@stdlib/math/base/special/copysign' );
*
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* z = copysign( -0.0, 1.0 );
* // returns 0.0
*/

/**
* Return a function which tests if every element in an array-like object passes a test condition.
*
* @module @stdlib/assert/tools/array-like-function
*
* @example
* var isOdd = require( '@stdlib/assert/is-odd' );
* var arraylikefcn = require( '@stdlib/assert/tools/array-like-function' );
*
* var arr1 = [ 1, 3, 5, 7 ];
* var arr2 = [ 3, 5, 8 ];
*
* var validate = arraylikefcn( isOdd );
*
* var bool = validate( arr1 );
* // returns true
*
* bool = validate( arr2 );
* // returns false
*/

/**
* Return a list of ndarray casting modes.
*
* @module @stdlib/ndarray/casting-modes
*
* @example
* var modes = require( '@stdlib/ndarray/casting-modes' );
*
* var list = modes();
* // returns [ 'none', 'equiv', 'safe', 'same-kind', 'unsafe' ]
*/

/**
* Return a list of ndarray data types to which a provided ndarray data type can be safely cast or cast within the same "kind".
*
* @module @stdlib/ndarray/same-kind-casts
*
* @example
* var sameKindCasts = require( '@stdlib/ndarray/same-kind-casts' );
*
* var list = sameKindCasts( 'float32' );
* // returns [...]
*/

/**
* Return a list of ndarray data types to which a provided ndarray data type can be safely cast.
*
* @module @stdlib/ndarray/safe-casts
*
* @example
* var safeCasts = require( '@stdlib/ndarray/safe-casts' );
*
* var list = safeCasts( 'float32' );
* // returns [...]
*/

/**
* Return a list of ndarray data types.
*
* @module @stdlib/ndarray/dtypes
*
* @example
* var dtypes = require( '@stdlib/ndarray/dtypes' );
*
* var list = dtypes();
* // returns [...]
*/

/**
* Return a list of ndarray index modes.
*
* @module @stdlib/ndarray/index-modes
*
* @example
* var modes = require( '@stdlib/ndarray/index-modes' );
*
* var list = modes();
* // returns [ 'throw', 'clamp', 'wrap' ]
*/

/**
* Return a list of ndarray orders.
*
* @module @stdlib/ndarray/orders
*
* @example
* var orders = require( '@stdlib/ndarray/orders' );
*
* var list = orders();
* // returns [ 'row-major', 'column-major' ]
*/

/**
* Return a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @module @stdlib/number/float64/base/normalize
*
* @example
* var normalize = require( '@stdlib/number/float64/base/normalize' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var normalize = require( '@stdlib/number/float64/base/normalize' );
*
* var out = new Float64Array( 2 );
*
* var v = normalize( out, 3.14e-319 );
* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]
*
* var bool = ( v === out );
* // returns true
*/

/**
* Return a partial object copy excluding properties for which a predicate (function) returns a truthy value.
*
* @module @stdlib/utils/omit-by
*
* @example
* var omitBy = require( '@stdlib/utils/omit-by' );
*
* function predicate( key, value ) {
*     return ( value > 1 );
* }
*
* var obj1 = {
*     'a': 1,
*     'b': 2
* };
*
* var obj2 = omitBy( obj1, predicate );
* // returns { 'a': 1 }
*/

/**
* Return a partial object copy excluding specified keys.
*
* @module @stdlib/utils/omit
*
* @example
* var omit = require( '@stdlib/utils/omit' );
*
* var obj1 = {
*     'a': 1,
*     'b': 2
* };
*
* var obj2 = omit( obj1, 'b' );
* // returns { 'a': 1 }
*/

/**
* Return a property descriptor for an object's own property.
*
* @module @stdlib/utils/property-descriptor
*
* @example
* var getOwnPropertyDescriptor = require( '@stdlib/utils/property-descriptor' );
*
* var obj = {
*   'foo': 'bar',
*   'beep': 'boop'
* };
*
* var keys = getOwnPropertyDescriptor( obj, 'foo' );
* // returns {'configurable':true,'enumerable':true,'writable':true,'value':'bar'}
*/

/**
* Return a random permutation of elements from an array-like object.
*
* @module @stdlib/random/shuffle
*
* @example
* var shuffle = require( '@stdlib/random/shuffle' );
*
* var data = [ 1, 2, 3 ];
* var out = shuffle( data );
* // e.g., returns [ 3, 1, 2 ]
*
* out = shuffle( data, {
*     'copy': 'none'
* });
*
* var bool = ( data === out );
* // returns true
*/

/**
* Return an array of an object's own enumerable and non-enumerable property names.
*
* @module @stdlib/utils/property-names
*
* @example
* var getOwnPropertyNames = require( '@stdlib/utils/property-names' );
*
* var keys = getOwnPropertyNames({
*   'foo': 'bar',
*   'beep': 'boop'
* });
* // e.g., returns [ 'foo', 'beep' ]
*/

/**
* Return an array of an object's own enumerable property `[key, value]` pairs.
*
* @module @stdlib/utils/entries
*
* @example
* var objectEntries = require( '@stdlib/utils/entries' );
*
* var obj = {
*     'beep': 'boop',
*     'foo': 'bar'
* };
*
* var entries = objectEntries( obj );
* // e.g., returns [ ['beep', 'boop'], ['foo', 'bar'] ]
*/

/**
* Return an index given an index mode.
*
* @module @stdlib/ndarray/base/ind
*
* @example
* var ind = require( '@stdlib/ndarray/base/ind' );
*
* var idx = ind( -1, 10, 'wrap' );
* // returns 10
*
* idx = ind( 14, 10, 'wrap' );
* // returns 3
*
* idx = ind( 6, 10, 'wrap' );
* // returns 6
*
* @example
* var ind = require( '@stdlib/ndarray/base/ind' );
*
* var idx = ind( -1, 10, 'clamp' );
* // returns 0
*
* idx = ind( 14, 10, 'clamp' );
* // returns 10
*
* idx = ind( 6, 10, 'clamp' );
* // returns 6
*
* @example
* var ind = require( '@stdlib/ndarray/base/ind' );
*
* var idx = ind( 1, 10, 'throw' );
* // returns 1
*
* idx = ind( 14, 10, 'throw' );
* // throws <RangeError>
*
* idx = ind( -1, 10, 'throw' );
* // throws <RangeError>
*/

/**
* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/exponent
*
* @example
* var exponent = require( '@stdlib/number/float64/base/exponent' );
*
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* exp = exponent( -3.14 );
* // returns 1
*
* exp = exponent( 0.0 );
* // returns -1023
*
* exp = exponent( NaN );
* // returns 1024
*/

/**
* Return an unsigned 32-bit integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-low-word
*
* @example
* var getLowWord = require( '@stdlib/number/float64/base/get-low-word' );
*
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/

/**
* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-high-word
*
* @example
* var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
*
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

/**
* Return the data type of an ndarray data buffer.
*
* @module @stdlib/ndarray/base/buffer-dtype
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var dtype = require( '@stdlib/ndarray/base/buffer-dtype' );
*
* var buf = new Float64Array( 10 );
*
* var dt = dtype( buf );
* // returns 'float64'
*
* dt = dtype( {} );
* // returns 'generic'
*
* dt = dtype( 'beep' );
* // returns null
*/

/**
* Return the maximum value.
*
* @module @stdlib/math/base/special/max
*
* @example
* var max = require( '@stdlib/math/base/special/max' );
*
* var v = max( 3.14, 4.2 );
* // returns 4.2
*
* v = max( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* v = max( 3.14, NaN );
* // returns NaN
*
* v = max( +0.0, -0.0 );
* // returns +0.0
*/

/**
* Return the minimum value.
*
* @module @stdlib/math/base/special/min
*
* @example
* var min = require( '@stdlib/math/base/special/min' );
*
* var v = min( 3.14, 4.2 );
* // returns 3.14
*
* v = min( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* v = min( 3.14, NaN );
* // returns NaN
*
* v = min( +0.0, -0.0 );
* // returns -0.0
*/

/**
* Return the name of a function.
*
* @module @stdlib/utils/function-name
*
* @example
* var functionName = require( '@stdlib/utils/function-name' );
*
* var v = functionName( String );
* // returns 'String'
*
* v = functionName( function foo(){} );
* // returns 'foo'
*
* v = functionName( function(){} );
* // returns '' || 'anonymous'
*/

/**
* Return the number of bytes per element provided an underlying array data type.
*
* @module @stdlib/ndarray/base/bytes-per-element
*
* @example
* var bytesPerElement = require( '@stdlib/ndarray/base/bytes-per-element' );
*
* var nbytes = bytesPerElement( 'float64' );
* // returns 8
*
* nbytes = bytesPerElement( 'generic' );
* // returns null
*/

/**
* Return the number of elements in an array.
*
* @module @stdlib/ndarray/base/numel
*
* @example
* var numel = require( '@stdlib/ndarray/base/numel' );
*
* var n = numel( [ 3, 3, 3 ] );
* // returns 27
*/

/**
* Return the prototype of a provided object.
*
* @module @stdlib/utils/get-prototype-of
*
* @example
* var getPrototype = require( '@stdlib/utils/get-prototype-of' );
*
* var proto = getPrototype( {} );
* // returns {}
*/

/**
* Returns a 32-bit Mersenne Twister pseudorandom number generator.
*
* ## Notes
*
* -   In contrast to the original C implementation, array seeds of length `1` are considered integer seeds. This ensures that the seed `[ 1234 ]` generates the same output as the seed `1234`. In the original C implementation, the two seeds would yield different output, which is **not** obvious from a user perspective.
*
* @param {Options} [options] - options
* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed
* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state
* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state
* @throws {TypeError} options argument must be an object
* @throws {TypeError} a seed must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integers less than or equal to the maximum unsigned 32-bit integer
* @throws {RangeError} a numeric seed must be a positive integer less than or equal to the maximum unsigned 32-bit integer
* @throws {TypeError} state must be a `Uint32Array`
* @throws {Error} must provide a valid state
* @throws {TypeError} `copy` option must be a boolean
* @returns {PRNG} Mersenne Twister PRNG
*
* @example
* var mt19937 = factory();
*
* var v = mt19937();
* // returns <number>
*
* @example
* // Return a seeded Mersenne Twister PRNG:
* var mt19937 = factory({
*     'seed': 1234
* });
*
* var v = mt19937();
* // returns 822569775
*/

/**
* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} lower order word
*
* @example
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/

/**
* Returns a JSON representation of a typed array.
*
* ## Notes
*
* -   We build a JSON object representing a typed array similar to how Node.js `Buffer` objects are represented. See [Buffer][1].
*
* [1]: https://nodejs.org/api/buffer.html#buffer_buf_tojson
*
* @param {TypedArray} arr - typed array to serialize
* @throws {TypeError} first argument must be a typed array
* @returns {Object} JSON representation
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var arr = new Float64Array( [ 5.0, 3.0 ] );
* var json = toJSON( arr );
* // returns { 'type': 'Float64Array', 'data': [ 5.0, 3.0 ] }
*/

/**
* Returns a boolean indicating if a buffer length is compatible with provided ndarray meta data.
*
* @param {NonNegativeInteger} len - buffer length
* @param {NonNegativeIntegerArray} shape - array shape
* @param {IntegerArray} strides - stride array
* @param {NonNegativeInteger} offset - index offset
* @returns {boolean} boolean indicating if a buffer length is compatible
*
* @example
* var shape = [ 2, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var bool = isBufferLengthCompatible( 4, shape, strides, offset );
* // returns true
*
* @example
* var shape = [ 2, 2 ];
* var strides = [ 2, 1 ];
* var offset = 2;
*
* var bool = isBufferLengthCompatible( 4, shape, strides, offset );
* // returns false
*/

/**
* Returns a boolean indicating if a provided ndarray data type can be cast to another ndarray data type according to a specified casting mode.
*
* @param {string} from - ndarray data type
* @param {string} to - ndarray data type
* @param {string} casting - ndarray casting mode
* @returns {boolean} boolean indicating if a data type can be cast to another data type
*
* @example
* var bool = isAllowedCast( 'float32', 'float64', 'safe' );
* // returns true
*
* bool = isAllowedCast( 'float64', 'int32', 'safe' );
* // returns false
*/

/**
* Returns a boolean indicating if a provided ndarray data type can be safely cast to another ndarray data type.
*
* @param {string} from - ndarray data type
* @param {string} to - ndarray data type
* @returns {boolean} boolean indicating if a data type can be safely cast to another data type
*
* @example
* var bool = isSafeCast( 'float32', 'float64' );
* // returns true
*
* bool = isSafeCast( 'float64', 'int32' );
* // returns false
*/

/**
* Returns a boolean indicating if a provided ndarray data type can be safely cast to, or is of the same "kind" as, another ndarray data type.
*
* @param {string} from - ndarray data type
* @param {string} to - ndarray data type
* @returns {boolean} boolean indicating if a data type can be cast to another data type
*
* @example
* var bool = isSameKindCast( 'float32', 'float64' );
* // returns true
*
* bool = isSameKindCast( 'uint16', 'int16' );
* // returns false
*/

/**
* Returns a cache key.
*
* @private
* @param {string} dtype - data type
* @param {Options} opts - function options
* @param {boolean} opts.codegen - boolean indicating whether to use code generation
* @param {string} opts.mode - specifies how to handle indices which exceed array dimensions
* @param {StringArray} opts.submode - specifies how to handle subscripts which exceed array dimensions on a per dimension basis
* @returns {string} cache key
*
* @example
* var opts = {
*     'codegen': true,
*     'mode': 'throw',
*     'submode': [ 'throw' ]
* };
* var key = getKey( 'float64', opts );
* // returns 'float64;codegen=true,mode="throw",submode=["throw"]'
*/

/**
* Returns a cache key.
*
* @private
* @param {string} dtype - data type
* @param {Options} opts - function options
* @param {boolean} opts.codegen - boolean indicating whether to use code generation
* @returns {string} cache key
*
* @example
* var opts = {
*     'codegen': true
* };
* var key = getKey( 'float64', opts );
* // returns 'float64;codegen=true'
*/

/**
* Returns a constructor cache.
*
* ## Notes
*
* -   Should return something similar to the following:
*
*     ```text
*     {
*         "float64;codegen=true": [],
*         "float64;codegen=false": [],
*         "float32;codegen=true": [],
*         "float32;codegen=false": [],
*         ...
*     }
*     ```
*
* @private
* @returns {Object} constructor cache
*/

/**
* Returns a constructor cache.
*
* @private
* @returns {Object} constructor cache
*/

/**
* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @param {number} x - number from which to derive a magnitude
* @param {number} y - number from which to derive a sign
* @returns {number} a double-precision floating-point number
*
* @example
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* @example
* var z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* @example
* var z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* @example
* var z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* @example
* var z = copysign( -0.0, 1.0 );
* // returns 0.0
*/

/**
* Returns a function for flattening arrays having specified dimensions.
*
* @param {PositiveIntegerArray} dims - dimensions
* @param {Options} [options] - function options
* @param {boolean} [options.copy=false] - boolean indicating whether to deep copy array elements
* @throws {TypeError} first argument must be an array of positive integers
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Function} flatten function
*
* @example
* var flatten = factory( [2,2], {
*     'copy': false
* });
*
* var out = flatten( [[1,2],[3,4]] );
* // returns [ 1, 2, 3, 4 ]
*
* out = flatten( [[5,6],[7,8]] );
* // returns [ 5, 6, 7, 8 ]
*/

/**
* Returns a function to create a random permutation of elements from an array-like object.
*
* @param {Options} [config] - function options
* @param {PositiveInteger} [config.seed] - integer-valued seed
* @param {string} [config.copy="shallow"] - default copy option (`deep`, `shallow` or `none`)
* @throws {TypeError} options argument must be an object
* @returns {Function} shuffle function
*
* @example
* var shuffle = factory({
*     'seed': 249
* });
* var data = [ 3, 8, 4, 8 ];
* var out = shuffle( data );
* // e.g., returns [ 4, 3, 8, 8 ]
*/

/**
* Returns a function to flatten an array and deep copy.
*
* @private
* @param {Function} flatten - flatten function
* @returns {Function} wrapped flatten function
*/

/**
* Returns a function to flatten an array containing elements all having the same dimensions.
*
* @private
* @param {PositiveIntegerArray} dims - dimensions
* @returns {Function} flatten function
*/

/**
* Returns a function to flatten an array.
*
* @private
* @param {Function} flatten - flatten function
* @returns {Function} wrapped flatten function
*/

/**
* Returns a function to sample elements from an array-like object.
*
* @param {ArrayLike} [pool] - array-like object from which to sample
* @param {Options} [options] - function options
* @param {PositiveInteger} [options.seed] - integer-valued seed
* @param {NonNegativeInteger} [options.size] - sample size
* @param {boolean} [options.replace=true] - boolean indicating whether to sample with replacement
* @param {boolean} [options.mutate=false] - boolean indicating whether to mutate the `pool` when sampling without replacement
* @throws {TypeError} `pool` must be an array-like object
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Function} function to sample elements from an array-like object
*
* @example
* var sample = factory({
*     'seed': 232
* });
* var out = sample( 'abcdefg' );
* // e.g., returns [ 'g', 'd', 'g', 'f', 'c', 'e', 'f' ]
*
* @example
* var sample = factory( [ 1, 2, 3, 4, 5, 6 ], {
*     'seed': 232,
*     'size': 2
* });
* var out = sample();
* // e.g., returns [ 6, 4 ]
*
* out = sample();
* // e.g., returns [ 6, 5 ]
*
* @example
* var sample = factory( [ 1, 2, 3, 4, 5, 6 ], {
*     'seed': 474,
*     'size': 3,
*     'mutate': true,
*     'replace': false
* });
* var out = sample();
* // e.g., returns [ 4, 3, 6 ]
*
* out = sample();
* // e.g., returns [ 1, 5, 2 ]
*
* out = sample();
* // returns null
*
* @example
* var sample = factory( [ 0, 1 ], {
*     'size': 2
* });
*
* var out = sample();
* // e.g., returns [ 1, 1 ]
*
* out = sample({
*     'size': 10
* });
* // e.g., returns [ 0, 1, 1, 1, 0, 1, 0, 0, 1, 1 ]
*
* @example
* var sample = factory( [ 0, 1 ], {
*     'size': 2
* });
*
* var out = sample();
* // e.g., returns [ 1, 1 ]
*
* out = sample({
*     'replace': false
* });
* // e.g., returns [ 0, 1 ] or [ 1, 0 ]
*
* out = sample();
* // e.g., returns [ 1, 1 ]
*
* @example
* var sample = factory( [ 0, 1 ], {
*     'size': 2,
*     'mutate': true
* });
*
* var out = sample();
* // e.g., returns [ 1, 1 ]
*
* out = sample({
*     'replace': false
* });
* // e.g., returns [ 0, 1 ] or [ 1, 0 ]
*
* out = sample();
* // returns null
*/

/**
* Returns a function which tests if every element in an array-like object passes a test condition.
*
* @param {Function} predicate - function to apply
* @throws {TypeError} must provide a function
* @returns {Function} an array-like object function
*
* @example
* var isOdd = require( '@stdlib/assert/is-odd' );
*
* var arr1 = [ 1, 3, 5, 7 ];
* var arr2 = [ 3, 5, 8 ];
*
* var validate = arraylikefcn( isOdd );
*
* var bool = validate( arr1 );
* // returns true
*
* bool = validate( arr2 );
* // returns false
*/

/**
* Returns a getter function for arrays having a specified number of dimensions.
*
* @private
* @param {PositiveInteger} ndims - array dimensions
* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions
* @returns {Function} getter
*
* @example
* var f = get( 3 );
* // returns <Function>
*/

/**
* Returns a getter function for arrays having a specified number of dimensions.
*
* @private
* @param {PositiveInteger} ndims - array dimensions
* @returns {Function} getter
*
* @example
* var f = get( 3 );
* // returns <Function>
*/

/**
* Returns a hash of functions for copying typed arrays.
*
* @private
* @returns {Object} function hash
*/

/**
* Returns a list of English stop words.
*
* @returns {StringArray} stop words
*
* @example
* var list = stopwords();
* // returns [ 'a', 'about', 'above', 'across', 'actually', ... ]
*/

/**
* Returns a list of Finnish stop words.
*
* @returns {StringArray} stop words
*
* @example
* var list = stopwords();
* // returns [ 'aiemmin', 'aika', 'aikaa', 'aikaan', 'aikaisemmin', ... ]
*/

/**
* Returns a list of French stop words.
*
* @returns {StringArray} stop words
*
* @example
* var list = stopwords();
* // returns [ 'a', 'à', 'â', 'abord', 'afin', 'ah', ... ]
*/

/**
* Returns a list of German stop words.
*
* @returns {StringArray} stop words
*
* @example
* var list = stopwords();
* // returns [ 'a', 'ab', 'aber', 'ach', ... ]
*/

/**
* Returns a list of Italian stop words.
*
* @returns {StringArray} stop words
*
* @example
* var list = stopwords();
* // returns [ 'a', 'abbastanza', 'accidenti', 'ad', 'adesso', ... ]
*/

/**
* Returns a list of Portuguese stop words.
*
* @returns {StringArray} stop words
*
* @example
* var list = stopwords();
* // returns [ 'a', 'à', 'adeus', 'agora', 'aí', 'ainda', ... ]
*/

/**
* Returns a list of Spanish stop words.
*
* @returns {StringArray} stop words
*
* @example
* var list = stopwords();
* // returns [ 'a', 'acuerdo', 'adelante', 'ademas', 'además', ... ]
*/

/**
* Returns a list of Swedish stop words.
*
* @returns {StringArray} stop words
*
* @example
* var list = stopwords();
* // returns [ 'aderton', 'adertonde', 'adjö', 'aldrig', 'alla', 'allas', ... ]
*/

/**
* Returns a list of ndarray casting modes.
*
* @returns {StringArray} list of ndarray casting modes
*
* @example
* var list = modes();
* // returns [ 'none', 'equiv', 'safe', 'same-kind', 'unsafe' ]
*/

/**
* Returns a list of ndarray data types to which a provided ndarray data type can be safely cast or cast within the same "kind".
*
* @param {string} [dtype] - ndarray data type
* @returns {(Object|StringArray|null)} list of ndarray data types or null
*
* @example
* var list = sameKindCasts( 'float32' );
* // returns [...]
*/

/**
* Returns a list of ndarray data types to which a provided ndarray data type can be safely cast.
*
* @param {string} [dtype] - ndarray data type
* @returns {(Object|StringArray|null)} list of ndarray data types or null
*
* @example
* var list = safeCasts( 'float32' );
* // returns [...]
*/

/**
* Returns a list of ndarray data types.
*
* @returns {StringArray} list of ndarray data types
*
* @example
* var list = dtypes();
* // returns [...]
*/

/**
* Returns a list of ndarray index modes.
*
* @returns {StringArray} list of ndarray index modes
*
* @example
* var list = modes();
* // returns [ 'throw', 'clamp', 'wrap' ]
*/

/**
* Returns a list of ndarray orders.
*
* @returns {StringArray} list of ndarray orders
*
* @example
* var list = orders();
* // returns [ 'row-major', 'column-major' ]
*/

/**
* Returns a memoized ndarray constructor.
*
* @param {string} dtype - data type
* @param {PositiveInteger} ndims - number of dimensions
* @param {Options} [options] - function options
* @param {boolean} [options.codegen=true] - boolean indicating whether to use code generation
* @param {string} [options.mode="throw"] - specifies how to handle indices which exceed array dimensions
* @param {StringArray} [options.submode=["throw"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis
* @throws {TypeError} first argument must be a supported ndarray data type
* @throws {TypeError} second argument must be a number having a positive integer value
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Function} memoized ndarray constructor
*
* @example
* var f1 = ctor( 'float64', 3 );
* // returns <Function>
*
* var f2 = ctor( 'float64', 3 );
* // returns <Function>
*
* var bool = ( f1 === f2 );
* // returns true
*
* var buffer = [ 1, 2, 3, 4, 5, 6 ];
* var shape = [ 3, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var out = f1( buffer, shape, strides, offset, 'row-major' );
*/

/**
* Returns a memoized ndarray constructor.
*
* @param {string} dtype - data type
* @param {PositiveInteger} ndims - number of dimensions
* @param {Options} [options] - function options
* @param {boolean} [options.codegen=true] - boolean indicating whether to use code generation
* @returns {Function} memoized ndarray constructor
*
* @example
* var f1 = ctor( 'float64', 3 );
* // returns <Function>
*
* var f2 = ctor( 'float64', 3 );
* // returns <Function>
*
* var bool = ( f1 === f2 );
* // returns true
*
* var buffer = [ 1, 2, 3, 4, 5, 6 ];
* var shape = [ 3, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var out = f1( buffer, shape, strides, offset, 'row-major' );
*/

/**
* Returns a method for getting an array element located at a specified linear index.
*
* @private
* @param {Function} base - parent (super) method
* @param {string} mode - specifies how to handle indices which exceed array dimensions
* @returns {Function} method for getting an array element
*/

/**
* Returns a method for returning an array element.
*
* @private
* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions
* @returns {Function} method for returning an array element
*/

/**
* Returns a method for setting an array element located at a specified linear index.
*
* @private
* @param {Function} base - parent (super) method
* @param {string} mode - specifies how to handle indices which exceed array dimensions
* @returns {Function} method for setting an array element
*/

/**
* Returns a method for setting an array element.
*
* @private
* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions
* @returns {Function} method for setting an array element
*/

/**
* Returns a method to return an array element.
*
* @private
* @param {PositiveInteger} ndims - number of dimensions
* @param {boolean} codegen - boolean indicating whether to use code generation
* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions
* @returns {Function} method to return an array element
*/

/**
* Returns a method to set an array element.
*
* @private
* @param {PositiveInteger} ndims - number of dimensions
* @param {boolean} codegen - boolean indicating whether to use code generation
* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions
* @returns {Function} method to set an array element
*/

/**
* Returns a multidimensional array.
*
* @param {(ArrayLikeObject|TypedArrayLike|Buffer|ndarrayLike)} [buffer] - data source
* @param {Options} [options] - function options
* @param {(ArrayLikeObject|TypedArrayLike|Buffer|ndarrayLike)} [options.buffer] - data source
* @param {string} [options.dtype="float64"] - underlying storage data type (if the input data is not of the same type, this option specifies the data type to which to cast the input data)
* @param {string} [options.order="row-major"] - specifies the memory layout of the array as either row-major (C-style) or column-major (Fortran-style)
* @param {NonNegativeIntegerArray} [options.shape] - array shape
* @param {boolean} [options.codegen=true] - boolean indicating whether to use code generation
* @param {string} [options.mode="throw"] - specifies how to handle indices which exceed array dimensions
* @param {StringArray} [options.submode=["throw"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis
* @param {boolean} [options.copy=false] - boolean indicating whether to copy source data to a new data buffer
* @param {boolean} [options.flatten=true] - boolean indicating whether to automatically flatten generic array data sources
* @param {NonNegativeInteger} [options.ndmin=0] - minimum number of dimensions
* @param {string} [options.casting="safe"] - casting rule used to determine what constitutes an acceptable cast
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} must provide either an array shape, data source, or both
* @throws {Error} invalid cast
* @throws {RangeError} data source must be compatible with specified meta data
* @returns {ndarray} ndarray instance
*
* @example
* var arr = array( [ [ 1, 2 ], [ 3, 4 ] ] );
* // returns <ndarray>
*
* var v = arr.get( 0, 0 );
* // returns 1
*
* @example
* var opts = {
*     'dtype': 'generic',
*     'flatten': false
* };
*
* var arr = array( [ [ 1, 2 ], [ 3, 4 ] ], opts );
* // returns <ndarray>
*
* var v = arr.get( 0 );
* // returns [ 1, 2 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var opts = {
*     'shape': [ 2, 2 ]
* };
*
* var arr = array( new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] ), opts );
* // returns <ndarray>
*
* var v = arr.get( 0, 0 );
* // returns 1.0
*/

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( new Array( 2 ), 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = new Float64Array( 2 );
*
* var v = normalize( out, 3.14e-319 );
* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var out = normalize( new Array( 2 ), 0.0 );
* // returns [ 0.0, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), Infinity );
* // returns [ Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), -Infinity );
* // returns [ -Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), NaN );
* // returns [ NaN, 0 ]
*/

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( new Array( 2 ), 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var out = normalize( new Array( 2 ), 0.0 );
* // returns [ 0.0, 0 ];
*
* @example
* var out = normalize( new Array( 2 ), Infinity );
* // returns [ Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), -Infinity );
* // returns [ -Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), NaN );
* // returns [ NaN, 0 ]
*/

/**
* Returns a partial object copy excluding properties for which a predicate returns a truthy value.
*
* @param {Object} obj - source object
* @param {Function} predicate - predicate function
* @throws {TypeError} first argument must be an object
* @throws {TypeError} second argument must be a function
* @returns {Object} new object
*
* @example
* function predicate( key, value ) {
*     return ( value > 1 );
* }
*
* var obj1 = {
*     'a': 1,
*     'b': 2
* };
*
* var obj2 = omitBy( obj1, predicate );
* // returns { 'a': 1 }
*/

/**
* Returns a partial object copy excluding specified keys.
*
* @param {Object} obj - source object
* @param {(string|StringArray)} keys - keys to exclude
* @throws {TypeError} first argument must be an object
* @throws {TypeError} second argument must be either a string or an array of strings
* @returns {Object} new object
*
* @example
* var obj1 = {
*     'a': 1,
*     'b': 2
* };
*
* var obj2 = omit( obj1, 'b' );
* // returns { 'a': 1 }
*/

/**
* Returns a property descriptor for an object's own property.
*
* ## Notes
*
* -   In contrast to the built-in `Object.getOwnPropertyDescriptor()`, this function returns `null` if provided `undefined` or `null`, rather than throwing an error.
* -   In contrast to the built-in `Object.getOwnPropertyDescriptor()`, this function returns `null` if an object does not have a provided property, rather than `undefined`.
*
* @private
* @param {*} value - input object
* @param {(string|symbol)} property - property
* @returns {(Object|null)} property descriptor or null
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 3.14
* };
*
* var desc = getOwnPropertyDescriptor( obj, 'foo' );
* // returns {'configurable':true,'enumerable':true,'writable':true,'value':3.14}
*/

/**
* Returns a property descriptor for an object's own property.
*
* ## Notes
*
* -   In contrast to the built-in `Object.getOwnPropertyDescriptor()`, this function returns `null` if provided `undefined` or `null`, rather than throwing an error.
* -   In contrast to the built-in `Object.getOwnPropertyDescriptor()`, this function returns `null` if an object does not have a provided property, rather than `undefined`.
* -   In environments lacking `Object.getOwnPropertyDescriptor()` support, property descriptors do not exist. In non-supporting environment, if an object has a provided property, this function returns a descriptor object equivalent to that returned in a supporting environment; otherwise, the function returns `null`.
*
* @private
* @param {*} value - input object
* @param {(string|symbol)} property - property
* @returns {(Object|null)} property descriptor or null
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 3.14
* };
*
* var desc = getOwnPropertyDescriptor( obj, 'foo' );
* // returns {'configurable':true,'enumerable':true,'writable':true,'value':3.14}
*/

/**
* Returns a pseudorandom integer on the interval \\([1, 2^{32}-1)\\).
*
* @private
* @returns {PositiveInteger} pseudorandom integer
*
* @example
* var v = randuint32();
* // returns <number>
*/

/**
* Returns a random permutation of elements in `arr`.
*
* @name shuffle
* @type {Function}
* @param {ArrayLike} arr - array-like object to shuffle
* @param {Options} [options] - function options
* @param {string} [options.copy="shallow"] - string indicating whether to return a copy (`deep`,`shallow` or `none`)
* @throws {TypeError} `options` must be an object
* @throws {TypeError} must provide valid options
* @returns {ArrayLike} the shuffled array-like object
*
* @example
* var data = [ 1, 2, 3 ];
* var out = shuffle( data );
* // e.g., returns [ 3, 1, 2 ]
*
* @example
* var data = [ 1, 2, 3 ];
* var out = shuffle( data, {
*     'copy': 'none'
* });
* var bool = ( data === out );
* // returns true
*/

/**
* Returns a setter function for arrays having a specified number of dimensions.
*
* @private
* @param {PositiveInteger} ndims - array dimensions
* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions
* @returns {Function} setter
*
* @example
* var f = set( 3 );
* // returns <Function>
*/

/**
* Returns a setter function for arrays having a specified number of dimensions.
*
* @private
* @param {PositiveInteger} ndims - array dimensions
* @returns {Function} setter
*
* @example
* var f = set( 3 );
* // returns <Function>
*/

/**
* Returns a zero-filled contiguous linear ndarray data buffer.
*
* @param {string} dtype - data type
* @param {NonNegativeInteger} size - buffer size
* @returns {(Array|TypedArray|Buffer)|null} data buffer
*
* @example
* var buf = buffer( 'float64', 3 );
* // returns <Float64Array>[ 0.0, 0.0, 0.0 ]
*/

/**
* Returns an array element located a specified linear view index.
*
* @private
* @param {integer} idx - linear view index
* @returns {*} array element
*/

/**
* Returns an array element.
*
* @private
* @param {...integer} idx - indices
* @returns {*} array element
*/

/**
* Returns an array of an object's own enumerable and non-enumerable property names.
*
* ## Notes
*
* -   In contrast to the built-in `Object.getOwnPropertyNames()`, this function returns an empty array if provided `undefined` or `null`, rather than throwing an error.
*
* @private
* @param {*} value - input object
* @returns {Array} a list of own property names
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 3.14
* };
*
* var keys = getOwnPropertyNames( obj );
* // e.g., returns [ 'beep', 'foo' ]
*/

/**
* Returns an array of an object's own enumerable and non-enumerable property names.
*
* ## Notes
*
* -   In contrast to the built-in `Object.getOwnPropertyNames()`, this function returns an empty array if provided `undefined` or `null`, rather than throwing an error.
* -   In environments lacking support for `Object.getOwnPropertyNames()`, property descriptors are unavailable, and thus all properties can be safely assumed to be enumerable. Hence, we can defer to calling `Object.keys`, which retrieves all own enumerable property names.
*
* @private
* @param {*} value - input object
* @returns {Array} a list of own property names
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 3.14
* };
*
* var keys = getOwnPropertyNames( obj );
* // e.g., returns [ 'beep', 'foo' ]
*/

/**
* Returns an array of an object's own enumerable property `[key, value]` pairs.
*
* @param {ObjectLike} obj - input object
* @throws {TypeError} must provide an object-like value
* @returns {Array} array containing key-value pairs
*
* @example
* var obj = {
*     'beep': 'boop',
*     'foo': 'bar'
* };
*
* var entries = objectEntries( obj );
* // e.g., returns [ ['beep', 'boop'], ['foo', 'bar'] ]
*/

/**
* Returns an index given an index mode.
*
* @param {integer} idx - index
* @param {NonNegativeInteger} max - maximum index
* @param {string} mode - specifies how to handle an index outside the interval `[0,max]`
* @throws {RangeError} index out-of-bounds
* @returns {integer} index
*
* @example
* var idx = ind( 2, 9, 'clamp' );
* // returns 2
*
* idx = ind( 10, 9, 'clamp' );
* // returns 9
*
* idx = ind( -1, 9, 'clamp' );
* // returns 0
*
* @example
* var idx = ind( 2, 9, 'wrap' );
* // returns 2
*
* idx = ind( 10, 9, 'wrap' );
* // returns 0
*
* idx = ind( -1, 9, 'wrap' );
* // returns 9
*
* @example
* var idx = ind( 2, 9, 'throw' );
* // returns 2
*
* idx = ind( 10, 9, 'throw' );
* // throws <RangeError>
*
* idx = ind( -1, 9, 'throw' );
* // throws <RangeError>
*/

/**
* Returns an initial PRNG state.
*
* @private
* @param {Uint32Array} state - state array
* @param {PositiveInteger} N - state size
* @param {uinteger32} s - seed
* @returns {Uint32Array} state array
*/

/**
* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @param {number} x - input value
* @returns {integer32} unbiased exponent
*
* @example
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* @example
* var exp = exponent( -3.14 );
* // returns 1
*
* @example
* var exp = exponent( 0.0 );
* // returns -1023
*
* @example
* var exp = exponent( NaN );
* // returns 1024
*/

/**
* Returns an ndarray constructor.
*
* @param {string} dtype - data type
* @param {PositiveInteger} ndims - number of dimensions
* @param {Options} [options] - function options
* @param {boolean} [options.codegen=true] - boolean indicating whether to use code generation
* @param {string} [options.mode="throw"] - specifies how to handle indices which exceed array dimensions
* @param {StringArray} [options.submode=["throw"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis
* @throws {TypeError} first argument must be a supported ndarray data type
* @throws {TypeError} second argument must be a number having a positive integer value
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {RangeError} too many dimensions
* @returns {Function} ndarray constructor
*
* @example
* var ndarray = ctor( 'generic', 2 );
* // returns <Function>
*
* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];
* var shape = [ 3, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var out = ndarray( buffer, shape, strides, offset, 'row-major' );
*/

/**
* Returns an ndarray constructor.
*
* @param {string} dtype - data type
* @param {PositiveInteger} ndims - number of dimensions
* @param {Options} [options] - function options
* @param {boolean} [options.codegen=true] - boolean indicating whether to use code generation
* @returns {Function} ndarray constructor
*
* @example
* var ndarray = ctor( 'float64', 3 );
* // returns <Function>
*
* var buffer = [ 1, 2, 3, 4, 5, 6 ];
* var shape = [ 3, 2 ];
* var strides = [ 2, 1 ];
* var offset = 0;
*
* var out = ndarray( buffer, shape, strides, offset, 'row-major' );
*/

/**
* Returns an ndarray data buffer constructor.
*
* @param {string} dtype - data type
* @returns {(Function|null)} data buffer constructor or null
*
* @example
* var ctor = ctors( 'float64' );
* // returns <Function>
*
* @example
* var ctor = ctors( 'float' );
* // returns null
*/

/**
* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} higher order word
*
* @example
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

/**
* Returns array iteration order.
*
* ## Notes
*
* -   Return value key:
*
*     -   `0`: unordered (i.e., strides of mixed sign; e.g., `[ 9, -3, 1 ]`)
*     -   `1`: ordered left-to-right (i.e., all nonnegative strides)
*     -   `-1`: ordered right-to-left (i.e., all negative strides)
*
* @param {IntegerArray} strides - stride array
* @returns {integer} iteration order
*
* @example
* var o = iterationOrder( [ 2, 1 ] );
* // returns 1
*
* o = iterationOrder( [ -2, 1 ] );
* // returns 0
*
* o = iterationOrder( [ -2, -1 ] );
* // returns -1
*/

/**
* Returns the data type of an ndarray data buffer.
*
* @param {*} value - input value
* @returns {(string|null)} data type
*
* @example
* var dt = dtype( [ 1, 2, 3 ] );
* // returns 'generic'
*
* var dt = dtype( 'beep' );
* // returns null
*/

/**
* Returns the index offset which specifies the location of the first indexed value in a multidimensional array based on a stride array.
*
* @param {NonNegativeIntegerArray} shape - array shape
* @param {IntegerArray} strides - stride array
* @returns {NonNegativeInteger} offset - offset
*
* @example
* var shape = [ 2, 3, 10 ];
* var strides = [ 30, -10, 1 ];
*
* var offset = strides2offset( shape, strides );
* // returns 20
*/

/**
* Returns the last three binary digits of `N` with `y = x - Nπ/2` so that `|y| < π/2`.
*
* ## Method
*
* -   The method is to compute the integer (`mod 8`) and fraction parts of `2x/π` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals `0 mod 8` ). Thus, the number of operations is independent of the exponent of the input.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)
* @param {PositiveInteger} nx - dimension of `x[]`
* @returns {number} last three binary digits of `N`
*/

/**
* Returns the maximum value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} maximum value
*
* @example
* var v = max( 3.14, 4.2 );
* // returns 4.2
*
* @example
* var v = max( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* @example
* var v = max( 3.14, NaN );
* // returns NaN
*
* @example
* var v = max( +0.0, -0.0 );
* // returns +0.0
*/

/**
* Returns the minimum value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} minimum value
*
* @example
* var v = min( 3.14, 4.2 );
* // returns 3.14
*
* @example
* var v = min( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* @example
* var v = min( 3.14, NaN );
* // returns NaN
*
* @example
* var v = min( +0.0, -0.0 );
* // returns -0.0
*/

/**
* Returns the name of a function.
*
* @param {Function} fcn - input function
* @throws {TypeError} must provide a function
* @returns {string} function name
*
* @example
* var v = functionName( Math.sqrt );
* // returns 'sqrt'
*
* @example
* var v = functionName( function foo(){} );
* // returns 'foo'
*
* @example
* var v = functionName( function(){} );
* // returns '' || 'anonymous'
*
* @example
* var v = functionName( String );
* // returns 'String'
*/

/**
* Returns the number of bytes per element provided an underlying array data type.
*
* @param {string} dtype - data type
* @returns {(NonNegativeInteger|null)} number of bytes per element
*
* @example
* var nbytes = bytesPerElement( 'float64' );
* // returns 8
*
* nbytes = bytesPerElement( 'generic' );
* // returns null
*/

/**
* Returns the number of elements in an array.
*
* @param {(NonNegativeIntegerArray|EmptyArray)} shape - array shape
* @returns {NonNegativeInteger} number of elements
*
* @example
* var n = numel( [ 3, 3, 3 ] );
* // returns 27
*/

/**
* Returns the prototype of a provided object.
*
* @param {*} value - input value
* @returns {(Object|null)} prototype
*
* @example
* var proto = getPrototypeOf( {} );
* // returns {}
*/

/**
* Returns the prototype of a provided object.
*
* @private
* @param {Object} obj - input object
* @returns {(Object|null)} prototype
*/

/**
* Returns the typed array type.
*
* @private
* @param {TypedArray} arr - typed array
* @returns {(string|void)} typed array type
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var arr = new Float64Array( 5 );
* var str = typeName( arr );
* // returns 'Float64Array'
*/

/**
* Returns the value of the `__proto__` property.
*
* @private
* @param {Object} obj - input object
* @returns {*} value of `__proto__` property
*/

/**
* Round a numeric value to the nearest integer.
*
* @module @stdlib/math/base/special/round
*
* @example
* var round = require( '@stdlib/math/base/special/round' );
*
* var v = round( -4.2 );
* // returns -4.0
*
* v = round( -4.5 );
* // returns -4.0
*
* v = round( -4.6 );
* // returns -5.0
*
* v = round( 9.99999 );
* // returns 10.0
*
* v = round( 9.5 );
* // returns 10.0
*
* v = round( 9.2 );
* // returns 9.0
*
* v = round( 0.0 );
* // returns 0.0
*
* v = round( -0.0 );
* // returns -0.0
*
* v = round( Infinity );
* // returns Infinity
*
* v = round( -Infinity );
* // returns -Infinity
*
* v = round( NaN );
* // returns NaN
*/

/**
* Round a numeric value toward positive infinity.
*
* @module @stdlib/math/base/special/ceil
*
* @example
* var ceil = require( '@stdlib/math/base/special/ceil' );
*
* var v = ceil( -4.2 );
* // returns -4.0
*
* v = ceil( 9.99999 );
* // returns 10.0
*
* v = ceil( 0.0 );
* // returns 0.0
*
* v = ceil( NaN );
* // returns NaN
*/

/**
* Rounds a numeric value to the nearest integer.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = round( -4.2 );
* // returns -4.0
*
* @example
* var v = round( -4.5 );
* // returns -4.0
*
* @example
* var v = round( -4.6 );
* // returns -5.0
*
* @example
* var v = round( 9.99999 );
* // returns 10.0
*
* @example
* var v = round( 9.5 );
* // returns 10.0
*
* @example
* var v = round( 9.2 );
* // returns 9.0
*
* @example
* var v = round( 0.0 );
* // returns 0.0
*
* @example
* var v = round( -0.0 );
* // returns -0.0
*
* @example
* var v = round( Infinity );
* // returns Infinity
*
* @example
* var v = round( -Infinity );
* // returns -Infinity
*
* @example
* var v = round( NaN );
* // returns NaN
*/

/**
* Rounds a numeric value toward positive infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = ceil( -4.2 );
* // returns -4.0
*
* @example
* var v = ceil( 9.99999 );
* // returns 10.0
*
* @example
* var v = ceil( 0.0 );
* // returns 0.0
*
* @example
* var v = ceil( NaN );
* // returns NaN
*/

/**
* Sample elements from an array-like object.
*
* @module @stdlib/random/sample
*
* @example
* var sample = require( '@stdlib/random/sample' );
*
* var out = sample( 'abc' );
* // e.g., returns [ 'a', 'a', 'b' ]
*
* out = sample( [ 3, 6, 9 ] );
* // e.g., returns [ 3, 9, 6 ]
*
* var bool = ( out.length === 3 );
* // returns true
*
* @example
* var sample = require( '@stdlib/random/sample' );
*
* var mysample = sample.factory({
*     'seed': 323
* });
* var out = mysample( [ 3, 6, 9 ], {
*     'size': 10
* });
* // e.g., returns [ 3, 9, 3, 3, 3, 6, 3, 3, 3, 6 ]
*/

/**
* Samples elements from an array-like object.
*
* @name sample
* @type {Function}
* @param {ArrayLike} x - array-like object from which to sample
* @param {Options} [options] - function options
* @param {NonNegativeInteger} [options.size] - sample size
* @param {ProbabilityArray} [options.probs] - element probabilities
* @param {boolean} [options.replace=true] - boolean indicating whether to sample with replacement
* @throws {TypeError} first argument must be array-like
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {RangeError} `size` option must be less than or equal to the length of `x` when the `replace` option is `false`
* @returns {Array} sample
*
* @example
* var out = sample( [ 3, null, NaN, 'abc', function(){} ] );
* // e.g., returns [ 3, 'abc', null, 3, null ]
*/

/**
* Samples from a discrete uniform distribution (equal probabilities and with replacement).
*
* @private
* @param {ArrayLike} x - array-like object from which to sample
* @param {NonNegativeInteger} size - sample size
* @param {Function} rand - PRNG for generating uniformly distributed numbers
* @returns {Array} sample
*/

/**
* Samples uniformly without replacement using the Fisher-Yates shuffle.
*
* ## References
*
* -   Knuth, Donald E. 1997. _The Art of Computer Programming, Volume 2 (3rd Ed.): Seminumerical Algorithms_. Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc.
*
* @private
* @param {ArrayLike} x - array-like object from which to sample
* @param {NonNegativeInteger} size - sample size
* @param {Function} rand - PRNG for generating uniformly distributed numbers
* @returns {Array} sample
*/

/**
* Samples with replacement and non-uniform probabilities using Vose's [alias method][alias-method].
*
* ## References
*
* -   Vose, Michael D. 1991. "A linear algorithm for generating random numbers with a given distribution." _IEEE Transactions on Software Engineering_ 17 (9): 972–75. doi:[10.1109/32.92917][@vose:1991].
*
* [alias-method]: http://keithschwarz.com/darts-dice-coins/
* [@vose:1991]: https://doi.org/10.1109/32.92917
*
*
* @private
* @param {ArrayLike} x - array-like object from which to sample
* @param {NonNegativeInteger} size - sample size
* @param {Function} rand - PRNG for generating uniformly distributed numbers
* @param {ProbabilityArray} probabilities - element probabilities
* @returns {Array} sample
*/

/**
* Samples without replacement from a discrete set using custom probabilities.
*
* ## Notes
*
* -   After each draw, the probabilities of the remaining observations are renormalized so that they sum to one.
*
*
* @private
* @param {ArrayLike} x - array-like object from which to sample
* @param {NonNegativeInteger} size - sample size
* @param {Function} rand - PRNG for generating uniformly distributed numbers
* @param {ProbabilityArray} probabilities - element probabilities
* @returns {Array} sample
*/

/**
* Scrolls a vertical scrollbar to the specified position.
*
* @param {Node} element - DOM node with the scrollbar to change
* @param {number} to - vertical position of the scroll bar after animation
* @param {integer} duration - number of milliseconds until animation shall be complete
* @returns {void}
*/

/**
* Serializes an ndarray as a JSON object.
*
* ## Notes
*
* -   The method does **not** serialize data outside of the buffer region defined by the array configuration.
*
* @private
* @returns {Object} JSON representation
*/

/**
* Serializes an ndarray as a string.
*
* ## Notes
*
* -   The method does **not** serialize data outside of the buffer region defined by the array configuration.
*
* @private
* @returns {string} string representation
*/

/**
* Sets an array element located a specified linear view index.
*
* @private
* @param {integer} idx - linear view index
* @param {*} v - value to set
* @returns {ndarray} ndarray instance
*/

/**
* Sets an array element.
*
* @private
* @param {...integer} idx - indices
* @param {*} v - value to set
* @returns {ndarray} ndarray instance
*/

/**
* Smallest positive double-precision floating-point normal number.
*
* @module @stdlib/constants/math/float64-smallest-normal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/math/float64-smallest-normal' );
* // returns 2.2250738585072014e-308
*/

/**
* Split a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/to-words
*
* @example
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/

/**
* Square root of double-precision floating-point epsilon.
*
* @module @stdlib/constants/math/float64-sqrt-eps
* @type {number}
*
* @example
* var FLOAT64_SQRT_EPSILON = require( '@stdlib/constants/math/float64-sqrt-eps' );
* // returns 0.14901161193847656e-7
*/

/**
* Square root of double-precision floating-point epsilon.
*
* ```tex
* \sqrt{\frac{1}{2^{52}}}
* ```
*
* @constant
* @type {number}
* @default 0.14901161193847656e-7
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/

/**
* Test for deep equality between two values.
*
* @module @stdlib/assert/deep-equal
*
* @example
* var deepEqual = require( '@stdlib/assert/deep-equal' );
*
* var bool = deepEqual( [ 1, 2, 3 ], [ 1, 2, 3 ] );
* // returns true
*
* bool = deepEqual( [ 1, 2, 3 ], [ 1, 2, '3' ] );
* // returns false
*
* bool = deepEqual( { 'a': 2 }, { 'a': [ 2 ] } );
* // returns false
*/

/**
* Test for native `Buffer` support.
*
* @module @stdlib/assert/has-node-buffer-support
*
* @example
* var hasNodeBufferSupport = require( '@stdlib/assert/has-node-buffer-support' );
*
* var bool = hasNodeBufferSupport();
* // returns <boolean>
*/

/**
* Test for native `Float32Array` support.
*
* @module @stdlib/assert/has-float32array-support
*
* @example
* var hasFloat32ArraySupport = require( '@stdlib/assert/has-float32array-support' );
*
* var bool = hasFloat32ArraySupport();
* // returns <boolean>
*/

/**
* Test for native `Float64Array` support.
*
* @module @stdlib/assert/has-float64array-support
*
* @example
* var hasFloat64ArraySupport = require( '@stdlib/assert/has-float64array-support' );
*
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/

/**
* Test for native `Int16Array` support.
*
* @module @stdlib/assert/has-int16array-support
*
* @example
* var hasInt16ArraySupport = require( '@stdlib/assert/has-int16array-support' );
*
* var bool = hasInt16ArraySupport();
* // returns <boolean>
*/

/**
* Test for native `Int32Array` support.
*
* @module @stdlib/assert/has-int32array-support
*
* @example
* var hasInt32ArraySupport = require( '@stdlib/assert/has-int32array-support' );
*
* var bool = hasInt32ArraySupport();
* // returns <boolean>
*/

/**
* Test for native `Int8Array` support.
*
* @module @stdlib/assert/has-int8array-support
*
* @example
* var hasInt8ArraySupport = require( '@stdlib/assert/has-int8array-support' );
*
* var bool = hasInt8ArraySupport();
* // returns <boolean>
*/

/**
* Test for native `Uint16Array` support.
*
* @module @stdlib/assert/has-uint16array-support
*
* @example
* var hasUint16ArraySupport = require( '@stdlib/assert/has-uint16array-support' );
*
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/

/**
* Test for native `Uint32Array` support.
*
* @module @stdlib/assert/has-uint32array-support
*
* @example
* var hasUint32ArraySupport = require( '@stdlib/assert/has-uint32array-support' );
*
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/

/**
* Test for native `Uint8Array` support.
*
* @module @stdlib/assert/has-uint8array-support
*
* @example
* var hasUint8ArraySupport = require( '@stdlib/assert/has-uint8array-support' );
*
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/

/**
* Test for native `Uint8ClampedArray` support.
*
* @module @stdlib/assert/has-uint8clampedarray-support
*
* @example
* var hasUint8ClampedArraySupport = require( '@stdlib/assert/has-uint8clampedarray-support' );
*
* var bool = hasUint8ClampedArraySupport();
* // returns <boolean>
*/

/**
* Test for native function `name` support.
*
* @module @stdlib/assert/has-function-name-support
*
* @example
* var hasFunctionNameSupport = require( '@stdlib/assert/has-function-name-support' );
*
* var bool = hasFunctionNameSupport();
* // returns <boolean>
*/

/**
* Test if a numeric value is infinite.
*
* @module @stdlib/math/base/assert/is-infinite
*
* @example
* var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
*
* var bool = isInfinite( Infinity );
* // returns true
*
* bool = isInfinite( -Infinity );
* // returns true
*
* bool = isInfinite( 5.0 );
* // returns false
*
* bool = isInfinite( NaN );
* // returns false
*/

/**
* Test if a numeric value is negative zero.
*
* @module @stdlib/math/base/assert/is-negative-zero
*
* @example
* var isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );
*
* var bool = isNegativeZero( -0.0 );
* // returns true
*
* bool = isNegativeZero( 0.0 );
* // returns false
*/

/**
* Test if a numeric value is positive zero.
*
* @module @stdlib/math/base/assert/is-positive-zero
*
* @example
* var isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );
*
* var bool = isPositiveZero( 0.0 );
* // returns true
*
* bool = isPositiveZero( -0.0 );
* // returns false
*/

/**
* Test if a string ends with the characters of another string.
*
* @module @stdlib/string/ends-with
*
* @example
* var endsWith = require( '@stdlib/string/ends-with' );
*
* var str = 'Fair is foul, and foul is fair, hover through fog and filthy air';
*
* var bool = endsWith( str, 'air' );
* // returns true
*
* bool = endsWith( str, 'fair' );
* // returns false
*
* bool = endsWith( str, 'fair', 30 );
* // returns true
*
* bool = endsWith( str, 'fair', -34 );
* // returns true
*/

/**
* Test if a string ends with the characters of another string.
*
* @param {string} str - input string
* @param {string} search - search string
* @param {integer} [len=str.length] - substring length
* @throws {TypeError} first argument must be a string primitive
* @throws {TypeError} second argument must be a string primitive
* @throws {TypeError} third argument must be an integer
* @returns {boolean} boolean indicating if the input string ends with the search string
*
* @example
* var bool = endsWith( 'Remember the story I used to tell you when you were a boy?', 'boy?' );
* // returns true
*
* @example
* var bool = endsWith( 'Remember the story I used to tell you when you were a boy?', 'Boy?' );
* // returns false
*
* @example
* var bool = endsWith( 'To be, or not to be, that is the question.', 'to be' );
* // returns false
*
* @example
* var bool = endsWith( 'To be, or not to be, that is the question.', 'to be', 19 );
* // returns true
*
* @example
* var bool = endsWith( 'To be, or not to be, that is the question.', 'to be', -23 );
* // returns true
*/

/**
* Test if a value is `null`.
*
* @module @stdlib/assert/is-null
*
* @example
* var isNull = require( '@stdlib/assert/is-null' );
*
* var value = null;
*
* var bool = isNull( value );
* // returns true
*/

/**
* Test if a value is `undefined` or `null`.
*
* @module @stdlib/assert/is-undefined-or-null
*
* @example
* var isUndefinedOrNull = require( '@stdlib/assert/is-undefined-or-null' );
*
* var bool = isUndefinedOrNull( void 0 );
* // returns true
*
* bool = isUndefinedOrNull( null );
* // returns true
*
* bool = isUndefinedOrNull( false );
* // returns false
*/

/**
* Test if a value is `undefined`.
*
* @module @stdlib/assert/is-undefined
*
* @example
* var isUndefined = require( '@stdlib/assert/is-undefined' );
*
* var bool = isUndefined( void 0 );
* // returns true
*
* bool = isUndefined( null );
* // returns false
*/

/**
* Test if a value is a Float32Array.
*
* @module @stdlib/assert/is-float32array
*
* @example
* var isFloat32Array = require( '@stdlib/assert/is-float32array' );
*
* var bool = isFloat32Array( new Float32Array( 10 ) );
* // returns true
*
* bool = isFloat32Array( [] );
* // returns false
*/

/**
* Test if a value is a Float64Array.
*
* @module @stdlib/assert/is-float64array
*
* @example
* var isFloat64Array = require( '@stdlib/assert/is-float64array' );
*
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* bool = isFloat64Array( [] );
* // returns false
*/

/**
* Test if a value is a Uint16Array.
*
* @module @stdlib/assert/is-uint16array
*
* @example
* var isUint16Array = require( '@stdlib/assert/is-uint16array' );
*
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* bool = isUint16Array( [] );
* // returns false
*/

/**
* Test if a value is a Uint32Array.
*
* @module @stdlib/assert/is-uint32array
*
* @example
* var isUint32Array = require( '@stdlib/assert/is-uint32array' );
*
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* bool = isUint32Array( [] );
* // returns false
*/

/**
* Test if a value is a Uint8Array.
*
* @module @stdlib/assert/is-uint8array
*
* @example
* var isUint8Array = require( '@stdlib/assert/is-uint8array' );
*
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* bool = isUint8Array( [] );
* // returns false
*/

/**
* Test if a value is a Uint8ClampedArray.
*
* @module @stdlib/assert/is-uint8clampedarray
*
* @example
* var isUint8ClampedArray = require( '@stdlib/assert/is-uint8clampedarray' );
*
* var bool = isUint8ClampedArray( new Uint8ClampedArray( 10 ) );
* // returns true
*
* bool = isUint8ClampedArray( [] );
* // returns false
*/

/**
* Test if a value is a `Date` object.
*
* @module @stdlib/assert/is-date-object
*
* @example
* var isDateObject = require( '@stdlib/assert/is-date-object' );
*
* var bool = isDateObject( new Date() );
* // returns true
*
* bool = isDateObject( '2017-01-01' );
* // returns false
*/

/**
* Test if a value is a function.
*
* @module @stdlib/assert/is-function
*
* @example
* var isFunction = require( '@stdlib/assert/is-function' );
*
* function beep() {
*     return 'beep';
* }
*
* var bool = isFunction( beep );
* // returns true
*/

/**
* Test if a value is a nonnegative integer.
*
* @module @stdlib/assert/is-nonnegative-integer
*
* @example
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' );
*
* var bool = isNonNegativeInteger( 5.0 );
* // returns true
*
* bool = isNonNegativeInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isNonNegativeInteger( -5.0 );
* // returns false
*
* bool = isNonNegativeInteger( 3.14 );
* // returns false
*
* bool = isNonNegativeInteger( null );
* // returns false
*
* @example
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
*
* var bool = isNonNegativeInteger( 3.0 );
* // returns true
*
* bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns false
*
* @example
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isObject;
*
* var bool = isNonNegativeInteger( 3.0 );
* // returns false
*
* bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns true
*/

/**
* Test if a value is a parseable JSON string.
*
* @module @stdlib/assert/is-json
*
* @example
* var isJSON = require( '@stdlib/assert/is-json' );
*
* var v = isJSON( '{"a":5}' );
* // returns true
*
* v = isJSON( '{a":5}' );
* // returns false
*/

/**
* Test if a value is a plain object.
*
* @module @stdlib/assert/is-plain-object
*
* @example
* var isPlainObject = require( '@stdlib/assert/is-plain-object' );
*
* var bool = isPlainObject( {} );
* // returns true
*
* bool = isPlainObject( null );
* // returns false
*/

/**
* Test if a value is a positive integer.
*
* @module @stdlib/assert/is-positive-integer
*
* @example
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );
*
* var bool = isPositiveInteger( 5.0 );
* // returns true
*
* bool = isPositiveInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isPositiveInteger( -5.0 );
* // returns false
*
* bool = isPositiveInteger( 3.14 );
* // returns false
*
* bool = isPositiveInteger( null );
* // returns false
*
* @example
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
*
* var bool = isPositiveInteger( 3.0 );
* // returns true
*
* bool = isPositiveInteger( new Number( 3.0 ) );
* // returns false
*
* @example
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isObject;
*
* var bool = isPositiveInteger( 3.0 );
* // returns false
*
* bool = isPositiveInteger( new Number( 3.0 ) );
* // returns true
*/

/**
* Test if a value is a regular expression.
*
* @module @stdlib/assert/is-regexp
*
* @example
* var isRegExp = require( '@stdlib/assert/is-regexp' );
*
* var bool = isRegExp( /\.+/ );
* // returns true
*
* bool = isRegExp( {} );
* // returns false
*/

/**
* Test if a value is a typed array.
*
* @module @stdlib/assert/is-typed-array
*
* @example
* var Int8Array = require( '@stdlib/array/int8' );
* var isTypedArray = require( '@stdlib/assert/is-typed-array' );
*
* var bool = isTypedArray( new Int8Array( 10 ) );
* // returns true
*/

/**
* Test if a value is an Int16Array.
*
* @module @stdlib/assert/is-int16array
*
* @example
* var isInt16Array = require( '@stdlib/assert/is-int16array' );
*
* var bool = isInt16Array( new Int16Array( 10 ) );
* // returns true
*
* bool = isInt16Array( [] );
* // returns false
*/

/**
* Test if a value is an Int32Array.
*
* @module @stdlib/assert/is-int32array
*
* @example
* var isInt32Array = require( '@stdlib/assert/is-int32array' );
*
* var bool = isInt32Array( new Int32Array( 10 ) );
* // returns true
*
* bool = isInt32Array( [] );
* // returns false
*/

/**
* Test if a value is an Int8Array.
*
* @module @stdlib/assert/is-int8array
*
* @example
* var isInt8Array = require( '@stdlib/assert/is-int8array' );
*
* var bool = isInt8Array( new Int8Array( 10 ) );
* // returns true
*
* bool = isInt8Array( [] );
* // returns false
*/

/**
* Test if a value is an `Error` object.
*
* @module @stdlib/assert/is-error
*
* @example
* var isError = require( '@stdlib/assert/is-error' );
*
* var bool = isError( new Error( 'beep' ) );
* // returns true
*
* bool = isError( {} );
* // returns false
*/

/**
* Test if a value is an array of probabilities that sum to one.
*
* @module @stdlib/assert/is-unity-probability-array
*
* @example
* var isUnityProbabilityArray = require( '@stdlib/assert/is-unity-probability-array' );
*
* var bool = isUnityProbabilityArray( [ 0.25, 0.5, 0.25 ] );
* // returns true
*
* bool = isUnityProbabilityArray( new Uint8Array( [ 0, 1 ] ) );
* // returns true
*
* bool = isUnityProbabilityArray( [ 0.4, 0.4, 0.4 ] );
* // returns false
*
* bool = isUnityProbabilityArray( [ 3.14, 0.0 ] );
* // returns false
*/

/**
* Test if a value is an array of strings.
*
* @module @stdlib/assert/is-string-array
*
* @example
* var isStringArray = require( '@stdlib/assert/is-string-array' );
*
* var bool = isStringArray( [ 'abc', 'def' ] );
* // returns true
*
* bool = isStringArray( [ 'abc', 123 ] );
* // returns false
*
* @example
* var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
*
* var bool = isStringArray( [ 'abc', 'def' ] );
* // returns true
*
* bool = isStringArray( [ 'abc', new String( 'def' ) ] );
* // returns false
*
* @example
* var isStringArray = require( '@stdlib/assert/is-string-array' ).objects;
*
* var bool = isStringArray( [ new String( 'abc' ), new String( 'def' ) ] );
* // returns true
*
* bool = isStringArray( [ new String( 'abc' ), 'def' ] );
* // returns false
*/

/**
* Test if a value is an array-like object containing only integers.
*
* @module @stdlib/assert/is-integer-array
*
* @example
* var isIntegerArray = require( '@stdlib/assert/is-integer-array' );
*
* var bool = isIntegerArray( [ -3.0, new Number(0.0), 2.0 ] );
* // returns true
*
* bool = isIntegerArray( [ -3.0, '3.0' ] );
* // returns false
*
* @example
* var isIntegerArray = require( '@stdlib/assert/is-integer-array' ).primitives;
*
* var bool = isIntegerArray( [ -1.0, 10.0 ] );
* // returns true
*
* bool = isIntegerArray( [ -1.0, 0.0, 5.0 ] );
* // returns true
*
* bool = isIntegerArray( [ -3.0, new Number(-1.0) ] );
* // returns false
*
* @example
* var isIntegerArray = require( '@stdlib/assert/is-integer-array' ).objects;
*
* var bool = isIntegerArray( [ new Number(1.0), new Number(3.0) ] );
* // returns true
*
* bool = isIntegerArray( [ -1.0, 0.0, 3.0 ] );
* // returns false
*
* bool = isIntegerArray( [ 3.0, new Number(-1.0) ] );
* // returns false
*/

/**
* Test if a value is an array-like object containing only nonnegative integers.
*
* @module @stdlib/assert/is-nonnegative-integer-array
*
* @example
* var isNonNegativeIntegerArray = require( '@stdlib/assert/is-nonnegative-integer-array' );
*
* var bool = isNonNegativeIntegerArray( [ 3.0, new Number(3.0) ] );
* // returns true
*
* bool = isNonNegativeIntegerArray( [ 3.0, '3.0' ] );
* // returns false
*
* @example
* var isNonNegativeIntegerArray = require( '@stdlib/assert/is-nonnegative-integer-array' ).primitives;
*
* var bool = isNonNegativeIntegerArray( [ 1.0, 0.0, 10.0 ] );
* // returns true
*
* bool = isNonNegativeIntegerArray( [ 3.0, new Number(1.0) ] );
* // returns false
*
* @example
* var isNonNegativeIntegerArray = require( '@stdlib/assert/is-nonnegative-integer-array' ).objects;
*
* var bool = isNonNegativeIntegerArray( [ new Number(3.0), new Number(1.0) ] );
* // returns true
*
* bool = isNonNegativeIntegerArray( [ 1.0, 0.0, 10.0 ] );
* // returns false
*/

/**
* Test if a value is an array-like object containing only positive integers.
*
* @module @stdlib/assert/is-positive-integer-array
*
* @example
* var isPositiveIntegerArray = require( '@stdlib/assert/is-positive-integer-array' );
*
* var bool = isPositiveIntegerArray( [ 3.0, new Number(3.0) ] );
* // returns true
*
* bool = isPositiveIntegerArray( [ 3.0, '3.0' ] );
* // returns false
*
* @example
* var isPositiveIntegerArray = require( '@stdlib/assert/is-positive-integer-array' ).primitives;
*
* var bool = isPositiveIntegerArray( [ 1.0, 2.0, 10.0 ] );
* // returns true
*
* bool = isPositiveIntegerArray( [ 3.0, new Number(1.0) ] );
* // returns false
*
* @example
* var isPositiveIntegerArray = require( '@stdlib/assert/is-positive-integer-array' ).objects;
*
* var bool = isPositiveIntegerArray( [ new Number(3.0), new Number(1.0) ] );
* // returns true
*
* bool = isPositiveIntegerArray( [ 1.0, 2.0, 10.0 ] );
* // returns false
*/

/**
* Test if a value is an array-like object.
*
* @module @stdlib/assert/is-array-like-object
*
* @example
* var isArrayLikeObject = require( '@stdlib/assert/is-array-like-object' );
*
* var bool = isArrayLikeObject( [] );
* // returns true
*
* bool = isArrayLikeObject( { 'length':10 } );
* // returns true
*
* bool = isArrayLikeObject( 'beep' );
* // returns false
*/

/**
* Test if a value is an empty object.
*
* @module @stdlib/assert/is-empty-object
*
* @example
* var isEmptyObject = require( '@stdlib/assert/is-empty-object' );
*
* var bool = isEmptyObject( {} );
* // returns true
*
* bool = isEmptyObject( { 'beep': 'boop' } );
* // returns false
*
* bool = isEmptyObject( [] );
* // returns false
*/

/**
* Test if a value is an empty string.
*
* @module @stdlib/assert/is-empty-string
*
* @example
* var isEmptyString = require( '@stdlib/assert/is-empty-string' );
*
* var bool = isEmptyString( '' );
* // returns true
*
* bool = isEmptyString( 'beep' );
* // returns false
*
* bool = isEmptyString( [] );
* // returns false
*
* @example
* var isEmptyString = require( '@stdlib/assert/is-empty-string' ).isObject;
*
* var bool = isEmptyString( new String( '' ) );
* // returns true
*
* bool = isEmptyString( '' );
* // returns false
*
* @example
* var isEmptyString = require( '@stdlib/assert/is-empty-string' ).isPrimitive;
*
* var bool = isEmptyString( '' );
* // returns true
*
* bool = isEmptyString( new String( '' ) );
* // returns false
*/

/**
* Test if a value is array-like.
*
* @module @stdlib/assert/is-array-like
*
* @example
* var isArrayLike = require( '@stdlib/assert/is-array-like' );
*
* var bool = isArrayLike( [] );
* // returns true
*
* bool = isArrayLike( { 'length': 10 } );
* // returns true
*
* bool = isArrayLike( 'beep' );
* // returns true
*/

/**
* Test if a value is ndarray-like.
*
* @module @stdlib/assert/is-ndarray-like
*
* @example
* var ctor = require( '@stdlib/ndarray/ctor' );
* var isndarrayLike = require( '@stdlib/assert/is-ndarray-like' );
*
* var ndarray = ctor( 'generic', 2 );
*
* var arr = ndarray( [ 0, 0, 0, 0 ], [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );
*
* var bool = isndarrayLike( arr );
* // returns true
*
* bool = isndarrayLike( [] );
* // returns false
*/

/**
* Test if a value is typed-array-like.
*
* @module @stdlib/assert/is-typed-array-like
*
* @example
* var Int16Array = require( '@stdlib/array/int16' );
* var isTypedArrayLike = require( '@stdlib/assert/is-typed-array-like' );
*
* var bool = isTypedArrayLike( new Int16Array() );
* // returns true
*
* bool = isTypedArrayLike({
*	'length': 10,
*	'byteOffset': 0,
*	'byteLength': 10,
*	'BYTES_PER_ELEMENT': 4
* });
* // returns true
*/

/**
* Test if an array-like value contains another value.
*
* @module @stdlib/assert/contains
*
* @example
* var contains = require( '@stdlib/assert/contains' );
*
* var bool = contains( 'Hello World', 'World' );
* // returns true
*
* bool = contains( 'Hello World', 'world' );
* // returns false
*
* bool = contains( [ 1, 2, 3, 4 ], 2 );
* // returns true
*
* bool = contains( [ NaN, 2, 3, 4 ], NaN );
* // returns true
*/

/**
* Test if two arguments are strictly equal.
*
* @module @stdlib/assert/is-strict-equal
*
* @example
* var isStrictEqual = require( '@stdlib/assert/is-strict-equal' );
*
* var bool = isStrictEqual( true, true );
* // returns true
*
* bool = isStrictEqual( 3.14, 3.14 );
* // returns true
*
* bool = isStrictEqual( {}, {} );
* // returns false
*
* bool = isStrictEqual( -0.0, -0.0 );
* // returns true
*
* bool = isStrictEqual( -0.0, 0.0 );
* // returns false
*
* bool = isStrictEqual( NaN, NaN );
* // returns false
*
* bool = isStrictEqual( [], [] );
* // returns false
*/

/**
* Test whether a value has in its prototype chain a specified constructor as a prototype property.
*
* @module @stdlib/assert/instance-of
*
* @example
* var instanceOf = require( '@stdlib/assert/instance-of' );
*
* var bool = instanceOf( [], Array );
* // returns true
*
* bool = instanceOf( {}, Object ); // exception
* // returns true
*
* bool = instanceOf( 'beep', String );
* // returns false
*
* bool = instanceOf( null, Object );
* // returns false
*
* bool = instanceOf( 5, Object );
* // returns false
*/

/**
* Test whether an input value is a supported ndarray casting mode.
*
* @module @stdlib/ndarray/base/assert/is-casting-mode
*
* @example
* var isCastingMode = require( '@stdlib/ndarray/base/assert/is-casting-mode' );
*
* var bool = isCastingMode( 'none' );
* // returns true
*
* bool = isCastingMode( 'equiv' );
* // returns true
*
* bool = isCastingMode( 'safe' );
* // returns true
*
* bool = isCastingMode( 'same-kind' );
* // returns true
*
* bool = isCastingMode( 'unsafe' );
* // returns true
*
* bool = isCastingMode( 'foo' );
* // returns false
*/

/**
* Test whether an input value is a supported ndarray data type.
*
* @module @stdlib/ndarray/base/assert/is-data-type
*
* @example
* var isDataType = require( '@stdlib/ndarray/base/assert/is-data-type' );
*
* var bool = isDataType( 'binary' );
* // returns true
*
* bool = isDataType( 'float32' );
* // returns true
*
* bool = isDataType( 'float64' );
* // returns true
*
* bool = isDataType( 'generic' );
* // returns true
*
* bool = isDataType( 'int16' );
* // returns true
*
* bool = isDataType( 'int32' );
* // returns true
*
* bool = isDataType( 'int8' );
* // returns true
*
* bool = isDataType( 'uint16' );
* // returns true
*
* bool = isDataType( 'uint32' );
* // returns true
*
* bool = isDataType( 'uint8' );
* // returns true
*
* bool = isDataType( 'uint8c' );
* // returns true
*
* bool = isDataType( 'foo' );
* // returns false
*/

/**
* Test whether an input value is a supported ndarray index mode.
*
* @module @stdlib/ndarray/base/assert/is-index-mode
*
* @example
* var isIndexMode = require( '@stdlib/ndarray/base/assert/is-index-mode' );
*
* var bool = isIndexMode( 'wrap' );
* // returns true
*
* bool = isIndexMode( 'clamp' );
* // returns true
*
* bool = isIndexMode( 'throw' );
* // returns true
*
* bool = isIndexMode( 'foo' );
* // returns false
*/

/**
* Test whether an input value is an ndarray order.
*
* @module @stdlib/ndarray/base/assert/is-order
*
* @example
* var isOrder = require( '@stdlib/ndarray/base/assert/is-order' );
*
* var bool = isOrder( 'row-major' );
* // returns true
*
* bool = isOrder( 'column-major' );
* // returns true
*
* bool = isOrder( 'foo' );
* // returns false
*/

/**
* Tests (loosely) if an input value is an array-like object.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if an input value is an array-like object
*
* @example
* var bool = isArrayLikeObject( [] );
* // returns true
*
* @example
* var bool = isArrayLikeObject( '' );
* // returns false
*/

/**
* Tests for deep equality between two values.
*
* @param {*} a - first comparison value
* @param {*} b - second comparison value
* @returns {boolean} boolean indicating if `a` is deep equal to `b`
*
* @example
* var bool = deepEqual( [ 1, 2, 3 ], [ 1, 2, 3 ] );
* // returns true
*
* @example
* var bool = deepEqual( [ 1, 2, 3 ], [ 1, 2, '3' ] );
* // returns false
*
* @example
* var bool = deepEqual( { 'a': 2 }, { 'a': [ 2 ] } );
* // returns false
*
* @example
* var bool = deepEqual( [], {} );
* // returns false
*
* @example
* var bool = deepEqual( null, null );
* // returns true
*/

/**
* Tests for native `Buffer` support.
*
* @returns {boolean} boolean indicating if an environment has `Buffer` support
*
* @example
* var bool = hasNodeBufferSupport();
* // returns <boolean>
*/

/**
* Tests for native `Float32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Float32Array` support
*
* @example
* var bool = hasFloat32ArraySupport();
* // returns <boolean>
*/

/**
* Tests for native `Float64Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Float64Array` support
*
* @example
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/

/**
* Tests for native `Int16Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Int16Array` support
*
* @example
* var bool = hasInt16ArraySupport();
* // returns <boolean>
*/

/**
* Tests for native `Int32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Int32Array` support
*
* @example
* var bool = hasInt32ArraySupport();
* // returns <boolean>
*/

/**
* Tests for native `Int8Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Int8Array` support
*
* @example
* var bool = hasInt8ArraySupport();
* // returns <boolean>
*/

/**
* Tests for native `Uint16Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint16Array` support
*
* @example
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/

/**
* Tests for native `Uint32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint32Array` support
*
* @example
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/

/**
* Tests for native `Uint8Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint8Array` support
*
* @example
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/

/**
* Tests for native `Uint8ClampedArray` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint8ClampedArray` support
*
* @example
* var bool = hasUint8ClampedArraySupport();
* // returns <boolean>
*/

/**
* Tests for native function `name` support.
*
* @returns {boolean} boolean indicating if an environment has function `name` support
*
* @example
* var bool = hasFunctionNameSupport();
* // returns <boolean>
*/

/**
* Tests if a numeric value is infinite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is infinite
*
* @example
* var bool = isInfinite( Infinity );
* // returns true
*
* @example
* var bool = isInfinite( -Infinity );
* // returns true
*
* @example
* var bool = isInfinite( 5.0 );
* // returns false
*
* @example
* var bool = isInfinite( NaN );
* // returns false
*/

/**
* Tests if a numeric value is negative zero.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is negative zero
*
* @example
* var bool = isNegativeZero( -0.0 );
* // returns true
*
* @example
* var bool = isNegativeZero( 0.0 );
* // returns false
*/

/**
* Tests if a numeric value is positive zero.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is positive zero
*
* @example
* var bool = isPositiveZero( 0.0 );
* // returns true
*
* @example
* var bool = isPositiveZero( -0.0 );
* // returns false
*/

/**
* Tests if a value is `null`.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is null
*
* @example
* var bool = isNull( null );
* // returns true
*
* bool = isNull( true );
* // returns false
*/

/**
* Tests if a value is `undefined` or `null`.
*
* ## Notes
*
* -   In older browsers, `undefined` is a global which can be overridden. `void`, however, is an operator which **cannot** be overridden. Consequently, better to use `void` to check for `undefined`. See [Stack Overflow][1].
*
* [1]: http://stackoverflow.com/a/19369078/2225624
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is undefined
*
* @example
* var bool = isUndefinedOrNull( undefined );
* // returns true
*
* bool = isUndefinedOrNull( null );
* // returns true
*
* bool = isUndefinedOrNull( false );
* // returns false
*/

/**
* Tests if a value is `undefined`.
*
* ## Notes
*
* -   In older browsers, `undefined` is a global which can be overridden. `void`, however, is an operator which **cannot** be overridden. Consequently, better to use `void` to check for `undefined`. See [Stack Overflow][1].
*
* [1]: http://stackoverflow.com/a/19369078/2225624
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is undefined
*
* @example
* var bool = isUndefined( undefined );
* // returns true
*
* bool = isUndefined( null );
* // returns false
*/

/**
* Tests if a value is a Float32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Float32Array
*
* @example
* var bool = isFloat32Array( new Float32Array( 10 ) );
* // returns true
*
* @example
* var bool = isFloat32Array( [] );
* // returns false
*/

/**
* Tests if a value is a Float64Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Float64Array
*
* @example
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* @example
* var bool = isFloat64Array( [] );
* // returns false
*/

/**
* Tests if a value is a Uint16Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint16Array
*
* @example
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint16Array( [] );
* // returns false
*/

/**
* Tests if a value is a Uint32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint32Array
*
* @example
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint32Array( [] );
* // returns false
*/

/**
* Tests if a value is a Uint8Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint8Array
*
* @example
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint8Array( [] );
* // returns false
*/

/**
* Tests if a value is a Uint8ClampedArray.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint8ClampedArray
*
* @example
* var bool = isUint8ClampedArray( new Uint8ClampedArray( 10 ) );
* // returns true
*
* @example
* var bool = isUint8ClampedArray( [] );
* // returns false
*/

/**
* Tests if a value is a `Date` object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a `Date` object
*
* @example
* var bool = isDateObject( new Date() );
* // returns true
*
* @example
* var bool = isDateObject( '2017-01-01' );
* // returns false
*/

/**
* Tests if a value is a function.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a function
*
* @example
* function beep() {
*     return 'beep';
* }
*
* var bool = isFunction( beep );
* // returns true
*/

/**
* Tests if a value is a nonnegative integer.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a nonnegative integer
*
* @example
* var bool = isNonNegativeInteger( 5.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( -5.0 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( 3.14 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( null );
* // returns false
*/

/**
* Tests if a value is a number object having a nonnegative integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a nonnegative integer value
*
* @example
* var bool = isNonNegativeInteger( 3.0 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns true
*/

/**
* Tests if a value is a number object having a positive integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a positive integer value
*
* @example
* var bool = isPositiveInteger( 3.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( new Number( 3.0 ) );
* // returns true
*/

/**
* Tests if a value is a number primitive having a nonnegative integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a nonnegative integer value
*
* @example
* var bool = isNonNegativeInteger( 3.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns false
*/

/**
* Tests if a value is a number primitive having a positive integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a positive integer value
*
* @example
* var bool = isPositiveInteger( 3.0 );
* // returns true
*
* @example
* var bool = isPositiveInteger( new Number( 3.0 ) );
* // returns false
*/

/**
* Tests if a value is a parseable JSON string.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a parseable JSON string
*
* @example
* var v = isJSON( '{"a":5}' );
* // returns true
*
* @example
* var v = isJSON( '{a":5}' );
* // returns false
*/

/**
* Tests if a value is a plain object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a plain object
*
* @example
* var bool = isPlainObject( {} );
* // returns true
*
* @example
* var bool = isPlainObject( null );
* // returns false
*/

/**
* Tests if a value is a positive integer.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a positive integer
*
* @example
* var bool = isPositiveInteger( 5.0 );
* // returns true
*
* @example
* var bool = isPositiveInteger( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isPositiveInteger( 0.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( -5.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( 3.14 );
* // returns false
*
* @example
* var bool = isPositiveInteger( null );
* // returns false
*/

/**
* Tests if a value is a regular expression.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a regular expression
*
* @example
* var bool = isRegExp( /\.+/ );
* // returns true
*
* @example
* var bool = isRegExp( {} );
* // returns false
*/

/**
* Tests if a value is a typed array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a typed array
*
* @example
* var Int8Array = require( '@stdlib/array/int8' );
*
* var bool = isTypedArray( new Int8Array( 10 ) );
* // returns true
*/

/**
* Tests if a value is an Int16Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an Int16Array
*
* @example
* var bool = isInt16Array( new Int16Array( 10 ) );
* // returns true
*
* @example
* var bool = isInt16Array( [] );
* // returns false
*/

/**
* Tests if a value is an Int32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an Int32Array
*
* @example
* var bool = isInt32Array( new Int32Array( 10 ) );
* // returns true
*
* @example
* var bool = isInt32Array( [] );
* // returns false
*/

/**
* Tests if a value is an Int8Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an Int8Array
*
* @example
* var bool = isInt8Array( new Int8Array( 10 ) );
* // returns true
*
* @example
* var bool = isInt8Array( [] );
* // returns false
*/

/**
* Tests if a value is an `Error` object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is an `Error` object
*
* @example
* var bool = isError( new Error( 'beep' ) );
* // returns true
*
* @example
* var bool = isError( {} );
* // returns false
*/

/**
* Tests if a value is an array of probabilities that sum to one.
*
* @param {*} v - value to test
* @returns {boolean} boolean indicating if a value is a probability array
*
* @example
* var bool = isUnityProbabilityArray( [ 0.25, 0.5, 0.25 ] );
* // returns true
*
* @example
* var bool = isUnityProbabilityArray( new Uint8Array( [ 0, 1 ] ) );
* // returns true
*
* @example
* var bool = isUnityProbabilityArray( [ 0.4, 0.4, 0.4 ] );
* // returns false
*
* @example
* var bool = isUnityProbabilityArray( [ 3.14, 0.0 ] );
* // returns false
*/

/**
* Tests if a value is an array-like object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is an array-like object
*
* @example
* var bool = isArrayLikeObject( [] );
* // returns true
*
* @example
* var bool = isArrayLikeObject( { 'length':10 } );
* // returns true
*
* @example
* var bool = isArrayLikeObject( 'beep' );
* // returns false
*/

/**
* Tests if a value is an empty object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an empty object
*
* @example
* var bool = isEmptyObject( {} );
* // returns true
*
* @example
* var bool = isEmptyObject( { 'beep': 'boop' } );
* // returns false
*
* @example
* var bool = isEmptyObject( [] );
* // returns false
*/

/**
* Tests if a value is an empty string object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an empty string object
*
* @example
* var bool = isEmptyString( '' );
* // returns false
*
* @example
* var bool = isEmptyString( new String( '' ) );
* // returns true
*
* @example
* var bool = isEmptyString( [] );
* // returns false
*/

/**
* Tests if a value is an empty string primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an empty string primitive
*
* @example
* var bool = isEmptyString( '' );
* // returns true
*
* @example
* var bool = isEmptyString( 'beep' );
* // returns false
*
* @example
* var bool = isEmptyString( [] );
* // returns false
*/

/**
* Tests if a value is an empty string.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an empty string
*
* @example
* var bool = isEmptyString( '' );
* // returns true
*
* @example
* var bool = isEmptyString( 'beep' );
* // returns false
*
* @example
* var bool = isEmptyString( [] );
* // returns false
*/

/**
* Tests if a value is array-like.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is array-like
*
* @example
* var bool = isArrayLike( [] );
* // returns true
*
* @example
* var bool = isArrayLike( {'length':10} );
* // returns true
*/

/**
* Tests if a value is ndarray-like.
*
* @param {*} v - value to test
* @returns {boolean} boolean indicating if a value is ndarray-like
*
* @example
* var ctor = require( '@stdlib/ndarray/ctor' );
*
* var ndarray = ctor( 'generic', 2 );
* var arr = ndarray( [ 0, 0, 0, 0 ], [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );
*
* var bool = isndarrayLike( arr );
* // returns true
*
* bool = isndarrayLike( [] );
* // returns false
*/

/**
* Tests if a value is typed-array-like.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is typed-array-like
*
* @example
* var arr = {
*	'BYTES_PER_ELEMENT': 8,
*	'length': 10,
*	'byteOffset': 0,
*	'byteLength': 10
* };
* var val = isTypedArrayLike( arr );
* // returns true
*
* @example
* var Int8Array = require( '@stdlib/array/int8' );
*
* var val = isTypedArrayLike( new Int8Array( 4 ) );
* // returns true
*
* @example
* var val = isTypedArrayLike( [] );
* // returns false
*
* @example
* var val = isTypedArrayLike( {} );
* // returns false
*
* @example
* var val = isTypedArrayLike( null );
* // returns false
*
* @example
* var val = isTypedArrayLike( 'beep' );
* // returns false
*/

/**
* Tests if an array-like value contains a search value.
*
* @param {(Collection|string)} val - input value
* @param {*} searchValue - search value
* @param {integer} [position=0] - position at which to start searching for `searchValue`
* @throws {TypeError} first argument must be array-like
* @throws {Error} must provide a search value
* @throws {TypeError} second argument must be a primitive string primitive when the first argument is a string
* @throws {TypeError} third argument must be an integer
* @returns {boolean} boolean indicating whether one value contains another
*
* @example
* var bool = contains( 'last man standing', 'stand' );
* // returns true
*
* @example
* var bool = contains( [ 1, 2, 3, 4 ], 2 );
* // returns true
*
* @example
* var bool = contains( 'presidential election', 'president' );
* // returns true
*
* @example
* var bool = contains( [ NaN, 2, 3, 4 ], NaN );
* // returns true
*
* @example
* var bool = contains( 'javaScript', 'js' );
* // returns false
*
* @example
* var bool = contains( [ 1, 2, 3, {} ], {} );
* // returns false
*
* @example
* var bool = contains( 'Hidden Treasures', '' );
* // returns true
*/

/**
* Tests if two arguments are strictly equal.
*
* ## Notes
*
* -   In contrast to the strict equality operator `===`, `-0` and `+0` are distinguishable.
*
*
* @param {*} a - first input value
* @param {*} b - second input value
* @returns {boolean} boolean indicating whether two arguments are strictly equal
*
* @example
* var bool = isStrictEqual( true, true );
* // returns true
*
* @example
* var bool = isStrictEqual( 3.14, 3.14 );
* // returns true
*
* @example
* var bool = isStrictEqual( {}, {} );
* // returns false
*
* @example
* var bool = isStrictEqual( -0.0, -0.0 );
* // returns true
*
* @example
* var bool = isStrictEqual( -0.0, 0.0 );
* // returns false
*
* @example
* var bool = isStrictEqual( NaN, NaN );
* // returns false
*
* @example
* var bool = isStrictEqual( [], [] );
* // returns false
*/

/**
* Tests that a value is a valid constructor.
*
* @private
* @param {*} value - value to test
* @returns {(Error|null)} error object or null
*
* @example
* var ctor = function ctor() {};
*
* var err = validate( ctor );
* // returns null
*
* err = validate( null );
* // returns <TypeError>
*/

/**
* Tests that an object only has own properties.
*
* @private
* @param {Object} obj - value to test
* @returns {boolean} boolean indicating if an object only has own properties
*/

/**
* Tests whether a value has in its prototype chain a specified constructor as a prototype property.
*
* @param {*} value - value to test
* @param {Function} constructor - constructor to test against
* @throws {TypeError} constructor must be callable
* @returns {boolean} boolean indicating whether a value is an instance of a provided constructor
*
* @example
* var bool = instanceOf( [], Array );
* // returns true
*
* @example
* var bool = instanceOf( {}, Object ); // exception
* // returns true
*
* @example
* var bool = instanceOf( 'beep', String );
* // returns false
*
* @example
* var bool = instanceOf( null, Object );
* // returns false
*
* @example
* var bool = instanceOf( 5, Object );
* // returns false
*/

/**
* Tests whether an input value is a supported ndarray casting mode.
*
* @param {*} v - value to test
* @returns {boolean} boolean indicating whether an input value is a supported ndarray casting mode
*
* @example
* var bool = isCastingMode( 'none' );
* // returns true
*
* bool = isCastingMode( 'equiv' );
* // returns true
*
* bool = isCastingMode( 'safe' );
* // returns true
*
* bool = isCastingMode( 'same-kind' );
* // returns true
*
* bool = isCastingMode( 'unsafe' );
* // returns true
*
* bool = isCastingMode( 'foo' );
* // returns false
*/

/**
* Tests whether an input value is a supported ndarray data type.
*
* @param {*} v - value to test
* @returns {boolean} boolean indicating whether an input value is a supported ndarray data type
*
* @example
* var bool = isDataType( 'binary' );
* // returns true
*
* bool = isDataType( 'float32' );
* // returns true
*
* bool = isDataType( 'float64' );
* // returns true
*
* bool = isDataType( 'generic' );
* // returns true
*
* bool = isDataType( 'int16' );
* // returns true
*
* bool = isDataType( 'int32' );
* // returns true
*
* bool = isDataType( 'int8' );
* // returns true
*
* bool = isDataType( 'uint16' );
* // returns true
*
* bool = isDataType( 'uint32' );
* // returns true
*
* bool = isDataType( 'uint8' );
* // returns true
*
* bool = isDataType( 'uint8c' );
* // returns true
*
* bool = isDataType( 'foo' );
* // returns false
*/

/**
* Tests whether an input value is a supported ndarray index mode.
*
* @param {*} v - value to test
* @returns {boolean} boolean indicating whether an input value is a supported ndarray index mode
*
* @example
* var bool = isIndexMode( 'wrap' );
* // returns true
*
* bool = isIndexMode( 'clamp' );
* // returns true
*
* bool = isIndexMode( 'throw' );
* // returns true
*
* bool = isIndexMode( 'foo' );
* // returns false
*/

/**
* Tests whether an input value is an ndarray order.
*
* @param {*} v - value to test
* @returns {boolean} boolean indicating whether an input value is an ndarray order
*
* @example
* var bool = isOrder( 'row-major' );
* // returns true
*
* bool = isOrder( 'column-major' );
* // returns true
*
* bool = isOrder( 'foo' );
* // returns false
*/

/**
* The Switch component allows the display of one element out of a list of several elements. Users can cycle through the different children of the Switch tag by clicking on the currently displayed one.
*
* @property {boolean} active - controls whether the switch is active or not
* @property {string} tooltip - tooltip displayed when hovering over the switch element
* @property {string} tooltipPos - placement of the tooltip (either `top`, `left`, `right`, or `bottom`)
* @property {string} className - class name for the enclosing span element
* @property {Object} style - CSS inline styles
* @property {Function} onChange - callback invoked when elements are switched. Receives as its first argument the index of the currently displayed child
*/

/**
* The bias of a double-precision floating-point number's exponent.
*
* @module @stdlib/constants/math/float64-exponent-bias
* @type {integer32}
*
* @example
* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/constants/math/float64-exponent-bias' );
* // returns 1023
*/

/**
* The mathematical constant `π`.
*
* @constant
* @type {number}
* @default 3.141592653589793
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/

/**
* The mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-pi
* @type {number}
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
* // returns 3.141592653589793
*/

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max-base2-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/constants/math/float64-max-base2-exponent' );
* // returns 1023
*/

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* ```text
* 11111111110 => 2046 - BIAS = 1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/math/float64-max-base2-exponent-subnormal' );
* // returns -1023
*/

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ```text
* 00000000000 => 0 - BIAS = -1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default -1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-min-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base2-exponent-subnormal' );
* // returns -1074
*/

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ```text
* -(BIAS+(52-1)) = -(1023+51) = -1074
* ```
*
* where `BIAS = 1023` and `52` is the number of digits in the significand.
*
* @constant
* @type {integer32}
* @default -1074
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* The smallest positive double-precision floating-point normal number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* \frac{1}{2^{1023-1}}
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0 00000000001 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 2.2250738585072014e-308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/

/**
* The user pairer component allows one to group the currently active users into pairs of two, e.g. for group exercises.
*
* @property {boolean} filterOwners - controls whether to include or exclude owners in the pair matching
* @property {Function} onAssignments - callback invoked with the assignments once ready
*/

/**
* Tokenize a string.
*
* @module @stdlib/nlp/tokenize
*
* @example
* var tokenize = require( '@stdlib/nlp/tokenize' );
*
* var str = 'Hello Mrs. Maple, could you call me back?';
* var out = tokenize( str );
* // returns [ 'Hello', 'Mrs.', 'Maple', ',', 'could', 'you', 'call', 'me', 'back', '?' ]
*
* str = 'Hello World!';
* out = tokenize( str );
* // returns [ 'Hello', 'World', '!' ]
*/

/**
* Tokenize a string.
*
* @param {string} str - input string
* @param {boolean} [keepWhitespace=false] - boolean indicating whether whitespace characters should be returned as part of the token array
* @throws {TypeError} first argument must be a string primitive
* @throws {TypeError} second argument must be a boolean primitive
* @returns {Array} array of tokens
*
* @example
* var str = 'Hello World!';
* var out = tokenize( str );
* // returns [ 'Hello', 'World', '!' ]
*
* @example
* var str = '';
* var out = tokenize( str );
* // returns []
*
* @example
* var str = 'Hello Mrs. Maple, could you call me back?';
* var out = tokenize( str );
* // returns [ 'Hello', 'Mrs.', 'Maple', ',', 'could', 'you', 'call', 'me', 'back', '?' ]
*/

/**
* Tokenizes a substring.
*
* @private
* @param {string} substr - input string
* @returns {Array} token array
*
* @example
* var str = '(never)';
* var out = tokenizeSubstring( str );
* // returns [ '(', 'never', ')' ]
*/

/**
* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint16
*
* @example
* var ctor = require( '@stdlib/array/uint16' );
*
* var arr = new ctor( 10 );
* // returns <Uint16Array>
*/

/**
* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint32
*
* @example
* var ctor = require( '@stdlib/array/uint32' );
*
* var arr = new ctor( 10 );
* // returns <Uint32Array>
*/

/**
* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order clamped to 0-255.
*
* @module @stdlib/array/uint8c
*
* @example
* var ctor = require( '@stdlib/array/uint8c' );
*
* var arr = new ctor( 10 );
* // returns <Uint8ClampedArray>
*/

/**
* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint8
*
* @example
* var ctor = require( '@stdlib/array/uint8' );
*
* var arr = new ctor( 10 );
* // returns <Uint8Array>
*/

/**
* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.
*
* @module @stdlib/array/float64
*
* @example
* var ctor = require( '@stdlib/array/float64' );
*
* var arr = new ctor( 10 );
* // returns <Float64Array>
*/

/**
* Typed array constructor which returns a typed array representing an array of single-precision floating-point numbers in the platform byte order.
*
* @module @stdlib/array/float32
*
* @example
* var ctor = require( '@stdlib/array/float32' );
*
* var arr = new ctor( 10 );
* // returns <Float32Array>
*/

/**
* Typed array constructor which returns a typed array representing an array of twos-complement 16-bit signed integers in the platform byte order.
*
* @module @stdlib/array/int16
*
* @example
* var ctor = require( '@stdlib/array/int16' );
*
* var arr = new ctor( 10 );
* // returns <Int16Array>
*/

/**
* Typed array constructor which returns a typed array representing an array of twos-complement 32-bit signed integers in the platform byte order.
*
* @module @stdlib/array/int32
*
* @example
* var ctor = require( '@stdlib/array/int32' );
*
* var arr = new ctor( 10 );
* // returns <Int32Array>
*/

/**
* Typed array constructor which returns a typed array representing an array of twos-complement 8-bit signed integers in the platform byte order.
*
* @module @stdlib/array/int8
*
* @example
* var ctor = require( '@stdlib/array/int8' );
*
* var arr = new ctor( 10 );
* // returns <Int8Array>
*/

/**
* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/

/**
* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/

/**
* Typed array which represents an array of 8-bit unsigned integers in the platform byte order clamped to 0-255.
*
* @throws {Error} not implemented
*/

/**
* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/

/**
* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.
*
* @throws {Error} not implemented
*/

/**
* Typed array which represents an array of single-precision floating-point numbers in the platform byte order.
*
* @throws {Error} not implemented
*/

/**
* Typed array which represents an array of twos-complement 16-bit signed integers in the platform byte order.
*
* @throws {Error} not implemented
*/

/**
* Typed array which represents an array of twos-complement 32-bit signed integers in the platform byte order.
*
* @throws {Error} not implemented
*/

/**
* Typed array which represents an array of twos-complement 8-bit signed integers in the platform byte order.
*
* @throws {Error} not implemented
*/

/**
* Uncapitalize the first character of a string.
*
* @module @stdlib/string/uncapitalize
*
* @example
* var uncapitalize = require( '@stdlib/string/uncapitalize' );
*
* var out = uncapitalize( 'Last man standing' );
* // returns 'last man standing'
*
* out = uncapitalize( 'Hidden Treasures' );
* // returns 'hidden Treasures';
*/

/**
* Uncapitalizes the first character of a string.
*
* @param {string} str - input string
* @throws {TypeError} must provide a string primitive
* @returns {string} input string with first character converted to lowercase
*
* @example
* var out = uncapitalize( 'Last man standing' );
* // returns 'last man standing'
*
* @example
* var out = uncapitalize( 'Presidential election' );
* // returns 'presidential election'
*
* @example
* var out = uncapitalize( 'JavaScript' );
* // returns 'javaScript'
*
* @example
* var out = uncapitalize( 'Hidden Treasures' );
* // returns 'hidden Treasures'
*/

/**
* Updates a PRNG's internal state by generating the next `N` words.
*
* @private
* @param {Uint32Array} state - state array
* @returns {Uint32Array} state array
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination for function options
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.depth] - depth to flatten
* @param {boolean} [options.copy] - boolean indicating whether to deep copy array elements
* @returns {(Error|null)} error or null
*
* @example
* var opts = {};
* var options = {
*     'depth': 10,
*     'copy': false
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination for validated options
* @param {Options} options - function options
* @param {NonNegativeInteger} [options.size] - sample size
* @param {ProbabilityArray} [options.probs] - element probabilities
* @param {boolean} [options.replace] - boolean indicating whether to sample with replacement
* @param {boolean} [options.mutate] - boolean indicating whether to mutate the `pool` when sampling without replacement
* @returns {(null|Error)} null or an error
*
* @example
* var opts = {};
* var options = {
*     'size': 10,
*     'replace': false,
*     'mutate': true,
*     'probs': [ 0.7, 0.3 ]
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination for validated options
* @param {Options} options - function options
* @param {string} [options.copy] - string denoting whether to return a copy (`deep`, `shallow` or `none`)
* @returns {(null|Error)} null or an error
*
* @example
* var opts = {};
* var options = {
*     'copy': 'shallow'
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {boolean} [options.codegen] - boolean indicating whether to use code generation
* @param {string} [options.mode] - specifies how to handle indices which exceed array dimensions
* @param {string} [options.submode] - specifies how to handle subscripts which exceed array dimensions
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'mode': 'clamp',
*     'submode': [ 'throw', 'wrap', 'clamp' ],
*     'codegen': false
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/

/**
* Verifies state array integrity.
*
* @private
* @param {Uint32Array} state - state array
* @param {boolean} FLG - flag indicating whether the state array was provided as an option (true) or an argument (false)
* @returns {(Error|null)} an error or `null`
*/

/**
* Wrap an index on the interval `[0,max]`.
*
* @module @stdlib/ndarray/base/wrap-index
*
* @example
* var wrapIndex = require( '@stdlib/ndarray/base/wrap-index' );
*
* var idx = wrapIndex( -1, 10 );
* // returns 10
*
* idx = wrapIndex( 14, 10 );
* // returns 3
*
* idx = wrapIndex( 6, 10 );
* // returns 6
*/

/**
* Wrapper around react-bootstrap's OverlayTrigger disabling the overlay on touch devices.
*/

/**
* Wraps an index on the interval `[0,max]`.
*
* @param {integer} idx - index
* @param {NonNegativeInteger} max - maximum index
* @returns {NonNegativeInteger} index
*
* @example
* var idx = wrapIndex( -1, 10 );
* // returns 10
*
* idx = wrapIndex( 13, 10 );
* // returns 2
*
* idx = wrapIndex( 6, 10 );
* // returns 6
*/

/**
* Zeros an array.
*
* @private
* @param {Array<number>} arr - array to zero
* @returns {Array<number>} input array
*/

/**
* ndarray data buffer constructors.
*
* @module @stdlib/ndarray/base/buffer-ctors
*
* @example
* var ctors = require( '@stdlib/ndarray/base/buffer-ctors' );
*
* var ctor = ctors( 'float64' );
* // returns <Function>
*
* ctor = ctors( 'int' );
* // returns null
*/

/** @class */

/** @component */

/** @ignore */

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */

/** An `href` passed to the Toggle component */

/** An `onClick` handler passed to the Toggle component */

/** Built-in value references. */

/** Cache for storing the result of stylesFn(theme) for all themes. */

/** Cached calculation results */

/** Define the public API */

/** Derive the create function from the interface and direction */

/** Derive the resolve function from the interface and direction */

/** Detect free variable `exports`. */

/** Detect free variable `global` from Node.js. */

/** Detect free variable `self`. */

/** Detect free variables */

/** Disables both Buttons  */

/** Error message constants. */

/** Error messages */

/** Highest positive signed 32-bit float value */

/** Regular expressions */

/** The content of the non-toggle Button.  */

/** Used as references for various `Number` constants. */

/** Used as the `TypeError` message for "Functions" methods. */

/** Used as the maximum memoize cache size. */

/** Used as the size to enable large array optimizations. */

/** Used for built-in method references. */

/** Used to check objects for own properties. */

/** Used to compose bitmasks for cloning. */

/** Used to compose bitmasks for value comparisons. */

/** Used to convert symbols to primitives and strings. */

/** Used to detect hot functions by number of calls within a span of milliseconds. */

/** Used to detect methods masquerading as native. */

/** Used to detect overreaching core-js shims. */

/** Used to detect unsigned integer values. */

/** Used to match `RegExp` flags from their coerced string values. */

/** Used to match property names within property paths. */

/** Used to resolve the decompiled source of functions. */

/** Used to stand-in for `undefined` hash values. */

/** Whether to render the dropdown menu in the DOM before the first time it is shown */

/** `Object#toString` result references. */

/** `inputLength` will hold the number of code points in `input`. */

/************************************************************************/

/******/

/***/

/*--------------------------------------------------------------------------*/

/*@__PURE__*/

/*eslint-disable no-self-compare*/

/*eslint-enable no-self-compare*/

//

//       A function to add the attribute's value to an attribute

//       A function to read the attribute's value from a DOM node.

//       Called when the view is destroyed or receives a state

//       Called whenever the view's state is updated.

//       The attribute's default value.

//       default:: any

//       destroy:: ?()

//       getFromDOM:: ?(dom.Node) → any

//       object that's used to render the cell's DOM.

//       setDOMAttr:: ?(value: any, attrs: Object)

//       update:: ?(view: EditorView, prevState: EditorState)

//       with different plugins.

//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';

//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.

//     "#f00" or "f00"

//     "#ff0000" or "ff0000"

//     "#ff000000" or "ff000000"

//     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"

//     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"

//     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"

//     "red"

//     "rgb 1.0 0 0" or "rgb (1, 0, 0)"

//     "rgb 255 0 0" or "rgb (255, 0, 0)"

//     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"

//     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"

//     A CSS class name to add to the cursor element.

//     A group name (something like `"block"`) to add to the table

//     Additional attributes to add to cells. Maps attribute names to

//     Defaults to 0.

//     Should return an object with the following optional

//     The amount of history events that are collected before the

//     The color of the cursor. Defaults to `black`.

//     The content expression for table cells.

//     The delay between changes after which a new group should be

//     The precise width of the cursor in pixels. Defaults to 1.

//     The starting version number of the collaborative editing.

//     This client's ID, used to distinguish its changes from those of

//     When enabled (the default is `false`), if the current selection

//     aren't adjacent, a new group is always started.

//     cellAttributes:: ?Object

//     cellContent:: string

//     class:: ?string

//     clientID:: ?union<number, string>

//     color:: ?string

//     content inserted at the cursor ends up after the cursor. Users

//     depth:: ?number

//     is a [text selection](#state.TextSelection), its sides are

//     mapSelectionBackward:: ?boolean

//     mapped with a negative bias for this transaction, so that

//     newGroupDelay:: ?number

//     node type.

//     objects with the following properties:

//     of backwards compatibility.

//     oldest events are discarded. Defaults to 100.

//     other clients. Defaults to a random 32-bit number.

//     properties:

//     return::-

//     started. Defaults to 500 (milliseconds). Note that when changes

//     tableGroup:: ?string

//     usually prefer this, but it isn't done by default for reasons

//     version:: ?number

//     width:: ?number

//    A valid selection in the document.

//    The initial set of [stored marks](#state.EditorState.storedMarks).

//    The plugins that should be active in this state.

//    The schema to use.

//    The starting document.

//    `$from`, then moves forward as content is placed, and is finally

//    been placed yet.

//    buffer.fill(buffer[, offset[, end]])

//    buffer.fill(number[, offset[, end]])

//    buffer.fill(string[, offset[, end]][, encoding])

//    doc:: ?Node

//    is implicit in `$from`, and its open-end value in `frontier`.

//    plugins:: ?[Plugin]

//    reconciled with `$to`.

//    represent the open side of the replacement. It starts at

//    schema:: ?Schema

//    selection:: ?Selection

//    storedMarks:: ?[Mark]

//    tinycolor.isReadable("#000", "#111") => false

//    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false

//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"

//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"

//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"

//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"

//   (except when it appears in a [node](#model.NodeSpec.parseDOM) or

//   (or deciding not to render) its child nodes.

//   - events are attached as `'plotly_' + eventName.toLowerCase()`

//   - react props are `'on' + eventName`

//   // ...

//   A CSS class name or a space-separated set of class names to be

//   A CSS property name to match. When given, this rule matches

//   A CSS selector describing the kind of DOM elements to match. A

//   A function that will be called to get the text for the current

//   A function to parse text from the clipboard into a document

//   A function used to compute the attributes for the node or mark

//   A set of [document decorations](#view.Decoration) to show in the

//   A set of additional nodes to count as

//   A string of CSS to be _added_ to the node's existing `style` property.

//   Allows a plugin to define a [state field](#state.StateField), an

//   Allows the plugin to append another transaction to be applied

//   Allows you to pass custom rendering and behavior logic for nodes

//   Apply the given transaction to this state field, producing a new

//   Associates DOM parser information with this mark (see the

//   Associates DOM parser information with this node, which can be

//   Attributes for the node or mark created by this rule. When

//   By default, the content is parsed into the schema's default

//   By default, the element will get a class `"ProseMirror"`, and

//   By default, whitespace is collapsed as per HTML's rules. Pass

//   Called for each node around a click, from the inside out. The

//   Called for each node around a double click.

//   Called for each node around a triple click.

//   Called when a DOM

//   Called when something is dropped on the editor. `moved` will be

//   Called when the editor is clicked, after `handleClickOn` handlers

//   Called when the editor is double-clicked, after `handleDoubleClickOn`.

//   Called when the editor is triple-clicked, after `handleTripleClickOn`.

//   Called when the editor receives a `keydown` event.

//   Called when the node view is removed from the editor or the whole

//   Called when the view, after updating its state, tries to scroll

//   Called with a DOM Element for `tag` rules, and with a string (the

//   Can be an object mapping DOM event type names to functions that

//   Can be set to true to indicate that, though this isn't a [leaf

//   Can be used to change the order in which the parse rules in a

//   Can be used to control which DOM events, when they bubble out

//   Can be used to indicate that this node contains code, which

//   Can be used to make this a keyed plugin. You can have only one

//   Can be used to override the behavior of pasting. `slice` is the

//   Can be used to override the content of a matched node. When

//   Can be used to override the way a selection is created when

//   Can be used to override the way the node's selected status (as a

//   Can be used to prevent the editor view from trying to handle some

//   Can be used to transform pasted HTML text, _before_ it is parsed,

//   Can be used to transform pasted content before it is applied to

//   Cannot read property 'removeEventListener' of undefined

//   Contrary to the other event handling props, when returning true

//   Control the DOM attributes of the editable element. May be either

//   Controls whether nodes of this type can be selected as a [node

//   Controls whether whitespace should be preserved when parsing the

//   Controls which side of the document position this widget is

//   Convert this field to JSON. Optional, can be left off to disable

//   Defaults to only being exclusive with marks of the same type. You

//   Defines the default way a node of this type should be serialized

//   Defines the default way marks of this type should be serialized

//   Deserialize the JSON representation of this field. Note that the

//   Determines how the left side of the decoration is

//   Determines how the right side of the decoration is mapped.

//   Determines the distance (in pixels) between the cursor and the

//   Determines the extra space (in pixels) that is left above or

//   Determines whether marks of this type can span multiple adjacent

//   Determines whether nodes of this type can be dragged without

//   Determines whether this node is considered an important parent

//   Determines which other marks this mark can coexist with. Should

//   For `tag` rules that produce non-leaf nodes or marks, by default

//   For example `"paragraph/"` means the rule only matches when the

//   For text nodes, the default is to create a text DOM node. Though

//   Handler for `keypress` events.

//   If you supply your own parser, you do not need to also specify

//   Initialize the value of the field. `config` will be the object

//   It will be given a node (possibly of a different type), and an

//   JSON serialization for the field.

//   Likewise, in _inserted_ content the defining parents of the

//   Map a position through this object. When given, `assoc` (should

//   Map a position, and return an object containing additional

//   Map the bookmark through a set of changes.

//   New schema to use.

//   New set of active plugins.

//   Nodes are only matched when the namespace matches or this property

//   ProseMirror does of events fired on the editable DOM element.

//   ProseMirror.

//   Provide the starting content match that content parsed into the

//   Resolve the bookmark to a real selection again. This may need to

//   Return false if the editor should re-read the selection or

//   See

//   Should be set to true for inline nodes. (Implied for text nodes.)

//   Should return a DOM node or an [array

//   Supports the following configuration options:

//   The DOM node that should hold the node's content. Only meaningful

//   The DOM serializer to use when putting content onto the

//   The [parser](#model.DOMParser) to use when reading content from

//   The [parser](#model.DOMParser) to use when reading editor changes

//   The [view props](#view.EditorProps) added by this plugin. Props

//   The attributes that marks of this type get.

//   The attributes that nodes of this type get.

//   The callback over which to send transactions (state updates)

//   The child node index to start parsing from.

//   The child node index to stop parsing at.

//   The content expression for this node, as described in the [schema

//   The current state of the editor.

//   The default behavior is to split the text into lines, wrap them

//   The default value for this attribute, to use when no explicit

//   The group or space-separated groups to which this mark belongs.

//   The group or space-separated groups to which this node belongs,

//   The mark types that exist in this schema. The order in which they

//   The marks that are allowed inside of this node. May be a

//   The name of the default top-level node for the schema. Defaults

//   The name of the mark type to wrap the matched content in.

//   The name of the node type to create when this rule matches. Only

//   The namespace to match. This should be used with `tag`.

//   The node types in this schema. Maps names to

//   The outer DOM node that represents the document node. When not

//   The precise set of marks to draw around the widget.

//   The schema to use.

//   The set of active plugins.

//   This will be called to handle setting the selection inside the

//   Transform pasted plain text.

//   When `marks` is null, `side` also determines the marks that

//   When a mark is [added](#model.Mark.addToSet) to a set, all marks

//   When comparing decorations of this type (in order to decide

//   When defining a `selectNode` method, you should also provide a

//   When enabled (default is false), the sides of nodes of this type

//   When given, restricts this rule to only match when the current

//   When given, the parser will, beside parsing the content,

//   When given, this function will be called for each decoration

//   When given, this will be called when the view is updating itself.

//   When non-null, the target node is wrapped in a DOM element of

//   When present, this will be called before a transaction is

//   When set (defaults to false), selection changes inside the

//   When the plugin needs to interact with the editor view, or

//   When there are multiple widgets at a given position, their

//   When this returns false, the content of the view is not directly

//   When true, finding an element that matches this rule will close

//   When true, ignore content that matches this rule.

//   When true, ignore the node that matches this rule, but do parse

//   Whenever the user directly input text, this handler is called

//   Whether this mark should be active when the cursor is positioned

//   [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) on the

//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)

//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)).

//   [`NodeSpec`](#model.NodeSpec) objects that describe the node type

//   [`TextSelection.between`](#state.TextSelection^between)) if

//   [`clipboardParser`](#view.EditorProps.clipboardParser) on it.

//   [`domParser`](#view.EditorProps.domParser) prop is used.

//   [`editable` prop](#view.EditorProps.editable). Additional classes

//   [`inclusiveStart`](#view.Decoration^inline^spec.inclusiveStart).

//   [`someProp`](#view.EditorView.someProp)) will be used.

//   [`transformPastedText`](#view.EditorProps.transformPastedText).

//   [`updateState`](#view.EditorView.updateState) method with a new

//   [applied](#state.EditorState.apply). The callback will be bound to have

//   [context](#model.ParseRule.context) when parsing, above the

//   [group](#model.NodeSpec.group).

//   [mapped](#transform.Position_Mapping) when content is

//   [mark spec](#model.MarkSpec.parseDOM), in which case the `node`

//   [mutation](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver)

//   [top node type](#model.Schema.topNodeType). You can pass this

//   _added_ to the classes that the node already had.

//   `"property=value"`, in which case the rule only matches if the

//   `"section//"` matches any position inside a section—a double

//   `"selection"` (which doesn't occur for native mutation records).

//   `assoc` points in the direction of the deleted content.

//   `decorations` is an array of node or inline decorations that are

//   `deselectNode` method to remove the effect again.

//   `direct` flag will be true for the inner node.

//   `false`, the rule won't match. When it returns null or undefined,

//   `getAttrs` is provided, it takes precedence.

//   `mark` field in the rules is implied.

//   `preventDefault` yourself (or not, if you want to allow the

//   `side` values determine the order in which they appear. Those

//   `state` argument is again a half-initialized state.

//   `true` to preserve whitespace, but normalize newlines to

//   a CSS selector string that the parser must use to find the actual

//   a selection change, the record will have a `type` property of

//   access the plugin's configuration and state through the key,

//   active around the node. They are automatically drawn in the

//   after the given array of transactions. When another plugin

//   already saw.

//   an object or a function going from an editor state to an object.

//   and marks. Should map node and mark names to constructor

//   and return false to indicate that the match failed.)

//   and reuse DOM nodes. Make sure that any widgets with the same

//   any mark that excludes the new mark but is not, itself, excluded

//   appendTransaction:: ?(transactions: [Transaction], oldState: EditorState, newState: EditorState) → ?Transaction

//   appends a transaction after this was called, it is called again

//   applied by the state, allowing the plugin to cancel it (by

//   apply:: (tr: Transaction, value: T, oldState: EditorState, newState: EditorState) → T

//   are marked as defining.

//   are provided determines the order in which [mark

//   argument `getPos` is a function that can be called to get the

//   array of active decorations (which are automatically drawn, and

//   as the top container.

//   associated with that name. Their order is significant—it

//   associated with. When negative, it is drawn before a cursor

//   at its end (or at its start when that is also the start of the

//   at its position, and content inserted at that position ends

//   atom:: ?bool

//   attributes:: ?union<Object<string>, (EditorState) → ?Object<string>>

//   attrs:: ?Object

//   attrs:: ?Object<AttributeSpec>

//   automatically derive a parser. The `node` field in the rules is

//   backspacing or lifting, won't cross. An example of a node that

//   be -1 or 1, defaults to 1) determines with which side the

//   be a space-separated strings naming other marks or groups of marks.

//   be collapsed, `true` means that whitespace should be preserved

//   before the input is applied. If it returns `true`, the default

//   behavior of actually inserting the text is suppressed.

//   being selected. Defaults to false.

//   below the cursor when it is scrolled into view. Defaults to 5.

//   boolean that indicates whether the mark's content is inline.

//   but newlines normalized to spaces, and `"full"` means that

//   by the new mark, the mark can not be added an the set. You can

//   can set it to an empty string (or any string not containing the

//   causes some commands to behave differently.

//   character, as in `"blockquote/|list_item/"`.

//   class:: ?string

//   clipboard. If not given, the result of

//   clipboardParser:: ?DOMParser

//   clipboardSerializer:: ?DOMSerializer

//   clipboardTextParser:: ?(text: string, $context: ResolvedPos) → Slice

//   clipboardTextSerializer:: ?(Slice) → string

//   closeParent:: ?bool

//   code:: ?bool

//   coexist (as long as they have different attributes).

//   coming after this one.

//   compare the widget DOM node by identity. If you pass a key,

//   complicated filters, use [`getAttrs`](#model.ParseRule.getAttrs)

//   conditions the DOM element or style must match. When it returns

//   config::-

//   config::- An optional set of options

//   constructed state does not yet contain the state from plugins

//   constructing a parser, the order of the rule array is used.

//   content and should be treated as a single unit in the view.

//   content are preserved when possible. Typically,

//   content element, or a function that returns the actual content

//   content inside the matched element. `false` means whitespace may

//   content should be inserted.

//   content:: ?string

//   contentDOM:: ?dom.Node

//   contentElement:: ?union<string, (dom.Node) → dom.Node>

//   context:: ?ResolvedPos

//   context:: ?string

//   context—the parent nodes into which the content is being

//   corresponding [node spec field](#model.NodeSpec.parseDOM)). The

//   corresponds to

//   count as boundaries that regular editing operations, like

//   createSelectionBetween:: ?(view: EditorView, anchor: ResolvedPos, head: ResolvedPos) → ?Selection

//   created by this rule. Can also be used to describe further

//   created.

//   cursor into view, scrolling takes place. Defaults to 0.

//   decorations:: ?(state: EditorState) → ?DecorationSet

//   default behavior).

//   default) nodes get dropped when their entire content is replaced,

//   default:: ?any

//   defining:: ?bool

//   deselectNode:: ?()

//   destroy:: ?()

//   determines which [parse rules](#model.NodeSpec.parseDOM) take

//   different contexts, they can be separated by a pipe (`|`)

//   different keys.

//   differently, this is not supported inside the editor, so you

//   dispatchTransaction:: ?(tr: Transaction)

//   do some error checking and may fall back to a default (usually

//   dom:: ?dom.Node

//   domParser:: ?DOMParser

//   draggable:: ?bool

//   editable.

//   editable:: ?(state: EditorState) → bool

//   editor is destroyed.

//   editor view.

//   editor will use [`textBetween`](#model.Node.textBetween) on the

//   editor's schema.

//   element to the parser.

//   end of the visible viewport at which point, when scrolling the

//   ends up before the widget.

//   excludes:: ?string

//   extra slot in the state object in which it can keep its own data.

//   false otherwise. If the node view has a `contentDOM` property (or

//   field value. Note that the `newState` argument is again a partially

//   filterTransaction:: ?(Transaction, EditorState) → bool

//   findPositions:: ?[{node: dom.Node, offset: number}]

//   for example to clean it up.

//   from such a function, you are responsible for calling

//   from the DOM. Defaults to calling

//   from:: ?number

//   fromJSON:: ?(config: Object, value: *, state: EditorState) → T

//   functions that produce a [`NodeView`](#view.NodeView) object

//   getAttrs:: ?(union<dom.Node, string>) → ?union<Object, false>

//   getContent:: ?(dom.Node, schema: Schema) → Fragment

//   given [top node](#model.ParseOptions.topNode).

//   given node

//   given, the default strategy is used to create a DOM node.

//   group:: ?string

//   guide](/docs/guide/#schema.content_expressions). When not given,

//   handle them. Such functions will be called before any handling

//   handleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) → bool

//   handleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) → bool

//   handleDOMEvents:: ?Object<(view: EditorView, event: dom.Event) → bool>

//   handleDoubleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) → bool

//   handleDoubleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) → bool

//   handleDrop:: ?(view: EditorView, event: dom.Event, slice: Slice, moved: bool) → bool

//   handleKeyDown:: ?(view: EditorView, event: dom.KeyboardEvent) → bool

//   handleKeyPress:: ?(view: EditorView, event: dom.KeyboardEvent) → bool

//   handlePaste:: ?(view: EditorView, event: dom.ClipboardEvent, slice: Slice) → bool

//   handleScrollToSelection:: ?(view: EditorView) → bool

//   handleTextInput:: ?(view: EditorView, from: number, to: number, text: string) → bool

//   handleTripleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) → bool

//   handleTripleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) → bool

//   handlers or the default behavior should be tried.

//   have been called.

//   if the node view also defines a `dom` property and if its node

//   ignore:: ?bool

//   ignoreMutation:: ?(dom.MutationRecord) → bool

//   ignoreSelection:: ?bool

//   ignored.

//   implementing the node's display behavior. For nodes, the third

//   implied (the name of this node will be filled in automatically).

//   in `<p>` tags, and call

//   in the parsed content will not be written to.

//   inclusive:: ?bool

//   inclusiveEnd:: ?bool

//   inclusiveStart:: ?bool

//   indicate that it did not handle the scrolling and further

//   information about the mapping. The result's `deleted` field tells

//   init:: (config: Object, instance: EditorState) → T

//   inline styles that list that property. May also have the form

//   inline:: ?bool

//   inserted directly at that position. By default, the decoration

//   is deleted, the position itself is only considered deleted when

//   is not present, the node view itself is responsible for rendering

//   is null.

//   isolating:: ?bool

//   it is possible to create a serializer where text is rendered

//   it to be in a paragraph that is inside a blockquote, and

//   its content.

//   key are interchangeable—if widgets differ in, for example,

//   key:: ?PluginKey

//   key:: ?string

//   make sure this ends up calling the view's

//   map:: (mapping: Mapping) → SelectionBookmark

//   map:: (pos: number, assoc: ?number) → number

//   mapResult:: (pos: number, assoc: ?number) → MapResult

//   mapping made the bookmark invalid.

//   mark's own name) to allow multiple marks of a given type to

//   mark:: ?string

//   marks in the schema.

//   marks, other nodes default to not allowing marks.

//   marks:: ?[Mark]

//   marks:: ?string

//   marks:: ?union<Object<MarkSpec>, OrderedMap<MarkSpec>>

//   move when a chunk of content is inserted at the mapped position.

//   names or node group names followed by single or double slashes.

//   namespace:: ?string

//   negative, those of the node after when positive.

//   newlines should also be preserved.

//   no `dom` property), updating its child nodes will be handled by

//   node during replace operations (such as paste). Non-defining (the

//   node selection) is displayed.

//   node's current position, which can be useful when creating

//   node. The `anchor` and `head` positions are relative to the start

//   node:: ?string

//   nodeName:: ?string

//   nodeViews:: ?Object<(node: Node, view: EditorView, getPos: () → number, decorations: [Decoration]) → NodeView>

//   node](#model.NodeType.isLeaf), it doesn't have directly editable

//   nodes when serialized to DOM/HTML. Defaults to true.

//   nodes.

//   nodes:: union<Object<NodeSpec>, OrderedMap<NodeSpec>>

//   non-default-paragraph textblock types, and possibly list items,

//   normal way, and you will usually just want to ignore this, but

//   not given, nodes with inline content default to allowing all

//   not have values for plugin fields initialized after this one.

//   of the node. By default, a DOM selection will be created between

//   of this widget, the editor view should ignore.

//   onRemove:: ?(decorationSpec: Object)

//   option to use the type and attributes from a different node

//   optional number zero (“hole”) in it to indicate where the node's

//   options::- Additional options.

//   options::- The following options are understood:

//   options::- These options are supported:

//   or `mark` property will be derived from its position).

//   or a selection change happens within the view. When the change is

//   or all DOM events that bubble up from the node view. Events for

//   or node. If the child nodes are in a descendent node, this may be

//   override it you can do something else.

//   parent node is a paragraph, `"blockquote/paragraph/"` restricts

//   parent node). Defaults to true.

//   parseDOM:: ?[ParseRule]

//   parsed—matches this expression. Should contain one or more node

//   parsing rules in your schema.

//   passed to [`EditorState.create`](#state.EditorState^create). Note

//   pasted content parsed by the editor, but you can directly access

//   plugin with a given key in a given state, but it is possible to

//   plugins:: ?[Plugin]

//   position is associated, which determines in which direction to

//   precedence by default, and which nodes come first in a given

//   present, instead of parsing the node's child nodes, the result of

//   preserveWhitespace:: ?union<bool, "full">

//   priority:: ?number

//   produced by the view. If you specify this, you probably want to

//   property is only meaningful in a schema—when directly

//   propery's value exactly matches the given value. (For more

//   props:: ?EditorProps

//   provided here will be added to the class. For other attributes,

//   provided whenever a node or mark of a type that has them is

//   re-parse the range around the mutation, true if it can safely be

//   re-sync the selection with its selection state.

//   reading a DOM selection between the given anchor and head.

//   record the document positions of the given DOM positions. It

//   replaced range) during the mapping. When content on only one side

//   resolve:: (doc: Node) → Selection

//   returning false).

//   rule should have one of a `node`, `mark`, or `ignore` property

//   rules](#model.MarkSpec.parseDOM) are tried.

//   schema are tried. Those with higher priority come first. Rules

//   schema.

//   schema:: ?Schema

//   schema:: Schema

//   scrollMargin:: ?union<number, {top: number, right: number, bottom: number, left: number}>

//   scrollThreshold:: ?union<number, {top: number, right: number, bottom: number, left: number}>

//   selectNode:: ?()

//   selectable:: ?bool

//   selected range.

//   selection when copying text to the clipboard. By default, the

//   selection](#state.NodeSelection). Defaults to true for non-text

//   set something up in the DOM, use this field. The function

//   setSelection:: ?(anchor: number, head: number, root: dom.Document)

//   sets](#model.Mark.addToSet) are sorted and in which [parse

//   should probably have this enabled is a table cell.

//   should return true if it was able to update to that node, and

//   shouldn't override that in your text node spec.

//   side:: ?number

//   single rule should have _either_ a `tag` or a `style` property.

//   skip:: ?bool

//   slash matches any sequence of ancestor nodes. To allow multiple

//   slice. Called after

//   space-separated string referring to mark names or groups, `"_"`

//   spaces, and `"full"` to preserve whitespace entirely.

//   spanning:: ?bool

//   spec of that decoration.

//   state that has the transaction

//   state:: ?StateField<any>

//   state:: EditorState

//   stopEvent:: ?(event: dom.Event) → bool

//   structure](#model.DOMOutputSpec) that describes one, with an

//   style's value) for `style` rules.

//   style:: ?string

//   tag:: ?string

//   that `instance` is a half-initialized state instance, and will

//   that are functions will be bound to have the plugin instance as

//   that gets dropped as a result of the mapping, passing the

//   that holds the document position. DOM positions that are not

//   that is interpreted as an empty/default set of attributes.

//   that it excludes are removed in the process. If the set contains

//   that key will be compared instead, which can be useful when

//   the DOM positions corresponding to those positions, but if you

//   the behavior of some event handler, they should get

//   the clipboard. When not given, the value of the

//   the content of the DOM element is parsed as content of the mark

//   the current node.

//   the document.

//   the event to get at the raw content.

//   the node does not allow any content.

//   the node view may ignore if it isn't interested in them), and

//   the node view without adding it to the document itself.

//   the same `side` value is unspecified.

//   the selection into view. A handler function may return false to

//   the top node.

//   the value provided first (as in

//   the view instance as its `this` binding.

//   the widget is wrapped in—those of the node before when

//   their `this` binding.

//   they can also be used as a way to provide context information to

//   this function is used.

//   this type (and the other attributes are applied to this element).

//   thus be deleted).

//   to DOM/HTML (as used by

//   to DOM/HTML. When the resulting spec contains a hole, that is

//   to `"doc"`.

//   to a string representation for debugging (e.g. in error messages).

//   to explicitly allow all marks, or `""` to disallow marks. When

//   to make it inclusive.

//   to:: ?number

//   toDOM:: ?(mark: Mark, inline: bool) → DOMOutputSpec

//   toDOM:: ?(node: Node) → DOMOutputSpec

//   toDebugString:: ?(node: Node) -> string

//   toJSON:: ?(value: T) → *

//   top node is matched against.

//   topMatch:: ?ContentMatch

//   topNode:: ?Node

//   topNode:: ?string

//   transactions to update it. For marks, the third argument is a

//   transactions, i.e. it won't be passed transactions that it

//   transformPasted:: ?(Slice) → Slice

//   transformPastedHTML:: ?(html: string) → string

//   transformPastedText:: ?(text: string) → string

//   true if this drop moves from the current selection (which should

//   type is not a leaf node type. When this is present, ProseMirror

//   up after the widget. When zero (the default) or positive, the

//   update:: ?(node: Node, decorations: [Decoration]) → bool

//   use the value `"_"` to indicate that the mark excludes all

//   used by [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) to

//   valid for rules with a `tag` property, not for style rules. Each

//   value is provided. Attributes that have no default must be

//   view.

//   view:: ?(EditorView) → Object

//   where the marked content is placed. Otherwise, it is appended to

//   whereas defining nodes persist and wrap the inserted content.

//   whether it needs to be redrawn), ProseMirror will by default

//   which can be referred to in the content expressions for the

//   which this returns true are not handled by the editor.

//   widget are ignored, and don't cause ProseMirror to try and

//   widget is drawn after the cursor and content inserted there

//   will be called when the plugin's state is associated with an

//   will be used.

//   will do so by writing to the objects, adding a `pos` property

//   will have its `contentEditable` attribute determined by the

//   will take care of rendering the node's children into it. When it

//   with lower values appear first. The ordering of widgets with

//   with the new state and new transactions—but only the new

//   without a priority are counted as having priority 50. This

//   without having access to the plugin instance object.

//   won't include the new content, but you can set this to `true`

//   you generate decorations on the fly and don't want to store

//   you whether the position was deleted (completely enclosed in a

//  - `frontier` holds a stack of `{type, match}` objects that

//  - `placed` is a fragment of placed content. Its open-start value

//  - `unplaced` is a slice that represents the content that hasn't

//  0..25 map to ASCII a..z or A..Z

// !enableOutsideDays

// "<td>..</td>"` the table cells are ignored.

// "Casting" to the same data type is always allowed, regardless of the casting mode...

// "Software"), to deal in the Software without restriction, including

// "consumed" by the delegate iterator. If context.method was

// "return" to "throw", let that override the TypeError below.

// "return", allow the original .return call to continue in the

// "too much recursion" error.

// "tr" elements should always contain an array

// # heading

// #1011, #1013, #1035).

// #1060

// #820

// #93 Wrap the resize box in span (will not break 100% width/height)

// $FlowFixMe

// $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps

// $FlowFixMe we know it's not null

// '\x2D'

// 'abxxcd' will be treated as 'ab')

// 'm' and 'r' are mixing constants generated offline.

// (FIXME it'd be nice if we had a schema-agnostic way to

// (This is a function that allows the custom view to find its

// (Using subclassing for this was intentionally decided against,

// (bidi-aware) start-of-textblock detection if given.

// (direction=-1) cell in a table.

// (e.g. character confirmation may be done with the mouse), and keydown is triggered

// (hidden) cursor is doesn't change the selection, and

// (including decorations that start or end directly at the

// (isCollapsed inappropriately returns true in shadow dom)

// (may be null to just delete). This goes very much against the grain

// (not raw objects).

// (one where the focus is before the anchor), but not all

// (overwritten) the next time the function is called. (Not public.)

// (see `matchers` above for definition).

// (such as the target of the link). Marks are created through a

// (unescaped) to the output.

// (when it fits directly) and will be null when no such wrapping

// (which can not necessarily be expressed with a text selection, when

// * bullet list

// **Do not** directly mutate the properties of a `Node` object. See

// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]

// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]

// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]

// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]

// *Assumes:* r, g, b in [0, 255] or [0, 1]

// *Example*

// *Returns:* { h, s, l } in [0,1]

// *Returns:* { h, s, v } in [0,1]

// *Returns:* { r, g, b } in [0, 255]

// *Returns:* { r, g, b } in the set [0, 255]

// - Figuring out what part of the document a given DOM position

// - Incremental redrawing when the document changes

// - Wiring in custom implementations of the editing interface for a

// - buffer - a Buffer to search

// - byteOffset - an index into `buffer`; will be clamped to an int32

// - createRef() https://reactjs.org/docs/react-api.html#reactcreateref

// - dir - true for indexOf, false for lastIndexOf

// - encoding - an optional encoding, relevant is val is a string

// - forwardRef() https://reactjs.org/docs/react-api.html#reactforwardref

// - https://github.com/facebook/react/issues/6410

// - val - a string, Buffer, or number

// -- not the instance -- so we only apply the theme to the stylesFn

// --- Welcome to debugging React ---

// ---------

// ------------------

// --------------------

// ---------------------

// ----------------------

// ------------------------------

// ... subsequent chunks get checked to see if they overlap...

// .5 gets interpreted as half of the total, instead of half of 1

// .constructor.prototype properties for functions that return Generator

// .throw, and .return (see defineIteratorMethods).

// .throw, and .return methods.

// 0x36E38222, 0x80000000

// 0x387A2520, 0x40000000

// 0x39F01B83, 0x80000000

// 0x3B78CC51, 0x60000000

// 0x3CF84698, 0x80000000

// 0x3DE5D93A, 0x5ACFD57C

// 0x3E74442D, 0x00000000

// 0x3FF921FB, 0x40000000

// 0xBFC55555, 0x55555549

// 1 (version) + 1 (num_sections) + 1 (state_length) + N (state) + 1 (other_length) + 1 (state_index) + 1 (seed_length)

// 1 / 1.33.

// 1. ordered list

// 16.3+ will not execute our will-update method;

// 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'

// 1: the menu will fit, do nothing

// 2 leads in a row

// 26..35 map to ASCII 0..9

// 2: the menu will fit, if scrolled

// 314px. And it doesn't happen all the time. So just ignore this delta

// 3: the menu will fit, if constrained

// 4. Forked beviour when there isn't enough space below

// 4. not enough space, the browser WILL NOT increase scrollable area when

// : () → ?Node

// : () → ?ParseRule

// : (Decoration, Decoration) → number

// : (EditorState, Node, number, ?Transaction) → ?Transaction

// : (EditorState, bool) → ?{transform: Transform, selection: ?SelectionBookmark, remaining: Branch}

// : (EditorState, number)

// : (EditorView) → union<DecorationSet, DecorationGroup>

// : (EditorView, number) → {left: number, top: number, right: number, bottom: number}

// : (EditorView, number, number)

// : (EditorView, string, string, ?bool, ResolvedPos) → ?Slice

// : (Fragment, Fragment) → ?{mark: Mark, type: string}

// : (Fragment, [ViewDesc]) → [ViewDesc]

// : (HistoryState, EditorState, (tr: Transaction), bool)

// : (HistoryState, EditorState, Transaction, Object)

// : (Mark)

// : (Mark, bool, string?) → string

// : (Node) → ?Node

// : (Node) → Fragment

// : (Node, [Decoration], DecorationSet) → bool

// : (Node, [Decoration], DecorationSet, EditorView)

// : (Node, [Decoration], DecorationSet, EditorView) → bool

// : (Node, [Decoration], DecorationSet, EditorView, Fragment, number) → bool

// : (NodeType, ?Object)

// : (NodeType, ?Object) → bool

// : (NodeType, ?Object, ?[Node]) → ?Node

// : (Object) → [[{term: ?any, to: number}]]

// : (ResolvedPos, ResolvedPos) → [number]

// : (Schema) → Object<(mark: Mark) → DOMOutputSpec>

// : (Schema) → Object<(node: Node) → DOMOutputSpec>

// : (Schema) → [ParseRule]

// : (Schema, [Fragment]) → {width: number, height: number, rows: [Fragment]}

// : (Slice) → ?{width: number, height: number, rows: [Fragment]}

// : (Transaction) → EditorState

// : (Transaction) → bool

// : (Transform, ?SelectionBookmark, Object) → Branch

// : (Transform, number)

// : (ViewDesc, DecorationSet, (Decoration, number), (Node, [Decoration], DecorationSet, number))

// : ([DecorationSet]) → union<DecorationSet, DecorationGroup>

// : ([Decoration]) → [Decoration]

// : ([Decoration], Node, number) → DecorationSet

// : ([Decoration], [Decoration]) → bool

// : ([Mark], EditorView)

// : ([Rebaseable], [Step], Transform) → [Rebaseable]

// : ([[{term: ?any, to: number}]]) → ContentMatch

// : (dom.Element)

// : (dom.Element, ParseRule) → bool

// : (dom.Event) → bool

// : (dom.MutationRecord) → bool

// : (dom.Node)

// : (dom.Node, ?NodeBuilder, ?number, ?number)

// : (dom.Node, [ViewDesc])

// : (dom.Node, number, ?number) → number

// : (number) → ?NodeViewDesc

// : (number) → dom.Node

// : (number) → {node: dom.Node, offset: number}

// : (number, ?number) → MapResult

// : (number, ?number) → number

// : (number, ?number) → {index: number, offset: number}

// : (number, number, ?string, ?string) → string

// : (number, number, dom.Document)

// : (string)

// : (string) → [string]

// : (string) → bool

// : ({sliceDepth: number, frontierDepth: number, parent: ?Node, wrap: ?[NodeType], inject: ?Fragment})

// : ({width: number, height: number, rows: [Fragment]}, number, number) → {width: number, height: number, rows: [Fragment]}

// : ?[MarkType]

// : DOMParser The parser we are using.

// : Object The options passed to this parse.

// : Object<bool> The block-level tags in HTML5

// : Object<bool> The tags that we normally ignore.

// : [Mark] The current set of marks

// : [Rebaseable]

// : number

// :- An abstraction that allows the code dealing with decorations to

// :: ((element: T, index: number) → ?bool, ?number, ?number)

// :: ((element: T, index: number) → U, ?number, ?number) → [U]

// :: ((key: string, value: any))

// :: ((node: Node, offset: number, index: number))

// :: ((node: Node, pos: number, parent: Node) → ?bool)

// :: ((oldStart: number, oldEnd: number, newStart: number, newEnd: number))

// :: ((state: EditorState, ?(tr: Transaction)) → bool, union<(before: Node, after: Node) → bool, [string]>) → (state: EditorState, ?(tr: Transaction)) → bool

// :: ()

// :: () → ?Object

// :: () → Mapping

// :: () → Object

// :: () → Plugin

// :: () → SelectionBookmark

// :: () → Slice

// :: () → StepMap

// :: () → Transaction

// :: () → [Mark]

// :: () → bool

// :: () → string

// :: (...[(EditorState, ?(tr: Transaction), ?EditorView) → bool]) → (EditorState, ?(tr: Transaction), ?EditorView) → bool

// :: (?Fragment) → Node

// :: (?Object) → Mark

// :: (?Object) → Plugin

// :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → ?Node

// :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node

// :: (?ResolvedPos, ?(Node) → bool) → ?NodeRange

// :: (?[Mark]) → Transaction

// :: (?number) → Node

// :: (?number) → number

// :: (?number, ?number) → Mapping

// :: (?number, ?number) → RopeSequence<T>

// :: (?number, ?number, ?(spec: Object) → bool) → [Decoration]

// :: (?string)

// :: (?union<Fragment, Node, [Node]>) → Fragment

// :: (?union<Mark, [Mark]>) → [Mark]

// :: (?union<Object, OrderedMap>) → OrderedMap

// :: (?union<Object<Plugin>, string, number>) → Object

// :: (?union<[T], RopeSequence<T>>) → RopeSequence<T>

// :: (DirectEditorProps)

// :: (EditorState)

// :: (EditorState) → ?Plugin

// :: (EditorState) → ?any

// :: (EditorState) → any

// :: (EditorState) → number

// :: (EditorState, ?(Transaction)) → bool

// :: (EditorState, ?(tr: Transaction)) → bool

// :: (EditorState, ?(tr: Transaction), ?EditorView) → bool

// :: (EditorState, ?EditorState) → ?Transaction

// :: (EditorState, dispatch: ?(tr: Transaction)) → bool

// :: (Fragment) → ?number

// :: (Fragment) → ?{a: number, b: number}

// :: (Fragment) → Fragment

// :: (Fragment) → bool

// :: (Fragment, ?Object) → dom.DocumentFragment

// :: (Fragment, ?bool) → Slice

// :: (Fragment, ?number, ?number) → ?ContentMatch

// :: (Fragment, bool, ?number) → ?Fragment

// :: (Mapping)

// :: (Mapping, Node, ?Object) → DecorationSet

// :: (Mark) → Transaction

// :: (Mark) → bool

// :: (MarkType) → bool

// :: (MarkType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool

// :: (Node)

// :: (Node) → Selection

// :: (Node) → StepResult

// :: (Node) → TableMap

// :: (Node) → bool

// :: (Node, ?Object) → dom.Node

// :: (Node, ?Object) → string

// :: (Node, ?bool) → Transaction

// :: (Node, Object) → Selection

// :: (Node, [Decoration]) → DecorationSet

// :: (Node, number) → NodeSelection

// :: (Node, number) → bool

// :: (Node, number, ?number) → ?number

// :: (Node, number, ?number) → CellSelection

// :: (Node, number, ?number) → TextSelection

// :: (Node, number, ?number, ?Slice) → ?Step

// :: (Node, number, NodeType) → ?number

// :: (Node, number, Slice) → ?number

// :: (Node, number, number, ?[?{type: NodeType, attrs: ?Object}]) → bool

// :: (Node, number, number, Slice) → StepResult

// :: (Node, string, (number) → string)

// :: (NodeRange) → ?number

// :: (NodeRange, NodeType, ?Object, ?NodeRange) → ?[{type: NodeType, attrs: ?Object}]

// :: (NodeRange, [{type: NodeType, attrs: ?Object}]) → this

// :: (NodeRange, number) → this

// :: (NodeType) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool

// :: (NodeType) → ?ContentMatch

// :: (NodeType) → ?[NodeType]

// :: (NodeType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool

// :: (NodeType, ?Object, ?[Mark]) → bool

// :: (Object) → (view: EditorView, event: dom.Event) → bool

// :: (Object) → EditorState

// :: (Object) → Mark

// :: (Object) → Node

// :: (Object) → Object

// :: (Object) → Plugin

// :: (Object, Object, ?Object<Plugin>) → EditorState

// :: (OrderedMap<NodeSpec>, string, ?string) → OrderedMap<NodeSpec>

// :: (Rect) → [number]

// :: (RegExp, NodeType, ?union<Object, ([string]) → ?Object>) → InputRule

// :: (RegExp, NodeType, ?union<Object, ([string]) → ?Object>, ?([string], Node) → bool) → InputRule

// :: (ResolvedPos) → ?[Mark]

// :: (ResolvedPos) → ResolvedPos

// :: (ResolvedPos) → bool

// :: (ResolvedPos, ?ResolvedPos) → CellSelection

// :: (ResolvedPos, ?number) → Selection

// :: (ResolvedPos, ResolvedPos, ?number) → Selection

// :: (ResolvedPos, number, ?bool) → ?Selection

// :: (Schema) → DOMParser

// :: (Schema) → DOMSerializer

// :: (Schema, ?Object) → Fragment

// :: (Schema, ?Object) → Slice

// :: (Schema, Object) → Mark

// :: (Schema, Object) → Node

// :: (Schema, Object) → Step

// :: (Selection) → Transaction

// :: (Slice) → Transaction

// :: (Slice) → bool

// :: (Step) → StepResult

// :: (StepMap, ?number)

// :: (Transaction)

// :: (Transaction) → EditorState

// :: (Transaction) → Transaction

// :: (Transaction) → {state: EditorState, transactions: [Transaction]}

// :: (Transaction, ?Slice)

// :: (Transaction, Node)

// :: ([Decoration]) → DecorationSet

// :: ([Mark]) → ?Mark

// :: ([Mark]) → Node

// :: ([Mark]) → Transaction

// :: ([Mark]) → [Mark]

// :: ([Mark]) → bool

// :: ([Mark], [Mark]) → bool

// :: ([Node]) → Fragment

// :: (config: {rules: [InputRule]}) → Plugin

// :: (doc: Node) → Step

// :: (dom.Document, DOMOutputSpec) → {dom: dom.Node, contentDOM: ?dom.Node}

// :: (dom.Node, ?ParseOptions) → Node

// :: (dom.Node, ?ParseOptions) → Slice

// :: (dom.Node, number, ?number) → number

// :: (getCellType: ({ row: number, col: number, node: Node}) → NodeType) → (EditorState, dispatch: ?(tr: Transaction)) → bool

// :: (mapping: Mappable) → ?Step

// :: (n: number) → StepMap

// :: (number) → (EditorState, dispatch: ?(tr: Transaction)) → bool

// :: (number) → ?Node

// :: (number) → ?dom.Node

// :: (number) → ?number

// :: (number) → ContentMatch

// :: (number) → Node

// :: (number) → Rect

// :: (number) → ResolvedPos

// :: (number) → T

// :: (number) → Transaction

// :: (number) → number

// :: (number) → {left: number, right: number, top: number, bottom: number}

// :: (number) → {node: ?Node, index: number, offset: number}

// :: (number) → {node: dom.Node, offset: number}

// :: (number) → {type: NodeType, next: ContentMatch}

// :: (number, ?NodeType, ?Object, ?[Mark]) → this

// :: (number, ?number) → Fragment

// :: (number, ?number) → Node

// :: (number, ?number) → Slice

// :: (number, ?number) → this

// :: (number, ?number, ?Slice) → this

// :: (number, ?number, ?[?{type: NodeType, attrs: ?Object}]) → this

// :: (number, ?number, NodeType, ?Object) → this

// :: (number, Node) → Fragment

// :: (number, NodeType, ?ContentMatch) → this

// :: (number, number) → Rect

// :: (number, number) → this

// :: (number, number, (node: Node, pos: number, parent: Node, index: number) → ?bool, ?number)

// :: (number, number, (node: Node, start: number, parent: Node, index: number) → ?bool, ?number)

// :: (number, number, ?Fragment, ?number, ?number) → bool

// :: (number, number, ?string, ?string) → string

// :: (number, number, ?union<Mark, MarkType>) → this

// :: (number, number, DecorationAttrs, ?Object) → Decoration

// :: (number, number, Mark | MarkType) → bool

// :: (number, number, Mark) → this

// :: (number, number, Node) → number

// :: (number, number, Node) → this

// :: (number, number, NodeType, ?[Mark]) → bool

// :: (number, number, Slice) → Node

// :: (number, number, Slice) → this

// :: (number, number, union<Fragment, Node, [Node]>) → this

// :: (number, string, number) → ?number

// :: (number, union<(view: EditorView, getPos: () → number) → dom.Node, dom.Node>, ?Object) → Decoration

// :: (number, union<Fragment, Node, [Node]>) → this

// :: (options: ?Object) → Plugin

// :: (other: Step) → ?Step

// :: (selection: Selection) → ?{pos: number, start: number, node: ProseMirrorNode}

// :: (selection: Selection) → boolean

// :: (state: EditorState) → ?{version: number, steps: [Step], clientID: union<number, string>, origins: [Transaction]}

// :: (state: EditorState, steps: [Step], clientIDs: [union<number, string>], options: ?Object) → Transaction

// :: (step: Step) → this

// :: (string) → ?any

// :: (string) → Node

// :: (string) → OrderedMap

// :: (string) → StepResult

// :: (string) → { leading: ?string, trailing: ?string }

// :: (string, ?(prop: *) → *) → *

// :: (string, ?[Mark]) → Node

// :: (string, ?bool)

// :: (string, ?bool) → string

// :: (string, ?string, Node, ())

// :: (string, ?{ useDeprecatedLogic: bool }) → (EditorState, dispatch: ?(tr: Transaction)) → bool

// :: (string, any) → (EditorState, dispatch: ?(tr: Transaction)) → bool

// :: (string, any) → OrderedMap

// :: (string, any, ?string) → OrderedMap

// :: (string, constructor<Selection>)

// :: (string, constructor<Step>)

// :: (string, from: ?number, to: ?number) → Transaction

// :: (string, number) → string

// :: (string, string, any) → OrderedMap

// :: (union<"up", "down", "left", "right", "forward", "backward">, ?EditorState) → bool

// :: (union<Mark, MarkType>) → Transaction

// :: (union<Object, OrderedMap>) → OrderedMap

// :: (union<[T], RopeSequence<T>>) → RopeSequence<T>

// :: (union<string, MarkType>, ?Object) → Mark

// :: (union<string, NodeType>, ?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node

// :: (union<string, Plugin, PluginKey>) → any

// :: (union<string, Plugin, PluginKey>, any) → Transaction

// :: ({left: number, top: number}) → ?{pos: number, inside: number}

// :: ?Node

// :: ?Node The transformed document.

// :: ?NodeType

// :: ?ResolvedPos

// :: ?[Mark]

// :: ?string Text providing information about a failed step.

// :: ?{slice: Slice, move: bool}

// :: ContentMatch

// :: DecorationSet

// :: DirectEditorProps

// :: EditorProps

// :: EditorState

// :: Fragment

// :: Fragment The slice's content.

// :: InputRule Converts double dashes to an emdash.

// :: InputRule Converts three dots to an ellipsis character.

// :: Mapping

// :: MarkSpec

// :: MarkType

// :: MarkdownParser

// :: MarkdownSerializer

// :: Node

// :: Node The parent node that the range points into.

// :: Node The selected node.

// :: Node The starting document.

// :: NodeSpec

// :: NodeType

// :: Object

// :: Object The mark serializer info.

// :: Object The value of the `tokens` object used to construct

// :: Object<(MarkdownSerializerState, Node)> The node serializer

// :: Object<(node: Node) → DOMOutputSpec>

// :: Object<?(mark: Mark, inline: bool) → DOMOutputSpec>

// :: Object<MarkType>

// :: Object<NodeType>

// :: ResolvedPos

// :: ResolvedPos A position along the end of the content. See

// :: ResolvedPos A resolved position along the start of the

// :: RopeSequence

// :: Schema

// :: SchemaSpec

// :: Selection

// :: Slice

// :: Transaction

// :: [Mark]

// :: [Mark] The empty set of marks.

// :: [Node]

// :: [ParseRule]

// :: [Plugin]

// :: [SelectionRange]

// :: [StepMap]

// :: [Step]

// :: [number] A width * height array with the start position of

// :: bool

// :: bool Tells you whether the position was deleted, that is,

// :: class extends Mappable

// :: class<T> A rope sequence is a persistent sequence data structure

// :: dom.Element

// :: number

// :: number The depth of the node that this range points into.

// :: number The end index of the range in the parent node.

// :: number The mapped version of the position.

// :: number The offset this position has into its parent node.

// :: number The open depth at the end.

// :: number The open depth at the start.

// :: number The position at the end of the range.

// :: number The position at the start of the range.

// :: number The position that was resolved.

// :: number The start index of the range in the parent node.

// :: number The table's height

// :: number The width of the table

// :: string

// :: union<dom.Document, dom.DocumentFragment>

// ::- A DOM parser represents a strategy for parsing DOM content into

// ::- A DOM serializer knows how to convert ProseMirror nodes and

// ::- A [`Selection`](http://prosemirror.net/docs/ref/#state.Selection)

// ::- A collection of [decorations](#view.Decoration), organized in

// ::- A configuration of a Markdown parser. Such a parser uses

// ::- A document schema. Holds [node](#model.NodeType) and [mark

// ::- A fragment represents a node's collection of child nodes.

// ::- A key is used to [tag](#state.PluginSpec.key)

// ::- A mark is a piece of information that can be attached to a node,

// ::- A node selection is a selection that points at a single node.

// ::- A selection type that represents selecting the whole document

// ::- A slice represents a piece cut out of a larger document. It

// ::- A specification for serializing a ProseMirror document as

// ::- A step object represents an atomic change. It generally applies

// ::- A table map describes the structore of a given table. To avoid

// ::- A text selection represents a classical editor selection, with

// ::- Abstraction to build up and track an array of

// ::- Add a mark to all inline content between two positions.

// ::- An editor state transaction, which can be applied to a state to

// ::- An editor view manages the DOM structure that represents an

// ::- An object representing a mapped position with extra

// ::- Decoration objects can be provided to the view through the

// ::- Instances of this class represent a match state of a node

// ::- Like nodes, marks (which are associated with nodes to signify

// ::- Node types are objects allocated once per `Schema` and used to

// ::- Persistent data structure representing an ordered mapping from

// ::- Plugins bundle functionality that can be added to an editor.

// ::- Remove a mark from all inline content between two positions.

// ::- Replace a part of the document with a slice of content, but

// ::- Replace a part of the document with a slice of new content.

// ::- Represents a flat range of content, i.e. one that starts and

// ::- Represents a selected range in a document.

// ::- The result of [applying](#transform.Step.apply) a step. Contains either a

// ::- This class represents a node in the tree that makes up a

// ::- This is an object used to track state and expose

// ::- You can [_resolve_](#model.Node.resolve) a position to get more

// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>

// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

// <http://www.w3.org/TR/css3-color/#svg-color>

// <http://www.w3.org/TR/css3-color/>

// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

// ================

// ==============================

// > blockquote

// @@iterator function is called on it. Some browsers' implementations of the

// @font-face, @page

// @import

// @import is generally only used for font faces from google fonts and etc.

// A .throw or .return when the delegate iterator has no .throw

// A Generator should always return itself as the iterator object when the

// A backdrop key mapping used to make sure we always suppress keys

// A collection of DOM events that occur within the editor, and callback functions

// A command function that redoes the last undone change, if any.

// A command function that undoes the last change, if any.

// A container holding the node's children.

// A custom `update` method gets to decide whether the update goes

// A description of a DOM structure. Can be either a string, which is

// A dummy desc used to tag trailing BR or span nodes created to work

// A fresh object to act as the ID for this upload:

// A lightweight, document-independent representation of a selection.

// A link back to the `Schema` the node type belongs to.

// A list of substrings of CSS properties used to find transition events that

// A map describing the deletions and insertions made by a step, which

// A map from mark names to mark type objects.

// A mapping represents a pipeline of zero or more [step

// A mapping with the maps for each of the steps in this transform.

// A new image is provided, resolve it.

// A parser parsing unextended [CommonMark](http://commonmark.org/),

// A plugin spec may provide a state field (under its

// A ref and forceUpdate for refocus, b/c we only want to trigger when needed

// A resolved position pointing _in front of_ the anchor cell (the one

// A resolved position pointing in front of the head cell (the one

// A serializer for the [basic schema](#schema).

// A set of attributes to add to a decorated node. Most properties

// A set of marks to apply to the next input. Will be null when

// A value that describes how to parse a given DOM node or inline

// A widget desc represents a widget decoration, which is a DOM node

// API

// AUTO: flip the menu, render above

// According to specification a ResizeObserver is deleted by the garbage

// According to the specification following properties are not writable

// Account for augmented dimensions (note: expanding the strides array to account for prepended singleton dimensions does **not** affect the index offset):

// Acts like [`splitBlock`](#commands.splitBlock), but without

// Adapted from Modernizr

// Add `q[jz+1]` to `q[jz+k]`...

// Add a DOM node to the content. Text is inserted as text node,

// Add a column at the given position in a table.

// Add a flag to suppress these warnings for this special case.

// Add a key after the given key. If `place` is not found, the new

// Add a mark to the set of stored marks.

// Add a new key to the end of the map.

// Add a new key to the start of the map.

// Add a node at the current position.

// Add a second list item with an empty default start node

// Add a source directive for debugging:

// Add a step map to the end of this mapping. If `mirrors` is

// Add a table row after the selection.

// Add a table row before the selection.

// Add all child nodes between `startIndex` and `endIndex` (or the

// Add all the step maps in a given mapping to this one (preserving

// Add listeners if they haven't been added yet.

// Add methods to `Hash`.

// Add methods to `ListCache`.

// Add methods to `MapCache`.

// Add methods to `SetCache`.

// Add methods to `Stack`.

// Add new frontier nodes for any open nodes at the end.

// Add properties assigned by `RegExp#exec`.

// Add the given array of decorations to the ones in the set,

// Add the given mark to the inline content between `from` and `to`.

// Add the given text to the document. When escape is not `false`,

// Add the necessary cells, using a heuristic for whether to add the

// Add the value argument...

// Adding or removing a mark

// Adding to a selection that starts in another cell (causing a

// Adding to an existing cell selection

// Adds the given mark to the set of active marks.

// Adds the given text to the current position in the document,

// Adjust decoration positions to changes made by the transaction:

// Adjust the array shape to satisfy the minimum number of dimensions...

// Adjust the cursor to the dropped position...

// After these have been cleaned up, we'll let them throw.

// Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf

// Algorithm for 'placing' the elements of a slice into a gap:

// All elements equally likely...

// All else failed, just try to get a rectangle for the target node

// All event handlers have been removed, so we want to remove the event

// All nodes marked [selectable](#model.NodeSpec.selectable) can be

// All non-basic code points < n have been handled already. Find the next

// All state changes go through this:

// Allow scroll on provided target

// Allow the findChunks to be overridden in findAll,

// Allowed by RFCs, but cause of XSS attacks.  Always escape these.

// Allows consumers to extend a base Select with additional styles

// Already observing node.

// An array describes a DOM element. The first value in the array

// An atomic node (e.g. Image) is selected.

// An editable DOM node containing the document. (You probably

// An empty fragment. Intended to be reused whenever a node doesn't

// An event was generated for a text change that didn't change

// An expando property on the DOM node provides a link back to its

// An object describing a schema, as passed to the [`Schema`](#model.Schema)

// An object for storing whatever values modules may want to

// An object mapping attribute names to values. The kind of

// An object mapping the schema's node names to node type objects.

// An optional array of problems (cell overlap or non-rectangular

// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)

// And put a sub-ProseMirror into that

// And the alphabetic keys

// And then down into the next node

// And, if no more callbacks then stop observing the node

// Animated Scroll To

// Any elements after that (including the 2nd if it's not an attribute

// Any enumerable properties...

// Anything goes for "unsafe" casting...

// Append a tooltip to the outer node

// Append the inverse of the given mapping to this one.

// Appends a noflip comment to a style rule in order to prevent it from being automatically

// Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html

// Apply a CSS selector.

// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:

// Apply a new step in this transform, saving the result. Throws an

// Apply margin

// Apply the given transaction to produce a new state.

// Apply the joining algorithm

// Apply the latest event from one branch to the document and shift the event

// Are we oob?

// Argument reduction...

// Arguments:

// Array shape:

// Arrays and plain objects...

// As a workaround, use cWM and cWRP to invoke the new static lifecycle.

// As a workaround, use cWU to invoke the new lifecycle.

// As long as there's unplaced content, try to place some of it.

// Assign the result of the finished delegate to the temporary

// Assume cyclic values are equal.

// Assumes r, g, and b are contained in the set [0, 255]

// Assumes r, g, b are contained in the set [0, 255] and

// AsyncIterator objects; they just return a Promise for the value of

// At the start of this parent, look at next one

// Attach and remove event handlers as they're added or removed from props:

// Attach total number of actions on initial call:

// Attribute descriptors

// AttributeSpec:: interface

// Automatically convert percentage into number

// Avoid `split(regex)` for IE8 compatibility. See #17.

// Avoid failures from read-only properties

// Avoid propagating failures to Promises returned by later

// Avoid spamming the console because they are often not actionable except for lib authors

// BOTTOM: allow browser to increase scrollable area and immediately set scroll

// BR nodes tend to only return the rectangle before them

// Back slashes before the query string get converted to forward slashes

// Back up if the node directly above openStart, or the node above

// Based on http://stackoverflow.com/a/22747272/680742, the browser with

// Based on the premise that every string can be "surrounded" by empty strings (e.g., "" + "a" + "" + "b" + "" === "ab"):

// Be forgiving, per 25.3.3.3.3 of the spec:

// Because for <= 15.x versions this might be a "prevContext" object.

// Because get-snapshot might return a falsy value.

// Because the close button is the only focusable element inside of the panel, this

// Because they would work differently between older and newer (16.3+) versions of React.

// Before Symbol spec.

// Besides, it's as well not necessary as the <html> itself neither has

// Big List of Colors

// Binding "this" is important for shallow renderer support.

// Bindings should map key names to [command](#commands)-style

// Bitfield to track which aspects of the state were updated by

// Block option hover events when the user has just pressed a key

// Both positions in the same text node -- simply insert text

// Bound parameter to allow user to add dynamic validation

// Bound parameter to indicate with the propType is required

// Break `z` into 24-bit if necessary...

// Brian Grinstead, MIT License

// Browser (in caretPosition/RangeFromPoint) will agressively

// Buffer instances.

// Buffer offset:

// Buffer#write(string)

// Build a command that splits a non-empty textblock at the top level

// Build a fragment containing empty versions of the structure

// Build a fragment from an array of nodes. Ensures that adjacent

// Build a serializer using the [`toDOM`](#model.NodeSpec.toDOM)

// Build an input rule for automatically wrapping a textblock when a

// Build an input rule that changes the type of a textblock when the

// Build an object containing all ndarray properties needed to revive a serialized ndarray...

// Build up a tree that corresponds to a set of decorations. `offset`

// By default, a node is rendered using the `toDOM` method from the

// By default, document nodes are rendered using the result of the

// By default, if there's a node with the same type above the newly

// By explicitly using `prop-types` you are opting into new production behavior.

// By this condition we can catch all non-replaced inline, hidden and

// CSP to forbid Function, and you're not willing to fix either of those

// Cache

// Cache references to the parent constructor and parent constructor methods:

// Cache the length

// Calculate max size from boundary settings

// Calculate new size

// Calculating the dimensions trigger a DOM repaint which

// Call [`Node.replace`](#model.Node.replace) with the given

// Call `f` for every child node, passing the node, its offset

// Call delegate.iterator[context.method](context.arg) and handle the

// Call the callback when the time left is 0:

// Call the given callback for every descendant node. Doesn't

// Call the given callback for every descendant node. The callback

// Call the given function for each element between the given

// Call the given function for each key/value pair in the map, in

// Call the parent constructor:

// Call this.constructor.gDSFP to support sub-classes.

// Callback can either be a function or a string

// Called for leaf DOM nodes that would otherwise be ignored

// Called when the node view is removed from the editor or the whole

// Calls the callback...

// Calls the given function on each of the changed ranges included in

// Can be called with any tinycolor input

// Can't replace the whole document, so remove 0 if it's present

// Can't update if nextDOM is or contains this.lock, except if

// Cancel the countdown on unmount of component:

// Cannot have own `constructor` property:

// Capture the regular expression pattern and any flags:

// Capture the scroll position so when previous months are rendered above the current month

// Case: Argument reduction needed...

// Case: User is not an owner

// Case: `a` is of type 'object'

// Case: `matching` is set to `dissimilar`

// Case: cos(Inf or NaN) is NaN */

// Case: q > 0.5

// Case: row-major

// Case: x < 2**-27

// Case: x is NaN or infinity

// Case: |x| ~< 2^-26

// Case: |x| ~< 2^20*π/2 (medium size)

// Case: |x| ~< pi/4

// Case: |x| ~< π/4

// Case: |x| ~<= 3π/4

// Case: |x| ~<= 5π/4

// Case: |x| ~<= 7π/4

// Case: |x| ~<= 9π/4

// Case: |x| ~<= π/4 (no need for reduction)

// Case: |x| ~= 3π/2

// Case: |x| ~= 4π/2

// Case: |x| ~= π/2 or π

// Cast data to generic array...

// Change the type, attributes, and/or marks of the node at `pos`.

// Characters that are never ever allowed in a hostname.

// Cheap elimination

// Cheap key test:

// Check for `Error` objects from the same realm (same Node.js `vm` or same `Window` object)...

// Check for a subnormal and scale accordingly to retain precision...

// Check for circular references and return its corresponding clone.

// Check for the abstract class...

// Check for typed array objects from the same realm (same Node.js `vm` or same `Window` object)...

// Check for underflow/overflow...

// Check if a second iteration is needed (good to 118 bits)...

// Check if a third iteration is needed (151 bits accumulated)...

// Check if module is in cache

// Check if re-computation is needed...

// Check if the clock should be active:

// Check if the index is valid

// Check if the string starts with a forward slash...

// Check if we can reuse allocated memory...

// Check that all array element dimensions are consistent:

// Check that output string will not exceed the maximum string length:

// Check to see if string passed in is a percentage

// Check whether any plugin in the given state has a

// Check whether splitting at the given position is allowed.

// Check whether the cursor is at the end of a cell (so that further

// Check whether the given mark type is allowed in this node.

// Check whether this node and its descendants conform to the

// Check whether this node's markup correspond to the given type,

// Check whether vertical selection motion would involve node

// Checks if current selection is a `CellSelection`.

// Checks whether it would be reasonable to apply a given mark type to

// Chop off zero terms...

// Chrome Android when after an uneditable node.

// Chrome Android will sometimes, during composition, report the

// Chrome gets confused by <br contenteditable=false>

// Chrome has a rather weird rounding of "client" properties.

// Chrome will sometimes treat a node selection as a

// Circular reference...

// Class Name Prefixer

// Class instances...

// Clean Value

// Clear all DOM statefulness of the last node selection.

// Clear queue here to prevent

// Clear the exponent bits within the higher order word:

// Client width & height properties can't be

// Clip or extend (repeat) the given set of cells to cover the given

// Cloning is a little expensive, so we want to do it as little as possible.

// Cloning requires ES5 or higher...

// Close and return the node that is currently on top of the stack.

// Close the IIFE:

// Close the block for the given node.

// Close the function call:

// Close the function:

// Close the marks that need to be closed

// Closes the popup.

// Closing braces...

// Code content is represented as a single token with a `content`

// Code generation. Start with function definition...

// Code generation. Start with the function definition...

// Code generation. Start with the function definition:

// Coerce booleans to `1` or `0` and dates to milliseconds.

// Coerce regexes to strings and treat strings, primitives and objects,

// Coerce to Number.

// Collect observers that have active observations.

// Combination Functions

// Combine a number of command functions into a single function (which

// Command for adding an annotation

// Command function that removes the selected columns from a table.

// Command to add a column after the column with the selection.

// Command to add a column before the column with the selection.

// Commands for tables:

// Comment UI

// Common case.

// Compare least significant, most likely to change units first

// Compare the markup (type, attributes, and marks) of this node to

// Compare this fragment to another one.

// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set

// Composition Handlers

// Compress `FQ[]` into `y[]`...

// Compressing a branch means rewriting it to push the air (map-only

// Compute `1-q`:

// Compute `PIO2[0,...,jp]*q[jz,...,0]`...

// Compute `Q[0],Q[1],...,Q[jk]`:

// Compute `n`...

// Compute a table map.

// Compute percentages...

// Compute the number of bytes...

// Compute the number of elements...

// Compute the width and height of a set of cells, and make sure each

// Computes the amount of (end) open nodes at the end of the

// Concatenates all the text nodes found in this fragment and its

// Construct a DOM parser using the parsing rules listed in a

// Construct an NFA from an expression as returned by the parser. The

// Consumer Handlers

// Continue running updates if changes have been detected as there might

// Continuing an existing cross-cell selection

// Controls whether, when a selection of this type is active in the

// Convenience function for adding list-related node types to a map

// Conversion Functions

// Convert SVG string to data URL

// Convert a slice to a JSON-serializable representation.

// Convert integer "bit" chunk to floating-point value...

// Convert into [0, 1] range if it isn't already

// Convert the input in UCS-2 to Unicode

// Convert the selection to a JSON representation. When implementing

// Convert this mark to a JSON-serializeable representation.

// Converts a decimal to a hex value

// Converts a hex value to a decimal

// Converts an HSL color value to RGB.

// Converts an HSV color value to RGB.

// Converts an RGB color to hex

// Converts an RGB color value to HSL.

// Converts an RGB color value to HSV

// Converts an RGBA color plus alpha transparency to hex

// Converts an RGBA color to an ARGB Hex8 string

// Copy 0 bytes; we're done

// Copy `shape` and `strides` to prevent external mutation:

// Copy chrome, IE, opera backslash-handling behavior.

// Copy function arguments

// Copy the provided seed array to prevent external mutation, as mutation would lead to an inability to reproduce PRNG values according to the PRNG's stated seed:

// Copy the sign bit of `y` to `x`:

// Copy the wrapped component's prop types and default props on WithStyles

// Copyright Joyent, Inc. and other Node contributors.

// Could be a NodeSelection or CellSelection.

// Covered by a rowspan cell

// Create ResizeObserverEntry instance for every active observation.

// Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted

// Create a HTML DOM tree out of html string

// Create a JSON-serializeable representation of this fragment.

// Create a JSON-serializeable representation of this step. When

// Create a `Node` of this type. The given attributes are

// Create a command function that toggles the given mark with the

// Create a command to lift the list item around the selection up into

// Create a command to sink the list item around the selection down

// Create a composition view for the orphaned nodes

// Create a copy of this node with only the content between the

// Create a copy of this node, with the given set of marks instead

// Create a failed step result.

// Create a fragment from something that can be interpreted as a set

// Create a gap cursor plugin. When enabled, this will capture clicks

// Create a group for the given array of decoration sets, or return

// Create a keymap plugin for the given set of bindings.

// Create a lower-level base constructor:

// Create a map containing all the keys in this map that don't

// Create a map that moves all positions by offset `n` (which may be

// Create a mapping that maps only through a part of this one.

// Create a mark of this type. `attrs` may be `null` or an object

// Create a mark with the given type and attributes.

// Create a new branch with the given transform added.

// Create a new error...

// Create a new fragment by appending the given node to this

// Create a new fragment by prepending the given node to this

// Create a new fragment containing the combined content of this

// Create a new fragment in which the node at the given index is

// Create a new map by appending the keys in this map that don't

// Create a new map by prepending the keys in this map that don't

// Create a new map by replacing the value of `key` with a new

// Create a new module (and put it into the cache)

// Create a new node with the same markup as this node, containing

// Create a new regular expression:

// Create a new seed "view":

// Create a new set that contains the decorations in this set, minus

// Create a new state "view":

// Create a new state based on this one, but with an adjusted set of

// Create a new state.

// Create a node in this schema. The `type` may be a string or a

// Create a node selection from non-resolved positions.

// Create a plugin that, when added to a ProseMirror instance,

// Create a properly sorted mark set from null, a single mark, or an

// Create a prototype which inherits from the parent prototype:

// Create a rope repesenting a sub-sequence of this rope.

// Create a rope representing the given array, or return the rope

// Create a seed "view":

// Create a set of decorations, using the structure of the given

// Create a slice from a fragment by taking the maximum possible

// Create a state "view":

// Create a successful step result.

// Create a text node in the schema. Empty text nodes are not

// Create a text selection from non-resolved positions.

// Create a transaction that represents a set of new steps received from

// Create a view desc for the top-level document node, to be exported

// Create an input rules plugin. When enabled, it will cause text

// Create an inverted version of this map. The result can be used to

// Create an inverted version of this mapping.

// Create an inverted version of this step. Needs the document as it

// Create and dispatch a cell selection between the given anchor and

// Create the code which accesses the nested array values and pushes them onto the flattened array.

// Create the function body...

// Create the function in the current scope to allow access to required modules:

// Create the function in the global scope:

// Create the nested for loops...

// Create the variables...

// Creates a [plugin](http://prosemirror.net/docs/ref/#state.Plugin)

// Creates a new popup.

// Creates a node decoration. `from` and `to` should point precisely

// Creates a plugin that enables the collaborative editing framework

// Creates a widget decoration, which is a DOM node that's shown in

// Creates an inline decoration, which adds the given attributes to

// Crude approximation of backspace behavior when no command handled it

// Custom handling for React

// Custom probabilities...

// Cut out the part of the document between the given positions, and

// Cut out the sub-fragment between the two given positions.

// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

// DEFAULT PROPERTIES //

// DO NOT scroll if position is fixed

// DOM APIs, for completeness

// DOM resizing. Until the observe() method is used again.

// DOM, but sometimes—for example when interpreting an event

// DOMOutputSpec:: interface

// DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)

// Data buffer parameter...

// DayPicker props

// Debounce the scroll handler.

// Decode a generalized variable-length integer into `delta`,

// Decode in chunks to avoid "call stack size exceeded".

// DecorationAttrs:: interface

// Decrement the time by 1:

// Defaults to false.

// Define Generator.prototype.{next,throw,return} in terms of the

// Define a mask for the least significant 16 bits (low word): 65535 => 0x0000ffff => 00000000000000001111111111111111

// Define the unified helper method that is used to implement .next,

// Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a

// Delete all callbacks for the node.

// Delete the content between the given positions.

// Delete the given range, expanding it to cover fully covered

// Delete the selection, if there is one.

// Delete the selection.

// Deletes the table around the selection, if any.

// Deletion

// Deletions on IE11 fire their events in the wrong order, giving

// Deliberately forget the last sent value so that we don't

// Deliver notifications in a separate cycle in order to avoid any

// Depending on the detected platform, this will hold

// Deserialize a JSON representation of a state. `config` should

// Deserialize a fragment from its JSON representation.

// Deserialize a mark from its JSON representation. This method is

// Deserialize a node from its JSON representation.

// Deserialize a node from its JSON representation. This method is

// Deserialize a slice from its JSON representation.

// Deserialize a step from its JSON representation. Will call

// Deserialize the JSON representation of a selection. Must be

// Destroy all remaining children in `this.top`.

// Destroy and remove the children between the given indices in

// Detect buggy property enumeration order in older V8 versions.

// Detect whether transition may affect dimensions of an element.

// Determine `jx`, `jv`, `q0` (note that `q0 < 3`):

// Determine if the array can be stored contiguously:

// Determine the minimum and maximum linear indices which are accessible by the array view:

// Determine whether we need to update the PRNG state:

// Determines whether the given [context

// Determines whether the given node may be selected as a node

// DirectEditorProps:: interface extends EditorProps

// Disable scroll for every ancestor of this DateRangePicker up to the

// Dispatch a transaction. Will call

// Dispatch the exception by looping back around to the

// Distill `q[]` into `IQ[]` in reverse order...

// Do a few final mixes of the hash to ensure the last few

// Do nothing if current environment doesn't have the Element interface.

// Do nothing if element is already being observed.

// Do nothing if element is not being observed.

// Do nothing if observer doesn't have active observations.

// Do nothing if running in a non-browser environment or if listeners

// Does not start the time, just sets up the members needed.

// Don't attach arbitrary props to DOM elements; this triggers React DEV warnings (https://fb.me/react-unknown-prop)

// Don't continue looking further up if the parent node

// Don't create more object URLs than needed:

// Don't do anything if this is the top of the list

// Don't get fooled by e.g. browserify environments.

// Don't let the range of [0,255] come back in [0,1].

// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.

// Don't trust event.key in Chrome when there are modifiers until

// Don't use UCS-2

// Done because IE will fire a selectionchange moving the selection

// Double the string:

// Drop active composition after 5 seconds of inactivity on Android

// Drop all remaining descs after the current position.

// Drop empty labels in case of many levels for readability of plot:

// Drop empty open nodes

// Dropdown & Clear Icons

// Dummy constructor functions that we use as the .constructor and

// E.g. for an element with content width of 314.2px it sometimes gives

// ELEMENT_NODE

// EXPORT //

// EXPORTS //

// Eagerly determine array dimensions:

// Edge just doesn't move the cursor forward when you start typing

// Edge sometimes produces wrong names (Issue #3)

// EditorProps:: interface

// EditorView)` arguments, and should return true when they've handled

// Either find an existing desc that exactly matches this node,

// Either this is the first call, activity has stopped and we're at the

// Else, if it continues in the row below, it has to be moved down

// Empty buffer means no match

// Empty textblock

// Empty...

// Ensure a non-zero initial state array:

// Ensure abstract typed array class has expected name:

// Ensure all markup that isn't allowed in the new node type is cleared

// Ensure that each array element is an array of the same size:

// Ensure that foreground and background color combinations meet WCAG2 guidelines.

// Ensure that the array is compatible with a single memory segment:

// Ensure the current content ends with a newline.

// Equivalent of `typeof` but with special handling for array and regexp.

// Error if any of these lifecycles are present,

// Error type raised by [`Node.replace`](#model.Node.replace) when

// Escape the given string so that it can safely appear in Markdown

// Event already had some effect

// Example: `rotate(1.57rad) translateZ(0px)`;

// Exception thrown outside of any try block that could handle

// Execute the module function

// Exit early for strings to avoid a performance hit in some environments.

// Experimental kludge to allow opt-in re-parsing of nodes

// Export existing implementation if available.

// Exported until we deprecate this API completely

// Exports

// Expose `MapCache`.

// Expose public methods of ResizeObserver.

// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:

// Extract the exponent from `frac` and add it to `exp`:

// Extract the higher order word from `y`:

// Extract the plugin's state field from an editor state.

// FIXME maybe descend mark views to parse a narrower range?

// FIXME the assumption that this can always return the current

// FIXME this is no longer needed as of prosemirror-view 1.9.0,

// FIXME we'll need some awareness of text direction when scanning for selections

// FIXME: untyped flow code, return any

// FUNCTIONS //

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

// Fallback to the singleton implementation

// Fallback: Return an object instance of the Buffer class

// Fatal error conditions

// Feature-detects support for .focus({preventScroll: true}), and uses

// Fetches a monochrome sprite bitmap for the specified text.

// Figure out which joinable points exist inside those ranges,

// Fill in the digit keys

// Finally, search either indexOf (if dir is true) or lastIndexOf

// Find a piece of text in an inline fragment, overlapping from-to

// Find a position on the start spine of `this.unplaced` that has

// Find a set of wrapping node types that would allow a node of the

// Find a valid cursor or leaf node selection near the given

// Find a valid cursor or leaf node selection starting at the given

// Find all decorations in this set which touch the given range

// Find an ancestor of the given position that can be joined to the

// Find out whether the selection is at the end of a textblock when

// Find the (direct) child node after the given offset, if any,

// Find the (direct) child node before the given offset, if any,

// Find the DOM node that represents the document node after the

// Find the DOM position that corresponds to the given document

// Find the child nodes that still correspond to a single node,

// Find the cursor or leaf node selection closest to the end of the

// Find the cursor or leaf node selection closest to the start of

// Find the desc for the node after the given pos, if any. (When a

// Find the dimensions of the cell at the given position.

// Find the document position that corresponds to a given DOM

// Find the first position at which this fragment and another

// Find the first position, searching from the end, at which this

// Find the index and inner offset corresponding to a given relative

// Find the left side of the cell at the given position.

// Find the next cell in the given direction, starting from the cell

// Find the node directly after the given position.

// Find the prefix of the mark set that didn't change

// Find the table map for the given table node.

// Find the text in the focused node in the node, stop if it's not

// Finds a position at or around the given position where the given

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,

// Finds the offset of the step map that mirrors the map at the

// Finish the basic string - if it is not empty - with a delimiter

// Firefox returns bad results (the position before the space)

// Firefox sometimes fires spurious events for null/empty styles

// Firefox throws for this call in hard-to-predict circumstances (#994)

// Firefox will raise 'permission denied' errors when accessing

// Firefox will sometimes return offsets into <input> nodes, which

// First chunk just goes straight in the array...

// First rounding (good to 85 bits)...

// First three values...

// First try a download, then web filesystem, then object URLs:

// First, make 100% sure that any "autoEscape" chars get

// Fix #168

// Fix root xlink without namespace

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97

// Fix the given table, if necessary. Will append to the transaction

// Flag the module as loaded

// Flip the menu, render below

// Flip the signs of negative strides:

// Flush if specified

// Focus the editor.

// Followed by a partially overlapping larger span. Split that

// Following conditions are required to handle Internet Explorer which

// Following steps can't be applied to the document's root element as its

// For IE 6–8

// For IE9, immediately call onMonthTransitionEnd instead of

// For block nodes, this represents the space taken up by their

// For boundary

// For columns that have defined widths, but whose widths disagree

// For custom components provide additional, non-DOM, props;

// For deprecated behavior pass `useDeprecatedLogic` in options with true.

// For each code that doesn't have a shift-equivalent, copy the base name

// For each collection element, determine if we've seen the element before. If not, cache a reference which points to its location in the output array; otherwise, update the running count.

// For example, "undefined" or "of type array"

// For lockAspectRatio case

// For node types where all attrs have a default value (or which don't

// For non-IE10 modern browsers

// For parent boundary

// For positions that are have either a different cell or the end

// For reference, this issue is further described here:

// For simplicity, if the timeout is short, just set a normal timeout.

// For target boundary

// For target(html element) boundary

// For text nodes, this contains the node's text content.

// For the native GeneratorFunction constructor, the best we can

// For web workers, where supported

// Force a hex value to have 2 characters

// Force a number between 0 and 1

// Force coersion to uint32. This will also coerce falsey/NaN values to 0.

// Force the update of observations.

// From the spec: "Wait until any invocations of this algorithm started before this one have completed."

// Function to invoke to create an ndarray:

// Furthermore, the keydown event timestamp must be close to the compositionEndedAt timestamp.

// Gather all decorations from the remaining marked children

// Gather the serializers in a schema's mark specs into an object.

// Gather the serializers in a schema's node specs into an object.

// Gecko will do odd things when the selection is directly in front

// GenStateExecuting and loop back for another invocation.

// Generate an integer index on the interval [0,i]:

// Generate an integer index on the interval: [0,i]

// Generated by CoffeeScript 1.12.2

// Get Scroll Parent

// Get a [bookmark](#state.SelectionBookmark) for this selection,

// Get a rectangular area of cells from a slice, or null if the outer

// Get all text between positions `from` and `to`. When

// Get and store the result in the stylesFnResultsCache for the component

// Get bounding client object

// Get cell positions for first row or first column

// Get leading and trailing whitespace from a string. Values of

// Get the _n_​th outgoing edge from this node in the finite

// Get the active plugin with this key, if any, from an editor

// Get the child node at the given index, if it exists.

// Get the child node at the given index. Raise an error when the

// Get the child node at the given index. Raises an error when the

// Get the content match in this node at the given index.

// Get the content of this selection as a slice.

// Get the decorations associated with the current props of a view.

// Get the document root in which the editor exists. This will

// Get the first matching node type at this match position that can

// Get the inner size

// Get the markdown string for a given opening or closing mark.

// Get the marks after the current position, if any, except those

// Get the marks at this position, factoring in the surrounding

// Get the maxWidth that the image could be resized to.

// Get the next word of "raw"/untempered state:

// Get the node directly after the position, if any. If the position

// Get the node directly before the position, if any. If the

// Get the plugin's state from an editor state.

// Get the rectangle spanning the two given cells.

// Get the set of nodes reachable by null edges from `node`. Omit

// Get the size of the current dimension:

// Get the step map that represents the changes made by this step,

// Get the styles interface, theme, and direction from context

// Get the version up to which the collab plugin has synced with the

// Getters

// Given a base color and a list of possible foreground or background

// Given a pair of viewport coordinates, return the document

// Given a position in the document model, get a bounding box of the

// Given a set of bindings (using the same format as

// Given a set of marks, create a new set which contains this one as

// Given a string or object, convert that input to RGB

// Given an x,y position on the editor, get the position in the document.

// Given two same-length, non-empty fragments of inline content,

// Go thru each child

// Goes over the values of a prop, first those provided directly,

// Group transforms that occur in quick succession into one event.

// HACK: Apply position adjustment

// HACK: MouseEvent does not have `which` from flow-bin v0.68.

// HACK: To get `react-draggable` state x and y.

// HELPER FUNCTIONS

// Handle Input Change

// Handle bounds / percentage checking to conform to CSS color spec

// Handle floating point rounding errors

// Handle invocations in a tight loop.

// Handle string cases:

// Handle the basic code points

// Handle the basic code points: let `basic` be the number of input code

// Handle the case where overwriting a selection by typing matches

// Handle the last few bytes of the input array

// Helper class for incrementally updating a tree of mark descs and

// Helper for creating a schema that supports tables.

// Helper for defining the .next, .throw, and .return methods of the

// Helper for iterating through the nodes in a document that changed

// Helper to get the selected rectangle in a table, if any. Adds table

// Hit start of document

// Holds `true` when a

// How a prop is resolved depends on the prop. Handler functions are

// ID to attach to its JSON representation. Use this method to

// IDNA Support: Returns a punycoded representation of "domain".

// IE 10+ (native saveAs)

// IE 8 does not throw here

// IE 8 has a broken gOPD

// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')

// IE and Edge's clipboard interface is completely broken

// IE11 gives us incorrect next/prev siblings for some

// IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified

// IE11 sometimes weirdly moves the DOM selection around after

// IE11 will insert a non-breaking space _ahead_ of the space after

// IE11 will sometimes (on backspacing out a single character

// INFO: Apply x position by resize to draggable.

// INFO: Make uncontorolled component when resizing to control position by setPostion.

// INFO: To calculate parent width with flex layout

// INFO: To set bounds in `lock aspect ratio with bounds` case. See also that story.

// INFO: Use original width or height if set auto.

// Ideally, the image should not be wider than its containing element.

// If `check()` returns a value less than `ndims`, trim off the inconsistent dimensions:

// If a `stack` property is present, copy it over...

// If a block node is selected, create an empty paragraph before (if

// If a higher row spans past our clone row, bump the higher row to cover this new row too.

// If a rejected Promise was yielded, throw the rejection back

// If a type was specified, set the callback for the given type and name.

// If all steps originated with us, we're done.

// If an array does not contain any elements, then no data to store, and, if the array is unordered, adjacent array elements are not guaranteed to be stored next to each other.

// If an exception is thrown from innerFn, we leave state ===

// If closing to `$to` succeeded, create a step

// If context.method was "throw" but the delegate handled the

// If dom is outside of this desc's nodeDOM, don't count it.

// If enqueue has been called before, then we want to wait until

// If input is already a tinycolor, return itself

// If input is an object, force 1 into "1.0" to handle ratios properly

// If input parms are invalid, return {"level":"AA", "size":"small"}

// If it was supposed to be 128, this was already taken care of by `inputToRgb`

// If it's an obj, this is a no-op.

// If maybeInvokeDelegate(context) changed context.method from

// If new component APIs are defined, "unsafe" lifecycles won't be called.

// If no callback was specified, return the callback of the given type and name.

// If no context can be found, return early.

// If nodes within the same range have the same mark, returns the first node.

// If not provided a data buffer, create it; otherwise, see if we need to cast a provided data buffer to another data type or perform a copy...

// If not provided a shape, infer from a provided data source...

// If not, try to move the selected block closer to the next one in

// If obj.hasOwnProperty has been overridden, then calling

// If orientation is VERTICAL_SCROLLABLE and currentMonth has changed adjust scrollTop so the

// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.

// If provided a PRNG state, we ignore the `seed` option...

// If provided an `Object`, return an equivalent primitive!

// If that fails, either increase the open score of the unplaced

// If the DOM position is in the content, use the child desc after

// If the `after` flag is true of there is no node before, make

// If the above failed, fall back to a more robust (and significantly slower) means for resolving underlying data types:

// If the array element is not an array or is not the same size, we have found an inconsistent dimension:

// If the browser does not support passive event listeners, the normalized

// If the constructor has not already been created, create it; otherwise, return a memoized constructor...

// If the count is odd, append the current concatenated string:

// If the cursor is in an empty textblock that can be lifted, lift the

// If the delegate iterator has a return method, give it a

// If the dispatched exception was caught by a catch block,

// If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

// If the image is not cropped.

// If the indices are "inbounds", then the buffer length is compatible:

// If the interface and theme haven't changed for this direction,

// If the ndarray can be considered both "row-major" and "column-major", then use the default order; otherwise, use the ndarray's stated layout order...

// If the next node is a desc matching this widget, reuse it,

// If the next node is an atom, delete it

// If the node above has no content and the node below is

// If the node before is an atom, delete it

// If the node below has no content and the node above is

// If the parent types match, and the entire node was moved, and

// If the previous statement did not throw an error, we can cache the constructor...

// If the selection falls entirely in a child, give it to that child

// If the selection is empty and at the start of a textblock, try to

// If the selection is empty and the cursor is at the end of a

// If the selection is in a node whose type has a truthy

// If the textblock is all LTR, or the browser doesn't support

// If the theme or the interface changed, then there are some values

// If the theme prop is a function, assume the function

// If the user doesn't set a desired height,

// If the user indicated that "any" order suffices (meaning the user does not care about ndarray order), then we use the default order, unless the input ndarray is either unequivocally "row-major" or "column-major" or configured as such....

// If there is an @ in the hostname, then non-host chars *are* allowed

// If there is no node after this, there's nothing to do

// If there is no node before this, try to lift

// If there was a month transition, do not update the focused date until the transition has

// If this cell starts in the row above, simply reduce its rowspan

// If this desc be updated to match the given node decoration,

// If this is non-null, this item is the start of a group, and

// If this is part of a col-spanning cell

// If this item is the inverse of a previous mapping on the stack,

// If this looks like the effect of pressing Enter (or was recorded

// If this position falls inside a col-spanning cell

// If this starts with whitespace, and there is no node before it, or

// If we are called as a function, call using new instead

// If we didn't find any constructors, this could be due to 1) we have yet to create the constructor or 2) we have been provided invalid options. Either way, let's attempt to create an ndarray constructor...

// If we have a remainder, run a clean-up loop...

// If we have yet to determine array strides, we assume that we can compute the strides, along with the index offset, for a **contiguous** data source based solely on the array shape and specified memory layout order...

// If we searched the string to no avail or if the first letter is not `/`, assume that the string is not of the form `/[...]/[guimy]`:

// If we're copying a row with rowspan somewhere, we dont want to copy that cell

// If whitespace has to be expelled from the node, adjust

// If you just need a quick toggle

// If you want the commands defined in this module to apply to your

// Ignore mutations inside nodes that were already noted as inserted

// Ignore non-index properties.

// Ignore the finally entry if control is not jumping to a

// Important!

// In "safe" casting mode, only casts which preserve values are allowed...

// In Safari, onKeyDown does not consistently fire ahead of onChange. As a result, we need to

// In an empty block. If this is a nested list, the wrapping

// In an empty parent, return the empty array

// In case `e.target.value` is a percentage remove the `%` character

// In cases where **relatedTarget** is not null, it points to the right

// In email addresses, only the domain name should be punycoded. Leave

// In firefox, if the cursor is after but outside a marked node,

// In order to ensure consistent ES5/ES6 behavior, cast input value to an object (strings, numbers, booleans); ES5 `Object.getPrototypeOf` throws when provided primitives and ES6 `Object.getPrototypeOf` casts:

// In pass 1, if the next node matches, or there is no next

// In some browsers (only in Firefox, actually) CSS width & height

// In some cases with Chrome the selection is empty after calling

// In which Chrome does really wrong things when the down arrow is

// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,

// Index into `this.top`'s child array, represents the current

// Indicate success

// Indicate that the editor should scroll the selection into view

// Indicates whether the editor is currently [editable](#view.EditorProps.editable).

// Indicates whether the selection contains any content.

// Infer the array "order" from the stride array (this is supplementary to the `order` parameter):

// Inherit from the parent constructor:

// Initialize `jk` for double-precision floating-point numbers:

// Initialize progress if not already set:

// Initialize sections:

// Initialize the hash

// Initialize the internal PRNG state:

// Initialize the remaining state array elements:

// Initialize the shape/dimensions array:

// Initialize the state

// Initialize token array:

// Insert `n` at position `i` of the output

// Insert the given content at the given position.

// Insert the given set of cells (as returned by `pastedCells`) into a

// Insert the node as a newly created node desc.

// Inspect all tables in the given state's document and return a

// Inspired by https://github.com/garycourt/murmurhash-js

// Invalid dates are coerced to `NaN`.

// Invalid ranges are not set to a default, so can range check early.

// Invoke a callback for all descendant nodes between the given two

// Invoke a callback for all descendant nodes recursively between

// Invoke the leading edge.

// Isolate the least significant 16-bits:

// Issue #867 / https://bugs.chromium.org/p/chromium/issues/detail?id=903821

// It may be the case that prevChunk completely surrounds nextChunk, so take the

// It only converts parts of the domain name that

// It will pass a snapshot value to did-update though.

// It's possible the portal props have been changed in response to window resizes

// Iterate from the end of the fragment and array of descs to find

// Iterates over parent nodes, returning the closest table node.

// Iterator interface in terms of a single ._invoke method.

// Iterator will provide entry [k,v] tuples rather than values.

// JSON-serialization identifier using

// Join the blocks around the given position. If depth is 2, their

// Join the joinable points

// Join the selected block or, if there is a text selection, the

// Join the selected block, or the closest ancestor of the selection

// Just return an object and let the conversion functions handle that.

// Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]

// Keep this list in sync with production version in `./factoryWithThrowingShims.js`.

// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

// Key names may be strings like `"Shift-Ctrl-Enter"`—a key

// Kludge to allow the view to track mappings between different

// Kludge to kill 'control selection' in IE11 when selecting an

// Kludge to prevent issues due to the fact that the whole

// Kludge to work around Webkit not allowing a selection to start/end

// Kludge to work around directly nested list nodes produced by some

// LETTER size:

// Last three values...

// Later on, put the first path part into the host field.

// Lazily generate table...

// Leave only the sign bit of `y` turned on:

// Legacy `process.binding('util')` for Node.js < 10.

// Let the image resize freely.

// Lifecycle

// Lift the selected block, or the closest ancestor block of the

// Like [`create`](#model.NodeType.create), but check the given content

// Like [`create`](#model.NodeType.create), but see if it is necessary to

// Like nodes, fragments are persistent data structures, and you

// List markers in Mobile Safari will mysteriously disappear

// Listen to all scroll events, and filter them out inside of 'onScroll'

// Load entry module and return exports

// Load in batches for speed.

// Load the document from the server and start up:

// Look up a handler for the given node. If none are found, return

// Loop over possible expansion levels, starting with the

// MAIN //

// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN

// METHODS //

// MODULES /

// MODULES //

// MSB (most significant bit) is 1

// Main

// Main decoding loop: start just after the last delimiter if any basic code

// Main encoding loop:

// Make `instanceof Error` still work for returned errors.

// Make it easy to access colors via `hexNames[hex]`

// Make sure a table has at least the given width and height. Return

// Make sure a textblock looks and behaves correctly in

// Make sure all handlers get registered

// Make sure all nodes above this.open are finished and added to

// Make sure scrollbar width isn't included in the rectangle

// Make sure the current stored marks or, if that is null, the marks

// Make sure the cursor isn't directly after one or more ignored

// Make sure the cursor isn't directly before one or more ignored

// Make sure the given line (left, top) to (left, bottom) doesn't

// Make sure the given line (left, top) to (right, top) doesn't cross

// Make sure the wrapping mark descs match the node's marks.

// Make the head cell the first range, so that it counts as the

// Map a position through this mapping, returning a mapping

// Map a position through this mapping.

// Map the given functions over the elements of the rope, producing

// Map the set of decorations in response to a change in the

// Map this selection through a [mappable](#transform.Mappable) thing. `doc`

// Map this step through a mappable thing, returning either a

// Mappable:: interface

// Mapping from data types to underlying buffer constructors...

// Mapping from ndarray data buffer constructors to data types...

// Mark the children that are directly touched by changes, and

// Mark this node as being the selected node.

// Mark views only support `dom` and `contentDOM`, and don't support

// MarkSpec:: interface

// Markdown/CommonMark text.

// Marks

// Marks applied to its children

// Marks applied to this node itself

// Marks that can't apply here, but will be used in children if possible

// Match a node type, returning a match after that node if

// May have to protect focused DOM from being changed if a composition is active

// Menu Component

// Menu List

// Menu Options

// Menu Portal

// Merge Utility

// Merge the list items into a single big item

// Merge the selected cells into a single cell. Only available when

// Methods

// Minimum delay before invoking the update of observers.

// Misc. Instance Properties

// Mix 4 bytes at a time into the hash

// Mobile Device Detector

// Mobile Safari ignores { overflow: hidden } declaration on the body.

// Modal is handled separately at `onClick`

// Modification Functions

// Modifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or

// Module

// Moment's isSame clones moment inputs and is a tad slow

// Most transforming methods return the `Transform` object itself, so

// Mounting

// Mouse Handlers

// Move content from the unplaced slice at `sliceDepth` to the

// Move dirty info to nearest node view

// Move the selection to the node wrapping the current selection, if

// Moving out of the initial cell -- start a new cell selection

// Must read oldChildren because children was tagged with -1

// NFA is represented as an array of states, which are themselves

// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,

// NO OP

// NOTE:

// NOTE: We are using a manual event listener here, because React doesn't

// NOTE: possibility of perf boost if key enumeration order is known (see http://stackoverflow.com/questions/18531624/isplainobject-thing).

// NOTES //

// Native Symbol.

// Need `IQ[jz-1]` to determine `n`...

// Need re-computation...

// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595

// Need to get it back to the parent

// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1

// Need to wrap the cursor in mark nodes different from the ones in the DOM context

// Needs to be removed:

// Negative numbers represent not expansion over the whole node at

// New behavior only for users of `prop-types` package

// New steps are defined by creating classes that extend `Step`,

// Newer versions of React will ignore that lifecycle if gSBU exists.

// Newer versions of React will ignore these lifecycles if gDSFP exists.

// No casts between different data types are allowed in "none" or "equiv" casting modes...

// No need to verify that "this.length <= MAX_UINT32" since it's a read-only

// No-op...

// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

// Node converts strings with length < 2 to ''

// Node strips out invalid characters like \n and \t from the string, base64-js does not

// Node's code seems to be doing this and not & 0x7F..

// Node.js 0.10 has enumerable non-index properties on buffers.

// Node.js specific (system errors)...

// Node: Export function

// NodeSpec:: interface

// NodeView:: interface

// Nodes are considered joinable when they are of the same type and

// Nodes are persistent data structures. Instead of changing them, you

// Non `Object` object instances with different constructors are not equal.

// Normalize by dropping open parent nodes

// Normalize byteOffset

// Normalize byteOffset: negative offsets start from the end of the buffer

// Normalize the input fraction:

// Normalize val

// Normalized Scroll Top

// Not Firefox/Chrome, or not in a text node, so we have to use

// Not in a cell, let the default behavior happen.

// Not sure about the optimal order of these conditions:

// Note that all referencing and parsing is done with the

// Note that any invalid chars are also handled, but these

// Note that simple async functions are implemented on top of

// Note that unlike typical NFAs, the edge ordering in this one is

// Note that, due to the fact that required nodes can always be

// Note that, since the stride is negative, this operation increments, not decrements, the offset...

// Note: We intentionally don't use bit shift operators to en- and

// Note: ["return"] must be used for ES3 parsing compatibility.

// Note: cannot use `length < kMaxLength()` here because that fails when

// Note: cannot use `typeof` directly, as various browser engines incorrectly return `'function'` when operating on non-function objects, such as regular expressions and NodeLists.

// Note: order should match `ctors` order

// Note: property order matters in order to maintain consistency of PRNG "shape" (hidden classes).

// Note: we assume that an option value can be uniquely serialized to a `string` via `JSON.stringify()`...

// Note: we assume that an option value can be uniquely serialized to a `string` via `toString()`...

// Note: we ignore whether `options` has a `buffer` property

// Note: we skip the first element, as no further swaps are possible given that all other indices are excluded from swapping...

// Note: we use an array to avoid unordered key look-up

// Now we have a portion which is definitely the auth.

// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

// OR the last index of `val` in `buffer` at offset <= `byteOffset`.

// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

// Object used to store metadata properties for the transaction.

// Object used to track the context of a running parse.

// Objects returned as node views must conform to this interface.

// Objects with no prototype (e.g., `Object.create( null )`) are plain...

// Objects...

// Old behavior for people using React.PropTypes

// Older versions will require our polyfilled will-update value.

// On Japanese input method editors (IMEs), the Enter key is used to confirm character

// On Safari, for reasons beyond my understanding, adding an input

// On any filesystem errors, revert to saving with object URLs:

// On iOS, if we preventDefault enter key presses, the virtual

// On some exotic environments, it's not clear which object `setimmediate` was

// Only checks the top-left point.

// Only do something if both the selection and a focused text node

// Only escape the characters between the `/`:

// Only for Firefox

// Only invoke if we have `lastArgs` which means `func` has been

// Only monitor this failure once because there tends to be a lot of the

// Only multiselects support value focusing

// Only normalize list elements when lists in the schema can't directly contain themselves

// Only pass through the highlightIndex attribute for custom components.

// Only try wrapping nodes (pass 2) after finding a place without

// Open a node of the given type

// Open the marks that need to be opened

// Optimization -- avoid work if it's obvious that it's not needed.

// Optional information to store with the decoration. It

// Optionally returns Black or White if the most readable color is unreadable.

// Or just add it as a new desc.

// Or try updating the next desc to reflect this node.

// Order:

// Otherwise, if a null callback was specified, remove callbacks of the given name.

// Otherwise, if shift is active, also try the binding with the

// Otherwise, use various heuristics, falling back on the bias

// Output any previously expelled trailing whitespace outside the marks

// PROPERTIES //

// Pad minutes and seconds with zeroes:

// Parameterized commands

// Parse a base-16 hex value into a base-10 integer

// Parse a document from the content of a DOM node.

// Parse a string as [CommonMark](http://commonmark.org/) markup,

// ParseOptions:: interface

// ParseRule:: interface

// Parses the content of the given DOM node, like

// Patch up this.children to contain the composition view

// Permission is hereby granted, free of charge, to any person obtaining a

// Permissive string parsing.  Take in a number of formats, and output an object

// PhantomJS 2 has enumerable non-index properties on typed arrays.

// Plain array or object...

// PluginSpec:: interface

// Pop the latest event off the branch's history and apply it

// Populates the default ARIA attributes here.

// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86

// Possible string inputs:

// Possibly expensive deep equality test for each corresponding key:

// Potentially lose a little bit of precision here, but will fix issues where

// Prefer anchoring to end when Backspace is pressed

// Prefer using a weak map to cache table maps. Fall back on a

// Prepare the state for writing output (closing closed paragraphs,

// Prepare the table to be large enough and not have any cells

// Prepend BOM for UTF-8 XML and text/* types (including HTML). Note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF

// Prepend an array or other rope to this one, returning a new rope.

// Prevent browsers like Firefox from getting stuck in an infinite loop

// Primitive, Buffer, special class instance...

// Primitives and functions...

// Prop type validation may throw. In case they do, we don't want to

// Propagate the number of consistent dimensions up the recursion chain...

// Property accessors are not being used as they'd require to define a

// Props are configuration values that can be passed to an editor view

// ProseMirror document. So a document is an instance of `Node`, with

// ProseMirror to miss the change (see #930)

// Prototype `constructor` property must be a function (see also https://bugs.jquery.com/ticket/9897 and http://stackoverflow.com/questions/18531624/isplainobject-thing):

// Provides data describing the editor's unconfirmed steps, which need

// Pull that off.

// Pushes a set of steps (received from the central authority) into

// Put the new selection at the position after the inserted

// Put this after the other two cases because it simplifies the booleans

// Queries whether a given mark type is

// Query whether the given position shares the same parent node.

// Query whether the view has focus.

// RFC 2396: characters not allowed for various reasons.

// RFC 3490 separators

// Rare case: chance is 1 in 12...

// Rarely used, but required for "toFilter()"

// Rather than returning an object with a next method, we keep

// Re-create the same nodes with same attrs, dropping the node content.

// React <= 16.2 does not support getSnapshotBeforeUpdate.

// React <= 16.2 does not support static getDerivedStateFromProps.

// React may warn about cWM/cWRP/cWU methods being deprecated.

// React v16.11 and below

// React v16.12 and above

// React's built version is broken: https://github.com/facebook/react/issues/4251

// Read a slice of content from the clipboard (or drop data).

// Readability Functions

// Reassemble:

// Record a transformation in undo history.

// Recovery values encode a range index and an offset. They are

// Rectangle's properties are not writable and non-enumerable.

// Recursively compare arrays (susceptible to call stack limits).

// Recursively compare objects (susceptible to call stack limits).

// Recursively convert values (susceptible to call stack limits).

// Recursively examine nested elements:

// Recursively merge objects and arrays (susceptible to call stack limits).

// Recursively populate clone (susceptible to call stack limits).

// Reference: RFC 3986, RFC 1808, RFC 2396

// Refs

// Regardless of whether this script is executing as a CommonJS module

// Reject immediately following calls.

// Remaining children must be collected and rebuilt into the appropriate structure

// Remove a DOM node and return its next sibling.

// Remove a mark or mark type from the set of stored marks.

// Remove a subtree of the element tree that has been touched

// Remove listeners if controller has no connected observers.

// Remove marks from `hard_break` that are the last node inside

// Remove marks from inline nodes between `from` and `to`. When `mark`

// Remove observer if it's present in registry.

// Remove selected node marking from this node.

// Remove the bias and return:

// Remove the passed in callback from the callbacks of the observed node

// Remove the placeholder:

// Remove the sample observations:

// Remove the selected rows from a table.

// Remove this mark from the given set, returning a new set. If this

// Remove unknown props, see also https://reactjs.org/warnings/unknown-prop.html

// Removes all marks and nodes from the content of the node at `pos`

// Removes the editor from the DOM and destroys all [node

// Removes the given mark from the set of active marks.

// Removes the marks that are not allowed in this node from the given set.

// Render a block, prefixing each line with `delim`, and the first

// Render a node's content as a list. `delim` should be the extra

// Render an [output spec](#model.DOMOutputSpec) to a DOM node. If

// Render the contents of `parent` as block nodes.

// Render the contents of `parent` as inline content.

// Render the given node as a block.

// Render the node. Special case code marks, since their content

// Renderers

// Repeat the given string `n` times.

// Replace a decimal with it's percentage value

// Replace a range of the document with a given slice, using `from`,

// Replace range from-to in an array of view descs with replacement

// Replace the current selection with the given slice.

// Replace the given range with a node, but use `from` and `to` as

// Replace the given range with the given content, which may be a

// Replace the given range, or the selection if no range is given,

// Replace the part of the document between `from` and `to` with the

// Replace the part of the document between the given positions with

// Replace the selection with a placeholder.

// Replace the selection with a placeholder:

// Replace the selection with a slice or, if no slice is given,

// Replace the selection with the given node, appending the changes

// Replace the selection with the given node. When `inheritMarks` is

// ReplaceError:: class extends Error

// Represent delta as a generalized variable-length integer

// Reset any `maxWait` timer.

// Reset the scroll position of the editor's parent nodes to that what

// Resetting context._sent for legacy support of Babel's

// ResizeObserver are tracking the same element and the callback of one

// ResizeObserver instance from receiving notifications of

// Resolve the given position in the document, returning an

// Restart recording after it stopped due to no voice input for a few seconds:

// Restart the timer.

// Restore original position

// Restore the previous selection

// Resume execution at the desired location (see delegateYield).

// Retrieve a metadata property for a given name or plugin.

// Retrieve the current state index:

// Retrieve the element at the given position from this rope.

// Retrieve the value stored under `key`, or return undefined when

// Return a 3 character hex if possible

// Return a 4 character hex if possible

// Return a JSON-serializeable representation of this node.

// Return a debugging string that describes this fragment.

// Return a horizontal line in block context

// Return a map with the given content. If null, create an empty

// Return a map with the given key removed, if it existed.

// Return a new value having the same magnitude as `x`, but with the sign of `y`:

// Return a string representation of this node for debugging

// Return a text selection that spans the given positions or, if

// Return a valid alpha value [0,1] with all invalid values being set to 1

// Return an augmented `Uint8Array` instance, for best performance

// Return an iterator with no values.

// Return early if start > this.length. Done here to prevent potential uint32

// Return the exports of the module

// Return the greater of this and the given position.

// Return the instance:

// Return the local global object if it's not possible extract one from

// Return the ndarray instance:

// Return the position at which the cell at the given row and column

// Return the position of all cells that have the top left corner in

// Return the smaller of this and the given position.

// Returns a 3 or 6 character hex

// Returns a command for selecting the next (direction=1) or previous

// Returns a command function that wraps the selection in a list with

// Returns a command that sets the given attribute to the given value,

// Returns a command that tries to set the selected textblocks to the

// Returns a plugin that enables the undo history for an editor. The

// Returns a range based on the place where this position and the

// Returns a rectangular slice of table rows containing the selected

// Returns a resolved position if this is a cursor selection (an

// Returns a string that is postfixed to a warning about an invalid type.

// Returns an array of all depths for which $from - $to spans the

// Returns class name of the object, if any.

// Returns the smallest column selection that covers the given anchor

// Returns the smallest row selection that covers the given anchor

// Returns the viewport rectangle at a given document position. `left`

// Returns this node's first child, or `null` if there are no

// Returns this node's last child, or `null` if there are no

// Returns true if the given fragment is valid content for this node

// Returns true if this transaction doesn't contain any metadata,

// Reused array to avoid allocating fresh arrays for things that will

// Review our test case against browsers more comprehensively.

// Right-shift the bits:

// Rowspanning cell that has already been handled

// Run any style parser associated with the node's styles. Either

// SVG-related properties

// Safari 5.0 bug

// Safari 9 has enumerable `arguments.length` in strict mode.

// Safari NS namespace fix

// Safari doesn't allow downloading of blob URLs:

// Safari ignores clicks on draggable elements

// Safari replaces the list item or table cell with a BR

// Safari's caretRangeFromPoint returns nonsense when on a draggable element

// SafeAnchor handles the disabled case, but we handle it here

// Same for backspace

// SameValue algorithm

// Scale image to fit its containing space.

// Scan a sorted array of decorations for partially overlapping spans,

// Scan over the fragment, fitting as many child nodes as

// Scan up from this position

// Scan up the dom finding the first desc that is a descendant of

// Schedule new call to be in invoked when the pending one is resolved.

// SchemaSpec:: interface

// Screen for obvious non-objects...

// Scroll Helpers

// Scroll Into View

// Scroll event does not bubble, so we need to look up all the scrollable

// Search for a byte value [0-255]

// Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

// See `createPrimitiveTypeChecker`.

// See http://www.regexguru.com/2008/04/watch-out-for-zero-length-matches/

// See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.

// See https://discuss.prosemirror.net/t/copy-selection-issue-with-the-image-node/1673/2;

// See https://github.com/facebook/regenerator/issues/274 for more details.

// See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.

// See if the node before (or its first ancestor) is closed

// See if the transaction adds or removes any placeholders:

// See triangular numbers: T_n = n * (n + 1) / 2.

// See: https://code.google.com/p/chromium/issues/detail?id=25916

// See: https://en.wikipedia.org/wiki/Base64#URL_applications

// See: https://github.com/beatgammit/base64-js/issues/42

// See: https://github.com/joyent/node/issues/1707

// Select the whole document.

// Selection.extend can be used to create an 'inverted' selection

// Selection.isCollapsed isn't reliable on IE

// Selection.modify (Edge), fall back to a primitive approach

// SelectionBookmark:: interface

// Send the given steps to the server

// Serialize the content of the given node to

// Serialize the content of this fragment to a DOM fragment. When

// Serialize this node to a DOM node. This can be useful when you

// Serialize this state to JSON. If you want to serialize the state

// Serializer

// Set a flag on the given transaction that will prevent further steps

// Set color of editor background to signal own report:

// Set color of editor background to signal that report belongs to someone else:

// Set private properties...

// Set the constructor to refer to the child constructor:

// Set the current stored marks.

// Set the exponent bits to the new exponent:

// Set the first element of the state array to the provided seed:

// Set the type of all textblocks (partly) between `from` and `to` to

// Set the value:

// Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:

// Set up cache to hold tokens for substring matches:

// Set z = scalbn(|x|, ilogb(x)-23)...

// Setting context._sent for legacy support of Babel's

// Shift- prefix enabled. See #997

// Shortcut for trivial case

// Simple cases...

// Simple implementation of mouseEnter and mouseLeave.

// Simple, cheap variant for when there are no local decorations

// Simple, flat case

// Skip ahead if rowspan > 1

// Skip index properties.

// Skip past cells from previous rows (via rowspan)

// Skip zero term...

// So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.

// So if we're currently running a task, we'll need to delay this invocation.

// So let's ensure we reset this back to the base state each time

// Some browsers, namely IE and Edge, don't have the SVGGraphicsElement

// Some versions of FF have rAF but not cAF

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// Sometimes the cell can be in the same depth.

// Spec says greater than zero

// Special case for "transparent", all other non-alpha formats

// Special case for Google doc's image.

// Special case for a simple path URL

// Special case: looking for empty string/buffer always fails

// Special cases for handling +-0.0...

// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.

// Split `x` into higher and lower order words:

// Split a selected cell, whose rowpan or colspan is greater than one,

// Split on whitespace:

// Split the content in the given range off from its parent, if there

// Split the fraction into higher and lower order words:

// Split the node at the given position, and optionally, if `depth` is

// Split the parent block of the selection. If the selection is a text

// Standard className for selected node.

// Start a [transaction](#state.Transaction) from this state.

// Start must be at the end of a block

// Start the timer for the trailing edge.

// StateField:: interface<T>

// Stop listening to mouse motion events.

// Store a metadata property in this transaction, keyed either by

// Store and register the task

// Store the countdown reference:

// Store the scroll position of the editor's parent nodes, along with

// Strategy

// Stride array...

// String input requires "1.0" as input, so 1 will be treated as 1

// Strip off the surrounding list. At the sides where we're not at

// Strip trailing whitespace

// Subscription to the "Transitionend" event is used as a workaround for

// Such objects conform to this interface.

// Superclass for the various kinds of descriptions. Defines their

// Support decoding URL-safe base64 strings, as Node.js does.

// Suspiciously specific kludge to work around caret*FromPoint

// Swap elements:

// Sync the DOM if anything changed

// Sync the content of the given DOM node with the nodes associated

// Sync the current stack of mark descs with the given array of

// Sync the editor with this.dispatchState.edit

// Syncs `this.children` to match `this.node.content` and the local

// TEXT_NODE

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS

// TODO

// TODO needs a tidier implementation

// TODO only check for collisions within current bounds.

// TODO reuse arrays?

// TODO: Internal Option Type here

// TODO: Legacy, not needed anymore. Remove in next major version.

// TODO: Support UI for cropping later.

// TODO: add support for generator functions?

// TODO: for backwards compatibility, we allow the prop to return a new

// TODO: implementation

// TODO: implementation (?)

// TODO: replace with `isCallable` check

// TODO: replace with `stdlib` pkg

// TODO: reserved for future use

// TODO: should be noflip wrapped and handled by an isRTL prop

// TODO: use null

// TODO: validate that minimum number of dimensions does not exceed the maximum number of possible dimensions (in theory, infinite; in practice, determined by max array length; see https://github.com/stdlib-js/stdlib/blob/ac350059877c036640775d6b30d0e98e840d07cf/lib/node_modules/%40stdlib/ndarray/ctor/lib/main.js#L57)

// TODO: write (browser) polyfill

// TODO: write polyfill

// TYPES //

// Take in a single string / number and check to see if it looks like a CSS unit

// Take input from [0, n] and return it as [0, 1]

// Takes a slice parsed with parseSlice, which means there hasn't been

// Tells you whether this node type has any required attributes.

// Tempering transform to compensate for the reduced dimensionality of equidistribution:

// Template strings compiled in strict mode uses concat, which is slow. Since

// Temporary hack

// Test basic support...

// Test for A's keys different from B.

// Test for object-specific method:

// Test if the prototype matches the global `Object` prototype (same realm):

// Test that all properties are own properties (cross-realm; *most* likely a plain object):

// Test that the style string either precisely matches the prop,

// Test whether a given mark or mark type occurs in this document

// Test whether replacing the range `from` to `to` (by index) with a

// Test whether replacing the range between `from` and `to` (by

// Test whether the blocks before and after a given position can be

// Test whether the given node's content could be appended to this

// Test whether the given set of marks are allowed in this node.

// Test whether the selection is the same as another selection.

// Test whether this mark has the same type and attributes as

// Test whether this mark is in the given set of marks.

// Test whether two nodes represent the same piece of document.

// Test whether two sets of marks are identical.

// Tests whether there is a mark of this type in the given set.

// Tests whether this slice is equal to another slice.

// Thanks to jQuery xColor for some of the ideas behind these

// Thanks to less.js for some of the basics here

// That means the fitting must be done to the end of the textblock

// The (absolute) position at the end of the node at the given

// The (absolute) position at the start of the node at the given

// The (absolute) position directly after the wrapping node at the

// The (absolute) position directly before the wrapping node at the

// The (forward) step map for this item.

// The ._invoke method unifies the implementations of the .next,

// The [editor view](#view.EditorView) uses a few metadata properties:

// The [props](#view.EditorProps) exported by this plugin.

// The [spec](#model.SchemaSpec) on which the schema is based,

// The `bias` parameter can be used to influence which side of a DOM

// The above copyright notice and this permission notice shall be included

// The amount of keys in this map.

// The amount of redoable events available in a given editor state.

// The amount of undoable events available in a given state.

// The ancestor node at the given level. `p.node(p.depth)` is the

// The approach which follows is to resolve a view index to its subscripts and then plug the subscripts into the standard formula for computing the linear index in the underlying data buffer...

// The attributes associated with this mark.

// The code below helps compile a regular-expression-like language

// The content must have shrunk

// The context.catch method must only be called with a location

// The current document (the result of applying the steps in the

// The current document.

// The date picker just changed from being closed to being open.

// The date picker just changed from being open to being closed.

// The delegate iterator is finished, so forget it and continue with

// The depth up to which this position and the given (non-resolved)

// The documents before each of the steps.

// The editor will use this as the node's DOM representation

// The editor will use this as the node's DOM representation.

// The empty rope sequence.

// The empty set of decorations.

// The empty slice.

// The end of this one overlaps with a subsequent span. Split

// The end position in the `maps` array.

// The end position. Will be the same as `from` for [widget

// The extra wrapper is somehow necessary on IE/Edge to prevent the

// The final `>>>0` converts the intermediate sum to an unsigned integer (possible integer overflow during sum):

// The first child of the fragment, or `null` if it is empty.

// The first element of the state array must equal the supported state array schema version...

// The fragments after the join point must match

// The function keys

// The function that wraps the provided component in a wrapper

// The index into the ancestor at the given level. If this points at

// The index pointing after this position into the ancestor at the

// The inverted step

// The last child of the fragment, or `null` if it is empty.

// The length of the "other" section must equal `1`...

// The length of the "seed" section much match the empirical length...

// The length of the "state" section must equal `N`...

// The local steps that havent been successfully sent to the

// The lower bound of the range.

// The lower bound of the selection's main range.

// The mark serialization functions.

// The marks (things like whether it is emphasized or part of a

// The module cache

// The name of the mark type.

// The name the node type has in this schema.

// The naming convention is:

// The next textblock must start before end and end near it

// The node is already part of a local view desc, leave it there

// The node serialization functions.

// The node's representation in the editor (empty, for now)

// The number of child nodes in this fragment.

// The number of children that the node has.

// The number of levels the parent node is from the root. If this

// The number of outgoing edges this node has in the finite

// The number zero (pronounced “hole”) is used to indicate the place

// The options passed to the serializer.

// The parent node that the position points into. Note that even if

// The plugin's [spec object](#state.PluginSpec).

// The plugins that are active in this state.

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect

// The props object given directly to the editor view supports two

// The ranges covered by the selection.

// The require function

// The resolved anchor of the selection (the side that stays in

// The resolved head of the selection (the side that moves when

// The resolved lowerbound of the selection's main range.

// The resolved upper bound of the selection's main range.

// The root entry object (effectively a try statement without a catch

// The root node in which the position was resolved.

// The schema into which the parser parses.

// The schema of the state's document.

// The schema that this mark type instance is part of.

// The second element of the state array must contain the number of sections...

// The selection's anchor, as an unresolved position.

// The selection's head.

// The selection.

// The set of [parse rules](#model.ParseRule) that the parser

// The set of marks allowed in this node. `null` means all marks

// The setTimeout will wait until the transition ends.

// The size of the content represented by this desc.

// The size of the fragment, which is the total of the size of its

// The size of this node, as defined by the integer-based [indexing

// The size this slice would add when inserted into a document.

// The spec on which the type is based.

// The spec provided when creating this decoration. Can be useful

// The spec that this type is based on

// The start position of the decoration.

// The starting match of the node type's content expression.

// The starting position in the `maps` array, used when `map` or

// The state array must have a minimum length...

// The step count for which the current selection is valid.

// The step maps in this mapping.

// The steps in this transform.

// The stored marks set by this transaction, if any.

// The test against `importScripts` prevents this implementation from being installed inside a web worker,

// The third argument is an optional Object.

// The timestamp associated with this transaction, in the same

// The transaction's current selection. This defaults to the editor

// The type of node that this is.

// The type of the [default top node](#model.SchemaSpec.topNode)

// The type of this mark.

// The upper bound of the range.

// The upper bound of the selection's main range.

// The use of `Object#toString` avoids issues with the `typeof` operator

// The value of the state field that tracks undo/redo history for that

// The various event-handling functions may all return `true` to

// The version number of the last update received from the central

// The view's current [props](#view.EditorProps).

// The view's current [state](#state.EditorState).

// The wrapper component that injects the withStyles props

// The wrappers are assumed to be valid in this position, and should

// There are several things that positions can be mapped through.

// There are siblings after the lifted items, which must become

// There can be a race condition where the target may no longer exist

// These are the options recognized by the

// These are used when the footnote is selected

// These browsers support querying empty text ranges

// These is screen coordinate.

// These values are in context so we're listening for their updates.

// These values are to center the datepicker (approximately) on the page

// They are part of the [editor state](#state.EditorState) and

// They form a doubly-linked mutable tree, starting at `view.docView`.

// They're not really 'magic', they just happen to work well.

// This addresses the problem that Transform.replace expects a

// This behaves neither like String nor Uint8Array in that we set start/end

// This bug tends to close the virtual keyboard, so we refocus

// This can be changed by passing an array of types and attributes to

// This can be useful as a base to build a custom serializer from.

// This class tracks the state of the placement progress in the

// This environment has a native %IteratorPrototype%; use it instead

// This error was thrown as a convenience so that you can use this stack

// This field belongs to a plugin mapped to a JSON field, read it from there.

// This file defines a ProseMirror selection subclass that models

// This file defines a number of helpers for wiring up user input to

// This file defines a number of table-related commands.

// This file defines a plugin that handles the drawing of cell

// This file defines helpers for normalizing tables, making sure no

// This file is a fallback for a consumer who is not yet on React 16

// This function abstracts iterating over the nodes and decorations in

// This function creates a set of [node

// This guards against the case where compositionend is triggered without the keyboard

// This handles more types than `getPropType`. Only used for error messages.

// This higher-order component consumes a string from React context that is

// This intentionally forwards size and variant (if set) to the

// This is a command that will undo an input rule, if applying such a

// This is a huge hack, but appears to be the best we can

// This is a polyfill for %IteratorPrototype% for environments that

// This is at the top of an existing list item

// This is important for "transitions" which never actually start

// This is intended to be able to call things like

// This is intentionally an invariant that gets caught. It's the same

// This is the magic part:

// This is the method, for example, to handle paste. The similar

// This is the node that holds the child views. It may be null for

// This is the type passed to the [`Plugin`](#state.Plugin)

// This is to support parse stuff like "  http://foo.com  \n"

// This is used to notify the history plugin to not merge steps,

// This is very crude, but unfortunately both these browsers _pretend_

// This loop picks a preferred target depth, if one of the covering

// This loop repeatedly gives plugins a chance to respond to

// This method is bound to the view instance, so that it can be

// This method returns true if the keydown event should be ignored.

// This module should not be running in strict mode, so the above

// This piece of state is used to remember when a mouse-drag

// This should be overwrite by subclass.

// This state field accumulates changes that have to be sent to the

// This way the result will be the same whether the tinycolor is initialized with string or object.

// This works around a Google Docs misbehavior where pasted content will be inexplicably wrapped in `<b>` tags with a font-weight normal.

// Throughout this interface, methods that take an optional `depth`

// TinyColor v1.4.1

// To avoid creating an additional object, we just hang the .value

// To be able to deserialize selections from JSON, custom selection

// To be able to serialize steps to JSON, each step needs a string

// Toggles between row/column header and normal cells (Only applies to first row/column).

// Toggles whether the selected column contains header cells.

// Toggles whether the selected row contains header cells.

// Tokenize a style attribute into property/value pairs.

// Touch Capability Detector

// Touch Handlers

// Touched nodes

// Track which rows we must add cells to, so that we can adjust that

// Tracks whether anything was changed

// Transactions track changes to the document (they are a subclass of

// Translation value is a hack to force an invisible transition that

// Trick from jQuery -- some elements must be wrapped in other

// Trim off extra bytes after placeholder bytes are found

// Trim off integer >= 8

// Trivial case where we have all negative strides...

// Trivial case where we have all positive strides...

// True for node types that allow no content.

// True if this is a block type

// True if this is a textblock type, a block that contains inline

// True if this is an inline type.

// True if this is the text node type.

// True if this node type has inline content.

// True if this selection goes all the way from the left to the

// True if this selection goes all the way from the top to the

// True when the document has been changed (when there are any

// True when this is a block (non-inline node)

// True when this is a leaf node.

// True when this is a text node.

// True when this is a textblock node, a block node with inline

// True when this is an atom, i.e. when it does not have directly

// True when this is an inline node (a text node or a node that can

// True when this match state represents a valid end of the node.

// True when this node allows inline content.

// True when this node is an atom, i.e. when it does not have

// Try falling back to the keyCode when there's a modifier

// Try fast path regexp

// Try the joining algorithm

// Try the left side first, fall back to the right one if that

// Try to apply a step in this transformation, ignoring it if it

// Try to find a handler for the given tag and use that to parse. If

// Try to find a node desc matching the given data. Skip over it and

// Try to find a point where a node of the given type can be inserted

// Try to find a selection inside the given node. `pos` points at the

// Try to find a target depth to which the content in the given range

// Try to find a valid way to wrap the content in the given range in a

// Try to find a way to fit the given node type into the current

// Try to fit each possible depth of the slice into each possible

// Try to insert the given node, adjusting the context when needed.

// Try to match a fragment. Returns the resulting match when

// Try to match string input using regular expressions.

// Try to match the given fragment, and if that fails, see if it can

// Try to merge this step with another one, to be applied directly

// Try to reorder 'mixable' marks, such as em and strong, which

// Try to start a node of the given type, adjusting the context when

// Try to update the next node, if any, to the given data. Checks

// Try/catch helper to minimize deoptimizations. Returns a completion

// Turn off the sign bit of `x`:

// URLs are obnoxious.

// USE OR OTHER DEALINGS IN THE SOFTWARE.

// Undo a given set of steps, apply a set of other steps, and then

// Unmounting.

// Update `this.unplaced`. Drop the entire node from which we

// Update the cache with all the new values

// Update the editor's `state` prop, without touching any of the

// Update the state index:

// Update the timestamp for the transaction.

// Update the transaction's current selection. Will determine the

// Update the view by updating existing props object with the object

// Update the view's props. Will immediately cause an update to

// Updates the popup.

// Upload report:

// Upload was cancelled:

// Usage:

// Use `util.types` for Node.js 10+.

// Use a for loop to avoid recursion

// Use a heuristic to avoid memoization of highly-specialized ndarray constructors, thus effectively introducing "fast" and "slow" ndarray construction paths...

// Use all marks in the main node, except those that have

// Use lowercase letters to refer to letter keys (or uppercase letters

// Use mask-based collision detection.

// Use the default theme if there are no customizations.

// Use the setState() updater to ensure state isn't stale in certain edge cases.

// Use unrolled loops if both strides are equal to `1`...

// Used by hacks like the beforeinput handler to check whether anything happened in the DOM

// Used by the editor's event handler to ignore events that come

// Used for testing.

// Used to [define](#model.NodeSpec.attrs) attributes on nodes or

// Used to check whether a given description corresponds to a

// Used to find a DOM range in a single parent for a given changed

// Used to group adjacent nodes wrapped in similar parents by

// Used to sort decorations so that ones with a low start position

// Used when finding a mark at the top level of a fragment parse.

// Utilities

// Utilities to help with copying and pasting table cells

// Utilities used for copy/paste handling.

// Utility Functions

// VARIABLES //

// Validate some options before others...

// Validate the remaining options...

// Value is an array of length 2:

// Values outside of this range will be wrapped into this range.

// Various helper function for working with tables

// Verbose variant of [`apply`](#state.EditorState.apply) that

// Very specific hack to deal with backspace sometimes failing on

// View descriptions are data structures that describe the DOM that is

// View descs are responsible for setting any selection that falls

// WARNING: in C, this is not thread safe

// WARNING: in C, this would not be thread safe

// WARNING: not thread safe

// Walk the prototype tree until we find an object having a desired class...

// Walk the prototype tree until we find an object having a desired native class...

// Walk the prototype tree until we find an object having the desired native class...

// Warning: maxLength not taken into account in base64Write

// We also can't just check "__reactInternalSnapshot",

// We can say that if CSS dimensions + paddings are equal to the "client"

// We can use this to conditionally switch layout/direction for right-to-left layouts.

// We consider the content of each node that is open to the left to be

// We do not return zero-length matches

// We don't expect any of the above to throw, but better to be safe.

// We go 1 magnitude less, for safety

// We handle both situations here by using the ` || ` operator to fallback

// We have nothing to observe. Stop observing, which stops the

// We need to check all keys in case some are required but missing from

// We need to check for presence here because a handler function may

// We need to de-construct the string...

// We need to handle both cases, but can't just check for the presence of "maybeSnapshot",

// We only ignore it once, as pressing Enter a second time *should* insert a newline.

// We only want to re-render if the theme, stylesInterface, or direction change.

// We should probably do more with beforeinput events, but support

// We shouldn't need this after updating to React v16.3.0, which introduces:

// We'll increment its span below.

// When `type` isn't given, the existing node type is preserved,

// When a yielded Promise is resolved, its final value becomes

// When editor content is being dragged, this object contains

// When entering a mark, the current top and index are pushed

// When inside a text node, just return the text node's marks

// When parsing in-editor content (in domchange.js), we allow

// When the callback returns false for a given node, that node's

// When the collab module receives remote changes, the history has

// When the datepicker is full screen, we never want to focus the end date first

// When the selection is empty and at the end of a textblock, select

// When the selection is empty and at the start of a textblock, select

// When the selection is in a node with a truthy

// When there is a mark of this type in the given set, a new set

// When there's inline content directly after the frontier _and_

// When this position points into a text node, this returns the

// When user click with right button the resize is stuck in resizing mode

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// Whether the command for apply specific text style mark is enabled.

// Whether the selection was explicitly updated by this transaction.

// Whether the stored marks were explicitly set for this transaction.

// Whether to render lists in a tight style. This can be overridden

// Whether vertical position motion in a given direction

// Width & height include paddings and borders when the 'border-box' box

// Will be zero for positions that point between nodes.

// Will recognize its own changes, and confirm unconfirmed steps as

// With the plugin enabled, these will be created when the user

// Within the body of any async function, `await x` is transformed to

// Without it we would need to implement separate methods for each of

// Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/

// Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523

// Work around an issue in Chrome, IE, and Edge where changing

// Work around for an issue where an update arriving right between

// Work around issue in Chrome where backspacing sometimes replaces

// Workaround to get in-selection views selected.

// Wrap a command so that, when it produces a transform that causes

// Wrap in a new function to prevent

// Wrap subsequent content in a node of the given type.

// Wrap the given [range](#model.NodeRange) in the given set of wrappers.

// Wrap the selection in a node of the given type with the given

// Writing a hex string, for example, that contains invalid characters will

// You can add multiple keymap plugins to an editor. The order in

// You can define a custom bookmark type for a custom selection class

// You can set an `"addToHistory"` [metadata

// You can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on

// You can use any node as an editor document

// You should probably put this plugin near the end of your array of

// Zero the buffer

// [CommonMark](http://commonmark.org/).

// [`AllSelection`](#state.AllSelection) if no valid position

// [`EditorState.tr`](#state.EditorState.tr) to create an instance.

// [`KeyEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).

// [`OrderedMap`](https://github.com/marijnh/orderedmap) instances

// [`ReplaceError`](#model.ReplaceError) is thrown.

// [`Selection.near`](#state.Selection^near) when the document

// [`Step.jsonID`](#transform.Step^jsonID).

// [`Transform`](#transform.Transform)), but also other state changes,

// [`bulletList`](#schema-list.bulletList) as `"bullet_list"`, and

// [`code`](#model.NodeSpec.code) property in its spec, create a

// [`code`](#model.NodeSpec.code) property in its spec, replace the

// [`decorations` prop](#view.EditorProps.decorations). They come in

// [`dispatchTransaction`](#view.DirectEditorProps.dispatchTransaction)

// [`init`](#state.StateField.init) method, passing in the new

// [`joinBackward`](#commands.joinBackward) or other deleting

// [`joinForward`](#commands.joinForward) and similar deleting

// [`keymap`](#keymap.keymap), return a [keydown

// [`liftTarget`](#transform.liftTarget) to compute `target`, to make

// [`listItem`](#schema-list.listItem) as `"list_item"`.

// [`macBaseKeymap`](#commands.macBaseKeymap).

// [`orderedList`](#schema-list.orderedList) as `"ordered_list"`,

// [`parseSlice`](#model.DOMParser.parseSlice) methods.

// [`parse`](#model.DOMParser.parse) and

// [`parse`](#model.DOMParser.parse), and takes the same set of

// [`pcBasekeymap`](#commands.pcBaseKeymap) or

// [`replace`](#transform.Transform.replace) method is a more

// [`serializeFragment`](#model.DOMSerializer.serializeFragment) on

// [`setSelection`](#state.Transaction.setSelection).

// [`state`](#state.PluginSpec.state) property) of this type, which

// [`toDOM`](#model.NodeSpec.toDOM) method of their spec, and managed

// [`undo`](#history.undo) and [`redo`](#history.redo) commands.

// [`updateState`](#view.EditorView.updateState) with the result.

// [composition](https://developer.mozilla.org/en-US/docs/Mozilla/IME_handling_guide)

// [define](#view.EditorProps.nodeViews) a custom node view.

// [defining](#model.NodeSpec.defining).

// [determined](#model.NodeSpec.attrs) by the node type.

// [excluded](#model.MarkSpec.excludes) by this one.

// [exclusive](#model.MarkSpec.excludes) with this mark are present,

// [isolating](#model.NodeSpec.isolating) parent nodes.

// [markdown-it](https://github.com/markdown-it/markdown-it) to

// [object](#model.ResolvedPos) with information about its context.

// [priority](#model.ParseRule.priority).

// [props](#view.DirectEditorProps).

// [registered](#state.Selection^jsonID) your class.

// [step](#transform.Step) that inserts it. Will return null if

// [steps](#transform.Step) representing a document transformation.

// [tag](#model.Node.type) `Node` instances. They contain information

// [tagged](#model.Mark.type) with type objects, which are

// [the guide](/docs/guide/#doc) for more information.

// __webpack_public_path__

// _usually_(not always since there could be multiple style tags)

// ` inline code

// `"block"`.

// `"paragraph (ordered_list | bullet_list)*"`. `listGroup` can be

// `Fragment.empty` as content.

// `Meta-`) are recognized. For characters that are created by holding

// `NodeType` instance. Attributes will be extended

// `ProseMirror-gapcursor`. You can either include

// `Schema`, which controls which types exist and which

// ```

// ``` code block

// ```javascript

// `a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or

// `appendMap`).

// `basicLength` is the number of basic code points.

// `bias` determines whether the method searches forward (default)

// `blockSeparator` is given, it will be inserted whenever a new

// `cancel` potentially being assigned

// `contrast`

// `d` is one more than the index of the last consistent dimension and thus equal to the number of consistent dimensions:

// `e0 = ilogb(z) - 23` => unbiased exponent minus 23

// `equals`

// `firstDelim` is a function going from an item index to a

// `getBoundingClientRect` on that DOM node. Do **not** mutate the

// `handleDOMEvents`, where the handler itself is responsible for that.

// `handledCPCount` is the number of code points that have been handled;

// `hasOwn.call(value, "__await")` to determine if the yielded value is

// `historyPreserveItems` property in its spec, in which case we must

// `hslToRgb`

// `hsvToRgb`

// `i` was supposed to wrap around from `out` to `0`,

// `inclusive` set to false and are not present in the other node.

// `index` is the index of the next character to be consumed.

// `isReadable`

// `isValidCSSUnit`

// `itemContent` determines the content expression for the list items.

// `jp+1` is the number of terms in `PIO2[]` needed:

// `mapResult` is called.

// `maxTouchPoints` works on IE10/11 and Surface

// `mostReadable`

// `nodeType` is the type of node to wrap in. If it needs attributes,

// `null`, a `Node`, or an array of nodes.

// `null`. Similarly `marks` may be `null` to default to the empty

// `ontouchstart` check works on most browsers

// `origins` holds the _original_ transactions that produced each

// `p.index(0)` is 1 and `p.index(1)` is 2.

// `rgbToHex`

// `rgbToHsl`

// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:

// `rgbToHsv`

// `rgbToRgb`

// `rgbaToArgbHex`

// `rgbaToHex`

// `selectedCell` CSS class.

// `setimmediate` library.

// `start` and `end` are omitted, all decorations in the set are

// `stringInputToObject`

// `style/gapcursor.css` from the package's directory or add your own

// `style` attribute, `addElementWithStyles`.

// `table`, `table_row`, and `table_cell` nodes types as used by this

// `this.children`.

// `this.top`.

// `to` point directly before and after the selected node, `anchor`

// `to`, and the slice's [`openStart`](#model.Slice.openStart) property

// `type` property whose value matches the ID under which you

// `useCapture` is set to true by default so that a `stopPropagation` in the

// `wrappingInputRule` function.

// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test

// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`

// a DOM selection change and the "selectionchange" event for it

// a ProseMirror document conforming to a given schema. Its behavior

// a `"uiEvent"` property of that may be `"paste"`, `"cut"`, or `"drop"`.

// a different cell above them, add a decoration

// a fallback kludge when not supported.

// a flat array.

// a fragment. Calls `onNode` for each node, with its local and child

// a given node, by looking at the way the mark occurs in the schema.

// a given position is a valid end of the node.

// a hard break, or a text node that ends with whitespace, strip the

// a head (the moving side) and anchor (immobile side), both of which

// a in [0, 1]. Returns a 4 or 8 character rgba hex

// a node's spec (typically used when the node is displayed as an

// a position points into a text node, that node is not considered

// a selection starts in such a node and ends in another, in which

// a single set when possible.

// a string or number, in which case it is ignored, to support the

// a wrapping list.

// able to install onto.  Search each possibility in the same order as the

// about the node type, such as its name and what kind of node it

// absolutely positioned element rendered above the viewport (only below).

// accessibility

// accessibility props

// accidentally pass it on to the delegate.

// account for possible declaration `width: 100%;` on body

// account for touch devices

// achromatic

// action.

// active or the character produced isn't ASCII, and our table

// active plugins. State fields that exist in both sets of plugins

// active.

// actual element/character rectangles to get a solution (this part

// actually part of the list item above it.

// adapted from https://github.com/facebook/react/blob/144328fe81719e916b946e22660479e31561bb0b/packages/shared/shallowEqual.js#L36-L68

// add a custom class to let the user customize the element

// add default propTypes for folks that use runtime checks

// add extraWidth to the detected width. for number types, this defaults to 16 to allow for the stepper UI

// add nodes to the start or end of the given fragment to make it

// adding delimiters, and so on), and then optionally add content

// additional width for input element

// adjust to the authority's view of the document.

// after it. Returns the merged step when possible, null if the

// after the bite. Otherwise add them at the end).

// afterwards- we wouldn't want to ignore the keydown event in this case.

// against the node type's content restrictions, and throw an error

// aliased for consumers

// all previous Promises have been resolved before calling invoke,

// all the css 'style' of the parents must be transferred to the children

// all the if statements are to appease Flow 😢

// allow deletion at the selected point.

// allowed.

// already have an existing method we want to call, so there's no need

// already have that attribute set to that value.

// also directly pass a DOM node. `getPos` can be used to find the

// also ensures that the minifier will not anonymize the function.

// always called with the plugin instance as their `this` binding.

// amount of characters. For other leaf nodes, it is one. For

// amounts to a very basic focus trap. The user can exit the panel by "pressing" the

// and "client" properties, though that is not always true in Chrome.

// and .done properties off the next function object itself. This

// and `right` will be the same number, as this returns a flat

// and are also not enumerable in the native implementation.

// and are at the start or end of a parent node in which the given

// and can thus safely be extended.

// and create a ProseMirror document as prescribed by this parser's

// and don't want to reset the set in the effect

// and drop the descs before it.

// and end token).

// and head cell.

// and https://github.com/bpampuch/pdfmake/issues/205

// and if successful, rebuilds the slice so that it fits into that parent.

// and if there was a path

// and is only available when the currently selected cell doesn't

// and optionally a set of attributes that provide further information

// and return it along with its index and offset relative to this

// and some helper methods.

// and split those so that only fully overlapping spans are left (to

// and the new document.

// and the one after it, either by joining them or by moving the other

// and there will be very few iterations of this generally

// and try there, even if the original position wasn't directly at the

// and update accordingly with a percentage

// and used by the view class.

// and we could have a special build just for that

// and which can be used to transform between positions in the old

// and whose decorations match the new ones.

// and you can only have one source map per style tag

// announce that option is disabled

// another mark.

// any content-expression checking done on the top nodes, tries to

// any necessary setup in a predictable way. This predictability

// any of the node view methods.

// any rowspan cells by splitting cells that cross it. Return true if

// any text. Mark the dom change to fall back to assuming the

// any type.

// any. (Will not select the document node.)

// anything else is assumed to be absolute.

// anything, or an element merely doesn't have paddings/borders styles.

// appear among text).

// appear in `map` after the keys in `map`.

// appear in `map` before the keys in `map`.

// appear in `map`.

// applicable.

// apply default style

// apply the lock styles and padding if this is the first scroll lock

// appropriate. Remaining unconfirmed steps will be rebased over

// are allowed.

// are based on the strings that can appear in

// are inside of this node, and the node isn't already part of a

// are kept unchanged. Those that no longer exist are dropped, and

// are the ones that are *expected* to be seen, so we fast-path

// argument that corresponds to a known catch block.

// argument.

// arguments. Create a successful result if it succeeds, and a

// aria attributes makes the JSX "noisy", separated for clarity

// around contentEditable terribleness.

// around those blocks in their shared ancestor is returned. You can

// array of boolean

// array of colors

// array of strings was passed, if their node type name is in that

// array.

// arrays of edges, which are `{term, to}` objects. The first state is

// as a non-relevant.

// as being an iOS enter press), just dispatch an Enter key instead.

// as createPortal was introduced in React 16

// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring

// as hints, rather than fixed start and end points. This method may

// as the second character will happen less often than

// ascending copy from start

// asm type annotation

// asm type annotation; possible integer overflow

// assignment should always work unless something is misconfigured. Just

// assume that it's an IPv6 address.

// assume utf8

// assumed to match.

// async functions in terms of async generators, it is especially

// at `j` is the size of the first non-prepended dimension

// at `pos`, if any.

// at the old document shape. This is made cheaper by sharing

// at the selection, match the given set of marks. Does nothing if

// at this point, either we have an explicit point where the

// at-rule

// atSign can be anywhere.

// attributes allowed and required are

// attributes they have.

// attributes, and marks.

// attributes.

// attrs in the dom, that won't be picked up. Not entirely sure

// attrs means that if the user somehow manages to change the

// auth portion cannot go past, or the last @ char is the decider.

// authority. Starts at 0 or the value of the `version` property

// automatically move focus into the dialog by moving

// automaton that describes the content expression.

// avoid extra slice()

// avoid re-renders if the placement has not changed

// backspacing out the first element in a textblock

// bail early if no element is available to attach to

// bail early if not enabled

// bail early if required elements aren't present

// bars are the only difference between rounded dimensions + paddings

// base64 encoded url.

// base64 is 4/3 + up to two characters of the original data

// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`

// basic structure and shared methods.

// be able to do that, positions saved in the map are relative to the

// be configured with the [`atom` property](#model.NodeSpec.atom) on

// be future ones caused by CSS transitions.

// be generated.

// be influenced by the [transaction

// be made to match by inserting nodes in front of it. When

// be replaced by whatever the Enter key handlers do.

// be the first ones in prod and generally later in dev

// because `rebased` relies on a clean, untouched set of items in

// because each remote change adds one. The `upto` argument is used

// because that's known to be hostless.

// because there's no indication that that is the case once the datepicker is open and it

// because this module is primarily intended for the browser and node

// because this should sync the subtree for a whole node at a time.

// before actually updating the DOM, which will cause

// before and after a node in the document. That node, and only that

// before closing marks.

// before the position is returned.

// behavior as without this statement except with a better message.

// between non-editable block nodes. We briefly make something

// between rows, fix up the cells whose width doesn't match the

// between the two given positions.

// between them.

// block before (or after if `dir` is positive). Returns the joinable

// block closer to this one in the tree structure. Will use the view

// block node is started. When `leafText` is given, it'll be

// block selections.

// block.

// block. If not, we call `posFromDOM` on the raw node/offset.

// block: 'nearest',

// both side are ‘open’ (cut through).

// bottom limit

// bottom of the table.

// bound to keys like backspace, after

// bound to return false, and to make sure that cursor-motion keys

// bound.

// boundaries) and match the given predicate on their spec. When

// boundaries.

// breaks the CSS transition.

// broken by replacing non-ASCII by nothing

// browser is IE, and can also be disabled by the `injectStyles` prop.

// browser)

// browser, the selected range should be visible to the user. Defaults

// browsers give this different errors name and messages:

// browsers support it yet.

// but for backwards compatibility we export as the old name

// but guard against overflow

// but it's also required in react native and similar environments sometimes

// but this is much easier and the native packages

// by a DOM change, so that the next update will redraw it.

// by a namespace URL and a space. If the second element is plain

// by checking all node boundaries in their parent nodes.

// byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer

// bytes are well-incorporated.

// cache the result of stylesFn(theme)

// cached from whatever global is present so that test runners that stub it

// calculated in the past if the objects they're derived from have not

// calendar presentation and interaction related props

// calendar presentation props

// call invoke immediately, without waiting on a callback to fire,

// callback for occassions where the menu must "flip"

// callbacks from appending listeners

// called one at a time, starting with the base props and then

// called when the widget is actually drawn in a view, but you can

// calls them one by one until one returns true).

// can be disambiguated. Try to pick something that's unlikely to

// can be lifted. Will not go across

// can be used to find the correspondence between positions in the

// can cause a spurious DOM selection update, disrupting mouse

// can optionally pass `start` and `end` indices into the

// cancel mouse events when disabled

// cancel scroll

// cannot get keys using array notation with DOMRect

// care to call `preventDefault` on the event, except with

// case it should overwritten)

// case no marks should be preserved).

// case we just use whatever domFromPos produces as a best effort.

// cases want to overflow. A 64-bit float can represent 48-bit

// cause everything after the first invalid character to be ignored. (e.g.

// cause later handlers to get removed. This can happen if you for

// causes a decoration to show up at the drop position when something

// caveat for [`$from`](#model.NodeRange.$from).

// cell selection to be created).

// cell-based copy/paste, and makes sure tables stay well-formed (each

// cell-selection is happening, so that it can continue even as

// cells at the start or end of the rows (if it looks like a 'bite'

// cells.

// central authority in the collaborating group and makes it possible

// central authority.

// chance to clean up.

// changed.

// character at that position, relative to the window.

// character in a list item or table cell (#708, #862)

// charcode for b

// charcode for l

// check children

// check if the element has a "style" attribute

// check if we have 'width' and 'height'

// check if we have inherent styles to apply when a text is inside several <tag>

// check rowspan for the current row in order to then apply it to the next ones

// check the node type

// check which kind of tag we have

// checked and defaulted (you can pass `null` to use the type's

// child index) with the given replacement fragment (which defaults

// children of the last item

// children that are also instances of `Node`.

// children will not be recursed over. The last parameter can be

// children will not prevent all outside click handlers from firing - maja

// children.

// chop off any delim chars.

// chop off from the tail first.

// chrome 9-10 lack `subarray`

// chrome/safari: "RangeError", "Maximum call stack size exceeded"

// clamped

// clash with classes from other modules.

// class name could be used further down

// className for the input element

// className for the outer element

// classes must register themselves with an ID string, so that they

// client[Width/Height] properties represent viewport area of the window.

// close button or hitting escape

// close the menu if the user taps outside

// closest ancestor block of the selection that can be joined, with

// code unit is the high surrogate of a surrogate pair

// coercion fail below.

// coherent slice, and will fail to place a set of siblings that don't

// collaboration or history management.)

// collapse, even when it should be valid. This appears to be a bug, but

// collector if the target element is deleted.

// collisions between observers, e.g. when multiple instances of

// colors for that base, returns the most readable color.

// column-major

// column-width dragging plugin, might want to get a turn first to

// come first, and within a set with the same start position, those

// comes *before* the @-sign.

// command handle lifting.

// commands, as a fall-back behavior when the schema doesn't allow

// commands, to provide a fall-back behavior when the schema doesn't

// compare them. This is a persistent data structure—it is not

// compared to the given previous document. Useful for avoiding

// compiled once on the first module load.

// completed. Otherwise, attempting to focus on a DOM node may interrupt the CSS animation. If

// completely block the rest of the keys that have functionality outside of this panel

// completely covers a parent node, this method may completely replace

// component that injects the withStyles props

// composing:: boolean

// compute and cache per schema. (If you want to store something

// compute the range, not re-resolved positions directly at its

// compute them from the regular expression match.

// computed one.

// config::- Configuration options. Must contain `schema` or `doc` (or both).

// config::- configuration options

// configuration object..

// considered. When `predicate` isn't given, all decorations are

// const m = 0x5bd1e995;

// const r = 24;

// const table = findTable(selection);

// constructor.

// constructor. It provides a definition for a plugin.

// contain anything (rather than allocating a new empty fragment for

// containing only some of the mark's attributes. The others, if

// content expression.

// content from being mangled when it is put onto the clipboard

// content nodes must be valid children for the node they are placed

// content nodes.

// content of `range`.

// content of the block.

// content that can be moved somewhere on the frontier. Returns two

// content.

// content. If `startOfLine` is true, also escape characters that

// content. May have a `depth` greater than this object's `depth`

// content. The callback is invoked with the node, its

// content. When that ended in an inline node, search backwards,

// contentEditable.

// context, and memoizes them on the instance per direction.

// context. May add intermediate wrappers and/or leave non-solid

// context.dispatchException(context.arg) call above.

// context.method was "next", forget context.arg since it has been

// control over what happens.

// convenience.

// coordinates aren't inside of the editor. When an object is

// coordinates, and its `inside` property holds the position of the

// copied or moved. At any other time, it is null.

// copy of this software and associated documentation files (the

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)

// could be found. When `innerRange` is given, that range's content is

// create an updated state. Use

// create new ones with the content you want. Old ones keep pointing

// create the appropriate tree structure.

// created, this will always succeed if you pass null or

// creating a a schema.

// creating and deserializing such documents.

// creation, but is necessary in the composition hack.

// cross a defining node.

// cross any colspan cells by splitting cells that cross it. Return

// crossing the boundaries of the rectangle that we want to

// css styles for the input element

// css styles for the outer element

// current document, and later resolved to a real selection for a

// current iteration.

// currently do: use `Selection.modify` to move the selection by

// cursor, but still report that the node is selected

// cursor-ish rectangle.

// cursor-motion keys, the code in the handlers also takes care of

// custom things with the selection. Note that this falls apart when

// day presentation and interaction related props

// day props

// days belonging to the next month

// days belonging to the previous month

// debounced at least once.

// declare global: os, navigator

// declare global: window

// decode these, since those clip to 32 bits, which we might in rare

// decorations, possibly introducing nesting for marks. Then, in a

// decorations. Splits text nodes when there is a decoration starting

// decorations](#view.Decoration^widget).

// default behavior of scrolling the content of the Keyboard Shortcuts Panel

// default block after the code block, and move the cursor there.

// default field value

// default style for the HR

// defaults entirely, if no required attributes exist). `content`

// define these here so at least they only have to be

// defined by the plugin, and will be available as the `collab` field

// defining this for a custom subclass, make sure the result object

// delay rendering the widget by passing a function that will be

// delayed transitions. This way it's possible to capture at least the

// delegate iterator, or by modifying context.method and context.arg,

// delete the selection. Will append to the given transaction.

// deletion at the selected point.

// deletion. Will return `null` if this position is at the end of

// delimiter for the first line of the item.

// depths for any depth that has $from at its start and does not

// depths is not outside of a defining node, and adds negative

// depths, one for the slice and one for the frontier.

// descend into a node when the callback returns `false`.

// descending copy from end

// describes the state it wants to keep. Functions provided here are

// description.

// descriptions to determine the parse rules that should be used to

// descs matched to the child at that index, or empty.

// descs that don't have children.

// detached elements. Though elements with width & height properties less

// determine whether the first could be created from the second by

// didTransitionMonth is true, the focusedDate gets updated in #updateStateAfterMonthTransition

// directly after `this.$to`, we must generate a `ReplaceAround`

// directly editable content.

// directly in the list node (?!) if you delete the last

// directly interact with the UI.

// directly matching ones, in order to avoid overeagerly reusing

// directly passed through to the `InputRule` constructor. You'll

// directly).

// disable hex4 and hex8

// distance between the position and the start of the text node.

// distribute, sublicense, and/or sell copies of the Software, and to permit

// do is to check its .name property.

// do nothing

// do nothing - this allows the up and down arrows continue their

// do so and return true.

// do we have a default style to apply?

// do we have a rowspan to apply from previous rows?

// doc:: Node

// document level. This ensures the input and the picker never move. Other

// document structure directly, rather than poking around in the

// document).

// document, should be passed so that the serializer can create

// document.

// document. To serialize a whole document, use

// doesn't contain a valid text position.

// doesn't include paddings and borders to computed CSS dimensions.

// doesn't support that mark. This will remove the mark if any marks

// doesn't work.

// don't break things.  But we need to wrap it in a try catch in case it is

// don't capture the event if the menu opens on focus and the focused

// don't collapse size to less than the placeholder

// don't cycle from the start to the end

// don't hoist over string (html) components

// don't natively support it.

// don't support this type of collections.

// drag selection.

// drawn between the document nodes.

// dropping fully covered parent nodes of the replaced region when

// duplicate work on each transaction.

// e.g. `#fff` or `#ff0048`

// each inline node between `from` and `to`.

// each leaf node).

// easily passed around.

// edge: "Error", "Out of stack space"

// editable content. This is usually the same as `isLeaf`, but can

// editable document. Its state and behavior are determined by its

// editable, set the selection, then set it uneditable again.

// editor DOM directly, or add styling this way, since that will be

// editor is destroyed.

// editor state. Assigning a key does mean only one plugin of that

// effective test for hidden elements. E.g. even jQuery's ':visible' filter

// either be valid `DOMOutputSpec` values, or the number zero.

// el has no layout at all, use its children instead.

// element here. However, in cases where it is null (such as clicking on a

// element.

// elements for innerHTML to work. I.e. if you do `div.innerHTML =

// elements.

// emitted. The keydown event triggers newline insertion, which we don't want.

// emphasis

// empty if nothing had to be inserted). When `toEnd` is true, only

// empty string to avoid regexp issues

// empty text selection), and null otherwise.

// encapsule in a stack

// encode to utf16 (surrogate pair dance)

// encode utf8

// end fast-deep-equal

// ends in the same node.

// english locale

// enqueue has not been called before, then it is important to

// ensure focus is on the Input when the menu opens

// ensure focus is restored correctly when the control becomes enabled

// ensure it's an object, and not a string url.

// ensure that a menu set triggers an update for consumers

// entirely by the editor. For some use cases, such as embedded

// entirely inside of them, so that custom implementations can do

// eq:: (Selection) → bool

// equals `from`, and `head` equals `to`..

// equivalent to `s & 0xffffffffUL` in original C implementation

// error when the step fails.

// escaped, even if encodeURIComponent doesn't think they

// eslint-disable-line consistent-this

// eslint-disable-line default-case

// eslint-disable-line eqeqeq

// eslint-disable-line func-name-matching

// eslint-disable-line id-length

// eslint-disable-line jsx-a11y/interactive-supports-focus

// eslint-disable-line max-len

// eslint-disable-line no-buffer-constructor

// eslint-disable-line no-console

// eslint-disable-line no-empty-function

// eslint-disable-line no-eval

// eslint-disable-line no-new-func

// eslint-disable-line no-new-wrappers

// eslint-disable-line no-restricted-syntax

// eslint-disable-line no-underscore-dangle

// eslint-disable-line no-unused-vars

// eslint-disable-line no-use-before-define

// eslint-disable-line no-useless-escape

// eslint-disable-line react/forbid-prop-types

// eslint-disable-line stdlib/no-builtin-math

// eslint-disable-line stdlib/no-redeclare

// eslint-disable-line stdlib/require-globals

// eslint-disable-next-line

// eslint-disable-next-line class-methods-use-this

// eslint-disable-next-line getter-return

// eslint-disable-next-line import/no-unresolved

// eslint-disable-next-line import/prefer-default-export

// eslint-disable-next-line no-param-reassign

// eslint-disable-next-line no-proto

// eslint-disable-next-line no-underscore-dangle

// eslint-disable-next-line no-unused-vars, no-restricted-syntax

// eslint-disable-next-line prefer-template

// eslint-disable-next-line react-hooks/rules-of-hooks

// eslint-disable-next-line react/destructuring-assignment

// even href="" will remove it.

// event handler makes an issue where the composition vanishes when

// event options will be a boolean.

// ex:

// exception, let the outer generator proceed normally. If

// execute code before the first await. Since we implement simple

// executor callback, and why async functions synchronously

// exists.

// explicitly.

// export for convenience, in order for components to spread these onto their propTypes

// expose the module cache

// expose the modules object (__webpack_modules__)

// expression match and the node before the wrapped node, and can

// fail the render phase where it didn't fail before. So we log it.

// failed one if it throws a `ReplaceError`.

// fails. Returns the step result.

// fall outside of. If so, we take the position before/after that

// false. Otherwise, apply it, use its return value to drive the way

// fast-deep-equal index.js 2.0.1

// fields that can't be used in plugins:

// figure out if it's got a host

// file is a File

// file is an object URL

// fill the gaps

// filter out columns without cells (where all rows have colspan > 1 in the same column)

// filter out rows without cells (where all columns have rowspan > 1 in the same row)

// final state of an element.

// finalize string values (regular strings and functions interpolated into css calls)

// finally, reconstruct the href based on what has been validated.

// find a cursor (as opposed to a node selection) when pressed. For

// find a parent node in the current context that might fit the nodes,

// find another change.

// find the first instance of any hostEndingChars

// firefox: "InternalError", too much recursion"

// first index

// first, if it's not file:, then we MUST have a host,

// fit anywhere in the schema.

// fit the node. If no fitting wrapping can be found, return null.

// fixed-size cache if that's not supported.

// flipped in RTL contexts. This should be used only in situations where the style must remain

// focused element.

// focused option changes so we calculate additional props based on that

// following conditions:

// following properties:

// footnote is node-selected (and thus DOM-selected) when

// for 'td' and 'th' we check if we have "rowspan" or "colspan"

// for BR we return '\n'

// for Firefox

// for TABLE / UL / OL

// for TD and TH we want to include the style from TR

// for a tiny bit of correctness that won't matter in the real world

// for a while (if only as a no-op)

// for accurate start-of-textblock detection if given.

// for atom nodes selection position after insertion is the previous pos

// for borders

// for cases when the trigger is disabled and mouseOut/Over can cause flicker

// for links

// for more details.

// for other components

// for performance, the menu options in state aren't changed when the

// for recursive calls).

// for selectable node, selection position would be the position of the replaced parent

// for the `" "` name.

// for the color

// for the editor.

// for the width

// for this schema.

// format a parsed object into a url string

// format as `Date.now()`.

// found.

// fragment and the given fragment differ, or `null` if they are the

// fragment and the other.

// fragment containing those nodes.

// fragment differ, or `null` if they are the same.

// fragment, node, or array of nodes.

// fragment, the fragment itself. For a node or array of nodes, a

// fragment.

// fragment. When 0, the parent is open, but no more. When

// frames *always* changes identity so fall back to check length only :(

// from a position would leave a text block.

// from being appended to an existing history event (so that they

// from certain descs.

// from the outer list item to the parent node of the cursor

// frontier node at `frontierDepth`. Close that frontier node when

// fulfil contract with flow: implicit return value of undefined

// full copy. It is represented as a mostly-balanced tree.

// function because try/catches deoptimize in certain engines.

// function.sent implementation.

// functions for this serializer.

// functions, which will be called with `(EditorState, dispatch,

// get a fit that is more in line with WYSIWYG expectations, by

// get rid of any default styles

// given `slice`.

// given an invalid replacement.

// given as argument. Equivalent to `view.update(Object.assign({},

// given attributes. Will return `false` when the current selection

// given document again. (This is used mostly by the history to

// given document.

// given level, or the original position when `depth` is `this.depth + 1`.

// given level, or, when `depth` is `this.depth + 1`, the original

// given level.

// given node is allowed at the current cursor position

// given node type with the given attributes.

// given offset, in this mapping (as per the second argument to

// given position diverge around block content. If both point into

// given position. May return `null` when the position doesn't point

// given positions. If `to` is not given, it defaults to the end of

// given string is typed. The `regexp` argument is

// given to assign a group name to the list node types, for example

// given type to appear at this position. The result may be empty

// given, it should be the index of the step map that is the mirror

// given, the key of the binding will be replaced with that key.

// gives wrong results for elements with width & height less than 0.5.

// go through the array every three bytes, we'll deal with trailing stuff later

// got a fragment string.

// greater than one, any number of nodes above that. By default, the

// grow the replaced area or close open nodes in the slice in order to

// had a rule with `ignore` set.

// handler](#view.EditorProps.handleKeyDown) that handles them.

// handles 'first'

// handles +-0

// handling mapping positions through a series of steps in which some

// happening, don't update the selection.

// happens amids the pending invocation.

// has a stable shape and so hopefully should be cheap to allocate.

// has an uneditable node after it

// has focus (which will mess up the editor's selection state).

// has special meaning only at the start of the line.

// hash is always overridden, no matter what.

// have any attributes), build up a single reusable default attribute

// have at least a `schema` field, and should contain array of

// have been (and was previously) designed to take a closure to be

// have been already added.

// have been already removed.

// have no actual children, from caretPositionFromPoint (#953)

// have non-ASCII characters, i.e. it doesn't matter if

// having "@" as the first character

// high surrogate, and there is a next character

// hints, rather than precise positions. When from and to are the same

// hooks](#state.PluginSpec.filterTransaction) of

// hostnames are always lower case.

// how the browser resolves relative URLs.

// however, if it ends in anything else non-slashy,

// hrefs like //foo/bar always cut to the protocol.

// http://a@b?@c => user:a host:c path:/?@c

// http://a@b@c/ => user:a@b host:c

// http://accessibility.athena-ict.com/aria/examples/dialog.shtml

// http://fb.me/prop-types-in-prod

// http://www.ecma-international.org/ecma-262/5.1/#sec-9.10

// http://www.ecma-international.org/ecma-262/5.1/#sec-9.11

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/

// https://esbench.com/bench/5b809c2cf2949800a0f61fb5

// https://gist.github.com/jimfb/d99e0678e9da715ccf6454961ef04d1b

// https://github.com/Modernizr/Modernizr/blob/acb3f0d9/feature-detects/dom/passiveeventlisteners.js#L26-L37

// https://github.com/ProseMirror/prosemirror-commands/blob/master/src/commands.js

// https://github.com/ProseMirror/prosemirror-schema-basic/blob/master/src/schema-basic.js

// https://github.com/bgrins/TinyColor

// https://github.com/casesandberg/react-color/issues/383

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume

// https://prosemirror.net/examples/tooltip/

// https://prosemirror.net/examples/upload/

// i18n

// id to use for the input, can be set for consistent snapshots

// identifier prefixed with zero or more modifiers. Key identifiers

// identify nodes that serialize as hard breaks)

// ie10 has broken `subarray`

// if 'text' is just blank and parentNodeName is a TABLE/THEAD/TBODY/TR, then ignore it

// if (!(symObj instanceof Symbol)) { return false; }

// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

// if (isCellSelection(selection)) {

// if (sym instanceof Symbol) { return false; }

// if (typeof Symbol.prototype.toString !== 'function') { return false; }

// if TH/TD and key is 'background', then we use 'fillColor' instead

// if a Content Security Policy forbids using Function, but in that case

// if a url ENDs in . or .., then it must get a trailing slash.

// if clearTimeout wasn't available but was latter defined

// if empty, we need to add it

// if hostname begins with [ and ends with ]

// if it doesn't match.

// if it is file:, then the host is dropped,

// if it's a DIV and only inline tags in its section, then we want to use 'text' instead of 'stack'

// if it's a known url protocol, then changing

// if it's a table cell (TH/TD) with an empty content

// if it's not a basic code point

// if one of the parents is a TH or a TD, then we go up until them to see if all ancestors are empty too

// if setTimeout wasn't available but was latter defined

// if the path is allowed to go above the root, restore leading ..s

// if the previous content was not P or DIV, then we need to add a \n too

// if the relative url is empty, then there's nothing left to do here.

// if the url is a non-slashed url, then relative

// if the user is navigating around using a mouse

// if there is no match.

// if this doesn't exist then it will be null so the style element will be appended

// if we have P or DIV in a table cell TD or TH, then we need to add \n

// if we increase `i` as we go, then subtract off its starting

// if we still have not hit it, then the entire thing is a host.

// if we want to delete a specific property

// if we want to remove a default style

// if you want shift to be held). You may use `"Space"` as an alias

// if you've stored extra information in that object.

// ignore mouse events that weren't triggered by the primary button

// ignore the keydown event from an Input Method Editor(IME)

// image of this one.

// immediately overriden by the editor as it redraws the node.

// immediately so there is a chance that we might miss one if change

// implementation details to the user code that they probably will

// implemented for custom classes (as a static class method).

// important to get this right, even though it requires care.

// important! without `width` browsers won't allow focus

// in IE

// in Markdown may be opened and closed in different order, so

// in Safari 9 which returns 'object' for typed arrays and other constructors.

// in all copies or substantial portions of the Software.

// in an empty block or between br nodes.

// in case runtime.js accidentally runs in strict mode, we can escape

// in every case, so we don't have to touch the arguments object. The

// in front of a node or if the node is inside an opaque node view.

// in it, try to use property names unlikely to clash.)

// in ms

// in the option object, for the editor's value when the option

// in the resulting editor state.

// include scroll bars size which can be removed at this step as scroll

// includes the step type's [JSON id](#transform.Step^jsonID) under

// including an open parent node from the slice that _is_ marked as

// increment active scroll locks

// incrementing `n` each time, so we'll fix that now:

// indentation added to all lines except the first in an item,

// independently placeable. I.e. in <p("foo"), p("bar")>, when the

// index is out of range.

// indicate that they handled the given event. The view will then take

// indices and calling `get`, because it doesn't have to descend the

// indices. This tends to be more efficient than looping over the

// information about it. Objects of this class represent such a

// information about the dragged slice and whether it is being

// information that client code or plugins can use to describe what a

// information.

// initialize phrases

// initialize with source styles

// inject the custom stylesheet to hide clear UI, defaults to true

// injected easily by `bin/regenerator --include-runtime script.js`.

// inline: 'nearest',

// inner node that the position falls inside of, or -1 if it is at

// input related props

// input that matches any of the given rules to trigger the rule's

// insert empty cell due to rowspan

// insert empty cells due to colspan

// insert into. If anything about it changes, recompute the table

// insert keyframes

// inserted for every non-text leaf node encountered.

// insertions, so if there are added nodes, recompute those

// inside if necessary.

// instance have a waypoint that unmounts another waypoint as part of an

// instances of a state.

// instances whenever needed. The API tries to make this easy.

// instances with the property names they use in the JSON object.

// instantiated once per `Schema`.

// integers precisely.

// interface.

// internal DOM, only inspect it (and even that is usually not

// internationalization

// internationalization props

// interpreted as a text node, a DOM node, which is interpreted as

// into a deterministic finite automaton. For a good introduction to

// into a node when the callback returns `false`.

// into a parent of the previous block. Will use the view for accurate

// into an inner list.

// into smaller cells with the cell type (th, td) returned by getType function.

// into smaller cells. Use the first cell type for the new cells.

// into the async generator function so it can be handled there.

// into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.

// into this parent node, and its index.

// into. If any of this is violated, an error of type

// invisible cursor wrapper, since that would result in those weird

// invocations of the iterator.

// invoked without arguments, but in all the cases we care about we

// is a base offset that should be subtractet from the `from` and `to`

// is a single mark, remove precisely that mark. When it is a mark type,

// is active.

// is also used when comparing decorators for equality.

// is at least one node type that can appear in both nodes (to avoid

// is defined by an array of [rules](#model.ParseRule).

// is dragged over the editor.

// is mostly useful for getting the set of marks to preserve after a

// is not handled by isRTL

// is not very bidi-safe)

// is set to 0, also immediately invoke the onMonthTransitionEnd callback

// is sibling content before or after it, and move it up the tree to

// is so spotty that I'm still waiting to see where they are going.

// is surrogate component

// is there any class to this element?

// is why the Promise constructor synchronously invokes its

// isn't a valid place but is at the start or end of a node. Return

// istanbul ignore if // hopefully this is impossible to test :-)

// it as the trailing edge, or we've hit the `maxWait` limit.

// it is difficult to isolate. If this happens fallback to the old path

// it is its parent's first child) or after it.

// it to figure out a position.

// it was before, when storeScrollPos was called.

// it was given, if non-null, or create a new one if necessary.

// it will attach a property `"pointer"` with the value `true` to

// it will be escaped.

// it will return true if moving left from the current cursor

// it's 1 in dev because we insert source maps that map a single rule to a location

// it's a text node whose content already matches the new text

// it's absolute.

// it's not open, close this frontier node right away.

// it's relative

// it, so set the completion value of the entire function to

// items) out. During collaboration, these naturally accumulate

// iterator prototype chain incorrectly implement this, causing the Generator

// its [content](#model.Node.content).

// its own modifications.

// its parent node or its parent node isn't a textblock (in which

// itself if a rope was given.

// itself, or an array.

// joined.

// jscs:ignore disallowUnusedVariables

// just pull out the search.

// key is added to the end.

// key is the value of the data-emotion attribute, it's used to identify different sheets

// keyboard gets confused. So the hack here is to set a flag that

// knows how to merge the passed-in default theme with

// larger one:

// largest of the end indeces.

// last and first siblings are also joined, and so on.

// last char was a lead

// leading and trailing accordingly.

// leading or trailing property of the return object will be undefined

// leading space.

// leaf node

// length is NaN (which is otherwise coerced to zero.)

// level.

// like href='?foo'.

// like selection updates and adjustments of the set of [stored

// line in `firstDelim`. `node` should be the node that is closed at

// link) applied to this node.

// links like ../.. should be able

// list item should be split. Otherwise, bail out and let next

// list structure, it should have a shape like `"paragraph block*"` or

// listener from the target node.

// location outside the try/catch block.

// locations where there is no enclosing try statement.

// looking for a place in the doc where the node is allowed

// looking for selection end column (endIndex)

// looking for selection end row (endIndex)

// low surrogate

// lower 16 bits provide the index, the remaining bits the offset.

// make certain babel optimisations not possible

// make subsequent rendering easier). Will return the input array if

// makes the DOM change code recognize that what just happens should

// map positions in the post-step document to the pre-step document.

// map so that subsequent operations can see the current shape.

// map, table node, and table start offset to the object for

// map. If given an ordered map, return that map itself. If given an

// map:: (doc: Node, mapping: Mappable) → Selection

// mapping, for example, a large number of decorations. The number's

// maps for the remote changes in its array of items.

// maps](#transform.StepMap). It has special provisions for losslessly

// mark is not in the set, the set itself is returned.

// marks of various types to DOM nodes.

// marks' [`inclusive`](#model.MarkSpec.inclusive) property. If the

// marks, reusing existing mark descs when possible.

// marks.

// marks](#state.EditorState.storedMarks) instead of a range of the

// marks](#state.EditorState.storedMarks). In addition, you can store

// massage in target styles

// matched text is typed into it. You'll usually want to start your

// maxKeys <= 0 means that we should not limit keys count

// may be a `Fragment`, a node, an array of nodes, or

// may influence that state and the view that contains it.

// may need to be constrained after flipping

// may not be escaped.

// may return `false` to prevent traversal of a given node's children.

// meant to be awaited.

// menus are display: none when not shown.

// merging completely incompatible nodes).

// metadata for the steps, but note that the steps may have been

// metadata properties in a transaction, which are extra pieces of

// method always terminates the yield* loop.

// methods related to markdown serialization. Instances are passed to

// methods, and registering your class with a unique

// might affect dimensions of observed elements.

// might confuse the user

// might use a different theme context in the future anyway

// minifier not to mangle the names of these two functions.

// minimum width for input element

// mirroring information).

// model is applied (except for IE).

// modified from https://github.com/es-shims/es5-shim

// modified, updates create a new value.

// modifying the input value

// module. The result can then be added to the set of nodes when

// module.parent = undefined by default

// month props

// motion would move out of the cell)

// move cursor to the start of the node

// move those that are after the changes.

// moves when extending the selection).

// moving from one child element to another.

// moving in a given direction. When, for example, given `"left"`,

// multi select, by default, IS clearable

// must be able to connect to the surrounding content, and its

// must be an even number of digits

// must be multiple of 3

// name or by plugin.

// navigation props

// navigation related props

// near `pos`, by searching up the node hierarchy when `pos` itself

// near and arrow-key-motion past places that don't have a normally

// necessary).

// necessary.

// need to be.

// need to serialize a part of a document, as opposed to the whole

// needed in order to know whether we have left focus or not.

// needless duplicated nodes.

// negative). This can be useful when applying steps meant for a

// negative, it will search backwards first.

// negative, nothing is open.

// never need.)

// never returning a position at the end of the document

// new document or a failure value.

// new months rendered above the current month don't push the current month out of view.

// newEnd must point directly at or after the end of the block that newStart points into

// no explicit marks have been set.

// no lead yet

// no partially overlapping spans are found (the common case).

// no path at all.  easy.

// no query string, but parseQueryString still requested

// no styles applied to the vertical-scrollable orientation

// no such key exists.

// node after `this.$to`, not `this.$to` itself.

// node after it (if any) are returned.

// node and mark serialization methods (see `toMarkdown`).

// node but the parents look compatible, we've found a

// node doesn't fit, this method may _move_ them out towards a parent

// node if possible. Issue prosemirror/prosemirror#832.

// node of the given type would leave the node's content valid.

// node of the given type. May introduce extra nodes around and inside

// node to see if a range into that parent is acceptable.

// node to use when the position is inside a leaf node.

// node type spec. But client code can use the `nodeViews` spec to

// node with the hole.

// node, will receive the given attributes.

// node-specific editing interfaces, you want more control over

// node.

// node. If that node is empty, this will only return true if there

// nodes of the slice aren't table cells or rows.

// nodes that we're in.

// nodes with only a single null-out-edge, since they may lead to

// nodes, which will confuse the browser's cursor motion logic.

// nodes.

// non-generic

// non-leaf nodes, it is the size of the content plus two (the start

// non-undefined value is found. When `f` returns a truthy value,

// none is found, the element's content nodes are added directly.

// normalize towards nearby inline nodes. Since we are interested in

// normalizeSiblings into the same parent node

// not a function

// not in the browser, the `document` option, containing a DOM

// not passing the registered cache to serializeStyles because it would

// not the most efficient thing ever but this is a pretty rare case

// not used by this implementation

// nothing to send.

// now rest is set to the post-host stuff.

// null if no position was found.

// numbers as `this.depth + value`.

// obj.hasOwnProperty(prop) will break.

// object to not be returned from this call. This ensures that doesn't happen.

// object with two separate positions is returned.

// object) are interpreted as children of the DOM elements, and must

// object, and use it for all nodes that don't specify specific

// object, create a map from the object's properties.

// object, it is interpreted as a set of attributes for the element.

// objects. For full spec compliance, you may wish to configure your

// occur in conforming documents, and provides functionality for

// of a list item by also splitting that list item.

// of a non-editable node, so in that case, move it into the next

// of nodes to see if there are block nodes that the coordinates

// of nodes. For `null`, it returns the empty fragment. For a

// of plugins, pass an object mapping property names to use in the

// of state objects (`ContentMatch` instances) with transitions

// of that type exist in the selection, or add it otherwise. If the

// of the node's own marks.

// of the polyfill.

// of the rest of this code, which tends to create nodes with the

// of the table to their right, and either the top of the table or

// of them changes content dimensions of the observed target. Sometimes

// on a node level by specifying a tight attribute on the node.

// on events on child elements, not the document (which we've attached this handler to).

// onAutosize handler: function(newWidth) {}

// onChange handler: function(event) {}

// onEnter/onLeave handler.

// once per theme for this component.

// one character, and see if that moves the cursor out of the

// only `show` should be changing

// only additional allocation required is the completion record, which

// only get URL when necessary in case Blob.js hasn't overridden it yet

// only occur at the start of a textblock.

// only one row

// only scroll if the menu isn't already open

// only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.

// only to the document it was created for, since the positions

// onto the other branch.

// onto this.

// open value on both side of the fragment.

// option is already selected; it breaks the flow of navigation

// optional starting [content match](#model.ContentMatch) as third

// options has already been normalized at this point.

// options. But unlike that method, which produces a whole node,

// options::- An optional set of options.

// or a finally block) gives us a place to store values thrown from

// or backwards (negative number) first. Will fall back to calling

// or ending inside of them. Calls `onWidget` for each widget.

// or has an '=' sign after the prop, followed by the given

// or included in a plugin. This interface lists the supported props.

// or not, return the runtime object so that we can declare the variable

// order to associate old items with rebased steps.

// order.

// other platforms.

// other props.

// otherwise insert the widget as a new view desc.

// otherwise there will be an error

// otherwise, the node is passed to `addElement` or, if it has a

// outer generator.

// output spec, it should be the only child element in its parent

// overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`

// own position)

// pad the end with zeros, but make sure to not forget the extra bytes

// paragraph on the left is open, "foo" can be placed (somewhere on

// parameter will interpret undefined as `this.depth` and negative

// parameter, to determine whether to return the position at the

// parent node overrode rendering, there might not be one.)

// parent nodes until a valid replace is found.

// parent-relative position, its parent node, and its child index.

// parse them.

// parsers on.

// parts split off will inherit the node type of the original node.

// pass a different state.

// pass in an optional predicate that will be called with a parent

// pass the transactions the plugin did not see before.

// passing in context-specific props

// pdfMake uses a different order than CSS

// perform more specific behavior.

// perform the change.

// persons to whom the Software is furnished to do so, subject to the

// place when the selection is modified).

// place where it is inserted.

// place.

// placed it we got to its end, otherwise just drop the placed

// placeholder text

// plugin will track undo and redo stacks, which can be used with the

// plugins in a way that makes it possible to find them, given an

// plugins to initialize the state with. `pluginFields` can be used

// plugins) along with the new state.

// plugins, since it handles mouse and arrow key events in tables

// point into textblock nodes. It can be empty (a regular cursor

// point to new shared state

// point, if any.

// points before the last delimiter, or `0` if there is none, then copy

// points into a text node, only the part of that node after the

// points into a top-level paragraph, 1, and so on.

// points were copied; start at the beginning otherwise.

// position and searching back if `dir` is negative, and forward if

// position in this fragment. The result object will be reused

// position is at the start of a non-empty node, the marks of the

// position is returned.

// position points directly into the root node, it is 0. If it

// position points into a text node, only the part of that node

// position share the same parent nodes.

// position that corresponds to them. May return null if the given

// position where the search starts. When `text` is true, only return

// position would leave that position's parent textblock. Will apply

// position).

// position.

// position. (Whenever possible, it is preferable to inspect the

// position. Note that you should **not** mutate the editor's

// position. Searches forward first by default, but if `bias` is

// positioned wrapper, rather than the root editable node, the

// positioning behaviour is almost identical for portalled and fixed,

// positions (relative to start of this fragment). Doesn't descend

// positions between block nodes too, we first walk up the hierarchy

// positions in the spans (so that we don't have to allocate new spans

// positive. When `textOnly` is true, only consider cursor

// possible.

// post-step version.

// pre-matches to avoid overwriting nodes that could still be used.

// pre-step version of a document and the same position in the

// preferred one

// preserve a range of the replaced content by moving it into the

// preserve steps exactly as they came in, so that they can be

// pressed when the cursor is directly at the start of a textblock and

// primary part of the selection

// primitive tool which will _not_ move the start and end of its given

// private WeakMap storage which may cause memory leaks in browsers that

// probably be computed with [`findWrapping`](#transform.findWrapping).

// probably want the regexp to start with `^`, so that the pattern can

// problems, please detail your unique predicament in a GitHub issue.

// produces a different name from the the keyCode. See #668,

// producing a new set. Needs access to the current document to

// properly rerenders the CalendarMonthGrid

// properties are

// properties in a schema's node and mark specs.

// properties of `sel.anchorNode` when it's in a generated CSS

// properties then it's either IE, and thus we don't need to subtract

// property

// property in Markdown-it.

// property of a typed array.

// property, since these are the positions that were used to

// property](#state.Transaction.setMeta) of `false` on a transaction

// props.

// protocol, but can be used as an escape hatch if a binding needs to

// protocols that always contain a // bit.

// protocols that can allow "unsafe" and "unwise" chars.

// protocols that never have a hostname.

// provide FocusOut, while blur and keydown don't provide the information

// provide some affordance on touch devices

// provided by the DirectionProvider component.

// provided element.

// provided, that is assumed to hold a previous, known-good state,

// pull out port.

// purposes.

// put cursor inside of the inserted node

// put the host back

// range, and is useful in situations where you need more precise

// range.

// rather broadly, and other plugins, like the gap cursor or the

// re-cache custom components

// readDOMChange.

// reapply original body styles, if any

// rebased on top of the remote changes, and include the position

// rebased, whereas the origin transactions are still the old,

// rebased.

// rebuild the menu options

// recomputing them all the time, they are cached per table node. To

// record like context.tryEntries[i].completion. This interface could

// recursively call mapInner on them and update their positions.

// redo them.

// reduce the distance between that block and the one before it—if

// ref callback for the input element

// ref. https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode

// reference, so return the new value at the same index

// regeneratorRuntime in the outer scope, which allows this module to be

// regexp with `^` to that it is only matched at the start of a

// register an ID for your step classes. Try to pick something

// release reference before dispatching

// remote steps.

// remove all marks of that type. When it is null, remove all marks of

// remove cursor on desktop

// remove cursor on mobile whilst maintaining "scroll into view" behaviour

// remove doublon in classes

// remove touch listeners

// removing or adding a single mark type.

// rendered scroll bars nor it can be clipped.

// replace empty paragraph node to not break pdfmake

// replace the handler

// replaced by the given node.

// replacement char (U+FFFD) and advance only 1 byte

// replacement fragment.

// reported.

// represented as numbers, because tons of them will be created when

// represents.

// require a separate undo command to undo).

// required for offset[Height, Top] > keyboard scroll

// required props for a functional interactive DateRangePicker

// reset bottom/top flags

// reset move vars

// resetting the set of active marks at the cursor.

// resize handles and a selection that considers the absolutely

// resolution will treat //foo/bar as host=foo,path=bar because that's

// resolved position, providing various pieces of context information,

// result, either by returning a { value, done } result from the

// result.

// result.protocol has already been set by now.

// resulting JSON object to plugin objects. The argument may also be

// retrieve the class from the parent

// return <CustomNodeViewComponent {...this.props} />;

// return a boolean to indicate whether a join should happen.

// return a fragment if the resulting match goes to the end of the

// return an array of marks, or null to indicate some of the styles

// return document.createElement('span');

// return it as a `Slice` object.

// return true when successful.

// return valid WCAG2 parms for isReadable.

// returned, its `pos` property is the position nearest to the

// returns the bookmark for that.

// returns the precise transactions that were applied (which might

// right of the table.

// right shape in one go, rather than messing with them after

// root if the editor is inside one.

// round to nearest

// row has the same number of cells.

// row has the same width, and cells don't overlap).

// row-major

// rule was the last thing that the user did.

// rules.

// safely decrement active scroll locks

// same as `p.parent`.

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// same error.

// same. Since this position will not be the same in both nodes, an

// schema's [node specs](#model.NodeSpec.parseDOM), reordered by

// schema, and raise error when they do not.

// scheme](/docs/guide/#doc.indexing). For text nodes, this is the

// scroll the focused option into view if necessary

// searching through the plugins (in order of appearance) until one of

// second index

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25

// selectable position nearby, and create a gap cursor selection for

// selectable, delete the node above and select the one below.

// selectable, delete the node below and select the one above.

// selection [mapped](#state.Selection.map) through the steps in the

// selection in the wrong place. If it looks like that is

// selection is empty, this applies to the [stored

// selection reported by the Selection object (#710, #973,

// selection that can be lifted, out of its parent node.

// selection that the editor gets when the transaction is applied.

// selection transactions directly caused by mouse or touch input, and

// selection was typed over with an identical value if it can't

// selection with a newline character.

// selection, also delete its content.

// selection.

// selection. On Safari, when Enter is pressed, compositionend and keydown events are

// selection:: Selection

// selections. If so, apply it (if not, the result is left to the

// selections. Will return null when no valid selection position is

// selector

// selects across cells, and will be drawn by giving selected cells a

// separate step, syncs the DOM inside `this.contentDOM` to

// separator doesn't make sense without the dropdown indicator

// server yet.

// set a default direction so that a component wrapped with this HOC can be

// set default styles

// set of marks.

// set the appropriate CalendarDay phrase based on focusedInput

// set touch start so we can calculate touchmove delta

// set utc offset to get correct dates in future (when timezone changes)

// setimmediate attaches itself to the global object

// setting context.delegate to null, and returning the ContinueSentinel.

// several variants—see the static members of this class for details.

// shape) for the table, used by the table normalizer.

// shift, the `Shift-` prefix is implied, and should not be added

// shim for using process in browser

// should be a string—the name of the DOM element, optionally prefixed

// should be the new document to which we are mapping.

// should not directly interfere with its content.)

// should not mutate them or their content. Rather, you create new

// sibling elements or the picker itself can scroll.

// significant, in that it is used to contruct filler content when

// simply directly correspond to DOM attributes of the same name,

// since it'd require exposing a whole slew of finnicky

// single select, by default, IS NOT clearable

// situation where clicking at the point where that

// slice can be inserted. Will look at parent nodes' nearest boundary

// slice, or drop nodes from it, and then try again.

// slice.

// slight optimization to avoid modulo arithmetic when max+1 < idx <= 2*(max+1)

// slight optimization to avoid modulo arithmetic when |idx| <= max+1

// so even if it's empty, it has to be present.

// so give them whatever is available below rather than the minHeight.

// so that results are always delivered in the correct order. If

// so that the async generator function has the opportunity to do

// so that the history can be rebased.

// so that using `css` from `emotion` and passing the result to the css prop works

// so we don't have to add it to registered cache.

// so we use the same component. the actual portalling logic is forked

// so while this could be technically correct then it would be slower and larger

// some other error. we should definitely know about these

// some updates should toggle the state of the input visibility

// something changed.

// something went wrong, return default state

// sometimes. This works around that.

// source: https://github.com/OpenSlides/OpenSlides/blob/f4f8b8422f9b3fbab58e35ac3f8f870d35813b7d/client/src/app/core/ui-services/html-to-pdf.service.ts

// space

// span.

// spec::-

// spec::- These options are recognized:

// spec::- These options are supported:

// special case the `?` key so that it always triggers the appropriate callback, instead of

// specific day) or it is **document.body** (IE11), the appropriate value is **event.target**.

// specifying the nodes for a schema. Adds

// specs](http://prosemirror.net/docs/ref/#model.SchemaSpec.nodes) for

// start of the table, rather than the start of the document.

// start or at the end of this view desc.

// start or end of that node. Returns null when no position was found.

// start-of-operation selection and document, since that's the one

// start/end tokens.

// starts, or would start, if a cell started there.

// state index

// state where the thing the user sees differs from the

// state.

// state. Will be stored in the plugin state when the history plugin

// state](#state.StateField) accordingly.

// stay empty anyway.

// stays in view.

// step that pulls that content into the node after the frontier.

// steps are inverted versions of earlier steps. (This comes up when

// steps can't be merged.

// steps).

// steps. This can be useful for looking up time stamps and other

// store any styles already applied to the body

// stored in it will only make sense for that document.

// storedMarks:: ?[Mark]

// stores not only a fragment, but also the depth up to which nodes on

// strict mode using a global Function call. This could conceivably fail

// strikethrough

// string](#ParseRule.context) matches this context.

// strings to values, with some convenient update methods.

// strip [ and ] from the hostname

// strong

// structure between the old and new data as much as possible, which a

// style as a ProseMirror node or mark.

// styles to make it visible.

// sub-class may override this method.

// sub-document to a larger document, or vice-versa.

// subclass should overwrite this.

// subclass that represents a cell selection spanning part of a table.

// subscribe to future direction changes

// successful, return a fragment of inserted nodes (which may be

// successful.

// such a way that the drawing algorithm can efficiently use and

// such as it being emphasized, in code font, or a link. It has a type

// suck it, flow...

// supply a custom node view, which can influence various aspects of

// sure the lift is valid.

// synchronize after every block element.

// table, at the position pointed at by rect.

// take everything except the protocol from relative

// target depth, starting with the preferred depths.

// target—you don't have a choice.)

// technically this means that the @import rules will

// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4

// temp disabled per https://github.com/ljharb/object.assign/issues/17

// text node after a BR node) call the observer callback

// text nodes with the same marks are joined together.

// text selections.

// text:: ?string

// textblock (or doesn't move it at all, when at the start/end of

// textblock, try to reduce or remove the boundary between that block

// textblock. The optional `getAttrs` parameter can be used to compute

// than 0.5 will be discarded as well.

// that are non-inclusive and not present at position `$end`. This

// that can be joined, with the sibling after it.

// that depth, but replacing from $from.before(-D) to $to.pos.

// that does allow the given node to be placed. When the given range

// that doesn't move when extending the selection).

// that don't match the given new parent node type. Accepts an

// that happened, adjust the change to cover the space instead.

// that have a dangerous default effect, even if the commands they are

// that is immediately returned. When `f` isn't provided, it is

// that mark to prevent parser edge cases with new lines just

// that order of the marks for the token matches the order in

// that parent node.

// that separated only by a non-defining textblock node, is defining.

// that supports appending, prepending, and slicing without doing a

// that the DOM represents. If any changes came in in the meantime,

// that they can be chained.

// that they have a clipboard API—all the objects and methods are

// that was active before the first step was applied)

// that's smaller than what was actually overwritten.

// that's unlikely to clash with steps from other modules.

// that, when added to an editor, enables cell-selection, handles

// the .value of the Promise<{value,done}> result for the

// the 3rd node in the 2nd paragraph on the top level, for example,

// the ? shortcut came from the input and we should return input there once it is close

// the DOM around an active selection puts it into a broken

// the DOM.

// the `stepType` property.

// the array get to dispatch first).

// the authority. Applying this transaction moves the state forward to

// the behavior of a node's in-editor representation, and need to

// the big drawback is that the css won't be editable in devtools

// the cell covering that part of the table in each slot

// the client width of 315px and for the width of 314.7px it may give

// the current state and calling

// the cursor space when adding a space before another space. When

// the deleted content with a random BR node (issues #799, #831)

// the depth specified by `target`. You'll probably want to use

// the document at the given position. It is recommended that you

// the document structure by lifting it out of its parent or moving it

// the document).

// the editor state (which should have the collab plugin enabled).

// the end of the block, and `f` is a function that renders the

// the end of the list, the existing list is closed. At sides where

// the entry state and the last node is the success state.

// the final result produced by the iterator.

// the first basic code points to the output.

// the first instance of /, ?, ;, or # ends the host.

// the focused value is still in the selectValue, return it

// the focusedValue is not present in the next selectValue array by

// the given content (or empty, if no content is given).

// the given document. Will return an

// the given node type with the given attributes.

// the given rectangle.

// the given slice. The slice must 'fit', meaning its open sides

// the given two positions that are relative to start of this node's

// the given type an attributes. If `dispatch` is null, only return a

// the host field still retains them, though

// the host is the remaining to the left of the first non-host char

// the inserted text won't inherit the marks. So this moves it

// the key. Note that the view argument isn't part of the command

// the left of the input and the end of nodes at the end.

// the left side of the replacement gap) independently from p("bar").

// the local part (i.e. everything up to `@`) intact.

// the lowest limit is Chrome, with 0x10000 args.

// the max length is how many rules we have per style tag, it's 65000 in speedy mode

// the menu is rendered

// the method takes exactly one argument, since that happens to be true

// the modification is mapped over those before it is applied, in

// the new node's attributes, and works the same as in the

// the node after this position the main reference.

// the node before that textblock, if possible. This is intended to be

// the node coming after that textblock, if possible. This is intended

// the node's content is wrapped, and return true.

// the node.

// the ones in the given array.

// the outer generator.

// the parent editor is focused.

// the parent—text nodes are ‘flat’ in this model, and have no content.

// the position under the mouse.

// the proper solution is to fix the accidental strict mode problem. If

// the protocol does weird things

// the same textblock, for example, a range around that textblock

// the schema constraints aren't applied to the start of nodes to

// the selected cells' outline forms a rectangle.

// the selection is modified).

// the set itself is returned. If any marks that are set to be

// the sibling above it.

// the spec has a hole (zero) in it, `contentDOM` will point at the

// the start or end of the selected content, creating a change

// the step was entirely deleted by the mapping.

// the target of a node selection. In such a selection, `from` and

// the tokens to create a ProseMirror document tree.

// the top level, not in any node.

// the top position of an element near the top of the editor, which

// the tree but if it's a string tag, we know it won't

// the way the node works.

// the widget and node descs inside of them.

// the wrapper node, if necessary. Returns null if no valid wrapping

// their parents

// them returns true. For some props, the first plugin that yields a

// them.

// them. The cursor is drawn as an element with class

// then it must NOT get a trailing slash.

// then let that catch block handle the exception normally.

// then those from plugins (in order), and calls `f` every time a

// there (may have been modified through other means, in which

// there are for example leaf block nodes at the start or end of the

// there's a block directly before it that can be joined, join them.

// there's a hostname.

// there's no meaningful way to insert the slice here, or inserting it

// there, they just don't work, and they are hard to test.

// these concepts, see https://swtch.com/~rsc/regexp/regexp1.html

// they are marked [non-defining](#model.NodeSpec.defining), or

// they aren't text positions, find a text selection near them.

// they fix https://bugs.chromium.org/p/chromium/issues/detail?id=633838

// they have defaults, will be added.

// they stick out.

// things like emphasis or being part of a link) are

// things simple and return the next function itself.

// this code is in a hot path and we want it to be as fast as possible, we

// this for a custom selection class, make sure to give the object a

// this ignores label

// this improves memory usage since we can avoid storing the whole style string

// this is IE 8, which has a broken gOPD

// this is a really hot path

// this is already the case.

// this is the end, it is overwritten to its end.

// this is the ultrafast version, works across browsers

// this map.

// this may result in notifications being blocked for the rest of observers.

// this method injects styles to hide IE's clear indicator, which messes

// this method just converts the selection to a text selection and

// this one returns a slice that is open at the sides, meaning that

// this one.

// this parser. Can be useful to copy and modify to base other

// this points at the inverse's offset

// this selection is the starting selection for the group (the one

// this shouldn't really matter in the real world though

// this throws if `array` is not a valid ArrayBuffer

// this transaction.

// this way, you can call url_format() on strings

// this weirdness brought to you by firefox

// this.getProps() derives the props from the theme, stylesInterface, and direction in

// those are replaced by this one.

// those cases and it's not possible to perform a precise and performance

// those for other nodes. Returns an array whose positions correspond

// those of another. Returns `true` if both have the same markup.

// those that are new are initialized using their

// though due to backwards-compat we should probably keep it around

// through to the step class' own implementation of this method.

// through. If it does, and there's a `contentDOM` node, our logic

// throw away the existing file, and take the new path instead.

// throw the exception.

// thus doesn't get a reaction from ProseMirror. This

// tightLists:: ?bool

// to *event.target** when **relatedTarget** is not provided.

// to `true`.

// to a document transform.

// to be bound to keys like delete, after

// to be sent to the central authority. Returns null when there is

// to begin with, then we MUST have a path.

// to clean up potentially wonky urls.

// to crawl up to the hostname, as well.  This is strange.

// to create a new function object. We can even get away with assuming

// to deserialize the state of plugins, by associating plugin

// to ensure that only the items below a given level are compressed,

// to find the callsite that caused this warning to fire.

// to get the position after that node. If not, search forward.

// to integrate changes made by peers into our local document. It is

// to invoke when the event fires.

// to its start when removeAllRanges is called and the editor still

// to know about those, so that it can adjust the steps that were

// to make the history handle it well.

// to node positions in the fragment, and whose elements are either

// to prevent it from being rolled back by undo.

// to reduce the amount of code

// to support http.request

// to the current frame's queue

// to the empty fragment) would leave the node's content valid. You

// to the given transaction.

// to the left of the last @ sign, unless some host-ending character

// to the native rAF function

// to the only interactive element, the hide button

// to the view's current state by default, but it is possible to

// to their upper/lower bounds if the value passed is out of range.

// toJSON:: () → Object

// tokenize a file, and then runs the custom rules it is given over

// tools and allowed by browsers to mean that the nested list is

// top | right | bottom | left ==> left | top | right | bottom

// track and restore old selections.) The default implementation of

// trailing edge, the system time has gone backwards and we're treating

// transacion represents, so that they can update their [own

// transaction that fixes them, if necessary. If `oldState` was

// transaction, but can be overwritten with

// transactions (which might move its anchor cell) come in.

// transactions as new transactions are added, making sure to only

// transform).

// treat multiple DecorationSet objects as if it were a single object

// treated as the identity function (the prop value is returned

// tree for every element.

// tree shape like this (without back pointers) makes easy.

// trim before proceeding.

// true and the content is inline, it inherits the marks from the

// true if something changed.

// true if something was changed.

// truncation

// truncation and wrap around

// try to replace an empty paragraph

// try to replace selected node

// turn it into a number

// two joinable nodes to end up next to each other, those are joined.

// two nodes. You can pass a join predicate, which takes a regular

// type === 'create'

// type can be active in a state.

// type with the given attributes.

// type's [content expression](#model.NodeSpec.content), and can be

// type](#model.MarkType) objects for the nodes and marks that may

// typed array instances can be augmented

// types are confused between node and web here IDK

// unchanged objects.

// undefined is handled specially as per ECMA-262 6th Edition,

// underline

// underlying component, to allow it to render size and style variants.

// uneditable [node view](#view.NodeView)).

// unexpected trail

// unflipped regardless of direction context. See: https://github.com/kentcdodds/rtl-css-js#usage

// unified ._invoke helper method.

// unless they had them to begin with.

// unmatched surrogate; only append this code unit, in case the next

// unmounting. Guarding against this prevents the following error:

// unpaired lead

// unprintable ASCII chars + non-ASCII chars

// unsorted array of marks.

// until users clicks again, dont continue if right click is used.

// update position.

// updates the children.

// us a selection change event before the DOM changes are

// use Context.read for the theme when it's stable

// use a dummy input to maintain focus/blur functionality

// use after the split.

// used as the content to fit into the wrapping, instead of the

// used by NavLink to determine it's role

// used even without a DirectionProvider ancestor in its react tree.

// used exclusively as they provide rounded values.

// used for IE. so if the browser is not IE, this should return undefined.

// used to find out whether further content matches here, and whether

// used to represent the editor's content. They are used for:

// used to specify a starting position to count from.

// user has component in focus

// user@server is *always* interpreted as a hostname, and url

// uses, in order of precedence.

// using a global regex with .exec is stateful so lastIndex has to be reset each time

// using the current marks as styling.

// usually be the top-level `document`, but might be a [shadow

// v0.12 TODO(isaacs): This is not quite how Chrome does things.

// v8 likes predictible objects

// valid lead

// valid surrogate pair

// validate a little.

// value at the end to obtain `delta`.

// value gets precedence.

// value to indicate whether this is possible, but don't actually

// value, but now inputValue is a controllable prop we probably shouldn't

// value, or adding a binding to the end of the map. If `newKey` is

// value.

// variable specified by delegate.resultName (see delegateYield).

// version of that step with its positions adjusted, or `null` if

// view that's a child of this view

// view.props, props))`.

// views](#view.NodeView).

// waiting for the animation to complete. Similarly, if transitionDuration

// want to use old-fashioned +.

// warn on circular references, don't crash

// was before the step as argument.

// was enabled.

// was taken out of the table, add cells at the start of the row

// way `JSON.stringify` calls `toString` methods.

// we also remember the colSpan for cells with both rowspan and colspan

// we apply the default style for the inline tags

// we are sure there are at least 2 values, so it is safe to have no initial value

// we can adjust scroll after the component has updated and the previous current month

// we can't trust `scrollParent.scrollHeight` --> it may increase when

// we check the second character first because having "i"

// we default back to this kind of made-up value that generally looks good

// we did not generate a valid codePoint so insert a

// we don't care about invariant's own frame

// we don't need the default popper style,

// we don't want to focus on the relevant calendar day after a month transition

// we have 3 properties: width style color

// we have to merge together the borders in two properties

// we need this to make sure size of hostname is not

// we need to insert @import rules before anything else

// we need to recalculate. We avoid recalculating the ones we already

// we only need an auto-generated ID for stylesheet injection, which is only

// we only need to add the styles to the registered cache if the

// we replace non-ASCII char with a temporary placeholder

// we return the cached props immediately.

// we start at 1 since we've already handled the first arg

// we test again with ASCII char only

// we want to provide as much of the menu as possible to the user,

// we want to return focus to this button after closing the keyboard shortcuts panel

// we're checking on event.target here instead of event.currentTarget, because we want to assert information

// we're doing this to avoid preconstruct's dead code elimination in this one case

// we've already handled the other stuff above.

// we've indicated that there is a hostname,

// weak test

// webpackBootstrap

// well, in the right position. If this mark is already in the set,

// when asked through getSelection. You'll then get a

// when fixing collisions.

// when given, and otherwise defaults to applying the transaction to

// when querying a position directly after line-broken

// when the `isJoinable` predicate returns true for them or, if an

// when the select value should change, we should reset focusedValue

// when the size of the content above changes.

// when this function is called, e.g. when a React component is

// when updated to the state produced by this transaction.

// when when somebody has screwed with setTimeout but no I.E. maddness

// where `global.postMessage` means something completely different and can't be used for this purpose.

// where a node's child nodes should be inserted. If it occurs in an

// whether the step removed its surroundings from the document.

// whether this is a problem

// which gets added to `i`. The overflow checking is easier

// which is a value that can be mapped without having access to a

// which is needed when only a single month is shown for instance.

// which they appear determines their precedence (the ones early in

// which will be set to the property's value. These are exceptions:

// which will be used to avoid re-scanning unchanged parts of the

// while the parents are an inline tag, we want to apply the default style and the class to the children too

// whitespace. Detect this situation and and kludge around it

// whole content of the nodes at that depth.

// whole node, if not given). If `sync` is passed, use it to

// widget's current document position.

// widget/mark/node.

// width and height. Will clip rowspan/colspan cells at the edges when

// will be returned. If they point into different blocks, the range

// will be used to make sure the visible viewport remains stable even

// will return rgba when there is transparency.

// with (a subset of) the same interface.

// with a scroll distance, we perform scroll on the element

// with a text node containing the given string.

// with an smaller end position come first.

// with defaults, `content` may be a `Fragment`,

// with input size detection. the stylesheet is only injected when the

// with the added guarantee that its `nodes` and `marks`

// with the given array of view descs, recursing into mark descs

// within the component based on `menuPosition`

// without inline HTML, and producing a document in the basic schema.

// without it is returned. Otherwise, the input set is returned.

// without limitation the rights to use, copy, modify, merge, publish,

// without using extend.

// works around that.

// would be a no-op (an empty slice over an empty range).

// would fit here.

// wrap around

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// wrapped node, the rule will try to [join](#transform.Transform.join) those

// wrapping failed.

// you call it with a domain that already is ASCII-only.

// you can either pass them directly, or pass a function that will

// you press enter go away.

// you've misconfigured your bundler to force strict mode and applied a

// }

// ‘Fit’ a slice into a given position in the document, producing a

// ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwiT2JqZWN0Iiwia2V5cyIsImtleXNCIiwibGVuZ3RoIiwic29ydCIsImkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O3FCQUl3QkEsWTs7QUFKeEI7Ozs7QUFDQTs7Ozs7O0FBRUE7QUFDZSxTQUFTQSxZQUFULENBQXNCQyxJQUF0QixFQUE0QkMsSUFBNUIsRUFBa0M7QUFDL0MsTUFBSSwyQkFBR0QsSUFBSCxFQUFTQyxJQUFULENBQUosRUFBb0I7QUFDbEIsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsTUFBSSxDQUFDRCxJQUFELElBQVMsQ0FBQ0MsSUFBVixJQUFrQixRQUFPRCxJQUFQLHlDQUFPQSxJQUFQLE9BQWdCLFFBQWxDLElBQThDLFFBQU9DLElBQVAseUNBQU9BLElBQVAsT0FBZ0IsUUFBbEUsRUFBNEU7QUFDMUUsV0FBTyxLQUFQO0FBQ0Q7O0FBRUQsTUFBTUMsUUFBUUMsT0FBT0MsSUFBUCxDQUFZSixJQUFaLENBQWQ7QUFDQSxNQUFNSyxRQUFRRixPQUFPQyxJQUFQLENBQVlILElBQVosQ0FBZDs7QUFFQSxNQUFJQyxNQUFNSSxNQUFOLEtBQWlCRCxNQUFNQyxNQUEzQixFQUFtQztBQUNqQyxXQUFPLEtBQVA7QUFDRDs7QUFFREosUUFBTUssSUFBTjtBQUNBRixRQUFNRSxJQUFOOztBQUVBO0FBQ0EsT0FBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlOLE1BQU1JLE1BQTFCLEVBQWtDRSxLQUFLLENBQXZDLEVBQTBDO0FBQ3hDLFFBQUksQ0FBQyxzQkFBSVAsSUFBSixFQUFVQyxNQUFNTSxDQUFOLENBQVYsQ0FBRCxJQUF3QixDQUFDLDJCQUFHUixLQUFLRSxNQUFNTSxDQUFOLENBQUwsQ0FBSCxFQUFtQlAsS0FBS0MsTUFBTU0sQ0FBTixDQUFMLENBQW5CLENBQTdCLEVBQWlFO0FBQy9ELGFBQU8sS0FBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBTyxJQUFQO0FBQ0QiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaXMgZnJvbSAnb2JqZWN0LWlzJztcbmltcG9ydCBoYXMgZnJvbSAnaGFzJztcblxuLy8gYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzE0NDMyOGZlODE3MTllOTE2Yjk0NmUyMjY2MDQ3OWUzMTU2MWJiMGIvcGFja2FnZXMvc2hhcmVkL3NoYWxsb3dFcXVhbC5qcyNMMzYtTDY4XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICghb2JqQSB8fCAhb2JqQiB8fCB0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3Qga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgY29uc3Qga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBrZXlzQS5zb3J0KCk7XG4gIGtleXNCLnNvcnQoKTtcblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKCFoYXMob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG4iXX0=

//# sourceMappingURL=factory.js.map

//# sourceMappingURL=getComponentName.js.map

//# sourceMappingURL=index.es.js.map

//# sourceMappingURL=index.js.map

//# sourceMappingURL=main.js.map

//# sourceMappingURL=performance-now.js.map

//$FlowFixMe

//console.log(util.inspect(ret, {showHidden: false, depth: null})); // to debug

//eslint-disable-line

//http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef

//http://www.w3.org/TR/AERT#color-contrast

//let setState trigger the update

//normal enviroments in sane situations

//to support http.request

//to support request.http

//urlParse appends trailing / to urls like http://www.example.com

//var util = require("util"); // to debug
