/* eslint-disable no-console */

/* eslint-enable */

/* harmony default export */

/* harmony export (binding) */

/* harmony import */

/* istanbul ignore else */

/*#__PURE__*/

/**
     * Beacon click/hover event listener
     *
     * @param {Event} e
     */

/**
     * Trigger the callback.
     *
     * @private
     * @param {Object} data
     */

/**
 *  Get computed style property
 *
 * @param {HTMLElement} el
 *
 * @returns {Object}
 */

/**
 * Check if an element has fixed/sticky position
 * @param {HTMLElement|Node} el
 * @param {string} [type]
 *
 * @returns {boolean}
 */

/**
 * Check if the element has custom offset parent
 *
 * @param {HTMLElement} element
 *
 * @returns {boolean}
 */

/**
 * Check if the element has custom scroll parent
 *
 * @param {HTMLElement} element
 * @param {boolean} skipFix
 *
 * @returns {boolean}
 */

/**
 * Check if the element is visible
 *
 * @param {HTMLElement} element
 *
 * @returns {boolean}
 */

/**
 * Compare if two variables are equal
 *
 * @param {*} left
 * @param {*} right
 *
 * @returns {boolean}
 */

/**
 * Convert hex to RGB
 *
 * @param {string} hex
 * @returns {Array}
 */

/**
 * Decide if the step shouldn't skip the beacon
 * @param {Object} step
 *
 * @returns {boolean}
 */

/**
 * Detect legacy browsers
 *
 * @returns {boolean}
 */

/**
 * Find and return the target DOM element based on a step's 'target'.
 *
 * @private
 * @param {string|HTMLElement} element
 *
 * @returns {HTMLElement|null}
 */

/**
 * Find and return the target DOM element based on a step's 'target'.
 *
 * @private
 * @param {string|HTMLElement} element
 * @param {number} offset
 * @param {boolean} skipFix
 *
 * @returns {HTMLElement|undefined}
 */

/**
 * Find the bounding client rect
 *
 * @private
 * @param {HTMLElement} element - The target element
 * @returns {Object}
 */

/**
 * Get scroll parent with fix
 *
 * @param {HTMLElement} element
 * @param {boolean} skipFix
 * @param {boolean} [forListener]
 *
 * @returns {*}
 */

/**
 * Get text from React components
 *
 * @param {*} root
 *
 * @returns {string}
 */

/**
 * Get the current browser
 *
 * @param {string} userAgent
 *
 * @returns {String}
 */

/**
 * Get the scrollTop position
 *
 * @param {HTMLElement} element
 * @param {number} offset
 * @param {boolean} skipFix
 *
 * @returns {number}
 */

/**
 * Get the toString Object type
 * @param {*} value
 * @returns {string}
 */

/**
 * Helper function to get the browser-normalized "document height"
 * @returns {Number}
 */

/**
 * Log method calls if debug is enabled
 *
 * @private
 * @param {Object}       arg
 * @param {string}       arg.title    - The title the logger was called from
 * @param {Object|Array} [arg.data]   - The data to be logged
 * @param {boolean}      [arg.warn]  - If true, the message will be a warning
 * @param {boolean}      [arg.debug] - Nothing will be logged unless debug is true
 */

/**
 * Scroll to position
 * @param {number} value
 * @param {HTMLElement} element
 * @param {number} scrollDuration
 * @returns {Promise<*>}
 */

/**
 * Validate if a step is valid
 *
 * @param {Object} step - A step object
 * @param {boolean} debug
 *
 * @returns {boolean} - True if the step is valid, false otherwise
 */

/**
 * Validate if steps is valid
 *
 * @param {Array} steps - A steps array
 * @param {boolean} debug
 *
 * @returns {boolean} - True if the steps are valid, false otherwise
 */

/***/

// Hack for Safari bug with mix-blend-mode with z-index

// Return the last step when the tour is finished

// Set react-floater props

// Sync the store to this component's state.

// There's a step to use, but there's no target in the DOM

// console.log('▶ ▶ ▶ NEW STATE', this.getState());

// fixed steps don't need to scroll

//eslint-disable-line no-console

//eslint-disable-line react/destructuring-assignment
