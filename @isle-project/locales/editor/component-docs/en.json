{
  "Accordion-prop-active": "index of slider to be opened at the beginning",
  "Accordion-prop-headers": "array of header names",
  "Accordion-prop-canCloseAll": "whether one can collapse all headers",
  "Accordion-prop-headerClassName": "this overrules the given class name of the headers",
  "Accordion-prop-headerStyle": "one may also assign a style to the header bars",
  "Accordion-prop-onChange": "callback invoked with index of new active vertical slider",
  "Accordion-prop-className": "class name for outer div",
  "Accordion-prop-style": "CSS inline styles for outer div",
  "Accordion-description": "An accordion component controlling vertical sliders.",
  "Animated-prop-in": "the style which is applied at the beginning",
  "Animated-prop-over": "mouseOver style",
  "Animated-prop-out": "mouseOut style",
  "Animated-prop-preset": "name of the preset",
  "Animated-description": "An ISLE component that allows to apply animation on components and child elements.",
  "Background-prop-images": "list of image URLs to be displayed",
  "Background-prop-time": "duration each background image is displayed (in seconds)",
  "Background-prop-in": "entrance effect name (either `fade-in`, `slide-left-in`, and `flip-hor-bottom-in`)",
  "Background-prop-out": "exit effect name (either `fade-out`, `slide-right-out`, and `flip-hor-bottom-out`)",
  "Background-prop-inTime": "length of the enter effect (in seconds)",
  "Background-prop-outTime": "length of the exit effect (in seconds)",
  "Background-prop-parent": "sets the parent element's backgroundColor to transparent, overflow to hidden",
  "Background-description": "A dynamic background component that changes a background image at a specified interval.",
  "BeaconTooltip-prop-title": "title to be displayed at the top of the tooltip",
  "BeaconTooltip-prop-content": "tooltip content",
  "BeaconTooltip-prop-event": "if set to `click`, tooltip is toggled when clicking on beacon; if set to `hover`, the tooltip is activated via hovering",
  "BeaconTooltip-prop-placement": "placement of the tooltip relative to `target` (either `top`, `top-start`, `top-end`, `bottom`, `bottom-end`, `left`, `left-start`, `left-end`, `right`, `right-start`, `right-end`, `auto`, or `center`)",
  "BeaconTooltip-prop-target": "class or ID selector for element to attach tooltip to",
  "BeaconTooltip-prop-offset": "distance between the tooltip and `target` in pixels",
  "BeaconTooltip-prop-onChange": "callback invoked upon state change of the tooltip. Receives two arguments: the `action` (`open` or `close`) and the passed `props`",
  "BeaconTooltip-description": "Component placing a beacon in the lesson, either independently or attached to a `target`. Upon hovering or clicking on the beacon, a tooltip is displayed.",
  "Bibliography-prop-title": "heading to be displayed in front of references",
  "Bibliography-prop-className": "class name",
  "Bibliography-prop-style": "CSS inline styles",
  "Bibliography-description": "Bibliography component which prints all references used in the lesson (specified via `references` field in the preamble).",
  "undefined-prop-for": "chat room identifier",
  "undefined-prop-anonymousSubmissions": "controls whether a button to submit messages anonymously should be displayed",
  "undefined-prop-buttonLabel": "label of button to pull of action display",
  "undefined-prop-size": "button size",
  "undefined-prop-buttonVariant": "button variant",
  "undefined-prop-showTooltip": "controls whether to show tooltip",
  "undefined-prop-tooltip": "tooltip content",
  "undefined-prop-tooltipPlacement": "position of button tooltip",
  "undefined-prop-className": "class name",
  "undefined-prop-style": "CSS inline styles",
  "undefined-prop-onClick": "event handler invoked when join/leave button is clicked",
  "Citation-prop-citeKey": "item reference",
  "Citation-prop-parens": "controls whether to display citation in parentheses",
  "Citation-prop-label": "label for citation (e.g., page or range of pages)",
  "Citation-description": "Citation component.",
  "Clock-prop-duration": "if set, the duration of the session is displayed (not the actual time)",
  "Clock-prop-format": "time format (either `HH:MM`, `HH:MM:SS`, or `HH`)",
  "Clock-prop-style": "CSS inline styles",
  "Clock-prop-className": "class name",
  "Clock-description": "Clock component displaying the current time.",
  "Collapse-prop-defaultVisible": "if set, the body is visible right from the start",
  "Collapse-prop-visible": "controls whether slider is visible; turns it into a controlled component where state needs to be handled externally",
  "Collapse-prop-header": "header content",
  "Collapse-prop-headerClassName": "this overrules the given class name of the header",
  "Collapse-prop-headerStyle": "one may also assign a style to the header bar",
  "Collapse-prop-style": "inline CSS styles for outer container",
  "Collapse-prop-onClick": "event handler invoked when header is clicked",
  "Collapse-description": "An ISLE component that allows to slideDown and slideUp - JQuery style.",
  "ColorPicker-prop-variant": "color picker variant (either `Compact`, `Sketch`, `Material`, or `Block`)",
  "ColorPicker-prop-color": "`string` holding an HeX code or an `object` holding RGB or HSL values such as `{ r: 255, g: 255, b: 255 }` or `{ h: 0, s: 0, l: .10 }`, which determines the active color. Both accept an `a` property for alpha values other than one",
  "ColorPicker-prop-disableAlpha": "controls whether to remove alpha slider and options",
  "ColorPicker-prop-presetColors": "HeX `strings` specifying the default colors at the bottom of the colorpicker",
  "ColorPicker-prop-width": "width of the color picker (in px)",
  "ColorPicker-prop-className": "class name",
  "ColorPicker-prop-style": "CSS inline styles",
  "ColorPicker-prop-onChange": "callback invoked every time color is changed",
  "ColorPicker-prop-onChangeComplete": "callback invoked once a color change is complete",
  "ColorPicker-description": "A wrapper for the [react-color](https://casesandberg.github.io/react-color/) color picker.",
  "Container-prop-fluid": "turn any fixed-width container layout into a full-width layout",
  "Container-description": "Container wrapper.",
  "DensityPlot-prop-data": "an `array` or `array of arrays` holding the data for which the density plot should be created",
  "DensityPlot-prop-histogram": "show a histogram alongside the density plot",
  "DensityPlot-prop-vline": "if supplied, will display a vertical line at the supplied `value` with a given `label`",
  "DensityPlot-prop-xlab": "x-axis label",
  "DensityPlot-prop-xmin": "minimum value displayed on the x-axis",
  "DensityPlot-prop-xmax": "maximum value displayed on the x-axis",
  "DensityPlot-prop-ymax": "maximum value displayed on the y-axis",
  "DensityPlot-prop-width": "width of the created plot (in px)",
  "DensityPlot-prop-height": "height of the created plot (in px)",
  "DensityPlot-prop-nBins": "number of bins for the overlaid histogram.",
  "DensityPlot-prop-bandwidth": "smoothing parameter for the kernel density estimator",
  "DensityPlot-description": "A d3-based density plot component.",
  "NetworkPlot-prop-width": "width of the plot (in px)",
  "NetworkPlot-prop-height": "height of the plot (in px)",
  "NetworkPlot-prop-data": "object with `nodes` and `links`; `nodes` should be an object array of elements with an `id` property, `links` an object array with elements having a `source` and `target` id",
  "NetworkPlot-description": "A d3-based network plot.",
  "Sunburst-prop-data": "data object",
  "Sunburst-prop-categories": "array of category names",
  "Sunburst-prop-width": "width of the plot (in px)",
  "Sunburst-prop-height": "height of the plot (in px)",
  "Sunburst-prop-breadcrumbs": "object with dimensions: `w` for width, `h` for height, `s` for spacing, `t` for width of tip/tail",
  "Sunburst-description": "A d3-based sunburst plot for displaying pathways.",
  "Dashboard-prop-title": "card title",
  "Dashboard-prop-description": "dashboard description",
  "Dashboard-prop-autoStart": "if set to `true`, the `onGenerate` function is executed at startup with the default input values",
  "Dashboard-prop-autoUpdate": "controls whether the `onGenerate` function should be invoked automatically when one of the child input fields changes",
  "Dashboard-prop-disabled": "controls whether the dashboard shall be disabled",
  "Dashboard-prop-label": "button label",
  "Dashboard-prop-maxWidth": "maximum width of dashboard",
  "Dashboard-prop-className": "class name",
  "Dashboard-prop-style": "CSS inline styles",
  "Dashboard-prop-onGenerate": "function invoked when the button is clicked or one of the dashboard input values changes (if `autoUpdate` is set to `true`). The function is called with the values of the input fields, in the order in which they are placed in the dashboard",
  "Dashboard-description": "A dashboard for combining the handling of multiple child input fields.",
  "DataExplorer-prop-categorical": "array of strings indicating the name of each categorical variable",
  "DataExplorer-prop-quantitative": "array of strings indicating the name of each quantitative variable",
  "DataExplorer-prop-data": "data object or array to be viewed. If it is an object, the keys correspond to column values while an array will expect an array of objects with a named field corresponding to each column. If you wish to allow students the ability to import a `.csv` file, set the `data` option to be `false`",
  "DataExplorer-prop-dataInfo": "object containing the keys \\'name\\', whose value is a string, \\'info\\', whose value is an array of strings in which each element in the array is a new line and \\'variables\\', an object with keys as variable names and values as variable descriptions",
  "DataExplorer-prop-editor": "boolean indicating whether to show the editor to the user",
  "DataExplorer-prop-editorProps": "object of properties to be passed to the `TextEditor` (see documentation for <TextEditor />)",
  "DataExplorer-prop-editorTitle": "string indicating the title of the explorer to be displayed",
  "DataExplorer-prop-reportMode": "controls whether to sync editor changes for everyone (`collaborative`), across users in groups (`group`), or not (`individual`)",
  "DataExplorer-prop-dataTable": "boolean value indicating whether to hide the data table from view",
  "DataExplorer-prop-dataTableProps": "properties passed to the data table component (see documentation for <DataTable />)",
  "DataExplorer-prop-history": "controls whether to display a history log of carried out actions",
  "DataExplorer-prop-histogramDensities": "boolean value indicating whether to display histogram densities",
  "DataExplorer-prop-models": "array of strings indicating models that may be fit on the data",
  "DataExplorer-prop-opened": "page opened at startup",
  "DataExplorer-prop-plots": "array of strings indicating which plots to show to the user",
  "DataExplorer-prop-questions": "array of nodes indicating surrounding text and question components to be displayed in a tabbed window",
  "DataExplorer-prop-showTestDecisions": "boolean indicating whether to show the decisions made for each test based on the calculated p-values",
  "DataExplorer-prop-statistics": "array of strings indicating which summary statistics may be calculated",
  "DataExplorer-prop-tables": "array of strings indicating which tables may be created from the data",
  "DataExplorer-prop-tabs": "array of objects and keys indicating any custom tabs to add",
  "DataExplorer-prop-tests": "array of strings indicating which hypothesis tests to include",
  "DataExplorer-prop-transformer": "boolean indicating whether to display variable transformation tools",
  "DataExplorer-prop-onTutorialCompletion": "function invoked when user has completed the data explorer tutorial",
  "DataExplorer-prop-onTutorialStart": "function invoked when user starts the data explorer tutorial",
  "DataExplorer-prop-style": "CSS inline styles for main container",
  "DataExplorer-description": "This component is used by students to briefly summarize data as it is presented and perform various statistical tests.",
  "DataSampler-description": "Component to sample observations from a dataset and pass it to child components.",
  "DataTable-prop-data": "A data object or array to be viewed. If it is an object, the keys correspond to column values while an array will expect an array of objects with a named field corresponding to each column",
  "DataTable-prop-dataInfo": "object with `info` string array describing the data set, the `name` of the dataset, an `object` of `variables` with keys corresponding to variable names and values to variable descriptions, an a `showOnStartup` boolean controlling whether to display the info modal on startup",
  "DataTable-prop-editable": "array of names for columns that shall be editable",
  "DataTable-prop-deletable": "controls whether columns for which no `info` exist have a button which when clicked calls the `onColumnDelete` callback function",
  "DataTable-prop-undeletableVars": "array of variable names of columns which may not be deleted",
  "DataTable-prop-filterable": "controls whether columns are filterable",
  "DataTable-prop-showRemove": "indicates whether to display checkboxes for rows to be removed",
  "DataTable-prop-disableDownload": "whether to hide the button to download the data as a CSV or JSON file",
  "DataTable-prop-showIdColumn": "controls whether to show an ID column",
  "DataTable-prop-className": "class name",
  "DataTable-prop-style": "An object allowing for custom css styling. Defaults to an empty object",
  "DataTable-prop-getTrProps": "callback function executed for each row to customize its styling (passed table state, row info,\ncolumn, and the table instance)",
  "DataTable-prop-onColumnNameChange": "function invoked when a column has been renamed (called with the old name as first and new name as second argument)",
  "DataTable-prop-onColumnDrag": "function invoked when a column has been dragged to a different position",
  "DataTable-prop-onClickRemove": "function specifying an action to take for rows removed from the data (defaults to an empty function)",
  "DataTable-prop-onColumnDelete": "function invoked with the name of a column when the respective delete button for a column is clicked",
  "DataTable-prop-onFilteredChange": "function invoked with the current filters after data has been filtered by user",
  "DataTable-prop-onEdit": "function invoked with the updated data set after the value of a cell was changed by the user (only applies when table is `editable`)",
  "DataTable-prop-onTutorialCompletion": "function invoked when user has completed the data table tutorial",
  "DataTable-description": "A component rendering data in a tabular display. Built on top of [react-table](https://react-table.js.org/).",
  "DateDisplay-description": "Description is missing.",
  "DraggableGrid-prop-isDraggable": "controls whether grid elements are draggable",
  "DraggableGrid-prop-isResizable": "controls whether grid elements are resizable",
  "DraggableGrid-prop-rowHeight": "height of a single row (in px)",
  "DraggableGrid-description": "A responsive draggable grid layout.",
  "DraggableList-prop-data": "array of objects with `id` and `text` keys",
  "DraggableList-prop-onChange": "callback invoked with newly ordered data array on each change",
  "DraggableList-prop-onInit": "callback function invoked after mounting of component",
  "DraggableList-prop-shuffle": "controls whether data elements should be shuffled in initial display",
  "DraggableList-prop-disabled": "controls whether elements can be dragged or not",
  "DraggableList-prop-className": "class name",
  "DraggableList-prop-style": "CSS inline styles",
  "DraggableList-description": "A list of draggable elements that can be re-ordered by the students.",
  "undefined-prop-disabled": "whether dragging should be disabled",
  "undefined-prop-resizable": "whether resize handlers should be attached to the edges of the child element",
  "undefined-prop-onStop": "event handler called when dragging is stopped",
  "undefined-prop-onEscape": "event handler called when the escape key is pressed",
  "EnlargeableGrid-prop-enlargeable": "controls whether items can be enlarged",
  "EnlargeableGrid-prop-enlargedHeight": "height of item after enlarging it",
  "EnlargeableGrid-prop-isDraggable": "controls whether the grid elements are draggable",
  "EnlargeableGrid-prop-isResizable": "controls whether the grid elements are resizable",
  "EnlargeableGrid-prop-itemHeight": "height of items (in px)",
  "EnlargeableGrid-description": "An enlargeable grid.",
  "Expire-prop-active": "controls whether the counter should be active",
  "Expire-prop-delay": "number of milliseconds before component disappears",
  "Expire-description": "The expire component will cause all of its children to become invisible after a specified amount of time.",
  "FeedbackButtons-prop-customFeedback": "controls whether the component accepts custom feedback",
  "FeedbackButtons-prop-confusedMsg": "message to be displayed in tooltip for confused button",
  "FeedbackButtons-prop-feedbackMsg": "message to be displayed in tooltip for detailed feedback button",
  "FeedbackButtons-prop-understoodMsg": "message to be displayed in tooltip for understood button",
  "FeedbackButtons-prop-vertical": "buttons are displayed vertically if set to `true`",
  "FeedbackButtons-prop-className": "class name",
  "FeedbackButtons-prop-style": "CSS inline styles",
  "FeedbackButtons-description": "Buttons to collect user feedback.",
  "FlippableCard-prop-button": "button label",
  "FlippableCard-prop-cardStyles": "allows to override the given styles",
  "FlippableCard-prop-draggable": "controls whether the card may be dragged around",
  "FlippableCard-prop-flipSpeedBackToFront": "the speed by which the card turns from background to foreground, in seconds",
  "FlippableCard-prop-flipSpeedFrontToBack": "{number} the speed by which the card turns from foreground to background, in seconds",
  "FlippableCard-prop-defaultValue": "initial flip state of the card",
  "FlippableCard-prop-value": "flip state of the card (for controlled component)",
  "FlippableCard-prop-perspective": "CSS property value to give 3d-positioned element a perspective",
  "FlippableCard-prop-oneTime": "indicates whether the flip process may be executed just once",
  "FlippableCard-prop-onChange": "callback invoked once the card is flipped; receives the current flipped status as its sole argument",
  "FlippableCard-description": "An ISLE component that allows two render two-sides.",
  "FreeTextSurvey-prop-question": "the question to ask the students",
  "FreeTextSurvey-prop-allowMultipleAnswers": "controls whether one wishes to allow students to answer the survey multiple times",
  "FreeTextSurvey-prop-anonymous": "controls whether student answers are anonymously collected",
  "FreeTextSurvey-prop-multipleAnswers": "controls whether students may select more than one answer. Note that this differs from `allowMultipleAnswers`, which allows students able to submit an answer multiple times",
  "FreeTextSurvey-prop-rows": "number of text rows in the input field",
  "FreeTextSurvey-prop-className": "class name",
  "FreeTextSurvey-prop-style": "CSS inline styles",
  "FreeTextSurvey-prop-onSubmit": "callback function called when an answer is submitted",
  "FreeTextSurvey-description": "An ISLE component for questions where the answers by the students should be supplied in the form of free text. What differentiates this component from the **FreeTextQuestion** is the fact that the aggregated group data is displayed to everyone in real-time.",
  "Gate-prop-user": "when set the gated content is displayed to users",
  "Gate-prop-notUser": "when set the gated content is **not** displayed to users",
  "Gate-prop-enrolled": "when set the gated content is displayed to the students enrolled in the course",
  "Gate-prop-notEnrolled": "when set the gated content is **not** displayed to the students enrolled in the course",
  "Gate-prop-owner": "when set the gated content is displayed to the owner of the course (usually the instructor)",
  "Gate-prop-notOwner": "when set the gated content is **not** displayed to the owner of the course (usually the instructor)",
  "Gate-prop-until": "time until the contents of the gate should remain visible",
  "Gate-prop-after": "time after which the contents of the gate should become visible",
  "Gate-prop-banner": "a message which is displayed to the visitors for whom the gate's children are not visible due to lacking privileges",
  "Gate-prop-showOwnerInPresentationMode": "controls whether to show gate contents in presentation mode when gate is visible for `owner`s",
  "Gate-prop-disabled": "if a gate is disabled, the banner will be displayed no matter what",
  "Gate-prop-check": "callback function returning a `boolean` indicating whether gate should display child components; the function is invoked whenever session actions arrive",
  "Gate-description": "An ISLE component that allows to display its children only to reserved audiences.",
  "Generator-prop-buttonLabel": "label for button",
  "Generator-prop-onGenerate": "function invoked that should return a new component to be rendered in the lesson",
  "Generator-description": "A component for generating other components (e.g., automatically generated questions).",
  "blockquote-prop-cite": "source for the quote",
  "blockquote-prop-className": "class name",
  "blockquote-prop-style": "CSS inline styles",
  "blockquote-description": "Component displaying an extended quotation.",
  "div-prop-className": "class name",
  "div-prop-style": "CSS inline styles",
  "div-description": "Generic container element.",
  "h1-prop-className": "class name",
  "h1-prop-style": "CSS inline styles",
  "h1-description": "Level 1 Section Heading.",
  "h2-prop-className": "class name",
  "h2-prop-style": "CSS inline styles",
  "h2-description": "Level 2 Section Heading.",
  "h3-prop-className": "class name",
  "h3-prop-style": "CSS inline styles",
  "h3-description": "Level 3 Section Heading.",
  "h4-prop-className": "class name",
  "h4-prop-style": "CSS inline styles",
  "h4-description": "Level 4 Section Heading.",
  "h5-prop-className": "class name",
  "h5-prop-style": "CSS inline styles",
  "h5-description": "Level 3 Section Heading.",
  "h6-prop-className": "class name",
  "h6-prop-style": "CSS inline styles",
  "h6-description": "Level 3 Section Heading.",
  "hr-prop-className": "class name",
  "hr-prop-style": "CSS inline styles",
  "hr-description": "Horizontal rule defining a thematic break in the document.",
  "li-prop-value": "integer indicating the current ordinal value of the list item (following list items will continue numbering from the specified value)",
  "li-prop-className": "class name",
  "li-prop-style": "CSS inline styles",
  "li-description": "List item.",
  "ol-prop-reversed": "indicates whether the items of the list are in reverse order",
  "ol-prop-start": "integer to start counting from for the list items (has to be supplied as an Arabic numeral)",
  "ol-prop-type": "numbering type (`a` for lowercase`, `A` for uppercase, `i` for lowercase and `I` for uppercase Roman numerals, `1` for numbers)",
  "ol-prop-className": "class name",
  "ol-prop-style": "CSS inline styles",
  "ol-description": "Ordered list.",
  "p-prop-className": "class name",
  "p-prop-style": "CSS inline styles",
  "p-description": "Paragraph element.",
  "pre-prop-className": "class name",
  "pre-prop-style": "CSS inline styles",
  "pre-description": "Element displaying preformatted text.",
  "span-prop-className": "class name",
  "span-prop-style": "CSS inline styles",
  "span-description": "Generic inline container element.",
  "ul-prop-className": "class name",
  "ul-prop-style": "CSS inline styles",
  "ul-description": "Unordered list.",
  "IFrame-prop-title": "iFrame title",
  "IFrame-prop-src": "source URL",
  "IFrame-prop-fullscreen": "controls whether to display the iFrame in fullscreen mode",
  "IFrame-prop-width": "iFrame width (in px)",
  "IFrame-prop-height": "iFrame height (in px)",
  "IFrame-prop-className": "class name",
  "IFrame-prop-style": "CSS inline styles",
  "IFrame-description": "An iFrame component.",
  "Image-prop-id": "component identifier",
  "Image-prop-src": "image source location",
  "Image-prop-alt": "image description",
  "Image-prop-body": "base64 encoded data of image",
  "Image-prop-height": "image height (in px)",
  "Image-prop-width": "image width (in px)",
  "Image-prop-showModal": "controls whether to display fullscreen modal view",
  "Image-prop-className": "class name",
  "Image-prop-style": "CSS inline styles",
  "Image-prop-onShare": "callback invoked with the image if the \"share\" button is clicked",
  "Image-description": "Component to display an image.",
  "CheckboxInput-prop-bind": "name of global variable for the checkbox value to be assigned to",
  "CheckboxInput-prop-defaultValue": "boolean value indicating the default value of the checkbox",
  "CheckboxInput-prop-value": "checkbox value (for controlled component)",
  "CheckboxInput-prop-disabled": "indicates whether the input is active or not",
  "CheckboxInput-prop-inline": "indicates whether the checkbox is displayed inline",
  "CheckboxInput-prop-legend": "text displayed next to the checkbox",
  "CheckboxInput-prop-tooltip": "text displayed when hovering over checkbox",
  "CheckboxInput-prop-tooltipPlacement": "position of button tooltip",
  "CheckboxInput-prop-style": "CSS inline styles",
  "CheckboxInput-prop-onChange": "callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value",
  "CheckboxInput-description": "A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.",
  "Input-description": "Description is missing.",
  "NumberInput-prop-bind": "name of global variable for the number to be assigned to",
  "NumberInput-prop-value": "number value (for controlled component)",
  "NumberInput-prop-defaultValue": "value indicating the default value of the input at startup",
  "NumberInput-prop-disabled": "boolean indicating whether the input is active or not",
  "NumberInput-prop-min": "number indicating the smallest possible value that may be inserted",
  "NumberInput-prop-max": "number indicating the maximum value that may be inserted",
  "NumberInput-prop-step": "number indicating the incremental changes when using the increment arrows",
  "NumberInput-prop-inline": "indicates whether the input is displayed inline",
  "NumberInput-prop-legend": "string indicating the text displayed next to the number input",
  "NumberInput-prop-numbersOnly": "controls whether only numbers are accepted",
  "NumberInput-prop-tooltip": "tooltip string (if not set, the tooltip is automatically generated)",
  "NumberInput-prop-tooltipPlacement": "direction of the tooltip",
  "NumberInput-prop-style": "CSS inline styles",
  "NumberInput-prop-inputStyle": "CSS inline styles for input element",
  "NumberInput-prop-onBlur": "callback function to be invoked when using a blur method",
  "NumberInput-prop-onChange": "callback function to be invoked when number input is changed",
  "NumberInput-prop-onKeyPress": "callback function to be invoked when any key is entered",
  "NumberInput-prop-onKeyDown": "callback function to be invoked when any key is pressed down",
  "NumberInput-prop-onKeyUp": "callback function to be invoked when key is released",
  "NumberInput-description": "A number input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.",
  "ProportionsInput-prop-nElements": "number of elements",
  "ProportionsInput-prop-legends": "group labels",
  "ProportionsInput-prop-disabled": "controls whether the input field is deactivated",
  "ProportionsInput-prop-precision": "displayed precision of proportion values",
  "ProportionsInput-prop-step": "the step of the arrows seen when hovering the cursor above the input box",
  "ProportionsInput-prop-colors": "array of colors for the pie chart components. If not defined, a custom color scale will be used",
  "ProportionsInput-prop-height": "proportions input height (in px)",
  "ProportionsInput-prop-innerRadius": "inner radius of proportions pie chart (in px)",
  "ProportionsInput-prop-margin": "proportion input margin (in px)",
  "ProportionsInput-prop-onChange": "callback function to be invoked when a choice is made",
  "ProportionsInput-description": "A proportions input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.",
  "SelectInput-prop-options": "array of indicating the choices available the user",
  "SelectInput-prop-bind": "name of global variable for the number to be assigned to",
  "SelectInput-prop-onChange": "callback function to be invoked when a choice is made",
  "SelectInput-prop-clearable": "boolean value indicating whether one may clear choice(s) made",
  "SelectInput-prop-defaultValue": "default value of the input at startup",
  "SelectInput-prop-disabled": "controls whether the input is active or not",
  "SelectInput-prop-inline": "indicates whether the input is displayed inline",
  "SelectInput-prop-legend": "text displayed next to the input",
  "SelectInput-prop-multi": "controls whether one may select multiple answers",
  "SelectInput-prop-menuPlacement": "placement of the menu in relation to the control (either `auto`, `top`, or `bottom`)",
  "SelectInput-prop-placeholder": "value to be displayed before an initial choice is made",
  "SelectInput-prop-tooltip": "text displayed when hovering over legend",
  "SelectInput-prop-style": "CSS inline styles",
  "SelectInput-description": "A select input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.",
  "SliderInput-prop-legend": "caption of the input",
  "SliderInput-prop-defaultValue": "The starting value of the slider",
  "SliderInput-prop-min": "The minimum value of the slider",
  "SliderInput-prop-max": "The maximum value of the slider",
  "SliderInput-prop-step": "step size of the slider",
  "SliderInput-prop-inline": "controls whether to place the slider inline with text or outside",
  "SliderInput-prop-precision": "rounding of the input. The value will be rounded to have no more significant digits than the precision. For example, if one wishes to only use integers, a precision of 10 would be used, while if one wishes to round to the hundreds place, one would use a precision of 0.001",
  "SliderInput-prop-disabled": "controls whether the slider input is active or not. If set to true, the slider will be present on the screen, albeit grayed-out",
  "SliderInput-prop-minLabel": "label to be displayed to the left of slider instead of minimum value",
  "SliderInput-prop-maxLabel": "label to be displayed to the right of slider instead of maximum value",
  "SliderInput-prop-hideTooltip": "controls whether to hide tooltip",
  "SliderInput-prop-style": "CSS inline styles",
  "SliderInput-prop-numberInputStyle": "CSS inline styles for number input component",
  "SliderInput-prop-rangeInputStyle": "CSS inline style for range input component",
  "SliderInput-prop-onChange": "callback invoked with the new value when the slider value changes",
  "SliderInput-description": "A slider input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.",
  "TextArea-prop-defaultValue": "default value of the text area",
  "TextArea-prop-value": "text value (for controlled component)",
  "TextArea-prop-disabled": "controls whether the text area shall be disabled",
  "TextArea-prop-legend": "legend text",
  "TextArea-prop-placeholder": "placeholder text",
  "TextArea-prop-resizable": "controls whether the text area shall be resizable (can be either `both`, `horizontal`, `vertical`, or `none`)",
  "TextArea-prop-rows": "number of rows",
  "TextArea-prop-style": "CSS inline styles",
  "TextArea-prop-onBlur": "callback function invoked when the text area loses focus",
  "TextArea-prop-onChange": "callback function invoked with the new text when the area text changes",
  "TextArea-description": "A text area component. Used as a stand-alone component, changes should be handled via the `onChange` attribute.",
  "TextInput-prop-onChange": "A function to be called when a text value is changed",
  "TextInput-prop-defaultValue": "A value indicating the default value of the input at start",
  "TextInput-prop-value": "text value (for controlled component)",
  "TextInput-prop-disabled": "A boolean indicating whether the input is active or not",
  "TextInput-prop-width": "A number indicating the width of the input in pixels",
  "TextInput-prop-inline": "Indicates whether the input is displayed inline",
  "TextInput-prop-legend": "A string indicating the text displayed next to the number input",
  "TextInput-prop-bind": "name of global variable for the number to be assigned to",
  "TextInput-prop-placeholder": "A string indicating the value to be displayed before an initial choice is made",
  "TextInput-prop-style": "CSS inline styles",
  "TextInput-prop-onBlur": "callback function invoked when the text area loses focus",
  "TextInput-prop-onKeyPress": "callback function to be invoked when any key is entered",
  "TextInput-prop-onKeyDown": "callback function to be invoked when any key is pressed down",
  "TextInput-prop-onKeyUp": "callback function to be invoked when key is released",
  "TextInput-description": "A text input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.",
  "VoiceInput-prop-autorecord": "controls whether to automatically start recording",
  "VoiceInput-prop-defaultValue": "default text value",
  "VoiceInput-prop-grammars": "speech grammar list (unsupported)",
  "VoiceInput-prop-language": "language identifier",
  "VoiceInput-prop-legend": "legend displayed in front of input field",
  "VoiceInput-prop-mode": "set to `full` to display a text input field alongside the microphone, `status` to only display a statusbar with the transcribed texts, `microphone` to show just a button to toggle recording, or `none` when the voice input should be invisible and purely controlled via hotkeys / voice commands",
  "VoiceInput-prop-maxAlternatives": "maximum number of alternatives provided per speech recognition result",
  "VoiceInput-prop-onChange": "callback function invoked when text input value is updated",
  "VoiceInput-prop-onClick": "callback function invoked when clicking on the microphone button",
  "VoiceInput-prop-onFinalText": "callback function invoked once final text is received",
  "VoiceInput-prop-onSegment": "callback function invoked with text segments",
  "VoiceInput-prop-onRecordingStart": "callback function invoked when recording is started",
  "VoiceInput-prop-onRecordingStop": "callback function invoked once recording is stopped",
  "VoiceInput-prop-onSubmit": "callback function when submitting text input value by hitting \"Enter\"",
  "VoiceInput-prop-placeholder": "text input placeholder",
  "VoiceInput-prop-remote": "object with `start`, `stop`, and `toggle` and associated hotkeys",
  "VoiceInput-prop-timeout": "number of milliseconds after which to timeout the recording",
  "VoiceInput-prop-stopTooltip": "tooltip message displayed while recording",
  "VoiceInput-prop-startTooltip": "tooltip message displayed while not recording",
  "VoiceInput-prop-tooltipPlacement": "direction of the tooltip",
  "VoiceInput-prop-width": "voice input width (in px)",
  "VoiceInput-prop-height": "voice input height (in px)",
  "VoiceInput-prop-style": "CSS inline styles",
  "VoiceInput-description": "A voice input component.",
  "undefined-prop-show": "controls whether calculator is shown",
  "undefined-prop-onClose": "callback invoked when closing the modal window",
  "undefined-prop-undefined": "substring of action type\n/\nconst extractSubstr = ( str ) => {\nreturn str.substr( str.lastIndexOf( '_', str.lastIndexOf( '_' ) - 1 ) + 1 );\n};\n\nconst usersWithFocus = ( userFocuses, usersWithActions, id ) => {\nconst out = [];\nfor ( let key in userFocuses ) {\nif (\nhasOwnProperty( userFocuses, key ) && // user has component in focus\n!hasOwnProperty( usersWithActions, key ) // user has not already submitted an action\n) {\nconst elemID = userFocuses[ key ];\nif ( elemID === id ) {\nout.push( key );\n}\n}\n}\nreturn out;\n};\n\n\n// MAIN //\n\n/**\nInstructor panel for visualizing component responses.",
  "undefined-prop-str": "action type",
  "undefined-prop-buttonStyle": "button CSS styles",
  "undefined-prop-data": "data type information to visualize",
  "undefined-prop-showID": "whether to display the component ID",
  "undefined-prop-variant": "button style variant",
  "undefined-prop-info": "action identifier for info",
  "undefined-prop-success": "action identifier for success",
  "undefined-prop-danger": "action identifier for danger",
  "undefined-prop-noSessionRegistration": "controls whether to register the component in the session (e.g., for progress calculations)",
  "undefined-prop-display": "CSS display property",
  "undefined-prop-height": "height (in px)",
  "undefined-prop-width": "width (in px)",
  "undefined-prop-lines": "number of lines",
  "StatusBar-description": "Description is missing.",
  "undefined-prop-expandable": "controls whether calculator is expandable",
  "undefined-prop-onHide": "callback invoked when the close button is clicked",
  "Toolbar-prop-elements": "array of elements with `name`, `icon` (a font-awesome icon name), and `component` (React node to be rendered) keys",
  "Toolbar-description": "Toolbar of widgets for students to use during the course of a lesson.",
  "VoiceControl-prop-id": "unique identifier",
  "VoiceControl-prop-commands": "array of voice commands",
  "VoiceControl-prop-reference": "reference object",
  "VoiceControl-prop-hide": "controls whether to hide control elements for toggling on/off voice control and display a list of available commands",
  "VoiceControl-description": "Component to register a reference with the speech control interface.",
  "Joyride-prop-steps": "array of step `objects`",
  "Joyride-prop-scrollToSteps": "controls whether the window should scroll to the current step",
  "Joyride-prop-run": "controls whether the guide is active",
  "Joyride-description": "Wrapper around [react-joyride](https://github.com/gilbarbara/react-joyride) to create walkthroughs and guided tours.",
  "JSShell-prop-code": "JavaScript code to be evaluated",
  "JSShell-prop-solution": "for programming questions, code `string` representing the official solution for the problem",
  "JSShell-prop-hints": "for programming questions, an array of hints providing guidance on how to approach the problem",
  "JSShell-prop-precompute": "controls whether the default code should be executed once the component has mounted",
  "JSShell-prop-chat": "controls whether group chat functionality should be enabled",
  "JSShell-prop-check": "appended JavaScript code to check the `code` to be evaluated",
  "JSShell-prop-disabled": "controls whether to disable all user inputs and make the code block static",
  "JSShell-prop-lines": "number of lines to display",
  "JSShell-prop-vars": "scope object with variables that should be made available to evaluated `code`",
  "JSShell-prop-voiceID": "voice control identifier",
  "JSShell-prop-className": "class name",
  "JSShell-prop-style": "CSS inline styles",
  "JSShell-prop-onChange": "callback invoked whenever the text field input changes",
  "JSShell-prop-onEvaluate": "callback invoked whenever the `Evaluate` button is clicked",
  "JSShell-description": "An interactive Javascript shell that can be used to execute JavaScript commands. The shell contains a console that displays error messages, warnings etc.",
  "KeyControls-prop-actions": "object mapping key codes to events",
  "KeyControls-prop-container": "DOM node for which to attach event listeners",
  "KeyControls-description": "Keyboard controls.",
  "Language-description": "Description is missing.",
  "LearnCausalityDiagram-prop-x": "name of explanatory variable",
  "LearnCausalityDiagram-prop-y": "name of response variable",
  "LearnCausalityDiagram-prop-z": "name of confounding variable",
  "LearnCausalityDiagram-description": "A learning component illustrating the impact of a confounding variable when assessing a causal relationship between two variables and of randomization.",
  "LearnContinuousCLT-prop-distributions": "statistical distributions to choose from ('uniform', 'exponential', and/or 'normal')",
  "LearnContinuousCLT-prop-hideFormulas": "controls whether to hide formulas in the component text",
  "LearnContinuousCLT-description": "A learning component illustrating the Central Limit Theorem (CLT) for a chosen continuous distribution.",
  "LearnDiscreteCLT-prop-showPopStdev": "controls whether to display the population standard deviation",
  "LearnDiscreteCLT-description": "A learning component illustrating the Central Limit Theorem (CLT) for a canonical discrete distribution, the binomial distribution.",
  "LearnSampleCLT-prop-data": "data object with keys correspond to variable names and values holding the values of respective variables",
  "LearnSampleCLT-prop-variables": "names of variables that can be sampled from",
  "LearnSampleCLT-prop-hidePopulationStdev": "hide display of population standard deviation",
  "LearnSampleCLT-prop-samples": "array of numbers or a single numbers denoting the sample sizes that can be drawn",
  "LearnSampleCLT-prop-populationProbabilities": "whether to display equations for calculation of population probabilities",
  "LearnSampleCLT-prop-quantiles": "whether to show tool for calculation of any quantiles",
  "LearnSampleCLT-description": "A learning component illustrating the Central Limit Theorem (CLT) when sampling from a supplied data set.",
  "LearnConditionalProbability-prop-A": "first variable",
  "LearnConditionalProbability-prop-B": "second variable",
  "LearnConditionalProbability-description": "A learning component illustrating conditional probability for two dependent binary variables.",
  "LearnConfidenceCoverageBinomial-prop-intro": "overrides default (interactive) intro text",
  "LearnConfidenceCoverageBinomial-prop-quartileNotation": "controls whether to use quartile notation in intro text",
  "LearnConfidenceCoverageBinomial-prop-sampleStats": "controls whether one should be able to switch between using the sample proportion or the known population success probability when calculating the standard error",
  "LearnConfidenceCoverageBinomial-description": "A learning component illustrating coverage of confidence intervals for the mean of a binomial distribution.",
  "LearnConfidenceCoverageNormal-prop-intro": "overrides default (interactive) intro text",
  "LearnConfidenceCoverageNormal-prop-quartileNotation": "controls whether to use `alpha/2` as the subscript for the critical value or just `critical`",
  "LearnConfidenceCoverageNormal-prop-sampleStats": "controls whether one should be able to switch between using the sample standard deviation or the known population standard deviation when calculating the standard error",
  "LearnConfidenceCoverageNormal-description": "A learning component illustrating coverage of confidence intervals for the mean of a normal distribution.",
  "LearnConfidenceCoverageSample-prop-data": "data object with keys correspond to variable names and values holding the values of respective variables",
  "LearnConfidenceCoverageSample-prop-variables": "names of variables that can be sampled from",
  "LearnConfidenceCoverageSample-prop-samples": "array of numbers or a single numbers denoting the sample sizes that can be drawn",
  "LearnConfidenceCoverageSample-description": "A learning component illustrating the Central Limit Theorem (CLT) when sampling from a supplied data set.",
  "LearnContinuousDistribution-description": "A learning component for exploring user-defined continuous probability distributions.",
  "LearnCrossValidation-description": "A visualization explaining cross-validation.",
  "LearnDiceThrowing-description": "A learning component illustrating the law of large numbers using dice throwing.",
  "LearnDiscreteDistribution-prop-numValues": "initial number of distinct values",
  "LearnDiscreteDistribution-description": "A learning component for visualizing any discrete distribution and evaluating its CDF.",
  "LearnBetaDistribution-prop-domain": "object of `x` and `y` arrays with the starting and end points for the respective axis",
  "LearnBetaDistribution-prop-tabs": "which tabs to display (either `smaller`, `greater`, or `range`)",
  "LearnBetaDistribution-prop-step": "step size of the scroll input",
  "LearnBetaDistribution-prop-style": "CSS inline styles",
  "LearnBetaDistribution-description": "A learning component for calculating probabilities of a beta distribution.",
  "LearnBinomialDistribution-prop-hideCDF": "controls whether to hide the CDF display",
  "LearnBinomialDistribution-prop-step": "step size of the scroll input",
  "LearnBinomialDistribution-prop-style": "CSS inline styles",
  "LearnBinomialDistribution-description": "A learning component for calculating probabilities of a binomial distribution.",
  "LearnChisquareDistribution-prop-step": "step size of the scroll input",
  "LearnChisquareDistribution-prop-maxDF": "maximum degrees of freedom that can be chosen in input field",
  "LearnChisquareDistribution-prop-minDF": "minimum degrees of freedom that can be chosen in input field",
  "LearnChisquareDistribution-prop-style": "CSS inline styles",
  "LearnChisquareDistribution-description": "A learning component for calculating probabilities of a chi-squared distribution.",
  "LearnExponentialDistribution-prop-hideCDF": "controls whether to hide the CDF plots",
  "LearnExponentialDistribution-prop-step": "step size of the scroll input",
  "LearnExponentialDistribution-prop-maxRate": "maximum rate parameter that can be chosen in input field",
  "LearnExponentialDistribution-prop-minRate": "minimum rate parameter that can be chosen in input field",
  "LearnExponentialDistribution-prop-style": "CSS inline styles",
  "LearnExponentialDistribution-description": "A learning component for calculating probabilities of a exponential distribution.",
  "LearnFDistribution-prop-domain": "object of `x` and `y` arrays with the starting and end points for the respective axis",
  "LearnFDistribution-prop-tabs": "which tabs to display (either `smaller`, `greater`, or `range`)",
  "LearnFDistribution-prop-step": "step size of the scroll input",
  "LearnFDistribution-prop-style": "CSS inline styles",
  "LearnFDistribution-description": "A learning component for calculating probabilities of an F distribution.",
  "LearnGammaDistribution-prop-domain": "object of `x` and `y` arrays with the starting and end points for the respective axis",
  "LearnGammaDistribution-prop-tabs": "which tabs to display (either `smaller`, `greater`, or `range`)",
  "LearnGammaDistribution-prop-step": "step size of the scroll input",
  "LearnGammaDistribution-prop-scaleParameterization": "controls whether to use the parameterization involving a shape and scale parameter instead of shape and rate",
  "LearnGammaDistribution-prop-symbols": "whether to display Greek symbols for parameters",
  "LearnGammaDistribution-prop-style": "CSS inline styles",
  "LearnGammaDistribution-description": "A learning component for calculating probabilities of a gamma distribution.",
  "LearnGeometricDistribution-prop-countTrials": "set to true if instead of counting the number of failures until the first success, a random variable from a geometric distribution should be defined as the number of trials until the first success",
  "LearnGeometricDistribution-prop-step": "step size of the scroll input",
  "LearnGeometricDistribution-prop-style": "CSS inline styles",
  "LearnGeometricDistribution-description": "A learning component for calculating probabilities of a geometric distribution.",
  "LearnHypergeometricDistribution-prop-step": "step size of the scroll input",
  "LearnHypergeometricDistribution-prop-style": "CSS inline styles",
  "LearnHypergeometricDistribution-description": "A learning component for calculating probabilities of a hypergeometric distribution.",
  "LearnNegativeBinomialDistribution-prop-countTrials": "set to true if instead of counting the number of failures until the r-th success, a random variable from a negative binomial distribution should be defined as the number of trials until the r-th success",
  "LearnNegativeBinomialDistribution-prop-step": "step size of the scroll input",
  "LearnNegativeBinomialDistribution-prop-style": "CSS inline styles",
  "LearnNegativeBinomialDistribution-description": "A learning component for calculating probabilities of a negative binomial distribution.",
  "LearnNormalDistribution-prop-hideCDF": "controls whether to hide the CDF plots",
  "LearnNormalDistribution-prop-domain": "object of `x` and `y` arrays with the starting and end points for the respective axis",
  "LearnNormalDistribution-prop-tabs": "which tabs to display (either `smaller`, `greater`, or `range`)",
  "LearnNormalDistribution-prop-minStDev": "minimum standard deviation",
  "LearnNormalDistribution-prop-step": "step size of the scroll input",
  "LearnNormalDistribution-prop-style": "CSS inline styles",
  "LearnNormalDistribution-description": "A learning component for calculating probabilities of a normal distribution.",
  "LearnPoissonDistribution-prop-step": "step size of the scroll input",
  "LearnPoissonDistribution-prop-style": "CSS inline styles",
  "LearnPoissonDistribution-description": "A learning component for calculating probabilities of a Poisson distribution.",
  "LearnTDistribution-prop-step": "step size of the scroll input",
  "LearnTDistribution-prop-quantile": "whether to show tab for calculating distribution quantiles",
  "LearnTDistribution-prop-style": "CSS inline styles",
  "LearnTDistribution-description": "A learning component for calculating probabilities of a Student's t distribution.",
  "LearnUniformDistribution-prop-hideCDF": "controls whether to hide the CDF plots",
  "LearnUniformDistribution-prop-step": "step size of the scroll input",
  "LearnUniformDistribution-prop-style": "CSS inline styles",
  "LearnUniformDistribution-description": "A learning component for calculating probabilities of a uniform distribution.",
  "LearnMeanTest-prop-types": "the type(s) of test (`One-Sample`, `Two-Sample`) the widget should expose",
  "LearnMeanTest-prop-tests": "the test(s) exposed by the widget",
  "LearnMeanTest-prop-nullHypothesisAsValue": "always display the null hypothesis as a single value",
  "LearnMeanTest-prop-feedback": "controls whether to display feedback buttons",
  "LearnMeanTest-prop-style": "CSS inline styles",
  "LearnMeanTest-description": "A learning component on hypothesis tests for a population mean.",
  "LearnProportionTest-prop-types": "the type(s) of test (`One-Sample`, `Two-Sample`) the widget should expose",
  "LearnProportionTest-prop-feedback": "controls whether to display feedback buttons",
  "LearnProportionTest-prop-nullHypothesisAsValue": "always display the null hypothesis as a single value",
  "LearnProportionTest-prop-style": "CSS inline styles",
  "LearnProportionTest-description": "A learning component on hypothesis tests for a population proportion.",
  "LearnImagePixelPicker-description": "A pixel color picker explaining RGB colors using example images.",
  "LearnMeanVSMedian-prop-id": "component identifier",
  "LearnMeanVSMedian-prop-header": "title of the panel in which the mean and the median will be generated",
  "LearnMeanVSMedian-prop-intro": "any introductory material that may be needed",
  "LearnMeanVSMedian-prop-showStatistics": "controls whether to display student and group performance statistics",
  "LearnMeanVSMedian-prop-feedback": "controls whether to display feedback buttons",
  "LearnMeanVSMedian-prop-seed": "seed to initialize pseudorandom number generator",
  "LearnMeanVSMedian-prop-style": "CSS inline styles",
  "LearnMeanVSMedian-description": "An interactive game testing student's ability in detecting the median and mean of a given distribution.",
  "LearnNetworks-prop-showEdgeChart": "controls whether to display a chart displaying the number of edges in each generated network (reset when number of nodes is changed)",
  "LearnNetworks-prop-showTransitivities": "whether to tally transitivities / global clustering coefficients for generated networks",
  "LearnNetworks-description": "Generate networks from a Erdős-Rényi model.",
  "LearnSOTU-prop-questions": "array of questions",
  "LearnSOTU-description": "Learning component to explore the State of the Union speeches of US presidents.",
  "LearnStandardize-prop-showProbabilities": "controls whether to display the probabilities",
  "LearnStandardize-prop-step": "step size of the scroll input",
  "LearnStandardize-description": "Learning component explaining the process of standardizing data.",
  "LearnStatisticalModels-prop-style": "CSS inline styles",
  "LearnStatisticalModels-description": "Component to browse descriptions of various statistical models.",
  "LearnVennDiagramBuilder-prop-nobs": "total number of observations",
  "LearnVennDiagramBuilder-prop-three": "controls whether to display three circles",
  "LearnVennDiagramBuilder-prop-feedback": "controls whether to display feedback buttons",
  "LearnVennDiagramBuilder-description": "A Venn diagram builder.",
  "LearnWordVennDiagram-prop-tdm": "`array` that is to represent a [term document matrix](https://en.wikipedia.org/wiki/Document-term_matrix)",
  "LearnWordVennDiagram-prop-nTexts": "number of sources from which text was gathered",
  "LearnWordVennDiagram-prop-vocabulary": "`array` in the order of the `tdm` array passed so that the indices may be matches to their words",
  "LearnWordVennDiagram-prop-height": "height of the Venn diagram in pixels",
  "LearnWordVennDiagram-prop-width": "width of the Venn diagram in pixels",
  "LearnWordVennDiagram-prop-onClick": "callback for what is to be done when \"Draw Venn Diagram\" is clicked",
  "LearnWordVennDiagram-description": "A venn diagram visualizing co-occurrence of words in documents of a supplied term-document matrix.",
  "LessonSubmit-prop-label": "label of submit button",
  "LessonSubmit-prop-requireLogin": "controls whether to require user to be signed in for button to be active (for anonymous users, no email confirmation is sent out)",
  "LessonSubmit-prop-sendConfirmationEmail": "controls whether to send confirmation email upon lesson submission",
  "LessonSubmit-prop-message": "message for confirmation email",
  "LessonSubmit-prop-className": "class name",
  "LessonSubmit-prop-style": "CSS inline styles",
  "LessonSubmit-prop-onClick": "callback invoked when clicking on the submission button",
  "LessonSubmit-description": "A button to be displayed at the end of a lesson for students to click on. By default, a message confirming completion of the lesson is sent to their email address.",
  "LikertScale-prop-question": "question to be printed",
  "LikertScale-prop-options": "an array of five elements holding the labels for the different scale levels",
  "LikertScale-prop-noMultipleResponses": "disallow multiple submissions from a single student",
  "LikertScale-prop-disableSubmitNotification": "controls whether to disable submission notifications",
  "LikertScale-prop-className": "class name",
  "LikertScale-prop-style": "CSS inline styles",
  "LikertScale-description": "A component showing a question and a five-point scale for students to answer.",
  "Link-prop-href": "URL of website to link to",
  "Link-prop-target": "defines where link is opened: set to `_blank` for new window, `_self` own frame, `_parent` for parent, `_top` for full body of window, or the name of the frame",
  "Link-prop-className": "class name",
  "Link-prop-style": "CSS inline styles",
  "Link-description": "A component for displaying a link.",
  "MetricsContingencyTable-description": "Description is missing.",
  "Metrics-prop-for": "ID of component whose actions should be retrieved",
  "Metrics-prop-interval": "interval at which to call the database; if falsy, retrievals have to be manually triggered by clicking on the displayed button",
  "Metrics-prop-onData": "callback function called with an array of all actions",
  "Metrics-description": "Component allowing retrieval of member actions corresponding to a specified component ID from the database.",
  "RealTimeMetrics-prop-for": "ID of component whose actions should trigger callback(s)",
  "RealTimeMetrics-prop-onData": "callback function called with an array of all actions when a new member action arrives",
  "RealTimeMetrics-prop-onDatum": "callback function invoked with every individual incoming member action",
  "RealTimeMetrics-prop-returnFullObject": "controls whether to invoke the supplied callback(s) with the full action object or only its value",
  "RealTimeMetrics-description": "Invisible component listening to incoming member actions and invoking a given callback.",
  "DecisionTree-prop-data": "object of value arrays",
  "DecisionTree-prop-type": "`Classification` for categorical or `Regression` for quantitative outcomes",
  "DecisionTree-prop-quantitative": "array of variables in `data` that are `quantitative`",
  "DecisionTree-prop-y": "outcome variable",
  "DecisionTree-prop-x": "one or more predictor variables",
  "DecisionTree-prop-impurityMeasure": "impurity measure (`gini` or `entropy`)",
  "DecisionTree-prop-scoreThreshold": "score threshold for split",
  "DecisionTree-prop-maxTreeDepth": "maximum tree depth",
  "DecisionTree-prop-minItemsCount": "minimum # of observations in leaf nodes",
  "DecisionTree-prop-onPredict": "callback invoked with model object when clicking on the predict button",
  "DecisionTree-description": "Regression and classification trees.",
  "HierarchicalClustering-prop-data": "object of value arrays",
  "HierarchicalClustering-prop-variables": "names of variables used for clustering",
  "HierarchicalClustering-prop-linkage": "either `complete` or `single`",
  "HierarchicalClustering-prop-distance": "used distance (`euclidean`, `chebyshev`, `cosine`, `hamming`, or `manhattan`)",
  "HierarchicalClustering-prop-onResult": "callback invoked with model object",
  "HierarchicalClustering-description": "Hierarchical Clustering.",
  "KMeans-prop-data": "object of value arrays",
  "KMeans-prop-variables": "names of variables used for clustering",
  "KMeans-prop-initialization": "initialization method (`kmeans++`, `random`, or `mostDistant`)",
  "KMeans-prop-K": "number of clusters",
  "KMeans-prop-onResult": "callback invoked with model object",
  "KMeans-description": "K-means clustering.",
  "LassoRegression-prop-data": "object of value arrays",
  "LassoRegression-prop-y": "outcome variable",
  "LassoRegression-prop-x": "one or more predictor variables",
  "LassoRegression-prop-quantitative": "array of variables in `data` that are `quantitative`",
  "LassoRegression-prop-lambda": "regularization parameter",
  "LassoRegression-prop-intercept": "controls whether to fit a model with an intercept term",
  "LassoRegression-prop-onPredict": "callback invoked with predictions and residuals after model fitting",
  "LassoRegression-description": "LASSO regression.",
  "LogisticRegression-prop-data": "object of value arrays",
  "LogisticRegression-prop-y": "outcome variable",
  "LogisticRegression-prop-success": "success category of `y`",
  "LogisticRegression-prop-x": "one or more predictor variables",
  "LogisticRegression-prop-quantitative": "array of variables in `data` that are `quantitative`",
  "LogisticRegression-prop-omitMissing": "controls whether to omit missing values",
  "LogisticRegression-prop-intercept": "controls whether to fit a model with an intercept term",
  "LogisticRegression-prop-onPredict": "callback invoked with predictions and residuals after model fitting",
  "LogisticRegression-description": "Multiple linear regression.",
  "MultipleLinearRegression-prop-data": "object of value arrays",
  "MultipleLinearRegression-prop-y": "outcome variable",
  "MultipleLinearRegression-prop-x": "one or more predictor variables",
  "MultipleLinearRegression-prop-quantitative": "array of variables in `data` that are `quantitative`",
  "MultipleLinearRegression-prop-omitMissing": "controls whether to omit missing values",
  "MultipleLinearRegression-prop-intercept": "controls whether to fit a model with an intercept term",
  "MultipleLinearRegression-prop-onDiagnostics": "callback invoked with diagnostic plots",
  "MultipleLinearRegression-prop-onPredict": "callback invoked with predictions and residuals after model fitting",
  "MultipleLinearRegression-description": "Multiple linear regression.",
  "NaiveBayes-prop-data": "object of value arrays",
  "NaiveBayes-prop-y": "outcome variable",
  "NaiveBayes-prop-x": "one or more predictor variables",
  "NaiveBayes-prop-quantitative": "array of variables in `data` that are `quantitative`",
  "NaiveBayes-prop-omitMissing": "controls whether to omit missing values",
  "NaiveBayes-prop-onPredict": "callback invoked with predictions and residuals after model fitting",
  "NaiveBayes-description": "Naive Bayes assuming that the predictors given the class membership follow a normal distribution.",
  "PrincipalComponentAnalysis-prop-data": "object of value arrays",
  "PrincipalComponentAnalysis-prop-variables": "names of variables used for clustering",
  "PrincipalComponentAnalysis-prop-scale": "scale values by dividing with the standard deviation",
  "PrincipalComponentAnalysis-prop-center": "center values by subtracting the mean",
  "PrincipalComponentAnalysis-prop-noComponents": "number of components supplied to the `onResult` callback",
  "PrincipalComponentAnalysis-prop-onResult": "callback invoked with model object and components",
  "PrincipalComponentAnalysis-description": "Principal component analysis.",
  "RandomForest-prop-data": "object of value arrays",
  "RandomForest-prop-type": "currently only `Classification` for categorical responses is supported",
  "RandomForest-prop-quantitative": "array of variables in `data` that are `quantitative`",
  "RandomForest-prop-y": "outcome variable",
  "RandomForest-prop-x": "one or more predictor variables",
  "RandomForest-prop-impurityMeasure": "impurity measure (`gini` or `entropy`)",
  "RandomForest-prop-nTrees": "number of trees",
  "RandomForest-prop-nTry": "number of predictors to check at each split",
  "RandomForest-prop-scoreThreshold": "score threshold for split",
  "RandomForest-prop-maxTreeDepth": "maximum tree depth",
  "RandomForest-prop-minItemsCount": "minimum # of observations in leaf nodes",
  "RandomForest-prop-onPredict": "callback invoked with model object when clicking on the predict button",
  "RandomForest-description": "Regression and classification trees.",
  "SimpleLinearRegression-prop-data": "object of value arrays",
  "SimpleLinearRegression-prop-x": "explanatory variable",
  "SimpleLinearRegression-prop-y": "response variable",
  "SimpleLinearRegression-prop-group": "grouping variable",
  "SimpleLinearRegression-prop-omitMissing": "controls whether to omit missing values in model fitting",
  "SimpleLinearRegression-prop-onDiagnostics": "callback invoked with diagnostic plots",
  "SimpleLinearRegression-prop-onPredict": "callback invoked with fitted values and residuals",
  "SimpleLinearRegression-description": "Simple linear regression.",
  "MultiCards-prop-values": "the values for the respective cards, input in an array that has entry fields for a `front` and `back` value. Such a value could be a string, but also a full fledged ISLE component",
  "MultiCards-prop-cardStyles": "allows to override the given styles. Handles objects with  `container`, `front` and `back` keys",
  "MultiCards-prop-game": "multi-card games. Can be either `memory` or `bingo`.",
  "MultiCards-prop-language": "voice recognition language identifier",
  "MultiCards-prop-onChange": "a function that receives the matrix of the flippable cards",
  "MultiCards-prop-oneTime": "indicates whether the flip process may be executed just once",
  "MultiCards-prop-animation": "if set the component uses an entry animation; the object contains a name (like `anim-scale-up`) and a duration (like `1.7s` = 1.7 seconds)",
  "MultiCards-prop-style": "CSS inline styles",
  "MultiCards-description": "An ISLE component that allows you to create and control multiple flippable cards (e.g. in a game of Memory).",
  "MultipleChoiceSurvey-prop-question": "string indicating the question to ask the students",
  "MultipleChoiceSurvey-prop-allowMultipleAnswers": "controls whether one wishes to allow students to answer the survey multiple times",
  "MultipleChoiceSurvey-prop-anonymous": "controls whether student answers are anonymized",
  "MultipleChoiceSurvey-prop-answers": "array indicating answer choices for the students",
  "MultipleChoiceSurvey-prop-multipleAnswers": "indicates whether students may select more than one answer. Note that this differs from allowMultipleAnswers in that allow makes students able to submit the question multiple times",
  "MultipleChoiceSurvey-prop-title": "panel title",
  "MultipleChoiceSurvey-prop-style": "CSS inline styles",
  "MultipleChoiceSurvey-prop-onSubmit": "function to be called when an answer is submitted",
  "MultipleChoiceSurvey-description": "A survey component in which the instructor may collect multiple-choice survey data from students in real-time.",
  "News-prop-invisible": "indicates whether to show the input fields or rely solely on voice control to be triggered",
  "News-prop-key": "authentication key for the News API",
  "News-prop-language": "language identifier",
  "News-prop-voiceID": "voice control identifier",
  "News-prop-onArticles": "callback function invoked with an array of article objects once they are received",
  "News-description": "The **News** component scans the public **News API** (consisting of 71 international  newspapers) and displays the latest 10 articles of the given newspaper. There are two ways to enter a source: one by typing into the search field and submitting via the ENTER button, the second via voice.",
  "NumberSurvey-prop-question": "the question to be displayed",
  "NumberSurvey-prop-allowMultipleAnswers": "controls whether the same user (or session if anonymous) may submit multiple answers)",
  "NumberSurvey-prop-anonymous": "Allows for the students to submit data anonymously. Note that if this option is set to \"true\", then the instructors will be unable to see the ID of the submitting student",
  "NumberSurvey-prop-step": "A `string` or `numeric` value indicating the step of the arrows seen when hovering the cursor above the input box. If `'any'`, the step will be set to `1`",
  "NumberSurvey-prop-style": "CSS inline styles",
  "NumberSurvey-prop-onSubmit": "callback function invoked once students submits an answer",
  "NumberSurvey-description": "A survey component in which the instructor may collect numeric survey data from students in real-time.",
  "Pages-prop-title": "displayed title of the pages container",
  "Pages-prop-size": "size of the pagination buttons (either `default`, `lg`, `large`, `sm`, `small`, `xs`, or `xsmall`)",
  "Pages-prop-height": "the maximum height of the container. If an embedded page is taller, a vertical scrollbar is added",
  "Pages-prop-activePage": "active page",
  "Pages-prop-paginationBelow": "controls whether to also display the pagination elements below the container and not only on top of",
  "Pages-prop-disabled": "controls whether the navigation bar is active or not",
  "Pages-prop-voiceID": "voice control identifier",
  "Pages-prop-style": "CSS inline styles",
  "Pages-prop-onSelect": "Function invoked when active change is changed. Receives the new active page index as a sole parameter",
  "Pages-description": "An ISLE pagination component that allows the user to step through a sequence of pages.",
  "Panel-prop-className": "CSS class name",
  "Panel-prop-header": "panel heading (h3)",
  "Panel-prop-footer": "panel footer",
  "Panel-prop-minimizable": "whether the panel can be minimized",
  "Panel-prop-fullscreen": "whether the panel can be made fullscreen (only for instructors)",
  "Panel-prop-hideTooltip": "tooltip displayed over the hide button",
  "Panel-prop-onHide": "callback invoked when the close button is clicked",
  "Panel-prop-style": "CSS inline styles for container",
  "Panel-prop-bodyStyle": "CSS inline styles for body",
  "Panel-prop-footerStyle": "CSS inline styles for footer",
  "Panel-description": "Card component.",
  "Plotly-prop-data": "data array",
  "Plotly-prop-editable": "controls whether labels of the created plot are editable",
  "Plotly-prop-draggable": "controls whether the plot should be draggable",
  "Plotly-prop-id": "component identifier",
  "Plotly-prop-layout": "Plotly layout object",
  "Plotly-prop-legendButtons": "controls whether to display buttons for changing the legend",
  "Plotly-prop-toggleFullscreen": "controls whether to allow displaying the plot in fullscreen mode",
  "Plotly-prop-removeButtons": "controls whether to remove all buttons (aside from fullscreen button if enabled)",
  "Plotly-prop-meta": "plot meta-information",
  "Plotly-prop-revision": "when provided, causes the plot to update when the revision value is incremented",
  "Plotly-prop-style": "CSS inline styles",
  "Plotly-prop-onAfterPlot": "callback function invoked each time a chart is plotted",
  "Plotly-prop-onClick": "callback function invoked when any element is clicked",
  "Plotly-prop-onInitialized": "callback invoked once plot is initialized; called with figure (object with three keys corresponding to input props: `data`, `layout`, and `frames`) and the DOM node `graphDiv`",
  "Plotly-prop-onRelayout": "callback function invoked when relayout is triggered",
  "Plotly-prop-onLegendClick": "callback function invoked when legend item is clicked",
  "Plotly-prop-onLegendDoubleClick": "callback function invoked when legend item is double-clicked",
  "Plotly-prop-onSelected": "callback function invoked when elements are selected",
  "Plotly-prop-onShare": "callback function invoked when clicking on the \"Share\" button",
  "Plotly-description": "Plotly visualization.",
  "BarChart-prop-data": "object of value arrays",
  "BarChart-prop-variable": "variable to display",
  "BarChart-prop-group": "grouping variable",
  "BarChart-prop-stackBars": "when grouping, controls whether to stack bars on top of each other",
  "BarChart-prop-relative": "whether to calculate relative frequencies inside each group",
  "BarChart-prop-totalPercent": "whether to display overall bars as relative frequencies",
  "BarChart-prop-summary": "name of statistic to compute for `yvar` and to be displayed as bar height for each category",
  "BarChart-prop-horizontal": "whether to display bars horizontally",
  "BarChart-prop-xOrder": "either `total`, `category`, `min`, `max`, `mean`, or `median`",
  "BarChart-prop-direction": "how to order bars alongside x-axis (`ascending` or `descending`)",
  "BarChart-description": "Bar chart.",
  "BoxPlot-prop-data": "object of value arrays",
  "BoxPlot-prop-variable": "variable to display",
  "BoxPlot-prop-group": "one or two grouping variables",
  "BoxPlot-prop-orientation": "`vertical` or `horizontal` orientation",
  "BoxPlot-prop-overlayPoints": "controls whether to overlay points",
  "BoxPlot-description": "A box plot.",
  "ContourChart-prop-data": "object of value arrays for each variable",
  "ContourChart-prop-x": "x-axis variable",
  "ContourChart-prop-y": "y-axis variable",
  "ContourChart-prop-overlayPoints": "controls whether to overlay points for each observation",
  "ContourChart-prop-regressionMethod": "array containing `linear` and/or `smooth` to overlay a linear and/or smoothed regression line",
  "ContourChart-prop-smoothSpan": "smoothing span",
  "ContourChart-prop-onSelected": "callback invoked when points are selected with x, y values and the selected points",
  "ContourChart-description": "A contour chart.",
  "HeatMap-prop-data": "object of value arrays for each variable",
  "HeatMap-prop-x": "x-axis variable",
  "HeatMap-prop-y": "y-axis variable",
  "HeatMap-prop-overlayPoints": "controls whether to overlay points for each observation",
  "HeatMap-prop-regressionMethod": "array containing `linear` and/or `smooth` to overlay a linear and/or smoothed regression line",
  "HeatMap-prop-smoothSpan": "smoothing span",
  "HeatMap-prop-alternateColor": "controls whether to use an alternative color scheme for the heat map",
  "HeatMap-prop-commonXAxis": "controls whether to use a common x-axis when creating multiple heat maps per value of a grouping variable",
  "HeatMap-prop-commonYAxis": "controls whether to use a common y-axis when creating multiple heat maps per value of a grouping variable",
  "HeatMap-description": "A heat map for visualizing a relationship between two variables.",
  "Histogram-prop-data": "object of value arrays",
  "Histogram-prop-variable": "variable to display",
  "Histogram-prop-group": "grouping variable",
  "Histogram-prop-groupMode": "whether to overlay grouped histograms on top of each other (`Overlay`) or in separate plots next to each other (`Facets`)",
  "Histogram-prop-displayDensity": "controls whether to display density values instead of counts on the y-axis",
  "Histogram-prop-densityType": "when displaying densities, one can either overlay a parametric distribution (`Normal`, `Uniform`, or `Exponential`) or a non-parametric kernel density estimate (`Data-driven`)",
  "Histogram-prop-binStrategy": "binning strategy (`Automatic`, `Select # of bins`, or `Set bin width`)",
  "Histogram-prop-nBins": "custom number of bins",
  "Histogram-prop-nCols": "number of columns when displaying a facetted grouped histogram",
  "Histogram-prop-xbins": "object with `start`, `size`, and `end` properties governing binning behavior",
  "Histogram-description": "A histogram.",
  "LinePlot-prop-data": "object of value arrays for each variable",
  "LinePlot-prop-x": "x-axis variable",
  "LinePlot-prop-y": "y-axis variable",
  "LinePlot-prop-group": "grouping variable",
  "LinePlot-prop-showPoints": "controls whether to overlay points at each observation",
  "LinePlot-description": "A line plot.",
  "Map-description": "Description is missing.",
  "MosaicPlot-prop-data": "object of value arrays for each variable",
  "MosaicPlot-prop-variables": "array of variables to display",
  "MosaicPlot-prop-showColors": "controls whether to display colors showing significance",
  "MosaicPlot-prop-axisLabels": "grouping variable",
  "MosaicPlot-description": "A mosaic plot.",
  "PieChart-prop-data": "object of value arrays",
  "PieChart-prop-variable": "variable to display",
  "PieChart-prop-group": "grouping variable",
  "PieChart-prop-summaryVariable": "optional variable whose sum to display for each `variable` category",
  "PieChart-description": "A pie chart component that by default displays the counts of all categories from a chosen variable.",
  "QQPlot-prop-undefined": "difference between `a` and `b`\n/\nfunction ascending( a, b ) {\nreturn a - b;\n}\n\nexport function generateQQPlotConfig( y, variable ) {\nlet annotations;\nlet traces;\n\nconst len = y.length;\nconst yq = y.sort( ascending );\nconst lowerQuartile = qnorm( 0.25, 0, 1 );\nconst slope = ( qnorm( 0.75, 0, 1 ) - lowerQuartile ) / ( quantile( yq, 0.75 ) - quantile( yq, 0.25 ) );\nconst intercept = lowerQuartile - slope * quantile( yq, 0.25 );\n\nconst normalQuantiles = new Array( len );\nfor ( let i = 0; i < len - 1; i++ ) {\nnormalQuantiles[ i ] = qnorm( (i+1)/len, 0.0, 1.0 );\n}\nnormalQuantiles[ len-1 ] = qnorm( (len-1)/len, 0.0, 1.0 );\nconst linePoints = new Array( 2 );\nconst ymin = yq[ 0 ];\nconst ymax = yq[ yq.length-1 ];\nlinePoints[ 0 ] = intercept + slope * ymin;\nlinePoints[ 1 ] = intercept + slope * ymax;\ntraces = [\n{\ny: yq,\nx: normalQuantiles,\ntype: yq.length > 2000 ? 'scattergl' : 'scatter',\nmode: 'markers'\n},\n{\ny: [ ymin, ymax ],\nx: linePoints,\nmode: 'lines'\n}\n];\nconst layout = {\nannotations,\ntitle: i18n.t('Plotly:qqplot-title', { x: variable }),\nxaxis: {\ntitle: 'Theoretical Quantiles',\nrange: [ normalQuantiles[ 0 ] - 0.3, normalQuantiles[ normalQuantiles.length-1 ] + 0.3 ]\n},\nyaxis: {\ntitle: 'Sample Quantiles',\nrange: [ ymin - 1, ymax + 1 ]\n},\nshowlegend: false\n};\nreturn {\nlayout,\ndata: traces\n};\n}\n\n\n// MAIN //\n\nfunction QQPlot({ id, data, variable, action, onShare }) {\nconst config = generateQQPlotConfig( data[ variable ], variable );\nreturn (\n<Plotly\neditable\ndraggable\nid={id}\nfit\nmeta={action}\ndata={config.data}\nlayout={config.layout}\nonShare={onShare}\n/>\n);\n}\n\n\n// PROPERTIES //\n\nQQPlot.defaultProps = {};\n\nQQPlot.propTypes = {\ndata: PropTypes.object.isRequired,\nvariable: PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\n/**\nA normal distribution QQ plot.",
  "QQPlot-prop-a": null,
  "QQPlot-prop-b": null,
  "QQPlot-prop-data": "object of value arrays",
  "QQPlot-prop-variable": "variable to display",
  "QQPlot-description": "Comparator function used to sort values in ascending order.",
  "ScatterPlotMatrix-prop-data": "object of value arrays for each variable",
  "ScatterPlotMatrix-prop-variables": "array of variables to display in matrix",
  "ScatterPlotMatrix-prop-color": "categorical variable to map to color of points",
  "ScatterPlotMatrix-description": "A scatter plot matrix.",
  "ScatterPlot-prop-arr": "array of values",
  "ScatterPlot-prop-undefined": "minimum and maximum value\n/\nfunction minmax( arr ) {\nlet min = PINF;\nlet max = NINF;\nfor ( let i = 1; i < arr.length; i++ ) {\nif ( arr[ i ] < min ) {\nmin = arr[ i ];\n}\nif ( arr[ i ] > max ) {\nmax = arr[ i ];\n}\n}\nreturn [ min, max ];\n}\n\nfunction scale( arr, a, b ) {\nconst [ minimum, maximum ] = minmax( arr );\nconst range = maximum - minimum;\nconst out = new Array( arr.length );\nfor ( let i = 0; i < out.length; i++ ) {\nif ( !isNumber( arr[ i ] ) ) {\nout[ i ] = NaN;\n} else {\nout[ i ] = ( ( b - a ) * ( arr[ i ] - minimum ) / range ) + a;\n}\n}\nreturn out;\n}\n\nexport function generateScatterplotConfig({ data, xval, yval, text, color, type, size, regressionLine, regressionMethod, lineBy, smoothSpan }) {\nlet textValues;\nlet nColors;\nlet traces;\nlet colors;\nlet sizes;\nlet types;\nlet x;\nlet y;\n\nlet mode = 'markers';\nif ( text ) {\nmode += '+text';\n}\nconst nobs = data[ xval ].length;\nif ( color ) {\ncolors = data[ color ];\ncolors = colors.map( x => isUndefinedOrNull( x ) ? String( x ) : x );\n}\nif ( type ) {\ntypes = data[ type ];\ntypes = types.map( x => isUndefinedOrNull( x ) ? String( x ) : x );\n}\nif ( size ) {\nsizes = data[ size ];\n}\nif ( text ) {\ntextValues = data[ text ];\n}\nx = data[ xval ];\ny = data[ yval ];\n\nif ( color && type ) {\nconst uniqueColors = colors.slice();\nunique( uniqueColors );\nnColors = uniqueColors.length;\nconst uniqueTypes = types.slice();\nunique( uniqueTypes );\n\ntraces = [];\nconst xgrouped = groupBy( x, ( v, i ) => {\nreturn colors[ i ] + ':' + types[ i ];\n});\nconst ygrouped = groupBy( y, ( v, i ) => {\nreturn colors[ i ] + ':' + types[ i ];\n});\nlet texts;\nif ( text ) {\ntexts = groupBy( data[ text ], ( v, i ) => {\nreturn colors[ i ] + ':' + types[ i ];\n});\n}\nlet sizegrouped;\nif ( size ) {\nsizegrouped = groupBy( sizes, ( v, i ) => {\nreturn colors[ i ] + ':' + types[ i ];\n});\nsizegrouped = mapValues( sizegrouped, ( value ) => {\nreturn scale( value, 5.0, 10.0 );\n});\n}\nfor ( let i = 0; i < uniqueColors.length; i++ ) {\nfor ( let j = 0; j < uniqueTypes.length; j++ ) {\nconst grouping = uniqueColors[ i ] + ':' + uniqueTypes[ j ];\nconst trace = {\nx: xgrouped[ grouping ],\ny: ygrouped[ grouping ],\ntype: nobs > 2000 ? 'scattergl' : 'scatter',\nmode: mode,\nname: grouping,\nmarker: {\nsymbol: SYMBOLS[ j ],\nsize: size ? sizegrouped[ grouping ] : 5.0,\nautocolorscale: false,\ncolor: CAT20[ i ]\n}\n};\nif ( text ) {\ntrace.text = texts[ grouping ];\ntrace.textposition = 'bottom';\n}\ntraces.push( trace );\n}\n}\n}\nelse if ( type ) {\nconst groups = types.slice();\nunique( groups );\nconst xgrouped = group( x, types );\nconst ygrouped = group( y, types );\nlet texts;\nif ( text ) {\ntexts = group( textValues, types );\n}\ntraces = new Array( groups.length );\nfor ( let i = 0; i < groups.length; i++ ) {\ntraces[ i ] = {\nx: xgrouped[ groups[ i ] ],\ny: ygrouped[ groups[ i ] ],\ntype: nobs > 2000 ? 'scattergl' : 'scatter',\nmode: mode,\nname: groups[ i ],\nmarker: {\nsymbol: SYMBOLS[ i ],\nsize: size ? scale( group( sizes, data[ type ])[ groups[ i ] ], 5.0, 10.0 ) : 5.0,\nautocolorscale: false,\ncolor: 'rgba(0,0,0,1)'\n}\n};\nif ( text ) {\ntraces[ i ].text = texts[ groups[ i ] ];\ntraces[ i ].textposition = 'bottom';\n}\n}\n}\nelse if ( color ) {\nconst groups = colors.slice();\nunique( groups );\nnColors = groups.length;\nconst xgrouped = group( x, colors );\nconst ygrouped = group( y, colors );\nlet texts;\nif ( text ) {\ntexts = group( textValues, colors );\n}\ntraces = new Array( nColors );\nfor ( let i = 0; i < nColors; i++ ) {\ntraces[ i ] = {\nx: xgrouped[ groups[ i ] ],\ny: ygrouped[ groups[ i ] ],\ntype: nobs > 2000 ? 'scattergl' : 'scatter',\nmode: mode,\nname: groups[ i ],\nmarker: {\nsymbol: 'circle',\nsize: size ? scale( group( sizes, colors)[ groups[ i ] ], 5.0, 10.0 ) : 5.0,\nautocolorscale: false,\ncolor: CAT20[ i ]\n}\n};\nif ( text ) {\ntraces[ i ].text = texts[ groups[ i ] ];\ntraces[ i ].textposition = 'bottom';\n}\n}\n} else {\ntraces = [ {\nx: x,\ny: y,\ntype: nobs > 2000 ? 'scattergl' : 'scatter',\nmode: mode,\nname: i18n.t('Plotly:points'),\nmarker: {\nsymbol: 'circle',\nsize: size ? scale( data[ size ], 5.0, 10.0 ) : 5.0\n}\n} ];\nif ( text ) {\ntraces[ 0 ].text = textValues;\ntraces[ 0 ].textposition = 'bottom';\n}\n}\n\nif ( regressionLine ) {\nif ( lineBy ) {\nconst groups = data[ lineBy ].slice();\nunique( groups );\nconst xgrouped = {};\nconst ygrouped = {};\nfor ( let i = 0; i < groups.length; i++ ) {\nxgrouped[ groups[ i ] ] = [];\nygrouped[ groups[ i ] ] = [];\n}\nfor ( let i = 0; i < data[ lineBy ].length; i++ ) {\nconst group = data[ lineBy ][ i ];\nif ( !isUndefinedOrNull( group ) ) {\nif (\nisNumber( x[ i ] ) && isNumber( y[ i ] ) &&\n!isnan( x[ i ] ) && !isnan( y[ i ] )\n) {\nxgrouped[ group ].push( x[ i ] );\nygrouped[ group ].push( y[ i ] );\n}\n}\n}\nlet colorOffset = 0;\nif ( color && color !== lineBy ) {\ncolorOffset += nColors;\n}\nfor ( let i = 0; i < groups.length; i++ ) {\nconst xvals = xgrouped[ groups[ i ] ];\nconst yvals = ygrouped[ groups[ i ] ];\nlet predictedLinear;\nlet predictedSmooth;\nlet values;\nif ( xvals.length === 0 || yvals.length === 0 ) {\ncontinue;\n}\nif ( contains( regressionMethod, 'linear' ) ) {\nvalues = linspace( min( xvals ), max( xvals ), 100 );\nconst coefs = calculateCoefficients( xvals, yvals );\npredictedLinear = values.map( x => coefs[ 0 ] + coefs[ 1 ]*x );\ntraces.push({\nx: values,\ny: predictedLinear,\nmode: 'lines',\nname: groups[ i ],\ntype: 'line',\nline: {\ncolor: CAT20[ colorOffset+i ],\nwidth: 1.5\n}\n});\n}\nif ( contains( regressionMethod, 'smooth' ) ) {\nconst out = lowess( xvals, yvals, { 'f': smoothSpan } );\nvalues = out.x;\npredictedSmooth = out.y;\ntraces.push({\nx: values,\ny: predictedSmooth,\nmode: 'lines',\nname: groups[ i ],\ntype: 'line',\nline: {\ncolor: CAT20[ colorOffset+i ],\nwidth: 1.5\n}\n});\n}\n}\n} else {\nlet xvals = x;\nlet yvals = y;\nlet xc = [];\nlet yc = [];\nfor ( let j = 0; j < xvals.length; j++ ) {\nlet x = xvals[ j ];\nlet y = yvals[ j ];\nif (\nisNumber( x ) && isNumber( y ) &&\n!isnan( x ) && !isnan( y )\n) {\nxc.push( x );\nyc.push( y );\n}\n}\nxvals = xc;\nyvals = yc;\nlet predictedLinear;\nlet predictedSmooth;\nlet values;\nif ( contains( regressionMethod, 'linear' ) ) {\nvalues = linspace( min( xvals ), max( xvals ), 100 );\nconst coefs = calculateCoefficients( xvals, yvals );\npredictedLinear = values.map( x => coefs[ 0 ] + coefs[ 1 ]*x );\ntraces.push({\nx: values,\ny: predictedLinear,\ntext: `${roundn( coefs[ 0 ], -6 )} + x * ${roundn( coefs[ 1 ], -6 )}`, // eslint-disable-line i18next/no-literal-string\nmode: 'lines',\nname: i18n.t('Plotly:linear-fit'),\ntype: 'line'\n});\n}\nif ( contains( regressionMethod, 'smooth' ) ) {\nconst out = lowess( xvals, yvals, { 'f': smoothSpan } );\nvalues = out.x;\npredictedSmooth = out.y;\ntraces.push({\nx: values,\ny: predictedSmooth,\nmode: 'lines',\nname: i18n.t('Plotly:smoothed-fit'),\ntype: 'line'\n});\n}\n}\n}\nreturn {\ndata: traces,\nlayout: {\nhovermode: 'closest',\nxaxis: {\ntitle: xval\n},\nyaxis: {\ntitle: yval\n},\nlegend: {\ntraceorder: 'normal',\nfont: {\nfamily: 'sans-serif',\nsize: 10,\ncolor: '#000'\n},\nbordercolor: '#E2E2E2',\nborderwidth: 2\n},\ntitle: `${yval} ${i18n.t('Plotly:vs')} ${xval}`\n}\n};\n}\n\n\n// MAIN //\n\nfunction ScatterPlot({ id, data, xval, yval, text, color, type, size, regressionLine, regressionMethod, lineBy, smoothSpan, action, onShare, onSelected }) {\nconst config = generateScatterplotConfig({ data, xval, yval, text, color, type, size, regressionLine, regressionMethod, lineBy, smoothSpan });\nreturn (\n<Plotly\neditable\ndraggable\nfit\nid={id}\nmeta={action}\ndata={config.data}\nlayout={config.layout}\nonShare={onShare}\nonSelected={( selected ) => {\nif ( onSelected ) {\nonSelected({ x: xval, y: yval }, selected );\n}\n}}\n/>\n);\n}\n\n\n// PROPERTIES //\n\nScatterPlot.defaultProps = {\ntext: null,\ncolor: null,\ntype: null,\nsize: null,\nlineBy: null,\nregressionLine: false,\nregressionMethod: [ 'linear' ],\nsmoothSpan: 0.66\n};\n\nScatterPlot.propTypes = {\ndata: PropTypes.object.isRequired,\nxval: PropTypes.string.isRequired,\nyval: PropTypes.string.isRequired,\ntext: PropTypes.string,\ncolor: PropTypes.string,\ntype: PropTypes.string,\nsize: PropTypes.string,\nregressionLine: PropTypes.bool,\nregressionMethod: PropTypes.arrayOf( PropTypes.oneOf([ 'linear', 'smooth' ]) ),\nlineBy: PropTypes.string,\nsmoothSpan: PropTypes.number\n};\n\n\n// EXPORTS //\n\n/**\nA scatter plot.",
  "ScatterPlot-prop-data": "object of value arrays for each variable",
  "ScatterPlot-prop-xval": "variable to display on the x-axis",
  "ScatterPlot-prop-yval": "variable to display on the y-axis",
  "ScatterPlot-prop-text": "texts to be displayed next to each point",
  "ScatterPlot-prop-type": "categorical variable to map to the displayed symbols",
  "ScatterPlot-prop-size": "quantitative variable to map to the size of the points",
  "ScatterPlot-prop-color": "categorical variable to map to color of points",
  "ScatterPlot-prop-regressionLine": "controls whether to overlay regression line(s)",
  "ScatterPlot-prop-regressionMethod": "`linear` and/or `smooth` to display linear regression and smoothed LOWESS regression line",
  "ScatterPlot-prop-smoothSpan": "smoothing span parameter for `smooth` regression line",
  "ScatterPlot-prop-lineBy": "display separate regression line for each category of specified categorical variable",
  "ScatterPlot-description": "Computes the minimum and maximum value of an array.",
  "ViolinPlot-prop-data": "object of value arrays",
  "ViolinPlot-prop-variable": "variable to display",
  "ViolinPlot-prop-group": "grouping variable",
  "ViolinPlot-prop-showBox": "controls whether to display a box plot inside",
  "ViolinPlot-description": "A violin plot.",
  "Polaroid-prop-image": "the URL of the image to be displayed in the polaroid frame",
  "Polaroid-prop-draggable": "controls whether one can drag the polaroid around the screen",
  "Polaroid-prop-onClick": "event handler invoked when image is clicked (receives the id of the Polaroid as parameter)",
  "Polaroid-prop-showPin": "shows a pin",
  "Polaroid-prop-width": "polaroid width (in px)",
  "Polaroid-prop-style": "CSS inline styles",
  "Polaroid-description": "A component displaying an image in the style of a polaroid.",
  "Preload-prop-image": "the image or the array of images that should be preloaded",
  "Preload-description": "Preload resources to avoid stuttering loading times.",
  "ProportionsSurvey-prop-question": "the question to be displayed",
  "ProportionsSurvey-prop-allowMultipleAnswers": "controls whether one wishes to allow students to answer the survey multiple times",
  "ProportionsSurvey-prop-anonymous": "controls whether student answers are anonymized",
  "ProportionsSurvey-prop-disabled": "controls whether the survey is deactivated",
  "ProportionsSurvey-prop-nElements": "number of elements that shall be weighed",
  "ProportionsSurvey-prop-legends": "legend labels that describe the options to be weighed",
  "ProportionsSurvey-prop-group": "group display heading",
  "ProportionsSurvey-prop-precision": "displayed precision of proportion values",
  "ProportionsSurvey-prop-step": "the step of the arrows seen when hovering the cursor above the input box",
  "ProportionsSurvey-prop-colors": "array of colors for the pie chart components. If not defined, a custom color scale will be used",
  "ProportionsSurvey-prop-personalHeight": "proportions input height for individual student (in px)",
  "ProportionsSurvey-prop-personalInnerRadius": "inner radius of proportions pie chart for individual student (in px)",
  "ProportionsSurvey-prop-groupHeight": "proportions input height for group display (in px)",
  "ProportionsSurvey-prop-groupInnerRadius": "inner radius of proportions pie chart for group display (in px)",
  "ProportionsSurvey-prop-margin": "proportion input margin (in px)",
  "ProportionsSurvey-prop-onSubmit": "callback function invoked once students submits an answer",
  "ProportionsSurvey-description": "Component that allows a group of people to vote on the weights and importance of given options.",
  "undefined-prop-currentRole": "current user role (used in editor)",
  "undefined-prop-session": "active session",
  "QRCode-prop-text": "text to encode in QR code (defaults to lesson URL if not set)",
  "QRCode-prop-scale": "number of pixels per modules (black dots)",
  "QRCode-prop-width": "width in pixels; takes precedence over `scale` property",
  "QRCode-prop-height": "height in pixels; takes precedence over `scale` property",
  "QRCode-prop-center": "boolean controlling whether to center the QR code",
  "QRCode-prop-showText": "boolean determining whether to show the text encoded in the QR code",
  "QRCode-prop-style": "CSS inline styles",
  "QRCode-description": "QR Code.",
  "FreeTextQuestion-prop-question": "the question displayed at the top of the free text question component",
  "FreeTextQuestion-prop-hints": "hints providing guidance on how to answer the question",
  "FreeTextQuestion-prop-hintPlacement": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
  "FreeTextQuestion-prop-feedback": "controls whether to display feedback buttons",
  "FreeTextQuestion-prop-solution": "a model answer to the problem",
  "FreeTextQuestion-prop-instantSolution": "whether one can toggle the display of the model answer immediately",
  "FreeTextQuestion-prop-rows": "number of rows of the text field for students to type their answers",
  "FreeTextQuestion-prop-chat": "controls whether to enable group chat should for the question",
  "FreeTextQuestion-prop-resizable": "controls whether the text area should be resizable",
  "FreeTextQuestion-prop-placeholder": "placeholder text displayed before user has entered any text",
  "FreeTextQuestion-prop-disableSubmitNotification": "controls whether to disable submission notifications",
  "FreeTextQuestion-prop-submissionMsg": "notification displayed when the learner first submits his answer",
  "FreeTextQuestion-prop-resubmissionMsg": "notification displayed for all submissions after the first one",
  "FreeTextQuestion-prop-provideFeedback": "indicates whether feedback including the correct answer should be displayed after learners submit their answers",
  "FreeTextQuestion-prop-maxlength": "maximum allowed number of characters",
  "FreeTextQuestion-prop-voiceID": "voice control identifier",
  "FreeTextQuestion-prop-until": "time until students should be allowed to submit answers",
  "FreeTextQuestion-prop-points": "maximum number of points awarded in grading",
  "FreeTextQuestion-prop-className": "class name",
  "FreeTextQuestion-prop-style": "CSS inline styles",
  "FreeTextQuestion-prop-onChange": "callback invoked every time the text area value changes; receives the current text as its sole argument",
  "FreeTextQuestion-prop-onSubmit": "callback invoked when user submits an answer; receives the submitted text as its sole argument",
  "FreeTextQuestion-description": "An ISLE component for questions where answers by students should be supplied in the form of free text.",
  "ImageQuestion-prop-question": "question for which the student has to bring the available `options` into the correct order",
  "ImageQuestion-prop-hints": "hints providing guidance on how to answer the question",
  "ImageQuestion-prop-hintPlacement": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
  "ImageQuestion-prop-feedback": "controls whether to display feedback buttons",
  "ImageQuestion-prop-chat": "controls whether the element should have an integrated chat",
  "ImageQuestion-prop-sketchpad": "properties to be passed to <Sketchpad /> component; to render the sketchpad, pass in at least an empty object `{}`",
  "ImageQuestion-prop-solution": "image URL of model solution",
  "ImageQuestion-prop-until": "time until students should be allowed to submit answers",
  "ImageQuestion-prop-disableSubmitNotification": "controls whether a notification should be displayed after submitting an image",
  "ImageQuestion-prop-points": "maximum number of points awarded in grading",
  "ImageQuestion-prop-className": "class name",
  "ImageQuestion-prop-style": "CSS inline styles",
  "ImageQuestion-prop-onChange": "callback  which is triggered after dragging an element; has two parameters: a `boolean` indicating whether the elements were placed in the correct order and and `array` with the current ordering",
  "ImageQuestion-prop-onSubmit": "callback invoked when answer is submitted; has as a sole parameter a `boolean` indicating whether the elements were placed in the correct order",
  "ImageQuestion-description": "A question that asks the user to upload an image.",
  "MatchListQuestion-prop-question": "question to be displayed at the top of the match list question component",
  "MatchListQuestion-prop-elements": "an `array` holding the correct pairs displayed at the top of the free text question component. Each `array` element must be an `object` with `a` and `b` properties; supply elements with only `a` or `b` properties to add distractor answers",
  "MatchListQuestion-prop-hints": "hints providing guidance on how to answer the question",
  "MatchListQuestion-prop-hintPlacement": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
  "MatchListQuestion-prop-provideFeedback": "indicates whether the solution should be accessible after learners submit their answers",
  "MatchListQuestion-prop-feedback": "controls whether to display feedback buttons",
  "MatchListQuestion-prop-chat": "controls whether the element should have an integrated chat",
  "MatchListQuestion-prop-colorScale": "if set, the supplied colors are used for the tiles",
  "MatchListQuestion-prop-shuffle": "specifies whether to shuffle the `left`, `right`, or `both` columns whose elements have to be matched",
  "MatchListQuestion-prop-disableSubmitNotification": "controls whether to disable submission notifications",
  "MatchListQuestion-prop-submissionMsg": "notification displayed when the learner first submits his answer",
  "MatchListQuestion-prop-resubmissionMsg": "notification displayed for all submissions after the first one",
  "MatchListQuestion-prop-maxlength": "maximum allowed number of characters",
  "MatchListQuestion-prop-until": "time until students should be allowed to submit answers",
  "MatchListQuestion-prop-points": "maximum number of points awarded in grading",
  "MatchListQuestion-prop-className": "class name",
  "MatchListQuestion-prop-style": "CSS inline styles",
  "MatchListQuestion-prop-onSubmit": "callback invoked when students submits an answer",
  "MatchListQuestion-description": "An ISLE component that renders a question in which the learner has to match elements from two lists with each other in the correct way.",
  "MultipleChoiceMatrix-prop-questions": "an array of questions",
  "MultipleChoiceMatrix-prop-answers": "an array of answers",
  "MultipleChoiceMatrix-prop-title": "title to be displayed on top of the question matrix",
  "MultipleChoiceMatrix-prop-type": "question type (`radio` corresponds to \"Select one\", `checkbox` to \"Select all that apply\")",
  "MultipleChoiceMatrix-prop-solution": "boolean matrix the element of which indicate whether the respective radio button or checkbox should be ticked",
  "MultipleChoiceMatrix-prop-disableSubmitNotification": "controls whether to disable submission notifications",
  "MultipleChoiceMatrix-prop-onChange": "callback invoked when the value of a checkbox / radio button changes; invoked with the two-dimensional boolean array of the active status for each answer option",
  "MultipleChoiceMatrix-prop-onSubmit": "callback invoked when user clicks the \"Submit\" button; invoked with the two-dimensional boolean array of the active status for each answer option",
  "MultipleChoiceMatrix-description": "An ISLE component that renders a matrix of multiple choice questions with the same answers.",
  "MultipleChoiceQuestion-prop-question": "the question displayed at the top of the multiple choice component",
  "MultipleChoiceQuestion-prop-solution": "number denoting which answer is correct or an `array` of the correct answer numbers in case the learner should be able to select multiple answers",
  "MultipleChoiceQuestion-prop-answers": "an `array` of answer objects. Each answer should be an object with `content` and `explanation` fields, which denote the displayed answer option and an explanation visible after the question has been submitted to explain why the answer is correct or incorrect",
  "MultipleChoiceQuestion-prop-hints": "hints providing guidance on how to answer the question",
  "MultipleChoiceQuestion-prop-hintPlacement": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
  "MultipleChoiceQuestion-prop-feedback": "controls whether to display feedback buttons",
  "MultipleChoiceQuestion-prop-disabled": "controls whether the question is disabled",
  "MultipleChoiceQuestion-prop-chat": "controls whether the element should have an integrated chat",
  "MultipleChoiceQuestion-prop-provideFeedback": "either `full`, `incremental`, or `none`. If `full`, feedback including the correct answer is displayed after learners submit their answers; if `incremental`, feedback is only displayed for the selected answer; if `none`, no feedback is returned",
  "MultipleChoiceQuestion-prop-disableSubmitNotification": "controls whether to disable submission notifications",
  "MultipleChoiceQuestion-prop-displaySolution": "controls whether the solution is displayed upfront",
  "MultipleChoiceQuestion-prop-voiceID": "voice control identifier",
  "MultipleChoiceQuestion-prop-until": "time until students should be allowed to submit answers",
  "MultipleChoiceQuestion-prop-points": "maximum number of points awarded in grading",
  "MultipleChoiceQuestion-prop-style": "CSS inline styles",
  "MultipleChoiceQuestion-prop-onChange": "callback invoked every time the selected answer changes; receives the index of the selected question as its sole argument (or an array in case the question is of type \"Choose all that apply\")",
  "MultipleChoiceQuestion-prop-onSubmit": "callback invoked after an answer is submitted",
  "MultipleChoiceQuestion-description": "An ISLE component that renders a multiple choice question. It supports the case where the learner has to select a single answer and when there might be multiple correct answers and all correct ones must be picked.",
  "NumberQuestion-prop-question": "number question",
  "NumberQuestion-prop-hints": "hints providing guidance on how to answer the question",
  "NumberQuestion-prop-hintPlacement": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
  "NumberQuestion-prop-feedback": "controls whether to display feedback buttons",
  "NumberQuestion-prop-solution": "a numeric answer to the problem (or multiple correct answers if an array is supplied)",
  "NumberQuestion-prop-digits": "number of digits for which the answer supplied by the student must match the solution to be considered correct. Set to 0 to match as an integer. If set to null it will search for an exact match.",
  "NumberQuestion-prop-max": "maximum allowed input value",
  "NumberQuestion-prop-min": "minimum allowed input value",
  "NumberQuestion-prop-defaultValue": "pre-selected value of number input",
  "NumberQuestion-prop-provideFeedback": "indicates whether feedback including the correct answer should be displayed after learners submit their answers",
  "NumberQuestion-prop-nTries": "after how many tries feedback should be supplied (if `provideFeedback` is `true`)",
  "NumberQuestion-prop-chat": "controls whether the element should have an integrated chat",
  "NumberQuestion-prop-disableSubmitNotification": "controls whether to disable submission notifications",
  "NumberQuestion-prop-until": "time until students should be allowed to submit answers",
  "NumberQuestion-prop-points": "maximum number of points awarded in grading",
  "NumberQuestion-prop-style": "CSS inline styles",
  "NumberQuestion-prop-onChange": "callback  which is triggered after the value of the number field changes; receives the current value as its sole argument",
  "NumberQuestion-prop-onSubmit": "callback invoked when answer is submitted; has as first parameter a `boolean` indicating whether the answer was correctly answered (if applicable, `null` otherwise) and the supplied answer as the second parameter",
  "NumberQuestion-description": "A number question component.",
  "OrderQuestion-prop-question": "question for which the student has to bring the available `options` into the correct order",
  "OrderQuestion-prop-options": "an array of texts which the student has to bring into the correct ordering (assumed to be the supplied order)",
  "OrderQuestion-prop-provideFeedback": "controls whether to show a notification displaying whether the submitted answer is correct or not",
  "OrderQuestion-prop-hints": "hints providing guidance on how to answer the question",
  "OrderQuestion-prop-hintPlacement": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
  "OrderQuestion-prop-feedback": "controls whether to display feedback buttons",
  "OrderQuestion-prop-chat": "controls whether the element should have an integrated chat",
  "OrderQuestion-prop-disableSubmitNotification": "controls whether to disable submission notifications",
  "OrderQuestion-prop-failureMsg": "message to be displayed when student submits a wrong answer",
  "OrderQuestion-prop-successMsg": "message to be displayed when student submits the correct answer",
  "OrderQuestion-prop-until": "time until students should be allowed to submit answers",
  "OrderQuestion-prop-points": "maximum number of points awarded in grading",
  "OrderQuestion-prop-style": "CSS inline styles",
  "OrderQuestion-prop-onChange": "callback  which is triggered after dragging an element; has two parameters: a `boolean` indicating whether the elements were placed in the correct order and and `array` with the current ordering",
  "OrderQuestion-prop-onSubmit": "callback invoked when answer is submitted; has as a sole parameter a `boolean` indicating whether the elements were placed in the correct order",
  "OrderQuestion-description": "An order question component that asks student to bring a collection of elements into the correct order.",
  "QuestionForm-prop-buttonLabel": "label of the submit button",
  "QuestionForm-prop-onSubmit": "callback invoked when the submit button is clicked",
  "QuestionForm-description": "A form component combining different question components together with a single submission button.",
  "Quiz-prop-questions": "array of questions from which questions will be randomly selected",
  "Quiz-prop-count": "number of questions to include in the quiz",
  "Quiz-prop-confidence": "whether to display a Likert scale asking for the confidence of the user's answer",
  "Quiz-prop-forceConfidence": "controls whether a user has to supply a confidence level before moving to the next question",
  "Quiz-prop-skippable": "controls whether questions in  the quiz are skippable",
  "Quiz-prop-footerNodes": "array of nodes to be displayed in the footer of each question",
  "Quiz-prop-nextLabel": "label of button to advance to next question",
  "Quiz-prop-showFinishButton": "controls whether to display button to finish quiz and jump directly to results page",
  "Quiz-prop-finishLabel": "label of button to finish quiz",
  "Quiz-prop-provideFeedback": "controls whether to show students feedback on correctness of their answers after quiz completion",
  "Quiz-prop-active": "controls whether the timer for the quiz is active",
  "Quiz-prop-duration": "duration of the quiz (in minutes); once time is up, the summary page will be displayed",
  "Quiz-prop-downloadButton": "controls whether to display a button for downloading the responses",
  "Quiz-prop-onFinished": "callback invoked when the quiz is finished and the results page is displayed",
  "Quiz-prop-onSubmit": "callback invoked when user submits an answer",
  "Quiz-description": "A quiz component displaying a sequence of question components.",
  "RangeQuestion-prop-question": "displayed question",
  "RangeQuestion-prop-solution": "two-element array containing the endpoints of the correct range",
  "RangeQuestion-prop-hints": "hints providing guidance on how to answer the question",
  "RangeQuestion-prop-hintPlacement": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
  "RangeQuestion-prop-feedback": "controls whether to display feedback buttons",
  "RangeQuestion-prop-chat": "controls whether the element should have an integrated chat",
  "RangeQuestion-prop-digits": "number of digits that have to match between solution and user-supplied answer. If not given or set to null, the component checks for strict equality. If set to 0, checks for integer equality",
  "RangeQuestion-prop-max": "maximum input value",
  "RangeQuestion-prop-min": "minimum input value",
  "RangeQuestion-prop-provideFeedback": "indicates whether feedback including the correct answer should be displayed after learners submit their answers",
  "RangeQuestion-prop-allowMultipleAnswers": "controls whether one can submit multiple answers",
  "RangeQuestion-prop-until": "time until students should be allowed to submit answers",
  "RangeQuestion-prop-points": "maximum number of points awarded in grading",
  "RangeQuestion-prop-style": "CSS inline styles",
  "RangeQuestion-prop-onChangeUpper": "callback triggered after the upper bound is changed by the user",
  "RangeQuestion-prop-onChangeLower": "callback triggered after the lower bound is changed by the user",
  "RangeQuestion-prop-onSubmit": "callback invoked when answer is submitted; has as first parameter a `boolean` indicating whether the answer was correctly answered (if applicable, `null` otherwise) and the supplied answer as the second parameter",
  "RangeQuestion-description": "A range question component that asks students to supply a lower and upper end point.",
  "SelectQuestionMatrix-prop-question": "question to be displayed at the top of the select question matrix",
  "SelectQuestionMatrix-prop-cols": "column labels",
  "SelectQuestionMatrix-prop-options": "object with key-value pairs with keys having the form `row:col`, e.g. `0:0`, `0:1`, `1:0` etc., and their corresponding values being arrays of the possible answer choices for the individual select questions",
  "SelectQuestionMatrix-prop-solution": "solution object with key-value pairs with keys having the form `row:col`, e.g. `0:0`, `0:1`, `1:0` etc., and their corresponding values being the index of the correct answer element from the respective `options` array",
  "SelectQuestionMatrix-prop-hints": "hints providing guidance on how to answer the question",
  "SelectQuestionMatrix-prop-hintPlacement": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
  "SelectQuestionMatrix-prop-feedback": "controls whether to display feedback buttons",
  "SelectQuestionMatrix-prop-provideFeedback": "whether to provide `none` feedback at all, `individual` feedback on the submitted answer(s), or `overall` feedback for all questions",
  "SelectQuestionMatrix-prop-allowIncomplete": "whether to allow submissions without a selection made in each select box",
  "SelectQuestionMatrix-prop-nTries": "after how many tries no further answers are accepted (if `provideFeedback` is not `none`)",
  "SelectQuestionMatrix-prop-failureMsg": "notification text displayed upon submitting incorrect answers",
  "SelectQuestionMatrix-prop-successMsg": "notification text displayed upon submitting correct answers",
  "SelectQuestionMatrix-prop-chat": "controls whether the element should have an integrated chat",
  "SelectQuestionMatrix-prop-className": "class name",
  "SelectQuestionMatrix-prop-style": "CSS inline styles",
  "SelectQuestionMatrix-prop-onSubmit": "callback function invoked upon submission with the answers as a first and a boolean indicating correctness as second parameter",
  "SelectQuestionMatrix-description": "A question with an answer consisting of multiple select boxes.",
  "SelectQuestion-prop-question": "question for which the student has to select one of the available answer options",
  "SelectQuestion-prop-options": "available answer options from which the student can select",
  "SelectQuestion-prop-solution": "index of solution element in `options`",
  "SelectQuestion-prop-preselected": "index of preselected answer option",
  "SelectQuestion-prop-inline": "controls whether the component is rendered inline or not",
  "SelectQuestion-prop-hints": "hints providing guidance on how to answer the question",
  "SelectQuestion-prop-hintPlacement": "placement of the hints (either `top`, `left`, `right`, or `bottom`)",
  "SelectQuestion-prop-feedback": "controls whether to display feedback buttons",
  "SelectQuestion-prop-chat": "controls whether the element should have an integrated chat",
  "SelectQuestion-prop-provideFeedback": "indicates whether feedback including the correct answer should be displayed after learners submit their answers",
  "SelectQuestion-prop-failureMsg": "message to be displayed when student selects a wrong answer",
  "SelectQuestion-prop-successMsg": "message to be displayed when student selects the correct answer",
  "SelectQuestion-prop-points": "maximum number of points awarded in grading",
  "SelectQuestion-prop-style": "CSS inline styles",
  "SelectQuestion-prop-onChange": "callback  which is triggered after the submit action",
  "SelectQuestion-prop-onSubmit": "callback invoked when answer is submitted; has as first parameter a `boolean` indicating whether the answer was correctly answered (if applicable, `null` otherwise) and the supplied answer as the second parameter",
  "SelectQuestion-description": "A select question component.",
  "RHelp-prop-func": "name of the `R function` for which to open the documentation. If not supplied, the content of the `RHelp` tag is assumed to be equal to the name of the function",
  "RHelp-prop-library": "name of the R package in which the function resides",
  "RHelp-prop-visible": "controls whether the help modal window should be opened at startup",
  "RHelp-description": "Make words pull up R documentation in a modal window when clicked.",
  "ROutput-prop-code": "R code used to evaluate",
  "ROutput-prop-libraries": "R libraries that should be loaded automatically when the input `code` is executed",
  "ROutput-prop-prependCode": "R code (or `array` of code blocks) to be prepended to the code stored in `code` when evaluating",
  "ROutput-prop-onResult": "callback invoked with `error` (`null` if operation was successful) and `result` holding R output",
  "ROutput-prop-onPlots": "callback invoked with any generated plots",
  "ROutput-description": "Component for rendering R output inside an ISLE lesson.",
  "RPlot-prop-code": "R code to generate the plot",
  "RPlot-prop-width": "width of the plot (in px)",
  "RPlot-prop-height": "height of the plot (in px)",
  "RPlot-prop-draggable": "controls whether the plot should be draggable",
  "RPlot-prop-fileType": "file type of the plot (`png` or `svg`)",
  "RPlot-prop-libraries": "R libraries that should be loaded automatically when the input `code` is executed",
  "RPlot-prop-prependCode": "`string` or an `array` of R code snippets to be prepended to the code stored in `code` when evaluating",
  "RPlot-prop-meta": "plot meta-information",
  "RPlot-prop-className": "class name",
  "RPlot-prop-onDone": "callback invoked with `err`, `img` and `body` arguments once a plot is created",
  "RPlot-description": "Component for rendering an R plot inside an ISLE lesson.",
  "RShell-prop-code": "R code to be evaluated",
  "RShell-prop-solution": "for programming questions, R code `string` representing the official solution for the problem",
  "RShell-prop-hints": "for programming questions, an array of hints providing guidance on how to approach the problem",
  "RShell-prop-addPreceding": "if set to true, the shell will evaluate all the code from the current component and all previous ones occurring in the lesson",
  "RShell-prop-libraries": "R libraries that should be loaded automatically when the input `code` is executed",
  "RShell-prop-precompute": "controls whether the default code should be executed once the component has mounted",
  "RShell-prop-prependCode": "R code `string` (or `array` of R code blocks) to be prepended to the code stored in `code` when evaluating",
  "RShell-prop-chat": "controls whether group chat functionality should be enabled",
  "RShell-prop-disabled": "controls whether to disable all user inputs and make the code block static",
  "RShell-prop-lines": "number of lines to display",
  "RShell-prop-resettable": "controls whether to display a reset button for restoring the default code input",
  "RShell-prop-style": "CSS inline styles",
  "RShell-prop-onChange": "callback invoked whenever the text field input changes",
  "RShell-prop-onEvaluate": "callback invoked whenever the `Evaluate` button is clicked",
  "RShell-prop-onResult": "callback invoked whenever the result of a code execution is obtained from the cloud. The result `string` is passed as the only argument to the callback function",
  "RShell-description": "An interactive R Shell that can be used to execute R commands in the cloud using [OpenCPU](https://www.opencpu.org/).",
  "RTable-prop-code": "R code returning a data.frame containing the data to be displayed in the table",
  "RTable-prop-libraries": "R libraries that should be loaded automatically when the input `code` is executed",
  "RTable-prop-prependCode": "R code `string` (or `array` of R code blocks) to be prepended to the code stored in `code` when evaluating",
  "RTable-prop-width": "width (between 0 and 1)",
  "RTable-description": "Component for rendering a R data frame or matrix in a tabular display.",
  "RandomVideo-prop-videos": "video URLs",
  "RandomVideo-description": "Displays a random video from a list of videos.",
  "undefined-prop-onChange": "callback invoked when the data selection is changed; called with the current period (object with `from` and `to` properties)",
  "Reaction-prop-actionID": "ID of component to watch",
  "Reaction-prop-show": "hash table of components to display given the different responses (if no `key` matches the response, the value corresponding to the `default` key will be displayed if set) or a function that returns a component to display (sole argument of function is the latest result)",
  "Reaction-description": "Shows different components depending on user actions.",
  "Recorder-prop-audio": "indicates whether audio should be recorded",
  "Recorder-prop-camera": "indicates whether webcam should be recorded",
  "Recorder-prop-screen": "indicates whether the screen should be captured",
  "Recorder-prop-autostart": "indicates whether recording should start immediately",
  "Recorder-prop-downloadable": "indicates whether users should be able to download the recording",
  "Recorder-prop-uploadable": "indicates whether users should be able to upload the recording to the server",
  "Recorder-prop-bitsPerSecond": "bits per second",
  "Recorder-prop-voiceID": "voice control identifier",
  "Recorder-prop-style": "CSS inline styles",
  "Recorder-description": "An ISLE component for recording audio, screen and video.",
  "Revealer-prop-message": "message to be displayed when content is hidden",
  "Revealer-prop-show": "controls whether to initially display child elements",
  "Revealer-description": "An ISLE component that instructors may use to selectively reveal or hide children content to all students during class.",
  "Runner-prop-active": "controls whether the runner should be active. Upon activation, the `onEvaluate` function is called in the given interval (or once)",
  "Runner-prop-interval": "number of milliseconds between invocations of `onEvaluate`. If no interval is set, the function is only invoked once",
  "Runner-prop-onEvaluate": "function to be invoked",
  "Runner-description": "The runner component will execute a supplied function either once or at a given interval.",
  "ScrollingText-prop-list": "list of texts to be displayed",
  "ScrollingText-prop-loop": "indicates whether the process shall be displayed infinitely",
  "ScrollingText-prop-direction": "the direction of the text flow (either `left`, `right`, `up`, `down`, `tracking`, `focus`, or `swirl`)",
  "ScrollingText-prop-still": "the time the text remains still (in seconds)",
  "ScrollingText-prop-interval": "the interval between the calls (in seconds)",
  "ScrollingText-prop-inTime": "time of the entrance effect (in seconds)",
  "ScrollingText-prop-outTime": "time of the exit effect (in seconds)",
  "ScrollingText-prop-className": "class name",
  "ScrollingText-prop-style": "CSS styles of the text",
  "ScrollingText-description": "A dynamic background component that cycles through a list of texts  at a specified interval.",
  "Seal-prop-active": "controls whether seal is active or grayed out",
  "Seal-prop-scale": "object size (if not explicitly set, the seal is not rescaled)",
  "Seal-prop-title": "seal title",
  "Seal-prop-lower": "the lower text",
  "Seal-prop-lowerArc": "the arc for the lower text",
  "Seal-prop-upper": "the upper text",
  "Seal-prop-upperArc": "the arc for the upper text",
  "Seal-prop-style": "the style for the element",
  "Seal-prop-innerStyle": "the style for the inner circle",
  "Seal-prop-noOrnaments": "prevents rendering of the ornaments",
  "Seal-prop-removable": "controls whether the note is removed when clicked",
  "Seal-prop-onClick": "callback function invoked when the note is clicked",
  "Seal-description": "An approval seal.",
  "ShapedForm-prop-image": "the background image url",
  "ShapedForm-prop-svg": "the svg background image url",
  "ShapedForm-prop-margin": "the margin in regards to the floating text, in pixels. Default: 10",
  "ShapedForm-prop-style": "the style of the object, it can hold any css including animations",
  "ShapedForm-prop-onClick": "event handler invoked when image is clicked",
  "ShapedForm-description": "A component that allows the display of shapes, triggered by images with alpha channel.",
  "ShapedImage-prop-background": "if set the component can hold and display child elements",
  "ShapedImage-prop-src": "the image url",
  "ShapedImage-prop-margin": "the margin in regards to the floating text, in pixels. Default: 10",
  "ShapedImage-prop-style": "the style of the object, it can hold any css including animations",
  "ShapedImage-prop-threshold": "alpha threshold, number between 0 and 1",
  "ShapedImage-prop-onClick": "event handler invoked when image is clicked",
  "ShapedImage-description": "A component that allows the display of shapes, triggered by images with alpha channel.",
  "Sketchpad-prop-autoSave": "controls whether the editor should save the current text to the local storage of the browser at a given time interval",
  "Sketchpad-prop-feedbackButtons": "controls whether to display feedback buttons on each slide",
  "Sketchpad-prop-intervalTime": "time between auto saves",
  "Sketchpad-prop-hideInputButtons": "controls whether to hide drawing and text input buttons",
  "Sketchpad-prop-hideNavigationButtons": "controls whether to hide buttons for navigating between pages",
  "Sketchpad-prop-hideSaveButtons": "controls whether to hide the save buttons",
  "Sketchpad-prop-hideTransmitButtons": "controls whether to hide buttons for transmitting user actions",
  "Sketchpad-prop-brushSize": "size of the brush to paint with",
  "Sketchpad-prop-color": "color of the brush and texts",
  "Sketchpad-prop-canvasWidth": "width of the canvas element (in px)",
  "Sketchpad-prop-canvasHeight": "height of the canvas element (in px)",
  "Sketchpad-prop-dynamicallyHideButtons": "controls whether to start hiding buttons when toolbar width is not sufficient (otherwise a new line will be started)",
  "Sketchpad-prop-fullscreen": "controls whether to automatically resize the canvas to the width and height of the browser window",
  "Sketchpad-prop-fill": "if `horizontal`, fill all available horizontal space when drawing a PDF; if `vertical`, all vertical space is used to prevent y-axis overflow",
  "Sketchpad-prop-disabled": "whether to make the component read-only and forbid drawing on the sketchpad",
  "Sketchpad-prop-fontFamily": "font family",
  "Sketchpad-prop-fontSize": "font size",
  "Sketchpad-prop-nodes": "components to be rendered on top of specified slides; `keys` should correspond to page numbers, `values` to the components",
  "Sketchpad-prop-noPages": "initial number of pages",
  "Sketchpad-prop-pdf": "link to PDF file for baked-in page backgrounds",
  "Sketchpad-prop-showTutorial": "show a tutorial for the sketchpad",
  "Sketchpad-prop-transmitOwner": "whether owner actions should be transmitted to other users in real-time",
  "Sketchpad-prop-groupMode": "controls whether all user's actions are transmitted to everyone else",
  "Sketchpad-prop-voiceID": "voice control identifier",
  "Sketchpad-prop-style": "CSS inline styles",
  "Sketchpad-prop-onChange": "callback invoked whenever a new line element is drawn",
  "Sketchpad-description": "A drawing sketchpad for note taking on lecture slides or empty pages.",
  "Slider-prop-title": "title for the slideshow / carousel to be displayed at its top",
  "Slider-prop-dots": "display dots at the bottom for quickly navigating to any slide",
  "Slider-prop-fade": "controls whether fading is used for transitioning between the slides",
  "Slider-prop-draggable": "controls whether users can drag the slides to navigate between them",
  "Slider-prop-goto": "If property is changed, the component jumps to the slide with the selected index",
  "Slider-prop-infinite": "controls whether the slideshow wraps around it's contents",
  "Slider-prop-interval": "sets a time interval for an automatic slide change",
  "Slider-prop-swipe": "enables drag/swipe behavior",
  "Slider-prop-style": "CSS inline styles",
  "Slider-prop-onClick": "callback invoked when clicking on the next/previous buttons",
  "Slider-description": "A component which displays its children in a slideshow or carousel.",
  "SortableTree-prop-title": "header title",
  "SortableTree-description": "A thin wrapper around [react-sortable-tree](https://www.npmjs.com/package/react-sortable-tree) that supports all properties of said component.",
  "SlideAppear-prop-easing": "type of easing to use for an animation. Supported are: \"back\", \"backIn\", \"backOut\", \"backInOut\", \"bounce\", \"bounceIn\", \"bounceOut\", \"bounceInOut\", \"circle\", \"circleIn\", \"circleOut\", \"circleInOut\", \"linear\", \"linearIn\", \"linearOut\", \"linearInOut\", \"cubic\", \"cubicIn\", \"cubicOut\", \"cubicInOut\", \"elastic\", \"elasticIn\", \"elasticOut\", \"elasticInOut\", \"exp\", \"expIn\", \"expOut\", \"expInOut\", \"poly\", \"polyIn\", \"polyOut\", \"polyInOut\", \"quad\", \"quadIn\", \"quadOut\", \"quadInOut\", \"sin\", \"sinIn\", \"sinOut\", \"sinInOut\"",
  "SlideAppear-prop-order": "integer starting at 1 for the presentation order of the appear tags. If a slide contains ordered and unordered appear tags, unordered ones appear first",
  "SlideAppear-prop-transitionDuration": "duration of appearance animation in milliseconds",
  "SlideAppear-prop-startValue": "style object for the starting, inactive state of the appear tag",
  "SlideAppear-prop-endValue": "style object for the ending, active state of the appear tag",
  "SlideAppear-prop-style": "CSS inline styles",
  "SlideAppear-description": "Wrapped elements in the appear tag makes them appear/disappear in order in response to navigation.",
  "Deck-description": "Description is missing.",
  "SlideNotes-description": "Speaker notes for a presentation slides. Component should be only used as the child of a corresponding <Slide> component.",
  "Slide-prop-align": "space delimited value for positioning interior content. The first value can be flex-start (left), center (middle), or flex-end (bottom). The second value can be flex-start (top) , center (middle), or flex-end (bottom)",
  "Slide-prop-bgImage": "sets the specified background image",
  "Slide-prop-bgColor": "sets the slide background to the specified color",
  "Slide-prop-bgDarken": "number between 0 and 1 specifying how much to darken the background image",
  "Slide-prop-bgLighten": "number between 0 and 1 specifying how much to lighten the background image",
  "Slide-prop-controlColor": "overrides the color of the control arrows for the current slide",
  "Slide-prop-progressColor": "overrides the color of the progress elements for the current slide",
  "Slide-prop-notes": "presenter mode notes (alternatively they can be wrapped in a <SlideNotes> tag)",
  "Slide-prop-duration": "slide duration displayed in presenter mode",
  "Slide-prop-transition": "slide transition(s). Can be either `slide`, `zoom`, `fade`, or `spin` (or a combination)",
  "Slide-prop-transitionDuration": "slide transition duration in milliseconds (defaults to global presentation setting)",
  "Slide-prop-transitionIn": "slide transition when the slide comes into view (can take same values as `transition`)",
  "Slide-prop-transitionOut": "-slide transition when the slide exits the view (can take same values as `transition`)",
  "Slide-prop-margin": "margin around slide (in px)",
  "Slide-prop-className": "class name",
  "Slide-prop-style": "CSS inline styles",
  "Slide-prop-contentStyles": "CSS inline styles passed to the slide contents",
  "Slide-prop-onActive": "optional callback called with the slide index when the slide comes into view",
  "Slide-description": "Spectacle presentation slide.",
  "undefined-prop-title": "card title",
  "undefined-prop-onUpload": "callback function called with ( err, output ) after loading of file",
  "StickyNote-prop-title": "note title",
  "StickyNote-prop-body": "text of the note",
  "StickyNote-prop-color": "either `red`, `green`, `blue`, `pink`, or `orange`",
  "StickyNote-prop-style": "CSS inline styles",
  "StickyNote-prop-draggable": "controls whether one should be able to drag the note around",
  "StickyNote-prop-date": "a date displayed for the note",
  "StickyNote-prop-editable": "controls whether the component is editable",
  "StickyNote-prop-minimizable": "controls whether the component is minimizable",
  "StickyNote-prop-minimized": "if set, the component is minimized at the start",
  "StickyNote-prop-stain": "controls whether to show a coffee stain",
  "StickyNote-prop-onClick": "callback function invoked when the note is clicked",
  "StickyNote-prop-removable": "controls whether the note is removed when clicked",
  "StickyNote-description": "A sticky note rendering some text.",
  "Switch-prop-active": "controls whether the switch is active or not",
  "Switch-prop-tooltip": "tooltip displayed when hovering over the switch element",
  "Switch-prop-tooltipPos": "placement of the tooltip (either `top`, `left`, `right`, or `bottom`)",
  "Switch-prop-className": "class name for the enclosing span element",
  "Switch-prop-style": "CSS inline styles",
  "Switch-prop-onChange": "callback invoked when elements are switched. Receives as its first argument the index of the currently displayed child",
  "Switch-description": "The Switch component allows the display of one element out of a list of several elements. Users can cycle through the different children of the Switch tag by clicking on the currently displayed one.",
  "Table-prop-bordered": "adds borders on all sides of the table and cells",
  "Table-prop-borderless": "removes all borders on the table and cells, including table header",
  "Table-prop-hover": "enable a hover state on table rows within a <tbody>",
  "Table-prop-responsive": "responsive tables allow tables to be scrolled horizontally with ease. Across every breakpoint, use responsive for horizontally scrolling tables. Responsive tables are wrapped automatically in a div. Use responsive=\"sm\", responsive=\"md\", responsive=\"lg\", or responsive=\"xl\" as needed to create responsive tables up to a particular breakpoint. From that breakpoint and up, the table will behave normally and not scroll horizontally",
  "Table-prop-size": "make tables more compact by cutting cell padding in half by setting size as `sm`",
  "Table-prop-striped": "adds zebra-striping to any table row within the <tbody>",
  "Table-prop-variant": "invert the colors of the table — with light text on dark backgrounds by setting variant as dark",
  "Table-description": "A basic bootstrap table.",
  "ContingencyTable-prop-data": "object of value arrays",
  "ContingencyTable-prop-rowVar": "row variable name",
  "ContingencyTable-prop-colVar": "column variable name",
  "ContingencyTable-prop-group": "name of grouping variable",
  "ContingencyTable-prop-relativeFreqs": "controls whether to display relative frequencies",
  "ContingencyTable-prop-display": "whether to display `Row Percent` and/or `Column Percent`",
  "ContingencyTable-prop-nDecimalPlaces": "number of decimal places for relative frequencies displayed in table",
  "ContingencyTable-description": "A contingency table.",
  "FrequencyTable-prop-data": "object of value arrays",
  "FrequencyTable-prop-variable": "name of variable to be displayed",
  "FrequencyTable-prop-group": "name of grouping variable",
  "FrequencyTable-prop-calculateCounts": "controls whether to display absolute counts",
  "FrequencyTable-prop-calculateRelative": "controls whether to display relative frequencies",
  "FrequencyTable-prop-nDecimalPlaces": "number of decimal places for relative frequencies displayed in table",
  "FrequencyTable-description": "A frequency table.",
  "Anova-prop-data": "object of value arrays",
  "Anova-prop-variable": "name of variable to be displayed",
  "Anova-prop-group": "name of grouping variable",
  "Anova-prop-showDecision": "controls whether to display the test decision",
  "Anova-description": "Analysis of variance.",
  "Chi2Test-prop-data": "object of value arrays",
  "Chi2Test-prop-var1": "name of first variable",
  "Chi2Test-prop-var2": "name of second variable",
  "Chi2Test-description": "Chi-square independence test.",
  "CorrTest-prop-data": "object of value arrays",
  "CorrTest-prop-var1": "name of first variable",
  "CorrTest-prop-var2": "name of second variable",
  "CorrTest-prop-alpha": "significance level",
  "CorrTest-prop-rho0": "correlation value under the null hypothesis",
  "CorrTest-prop-direction": "test direction (either `less`, `greater`, or `two-sided`)",
  "CorrTest-prop-showDecision": "controls whether to display if the null hypothesis is rejected at the specified significance level",
  "CorrTest-description": "Correlation test.",
  "Kruskal-prop-data": "object of value arrays",
  "Kruskal-prop-variable": "variable name",
  "Kruskal-prop-group": "grouping variable",
  "Kruskal-prop-showDecision": "controls whether to display if the null hypothesis is rejected at the specified significance level",
  "Kruskal-description": "Kruskal-Wallis Test.",
  "MeanTest-prop-data": "object of value arrays",
  "MeanTest-prop-variable": "name of variable",
  "MeanTest-prop-type": "type of test (`Z Test` or `T Test`)",
  "MeanTest-prop-stdev": "standard deviation (for `Z Test`)",
  "MeanTest-prop-alpha": "significance level",
  "MeanTest-prop-direction": "test direction (either `less`, `greater`, or `two-sided`)",
  "MeanTest-prop-mu0": "mean under the null hypothesis",
  "MeanTest-prop-showDecision": "controls whether to display if the null hypothesis is rejected at the specified significance level",
  "MeanTest-description": "One-sample mean test.",
  "MeanTest2-prop-data": "object of value arrays",
  "MeanTest2-prop-x": "name of first variable",
  "MeanTest2-prop-y": "name of second variable (`y` or `group` have to be supplied)",
  "MeanTest2-prop-group": "name of grouping variable (`y` or `group` have to be supplied)",
  "MeanTest2-prop-type": "type of test (either `Z Test` or `T Test`)",
  "MeanTest2-prop-xstdev": "first standard deviation (for `Z Test`)",
  "MeanTest2-prop-ystdev": "second standard deviation (for `Z Test`)",
  "MeanTest2-prop-alpha": "significance level",
  "MeanTest2-prop-direction": "test direction (either `less`, `greater`, or `two-sided`)",
  "MeanTest2-prop-diff": "difference under H0",
  "MeanTest2-prop-showDecision": "controls whether to display if the null hypothesis is rejected at the specified significance level",
  "MeanTest2-description": "Two-sample mean test.",
  "PropTest-prop-data": "object of value arrays",
  "PropTest-prop-variable": "name of variable",
  "PropTest-prop-success": "success category of `variable`",
  "PropTest-prop-alpha": "significance level",
  "PropTest-prop-direction": "test direction (either `less`, `greater`, or `two-sided`)",
  "PropTest-prop-p0": "proportion under the null hypothesis",
  "PropTest-prop-showDecision": "controls whether to display if the null hypothesis is rejected at the specified significance level",
  "PropTest-description": "One-sample proportion test.",
  "PropTest2-prop-data": "object of value arrays",
  "PropTest2-prop-var1": "name of first variable",
  "PropTest2-prop-success": "success category of `var1`",
  "PropTest2-prop-var2": "name of second variable (`var2` or `group` have to be supplied)",
  "PropTest2-prop-group": "name of grouping variable (`var2` or `group` have to be supplied)",
  "PropTest2-prop-alpha": "significance level",
  "PropTest2-prop-direction": "test direction (either `less`, `greater`, or `two-sided`)",
  "PropTest2-prop-diff": "difference under H0",
  "PropTest2-prop-showDecision": "controls whether to display if the null hypothesis is rejected at the specified significance level",
  "PropTest2-description": "Two-sample proportion test.",
  "TeX-prop-raw": "The literal LaTeX `string` to render. Also accepts `numbers`",
  "TeX-prop-displayMode": "`boolean` indicating whether to display the equation inline or in display mode",
  "TeX-prop-numbered": "controls whether to display an equation number for display mode equations",
  "TeX-prop-style": "`object` with CSS key-value pairs to be applied to the equation container",
  "TeX-prop-tag": "Custom characters displayed for display equations at the right side. Defaults to the number of the equation inside the lesson",
  "TeX-prop-elems": "`object` with `keys` denoting LaTeX characters and their corresponding values being configuration `objects` to make them interactive. Setting a `tooltip` option will show a tooltip when hovering over the LaTeX characters. Setting a `variable` property will display an input slider to change the respective state variable; in this case, additional properties `legend`, `min`, `max`, and `step` are supported",
  "TeX-prop-popoverPlacement": "popover position for the specified `elems` (either `top`, `right`, `bottom`, or `left`)",
  "TeX-prop-onPopover": "callback `function` when a control popover is toggled on or off; receives the display status as a boolean as its sole argument",
  "TeX-prop-onClick": "callback `function` invoked whenever a user clicks on the equation",
  "TeX-description": "`TeX` is an ISLE element that can be used to display LaTeX equations. Under the hood, the component uses [KaTeX](https://github.com/Khan/KaTeX) for blazingly fast rendering.",
  "TextEditor-prop-allowSubmissions": "controls whether students may submit their reports to the server",
  "TextEditor-prop-defaultValue": "default text of the editor",
  "TextEditor-prop-sendSubmissionEmails": "controls whether to send confirmation emails with PDF/HTML output upon submission",
  "TextEditor-prop-mode": "controls whether to enable text editing for groups (when set to `group`) or for everyone (when set to `collaborative`)",
  "TextEditor-prop-voiceTimeout": "time in milliseconds after a chunk of recorded voice input is inserted",
  "TextEditor-prop-language": "language identifier",
  "TextEditor-prop-style": "CSS inline styles",
  "TextEditor-prop-onChange": "callback invoked when editor text changes; receives the current text as its sole argument",
  "TextEditor-description": "A text editor for writing notes or reports. Supports exporting of notes as HTML or PDF files, as well as automatic submission to the ISLE server.",
  "Text-prop-raw": "text to be rendered",
  "Text-prop-inline": "controls whether to render the Markdown as inline text",
  "Text-prop-className": "class names",
  "Text-prop-style": "CSS inline styles",
  "Text-prop-voiceID": "voice control identifier",
  "Text-description": "Text component, which allows rendering of raw text as Markdown and enables voice control.",
  "TimedButton-prop-duration": "the time (in seconds) it takes until the button gets reactivated",
  "TimedButton-prop-block": "display bottom in full width",
  "TimedButton-prop-onClick": "callback invoked when clicking the button",
  "TimedButton-prop-disabled": "if disabled the button will be inactive, but the countdown starts",
  "TimedButton-prop-size": "button size (passed to the react-bootstrap button component)",
  "TimedButton-prop-type": "button type (passed to the react-bootstrap button component)",
  "TimedButton-prop-variant": "button variant (passed to the react-bootstrap button component)",
  "TimedButton-prop-style": "CSS inline styles",
  "TimedButton-prop-autoActivate": "controls whether to always timeout the button when clicked; if `false`, the timeout is only applied when the callback passed to the `onClick` event handler is invoked with `true`",
  "TimedButton-description": "A button component that becomes deactivated for a specified duration upon clicking.",
  "Timer-prop-active": "flag that can be toggled to start or pause the timer",
  "Timer-prop-duration": "duration in seconds for the timer",
  "Timer-prop-invisible": "controls whether the timer should be hidden",
  "Timer-prop-belowZero": "controls whether timer continues counting after the duration is exhausted",
  "Timer-prop-id": "the unique `string` ID for the timer. If an ID is set, the timer component is persistent over page refreshes",
  "Timer-prop-legend": "text displayed in front of the timer",
  "Timer-prop-style": "CSS inline styles",
  "Timer-prop-onTimeUp": "callback invoked when the timer runs out",
  "Timer-description": "Displays a timer that will trigger a predefined callback when the time is up. An example use case is the timing of quizzes.",
  "Tooltip-prop-tooltip": "tooltip content",
  "Tooltip-prop-placement": "direction of the tooltip",
  "Tooltip-prop-show": "controls whether the tooltip shall be displayed",
  "Tooltip-description": "A tooltip overlay.",
  "Typewriter-prop-text": "the full text to be displayed",
  "Typewriter-prop-hold": "if text is an array of strings, hold specified the duration the full will be displayed before it passes over to the next item in the array",
  "Typewriter-prop-interval": "the interval of the typewriter (in milliseconds)",
  "Typewriter-prop-delay": "initial delay before typewriter starts (in milliseconds)",
  "Typewriter-prop-random": "if random is set, the keystrokes will be performed with a certain, \"humane\" randomness",
  "Typewriter-prop-deviation": "allows you to specify the randomness",
  "Typewriter-prop-sound": "the typed keystroke will be also heard",
  "Typewriter-prop-style": "CSS inline styles",
  "Typewriter-description": "An ISLE component that allows you to create a typewriter effect.",
  "Unveil-prop-active": "controls whether the counter should be active",
  "Unveil-prop-delay": "number of milliseconds before component appears",
  "Unveil-description": "The appear component will cause all of its children to become visible after a specified amount of time.",
  "VictoryAnimation-description": "Description is missing.",
  "VictoryArea-description": "Description is missing.",
  "VictoryAxis-description": "Description is missing.",
  "VictoryBar-description": "Description is missing.",
  "VictoryBoxPlot-description": "Description is missing.",
  "VictoryBrushContainer-description": "Description is missing.",
  "VictoryCandlestick-description": "Description is missing.",
  "VictoryChart-description": "Description is missing.",
  "VictoryCursorContainer-description": "Description is missing.",
  "VictoryErrorBar-description": "Description is missing.",
  "VictoryGroup-description": "Description is missing.",
  "VictoryLabel-description": "Description is missing.",
  "VictoryLegend-description": "Description is missing.",
  "VictoryLine-description": "Description is missing.",
  "VictoryPie-description": "Description is missing.",
  "VictoryPolarAxis-description": "Description is missing.",
  "VictoryScatter-description": "Description is missing.",
  "VictoryStack-description": "Description is missing.",
  "VictoryTheme-description": "Description is missing.",
  "VictoryTooltip-description": "Description is missing.",
  "VictoryVoronoiContainer-description": "Description is missing.",
  "VictoryVoronoi-description": "Description is missing.",
  "VictoryWrapper-description": "Description is missing.",
  "VictoryZoomContainer-description": "Description is missing.",
  "VideoLecture-prop-steps": "array of video URLs and components to be displayed in-between",
  "VideoLecture-prop-controls": "indicates whether to display control elements of the video players",
  "VideoLecture-prop-instructorView": "controls whether to include instructor view",
  "VideoLecture-prop-linkToDashboard": "controls whether to display a link to the dashboard once completing the video lecture",
  "VideoLecture-prop-videoHeight": "video height",
  "VideoLecture-prop-videoWidth": "video width",
  "VideoLecture-prop-style": "CSS inline style",
  "VideoLecture-description": "A video lecture component that displays videos interspersed with interactive elements.",
  "VideoPlayer-prop-url": "URL of the video",
  "VideoPlayer-prop-controls": "indicates whether to display control elements of the video player",
  "VideoPlayer-prop-playing": "indicates whether to automatically start playing the video",
  "VideoPlayer-prop-volume": "volume of the player",
  "VideoPlayer-prop-startTime": "number of seconds at which to start the video, or fraction if value is between 0 and 1",
  "VideoPlayer-prop-center": "controls whether to center the video player",
  "VideoPlayer-prop-height": "height of the player",
  "VideoPlayer-prop-width": "width of the player",
  "VideoPlayer-prop-loop": "controls whether to start the video anew after it was played",
  "VideoPlayer-prop-voiceID": "voice control identifier",
  "VideoPlayer-prop-style": "CSS inline styles",
  "VideoPlayer-prop-onEnded": "callback invoked once the video ends",
  "VideoPlayer-prop-onPause": "callback invoked when the video pauses",
  "VideoPlayer-prop-onPlay": "callback invoked when the video starts or resumes playing after pausing",
  "VideoPlayer-prop-onStart": "callback invoked once the video pauses",
  "VideoPlayer-prop-onSeek": "callback when media seeks called with `seconds` parameter",
  "VideoPlayer-description": "A component for playing media files and content from YouTube, SoundCloud, and Vimeo.",
  "Weather-prop-location": "location name",
  "Weather-prop-language": "language identifier",
  "Weather-prop-voiceID": "voice control identifier",
  "Weather-prop-style": "CSS inline styles",
  "Weather-description": "A component for displaying the current weather at a designated location.",
  "Wikipedia-prop-invisible": "controls whether to display a text input field to search for Wikipedia articles",
  "Wikipedia-prop-language": "language identifier",
  "Wikipedia-description": "The **Wikipedia** component scans the **Wikipedia** and returns an article - if anything valid is found under the entered search term.",
  "WordCloud-prop-data": "either an array of texts from which to generate the word cloud or, if `precalculated` is set to `true`, and array of word count objects (with `text` and `value` keys)",
  "WordCloud-prop-font": "accessor function specifying the font face for each word. Also accepts a constant instead of a function",
  "WordCloud-prop-fontSizeMapper": "accessor function indicating the font size for each word. Defaults to `( count - min + 1 ) / ( max - min + 6 ) * 30.0 + 12.0`, where `min` and `max` denote the minimum and maximum word `counts`, respectively",
  "WordCloud-prop-precalculated": "controls whether the word cloud expects an array of precalculated word counts or will generate them for given texts",
  "WordCloud-prop-rotate": "accessor function indicating the rotation angle (in degrees) for each word. Also accepts a constant instead of a function",
  "WordCloud-prop-width": "width of the word cloud (in px)",
  "WordCloud-prop-height": "height of the word cloud (in px)",
  "WordCloud-prop-language": "language identifier (determines the stopwords to be removed)",
  "WordCloud-prop-minCount": "if set, only include words that appear more than `minCount` times in the given data",
  "WordCloud-prop-saveButton": "controls whether to display a button for saving the word cloud as an image",
  "WordCloud-prop-padding": "accessor function or constant indicating the numerical padding for each word",
  "WordCloud-prop-updateThreshold": "batch size of new documents in `data` before the word cloud is re-rendered",
  "WordCloud-prop-triggerRender": "rerender when the data set is exchanged",
  "WordCloud-prop-stopwords": "additional stopwords to remove before rendering the word cloud",
  "WordCloud-prop-style": "CSS inline styles",
  "WordCloud-prop-onClick": "callback function invoked when a word on the word cloud is clicked",
  "WordCloud-description": "A word cloud component built on top of [d3-cloud](https://github.com/jasondavies/d3-cloud)."
}